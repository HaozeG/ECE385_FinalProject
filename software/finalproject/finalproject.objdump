
finalproject.elf:     file format elf32-littlenios2
finalproject.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000230

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x0000bf5c memsz 0x0000bf5c flags r-x
    LOAD off    0x0000cf7c vaddr 0x0800bf7c paddr 0x0800ef1c align 2**12
         filesz 0x00002fa0 memsz 0x00002fa0 flags rw-
    LOAD off    0x00010ebc vaddr 0x08011ebc paddr 0x08011ebc align 2**12
         filesz 0x00000000 memsz 0x000062f8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000b82c  08000230  08000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000520  0800ba5c  0800ba5c  0000ca5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00002fa0  0800bf7c  0800ef1c  0000cf7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000062f8  08011ebc  08011ebc  00010ebc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  0000ff1c  2**0
                  CONTENTS
  7 .sdram        00000000  080181b4  080181b4  0000ff1c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000ff1c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000009b8  00000000  00000000  0000ff40  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000f98a  00000000  00000000  000108f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000051ef  00000000  00000000  00020282  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00005c9e  00000000  00000000  00025471  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001f6c  00000000  00000000  0002b110  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003e35  00000000  00000000  0002d07c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004159  00000000  00000000  00030eb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0003500c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000820  00000000  00000000  00035050  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00038ab2  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00038ab5  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00038ac1  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00038ac2  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00038ac3  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00038ac7  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00038acb  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00038acf  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00038ada  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00038ae5  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000009  00000000  00000000  00038af0  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000045  00000000  00000000  00038af9  2**0
                  CONTENTS, READONLY
 30 .jdi          00005016  00000000  00000000  00038b3e  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00095aab  00000000  00000000  0003db54  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000230 l    d  .text	00000000 .text
0800ba5c l    d  .rodata	00000000 .rodata
0800bf7c l    d  .rwdata	00000000 .rwdata
08011ebc l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
080181b4 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../finalproject_bsp//obj/HAL/src/crt0.o
08000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
0800eecc l     O .rwdata	00000004 map_ram_ctrl
0800eed0 l     O .rwdata	00000001 addr
00000000 l    df *ABS*	00000000 map_ram.c
0800eed8 l     O .rwdata	00000004 map_ram_ctrl
00000000 l    df *ABS*	00000000 sgtl5000.c
00000000 l    df *ABS*	00000000 HID.c
00000000 l    df *ABS*	00000000 MAX3421E.c
00000000 l    df *ABS*	00000000 transfer.c
08011ee4 l     O .bss	00000004 usb_delay.2608
08011ee8 l     O .bss	00000001 tmp_addr.2609
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08006e50 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0800dbac l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
08007514 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
08007850 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800798c l     F .text	00000034 alt_dev_reg
0800dc8c l     O .rwdata	00000038 i2c_0
0800dcc4 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
08007a68 l     F .text	00000110 optional_irq_callback
08007bc8 l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
080098a4 l     F .text	0000020c altera_avalon_jtag_uart_irq
08009ab0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0800a2e4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
0800a65c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0800a790 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0800a7bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0800acac l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0800ae0c l     F .text	0000003c alt_get_errno
0800ae48 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08011f08 g     O .bss	00000004 alt_instruction_exception_handler
08007600 g     F .text	0000007c alt_main
0800eedc g     O .rwdata	00000008 ctrl_xfers
08006da0 g     F .text	00000080 _puts_r
080180b4 g     O .bss	00000100 alt_irq
080012a4 g     F .text	000000d8 spd_change
08004d34 g     F .text	00000644 USB_Task
0800ef1c g       *ABS*	00000000 __flash_rwdata_start
0800bf7c g     O .rwdata	00001c00 map
08006d54 g     F .text	0000004c printf
08003e68 g     F .text	00000088 kbdPoll
08013f0c g     O .bss	00004000 collision
080082c0 g     F .text	000000a8 alt_avalon_i2c_rx_read
08011ec8 g     O .bss	00000001 has_key
0800026c g     F .text	000001f0 GetDriverandReport
080094d8 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
08008044 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
08008d28 g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
0800618c g     F .text	00000070 .hidden __fixsfsi
08003fbc g     F .text	00000088 MAXreg_wr
0800db7c g     O .rwdata	00000030 ClientDriverTable
0800b37c g     F .text	00000024 altera_nios2_gen2_irq_init
08005378 g     F .text	0000002c MSDProbe
08000000 g     F .entry	0000000c __reset
08004850 g     F .text	000000e8 XferCtrlData
08000020 g       *ABS*	00000000 __flash_exceptions_start
08017f0c g     O .bss	00000010 hid_ep
08011ec4 g     O .bss	00000004 level_index
08011eec g     O .bss	00000004 errno
08011ecc g     O .bss	00000004 berry_tot
08011ed0 g     O .bss	00000004 death_tot
08011ef4 g     O .bss	00000004 alt_argv
08016ecc g       *ABS*	00000000 _gp
08007820 g     F .text	00000030 usleep
0800951c g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
080041a8 g     F .text	00000088 MAXreg_rd
08005ca8 g     F .text	000004e4 .hidden __subsf3
080081d4 g     F .text	00000044 alt_avalon_i2c_is_busy
0800ed4c g     O .rwdata	00000180 alt_fd_list
08003da0 g     F .text	00000040 HID_init
08007f78 g     F .text	000000cc alt_avalon_i2c_master_config_set
0800a95c g     F .text	00000090 alt_find_dev
0800b66c g     F .text	00000028 memcpy
08017f34 g     O .bss	00000038 birth
08006bd8 g     F .text	000000dc .hidden __floatsidf
0800ad90 g     F .text	0000007c alt_io_redirect
0800ba5c g       *ABS*	00000000 __DTOR_END__
08008b68 g     F .text	000001c0 alt_avalon_i2c_master_transmit
08006e20 g     F .text	00000014 puts
0800b56c g     F .text	0000009c alt_exception_cause_generated_bad_addr
08009ca8 g     F .text	0000021c altera_avalon_jtag_uart_read
08006d18 g     F .text	0000003c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
080056d8 g     F .text	00000064 .hidden __udivsi3
0800137c g     F .text	00000168 player_init
08007de4 g     F .text	00000098 alt_avalon_i2c_enable
0800940c g     F .text	00000068 alt_avalon_i2c_int_disable
0800eee4 g     O .rwdata	00000001 usb_task_state
0800450c g     F .text	00000094 MAX3421E_init
080007dc g     F .text	00000034 setKeycode
0800343c g     F .text	000000b4 SGTL5000_Reg_Rd
0800ef10 g     O .rwdata	00000004 alt_max_fd
08000b0c g     F .text	00000164 key_detect
08008f34 g     F .text	00000210 alt_avalon_i2c_master_receive
08009474 g     F .text	00000064 alt_avalon_i2c_int_enable
0800eee8 g     O .rwdata	00000004 _global_impure_ptr
080181b4 g       *ABS*	00000000 __bss_end
0800abbc g     F .text	000000f0 alt_iic_isr_register
08007718 g     F .text	00000108 alt_tick
08009334 g     F .text	00000058 alt_avalon_i2c_int_status_get
080033ec g     F .text	00000050 clearMAP
0800ab70 g     F .text	0000004c alt_ic_irq_enabled
0800767c g     F .text	0000009c alt_alarm_stop
08007c64 g     F .text	00000054 alt_avalon_i2c_register_callback
08011f04 g     O .bss	00000004 alt_irq_active
08007cb8 g     F .text	000000ec alt_avalon_i2c_init
08005440 g     F .text	0000002c DummyProbe
080000fc g     F .exceptions	000000d4 alt_irq_handler
0800ed24 g     O .rwdata	00000028 alt_dev_null
08000810 g     F .text	000002fc SGTL5000_init
08003de0 g     F .text	00000088 mousePoll
08004360 g     F .text	00000024 Vbus_power
0800a770 g     F .text	00000020 alt_dcache_flush_all
08006b58 g     F .text	00000080 .hidden __fixdfsi
0800ef1c g       *ABS*	00000000 __ram_rwdata_end
0800ef08 g     O .rwdata	00000008 alt_dev_list
0800788c g     F .text	00000100 write
0800b6e8 g     F .text	00000058 _putc_r
080085f4 g     F .text	0000004c alt_avalon_i2c_check_arblost
080057bc g     F .text	000000bc .hidden __gtsf2
080093d0 g     F .text	0000003c alt_avalon_i2c_int_clear
0800bf7c g       *ABS*	00000000 __ram_rodata_end
08011ee9 g     O .bss	00000001 usb_error
0800eef8 g     O .rwdata	00000008 alt_avalon_i2c_list
0800573c g     F .text	00000058 .hidden __umodsi3
080181b4 g       *ABS*	00000000 end
0800eed4 g     O .rwdata	00000004 max_dashes
080097e4 g     F .text	000000c0 altera_avalon_jtag_uart_init
08000e48 g     F .text	0000021c is_solid
080001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
08007da4 g     F .text	00000040 alt_avalon_i2c_open
080033a8 g     F .text	00000044 setMAP
080049ac g     F .text	00000160 XferDispatchPkt
0800ba5c g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0800877c g     F .text	000000e8 alt_avalon_i2c_master_tx
080014e4 g     F .text	000001c4 move
0800a35c g     F .text	0000007c alt_avalon_timer_sc_init
08006cb4 g     F .text	00000064 .hidden __clzsi2
08009ec4 g     F .text	00000224 altera_avalon_jtag_uart_write
08006ebc g     F .text	0000052c ___vfprintf_internal_r
080046d0 g     F .text	00000034 MaxGpxHandler
0800b090 g     F .text	0000022c alt_printf
0800b898 g     F .text	00000190 __call_exitprocs
08007b78 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
08000230 g     F .text	0000003c _start
08011efc g     O .bss	00000004 _alt_tick_rate
08004230 g     F .text	00000090 MAXbytes_rd
08009144 g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
08009568 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
0800a0e8 g     F .text	000001fc alt_avalon_spi_command
08011f00 g     O .bss	00000004 _alt_nticks
080079f8 g     F .text	00000070 alt_sys_init
0801806c g     O .bss	00000048 devtable
0800b740 g     F .text	00000158 __register_exitproc
08003998 g     F .text	00000408 HIDKProbe
08017f1c g     O .bss	00000018 msd_ep
080089a0 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
08009b50 g     F .text	00000068 altera_avalon_jtag_uart_close
08004c9c g     F .text	00000098 USB_init
08017f6c g     O .bss	00000100 bigbuf
08005794 g     F .text	00000028 .hidden __mulsi3
0800bf7c g       *ABS*	00000000 __ram_rwdata_start
0800ba5c g       *ABS*	00000000 __ram_rodata_start
08011ee0 g     O .bss	00000001 last_usb_task_state
08011f0c g     O .bss	00002000 collide_box
08011ed8 g     O .bss	00000008 dev0ep
08000544 g     F .text	00000048 clearLED
08009680 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0800b4a8 g     F .text	000000c4 alt_get_fd
0800a504 g     F .text	00000158 alt_busy_sleep
080053a4 g     F .text	00000038 MSDEventHandler
08001064 g     F .text	00000240 clear_active
0800b63c g     F .text	00000030 memcmp
08008218 g     F .text	000000a8 alt_avalon_i2c_rx_read_available
08009740 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
080181b4 g       *ABS*	00000000 __alt_stack_base
08009790 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08005408 g     F .text	00000038 CDCEventHandler
080062ec g     F .text	0000086c .hidden __muldf3
0800546c g     F .text	00000038 DummyEventHandler
08011ebc g     O .bss	00000006 key_pressed
0800b3a0 g     F .text	00000108 alt_find_file
0800a7f8 g     F .text	000000a4 alt_dev_llist_insert
08008640 g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
080085a8 g     F .text	0000004c alt_avalon_i2c_check_nack
08007404 g     F .text	000000b8 __sfvwrite_small_dev
08011ebc g       *ABS*	00000000 __bss_start
08004384 g     F .text	00000188 MAX_busprobe
08011ed4 g     O .bss	00000002 hid_device
080026fc g     F .text	00000cac main
080045a0 g     F .text	00000064 MAX3421E_Task
08008574 g     F .text	00000034 alt_avalon_i2c_master_target_set
08011ef8 g     O .bss	00000004 alt_envp
080096e0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
080054fc g     F .text	00000084 ConvUTF8ToStr
0800938c g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
0800ef14 g     O .rwdata	00000004 alt_errno
0800b694 g     F .text	00000054 putc
080055e0 g     F .text	00000084 .hidden __divsi3
08004b0c g     F .text	00000190 XferInTransfer
080006a4 g     F .text	00000138 printSignedHex1
0800ba5c g       *ABS*	00000000 __CTOR_END__
08005878 g     F .text	00000430 .hidden __mulsf3
080054c4 g     F .text	00000038 GetDevtable
0800ba5c g       *ABS*	00000000 __flash_rodata_start
0800ba5c g       *ABS*	00000000 __DTOR_LIST__
08004938 g     F .text	00000074 XferCtrlND
080034f0 g     F .text	000000a0 SGTL5000_Reg_Wr
080042c0 g     F .text	000000a0 MAX3421E_reset
080079c0 g     F .text	00000038 alt_irq_init
0800b2f8 g     F .text	00000084 alt_release_fd
0800be18 g     O .rodata	00000100 .hidden __clz_tab
0800b608 g     F .text	00000014 atexit
080057bc g     F .text	000000bc .hidden __gesf2
080074bc g     F .text	00000058 _write_r
0800eeec g     O .rwdata	00000004 _impure_ptr
08011ef0 g     O .bss	00000004 alt_argc
0800a8fc g     F .text	00000060 _do_dtors
0800853c g     F .text	00000038 alt_avalon_i2c_master_target_get
0800844c g     F .text	000000f0 alt_avalon_i2c_send_address
08004044 g     F .text	00000164 MAXbytes_wr
08000020 g       .exceptions	00000000 alt_irq_entry
0800ef00 g     O .rwdata	00000008 alt_fs_list
080053dc g     F .text	0000002c CDCProbe
08000020 g       *ABS*	00000000 __ram_exceptions_start
08000500 g     F .text	00000044 setLED
080054a4 g     F .text	00000020 GetUsbTaskState
08009618 g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
0800aa0c g     F .text	00000050 alt_ic_isr_register
08007e7c g     F .text	0000004c alt_avalon_i2c_disable
0800ba98 g     O .rodata	00000010 devclasses
0800ef1c g       *ABS*	00000000 _edata
08003f28 g     F .text	00000038 HIDKEventHandler
080181b4 g       *ABS*	00000000 _end
08004604 g     F .text	000000cc MaxIntHandler
08000230 g       *ABS*	00000000 __ram_exceptions_end
08009bb8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08007ec8 g     F .text	000000b0 alt_avalon_i2c_master_config_get
08003f60 g     F .text	00000034 SPI_init
0800aae4 g     F .text	0000008c alt_ic_irq_disable
0800b61c g     F .text	00000020 exit
080061fc g     F .text	000000f0 .hidden __floatunsisf
08005664 g     F .text	00000074 .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08000000 g       *ABS*	00000000 __alt_mem_sdram
080080d8 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
08008368 g     F .text	000000e4 alt_avalon_i2c_cmd_write
08005580 g     F .text	00000060 .hidden __fixunssfsi
08003ef0 g     F .text	00000038 HIDMEventHandler
0800ba28 g     F .text	00000034 _exit
0800a3d8 g     F .text	0000012c alt_alarm_start
08000c70 g     F .text	000001d8 collision_fill
0800058c g     F .text	00000118 printSignedHex0
08006e34 g     F .text	0000001c strlen
0800af34 g     F .text	0000015c open
0800b2bc g     F .text	0000003c alt_putchar
080016a8 g     F .text	00001054 Playerstep
0800a9ec g     F .text	00000020 alt_icache_flush_all
08011ec9 g     O .bss	00000001 has_dashed
0800ef18 g     O .rwdata	00000004 alt_priority_mask
0800045c g     F .text	000000a4 setHERO
0800aa5c g     F .text	00000088 alt_ic_irq_enable
080073e8 g     F .text	0000001c __vfprintf_internal
08003590 g     F .text	00000408 HIDMProbe
08003f94 g     F .text	00000028 SPI_wr
0800eef0 g     O .rwdata	00000008 alt_alarm_list
0800a89c g     F .text	00000060 _do_ctors
0800a698 g     F .text	000000d8 close
080095cc g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
0800757c g     F .text	00000084 alt_load
08008864 g     F .text	0000013c alt_avalon_i2c_master_rx
08004704 g     F .text	0000014c XferCtrlReq



Disassembly of section .entry:

08000000 <__reset>:
 8000000:	00420034 	movhi	at,2048
 8000004:	08408c14 	ori	at,at,560
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:
 8000020:	deffed04 	addi	sp,sp,-76
 8000024:	dfc00015 	stw	ra,0(sp)
 8000028:	d8400215 	stw	at,8(sp)
 800002c:	d8800315 	stw	r2,12(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
 8000034:	d9000515 	stw	r4,20(sp)
 8000038:	d9400615 	stw	r5,24(sp)
 800003c:	d9800715 	stw	r6,28(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
 8000044:	000b307a 	rdctl	r5,estatus
 8000048:	da000915 	stw	r8,36(sp)
 800004c:	da400a15 	stw	r9,40(sp)
 8000050:	da800b15 	stw	r10,44(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
 8000058:	db000d15 	stw	r12,52(sp)
 800005c:	db400e15 	stw	r13,56(sp)
 8000060:	db800f15 	stw	r14,60(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
 8000068:	d9401115 	stw	r5,68(sp)
 800006c:	ebffff04 	addi	r15,ea,-4
 8000070:	dbc01215 	stw	r15,72(sp)
 8000074:	0009313a 	rdctl	r4,ipending
 8000078:	2880004c 	andi	r2,r5,1
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
 800008c:	df401215 	stw	ea,72(sp)
 8000090:	e8bfff17 	ldw	r2,-4(ea)
 8000094:	e93fff04 	addi	r4,ea,-4
 8000098:	80001d00 	call	80001d0 <alt_instruction_exception_entry>
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>
 80000a0:	ebffff04 	addi	r15,ea,-4
 80000a4:	dbc01215 	stw	r15,72(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
 80000ac:	df401217 	ldw	ea,72(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)
 80000b4:	2801707a 	wrctl	estatus,r5
 80000b8:	d8400217 	ldw	at,8(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
 80000f4:	dec01304 	addi	sp,sp,76
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
 800010c:	0001883a 	nop
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)
 8000118:	e0bffe17 	ldw	r2,-8(fp)
 800011c:	e0bffb15 	stw	r2,-20(fp)
 8000120:	e03ffd15 	stw	zero,-12(fp)
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
 800013c:	008200b4 	movhi	r2,2050
 8000140:	10a02d04 	addi	r2,r2,-32588
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	008200b4 	movhi	r2,2050
 8000158:	10a02d04 	addi	r2,r2,-32588
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
 8000178:	0001883a 	nop
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)
 80001a4:	003fe106 	br	800012c <__alt_data_end+0xfc00012c>
 80001a8:	e0bffb15 	stw	r2,-20(fp)
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <__alt_data_end+0xfc000120>
 80001b4:	0001883a 	nop
 80001b8:	0001883a 	nop
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

080001d0 <alt_instruction_exception_entry>:
 80001d0:	defffb04 	addi	sp,sp,-20
 80001d4:	dfc00415 	stw	ra,16(sp)
 80001d8:	df000315 	stw	fp,12(sp)
 80001dc:	df000304 	addi	fp,sp,12
 80001e0:	e13fff15 	stw	r4,-4(fp)
 80001e4:	00bfffc4 	movi	r2,-1
 80001e8:	e0bffd15 	stw	r2,-12(fp)
 80001ec:	e03ffe15 	stw	zero,-8(fp)
 80001f0:	d0ac0f17 	ldw	r2,-20420(gp)
 80001f4:	10000726 	beq	r2,zero,8000214 <alt_instruction_exception_entry+0x44>
 80001f8:	d0ac0f17 	ldw	r2,-20420(gp)
 80001fc:	e0fffd17 	ldw	r3,-12(fp)
 8000200:	e1bffe17 	ldw	r6,-8(fp)
 8000204:	e17fff17 	ldw	r5,-4(fp)
 8000208:	1809883a 	mov	r4,r3
 800020c:	103ee83a 	callr	r2
 8000210:	00000206 	br	800021c <alt_instruction_exception_entry+0x4c>
 8000214:	003da03a 	break	0
 8000218:	0005883a 	mov	r2,zero
 800021c:	e037883a 	mov	sp,fp
 8000220:	dfc00117 	ldw	ra,4(sp)
 8000224:	df000017 	ldw	fp,0(sp)
 8000228:	dec00204 	addi	sp,sp,8
 800022c:	f800283a 	ret

Disassembly of section .text:

08000230 <_start>:
 8000230:	06c30034 	movhi	sp,3072
 8000234:	dec00014 	ori	sp,sp,0
 8000238:	06820074 	movhi	gp,2049
 800023c:	d69bb314 	ori	gp,gp,28364
 8000240:	00820074 	movhi	r2,2049
 8000244:	1087af14 	ori	r2,r2,7868
 8000248:	00c20074 	movhi	r3,2049
 800024c:	18e06d14 	ori	r3,r3,33204
 8000250:	10c00326 	beq	r2,r3,8000260 <_start+0x30>
 8000254:	10000015 	stw	zero,0(r2)
 8000258:	10800104 	addi	r2,r2,4
 800025c:	10fffd36 	bltu	r2,r3,8000254 <__alt_data_end+0xfc000254>
 8000260:	800757c0 	call	800757c <alt_load>
 8000264:	80076000 	call	8007600 <alt_main>

08000268 <alt_after_alt_main>:
 8000268:	003fff06 	br	8000268 <__alt_data_end+0xfc000268>

0800026c <GetDriverandReport>:
static BYTE addr = 1; // hard-wired USB address
const char *const devclasses[] = {" Uninitialized", " HID Keyboard",
                                  " HID Mouse", " Mass storage"};

BYTE GetDriverandReport()
{
 800026c:	defff604 	addi	sp,sp,-40
 8000270:	dfc00915 	stw	ra,36(sp)
 8000274:	df000815 	stw	fp,32(sp)
 8000278:	df000804 	addi	fp,sp,32
  BYTE i;
  BYTE rcode;
  BYTE device = 0xFF;
 800027c:	00bfffc4 	movi	r2,-1
 8000280:	e0bffd45 	stb	r2,-11(fp)
  BYTE tmpbyte;

  DEV_RECORD *tpl_ptr;
  printf("Reached USB_STATE_RUNNING (0x40)\n");
 8000284:	01020074 	movhi	r4,2049
 8000288:	212eaa04 	addi	r4,r4,-17752
 800028c:	8006e200 	call	8006e20 <puts>
  for (i = 1; i < USB_NUMDEVICES; i++)
 8000290:	00800044 	movi	r2,1
 8000294:	e0bffd05 	stb	r2,-12(fp)
 8000298:	00001f06 	br	8000318 <GetDriverandReport+0xac>
  {
    tpl_ptr = GetDevtable(i);
 800029c:	e0bffd03 	ldbu	r2,-12(fp)
 80002a0:	1009883a 	mov	r4,r2
 80002a4:	80054c40 	call	80054c4 <GetDevtable>
 80002a8:	e0bffe15 	stw	r2,-8(fp)
    if (tpl_ptr->epinfo != NULL)
 80002ac:	e0bffe17 	ldw	r2,-8(fp)
 80002b0:	10800017 	ldw	r2,0(r2)
 80002b4:	10001526 	beq	r2,zero,800030c <GetDriverandReport+0xa0>
    {
      printf("Device: %d", i);
 80002b8:	e0bffd03 	ldbu	r2,-12(fp)
 80002bc:	100b883a 	mov	r5,r2
 80002c0:	01020074 	movhi	r4,2049
 80002c4:	212eb304 	addi	r4,r4,-17716
 80002c8:	8006d540 	call	8006d54 <printf>
      printf("%s \n", devclasses[tpl_ptr->devclass]);
 80002cc:	e0bffe17 	ldw	r2,-8(fp)
 80002d0:	10800103 	ldbu	r2,4(r2)
 80002d4:	10c03fcc 	andi	r3,r2,255
 80002d8:	00820074 	movhi	r2,2049
 80002dc:	10aea604 	addi	r2,r2,-17768
 80002e0:	18c7883a 	add	r3,r3,r3
 80002e4:	18c7883a 	add	r3,r3,r3
 80002e8:	10c5883a 	add	r2,r2,r3
 80002ec:	10800017 	ldw	r2,0(r2)
 80002f0:	100b883a 	mov	r5,r2
 80002f4:	01020074 	movhi	r4,2049
 80002f8:	212eb604 	addi	r4,r4,-17704
 80002fc:	8006d540 	call	8006d54 <printf>
      device = tpl_ptr->devclass;
 8000300:	e0bffe17 	ldw	r2,-8(fp)
 8000304:	10800103 	ldbu	r2,4(r2)
 8000308:	e0bffd45 	stb	r2,-11(fp)
  BYTE device = 0xFF;
  BYTE tmpbyte;

  DEV_RECORD *tpl_ptr;
  printf("Reached USB_STATE_RUNNING (0x40)\n");
  for (i = 1; i < USB_NUMDEVICES; i++)
 800030c:	e0bffd03 	ldbu	r2,-12(fp)
 8000310:	10800044 	addi	r2,r2,1
 8000314:	e0bffd05 	stb	r2,-12(fp)
 8000318:	e0bffd03 	ldbu	r2,-12(fp)
 800031c:	10800230 	cmpltui	r2,r2,8
 8000320:	103fde1e 	bne	r2,zero,800029c <__alt_data_end+0xfc00029c>
      printf("%s \n", devclasses[tpl_ptr->devclass]);
      device = tpl_ptr->devclass;
    }
  }
  // Query rate and protocol
  rcode = XferGetIdle(addr, 0, hid_device.interface, 0, &tmpbyte);
 8000324:	d0a00103 	ldbu	r2,-32764(gp)
 8000328:	11003fcc 	andi	r4,r2,255
 800032c:	d0ac0243 	ldbu	r2,-20471(gp)
 8000330:	10803fcc 	andi	r2,r2,255
 8000334:	e0ffff44 	addi	r3,fp,-3
 8000338:	d8c00415 	stw	r3,16(sp)
 800033c:	00c00044 	movi	r3,1
 8000340:	d8c00315 	stw	r3,12(sp)
 8000344:	d8800215 	stw	r2,8(sp)
 8000348:	d8000115 	stw	zero,4(sp)
 800034c:	d8000015 	stw	zero,0(sp)
 8000350:	01c00084 	movi	r7,2
 8000354:	01802844 	movi	r6,161
 8000358:	000b883a 	mov	r5,zero
 800035c:	80047040 	call	8004704 <XferCtrlReq>
 8000360:	e0bfff05 	stb	r2,-4(fp)
  if (rcode)
 8000364:	e0bfff03 	ldbu	r2,-4(fp)
 8000368:	10000926 	beq	r2,zero,8000390 <GetDriverandReport+0x124>
  { // error handling
    printf("GetIdle Error. Error code: ");
 800036c:	01020074 	movhi	r4,2049
 8000370:	212eb804 	addi	r4,r4,-17696
 8000374:	8006d540 	call	8006d54 <printf>
    printf("%x \n", rcode);
 8000378:	e0bfff03 	ldbu	r2,-4(fp)
 800037c:	100b883a 	mov	r5,r2
 8000380:	01020074 	movhi	r4,2049
 8000384:	212ebf04 	addi	r4,r4,-17668
 8000388:	8006d540 	call	8006d54 <printf>
 800038c:	00000906 	br	80003b4 <GetDriverandReport+0x148>
  }
  else
  {
    printf("Update rate: ");
 8000390:	01020074 	movhi	r4,2049
 8000394:	212ec104 	addi	r4,r4,-17660
 8000398:	8006d540 	call	8006d54 <printf>
    printf("%x \n", tmpbyte);
 800039c:	e0bfff43 	ldbu	r2,-3(fp)
 80003a0:	10803fcc 	andi	r2,r2,255
 80003a4:	100b883a 	mov	r5,r2
 80003a8:	01020074 	movhi	r4,2049
 80003ac:	212ebf04 	addi	r4,r4,-17668
 80003b0:	8006d540 	call	8006d54 <printf>
  }
  printf("Protocol: ");
 80003b4:	01020074 	movhi	r4,2049
 80003b8:	212ec504 	addi	r4,r4,-17644
 80003bc:	8006d540 	call	8006d54 <printf>
  rcode = XferGetProto(addr, 0, hid_device.interface, &tmpbyte);
 80003c0:	d0a00103 	ldbu	r2,-32764(gp)
 80003c4:	11003fcc 	andi	r4,r2,255
 80003c8:	d0ac0243 	ldbu	r2,-20471(gp)
 80003cc:	10803fcc 	andi	r2,r2,255
 80003d0:	e0ffff44 	addi	r3,fp,-3
 80003d4:	d8c00415 	stw	r3,16(sp)
 80003d8:	00c00044 	movi	r3,1
 80003dc:	d8c00315 	stw	r3,12(sp)
 80003e0:	d8800215 	stw	r2,8(sp)
 80003e4:	d8000115 	stw	zero,4(sp)
 80003e8:	d8000015 	stw	zero,0(sp)
 80003ec:	01c000c4 	movi	r7,3
 80003f0:	01802844 	movi	r6,161
 80003f4:	000b883a 	mov	r5,zero
 80003f8:	80047040 	call	8004704 <XferCtrlReq>
 80003fc:	e0bfff05 	stb	r2,-4(fp)
  if (rcode)
 8000400:	e0bfff03 	ldbu	r2,-4(fp)
 8000404:	10000926 	beq	r2,zero,800042c <GetDriverandReport+0x1c0>
  { // error handling
    printf("GetProto Error. Error code ");
 8000408:	01020074 	movhi	r4,2049
 800040c:	212ec804 	addi	r4,r4,-17632
 8000410:	8006d540 	call	8006d54 <printf>
    printf("%x \n", rcode);
 8000414:	e0bfff03 	ldbu	r2,-4(fp)
 8000418:	100b883a 	mov	r5,r2
 800041c:	01020074 	movhi	r4,2049
 8000420:	212ebf04 	addi	r4,r4,-17668
 8000424:	8006d540 	call	8006d54 <printf>
 8000428:	00000606 	br	8000444 <GetDriverandReport+0x1d8>
  }
  else
  {
    printf("%d \n", tmpbyte);
 800042c:	e0bfff43 	ldbu	r2,-3(fp)
 8000430:	10803fcc 	andi	r2,r2,255
 8000434:	100b883a 	mov	r5,r2
 8000438:	01020074 	movhi	r4,2049
 800043c:	212ecf04 	addi	r4,r4,-17604
 8000440:	8006d540 	call	8006d54 <printf>
  }
  return device;
 8000444:	e0bffd43 	ldbu	r2,-11(fp)
}
 8000448:	e037883a 	mov	sp,fp
 800044c:	dfc00117 	ldw	ra,4(sp)
 8000450:	df000017 	ldw	fp,0(sp)
 8000454:	dec00204 	addi	sp,sp,8
 8000458:	f800283a 	ret

0800045c <setHERO>:

void setHERO(BYTE HERO_INDEX, BYTE HERO_X, BYTE HERO_Y, BOOL HERO_FLIP,
             BYTE HERO_HAIR, BOOL SHAKE_EN, BOOL SOUND_EN)
{
 800045c:	defffa04 	addi	sp,sp,-24
 8000460:	df000515 	stw	fp,20(sp)
 8000464:	df000504 	addi	fp,sp,20
 8000468:	2011883a 	mov	r8,r4
 800046c:	2809883a 	mov	r4,r5
 8000470:	3007883a 	mov	r3,r6
 8000474:	e1fffe15 	stw	r7,-8(fp)
 8000478:	e0800117 	ldw	r2,4(fp)
 800047c:	e23ffb05 	stb	r8,-20(fp)
 8000480:	e13ffc05 	stb	r4,-16(fp)
 8000484:	e0fffd05 	stb	r3,-12(fp)
 8000488:	e0bfff05 	stb	r2,-4(fp)
  IOWR_ALTERA_AVALON_PIO_DATA(HERO_BASE,
 800048c:	e0800217 	ldw	r2,8(fp)
 8000490:	1085883a 	add	r2,r2,r2
 8000494:	1007883a 	mov	r3,r2
 8000498:	e0800317 	ldw	r2,12(fp)
 800049c:	1886b03a 	or	r3,r3,r2
 80004a0:	e0bfff03 	ldbu	r2,-4(fp)
 80004a4:	1085883a 	add	r2,r2,r2
 80004a8:	1085883a 	add	r2,r2,r2
 80004ac:	1886b03a 	or	r3,r3,r2
 80004b0:	e0bffe17 	ldw	r2,-8(fp)
 80004b4:	1004913a 	slli	r2,r2,4
 80004b8:	1884b03a 	or	r2,r3,r2
 80004bc:	e0fffd03 	ldbu	r3,-12(fp)
 80004c0:	1806917a 	slli	r3,r3,5
 80004c4:	10c4b03a 	or	r2,r2,r3
 80004c8:	e0fffc03 	ldbu	r3,-16(fp)
 80004cc:	1806937a 	slli	r3,r3,13
 80004d0:	10c4b03a 	or	r2,r2,r3
 80004d4:	e0fffb03 	ldbu	r3,-20(fp)
 80004d8:	1806957a 	slli	r3,r3,21
 80004dc:	10c4b03a 	or	r2,r2,r3
 80004e0:	1007883a 	mov	r3,r2
 80004e4:	00803004 	movi	r2,192
 80004e8:	10c00035 	stwio	r3,0(r2)
                              (SOUND_EN | SHAKE_EN << 1 | (HERO_HAIR) << 2) |
                                  HERO_FLIP << 4 | HERO_Y << 5 | HERO_X << 13 |
                                  HERO_INDEX << 21);
}
 80004ec:	0001883a 	nop
 80004f0:	e037883a 	mov	sp,fp
 80004f4:	df000017 	ldw	fp,0(sp)
 80004f8:	dec00104 	addi	sp,sp,4
 80004fc:	f800283a 	ret

08000500 <setLED>:

void setLED(int LED)
{
 8000500:	defffe04 	addi	sp,sp,-8
 8000504:	df000115 	stw	fp,4(sp)
 8000508:	df000104 	addi	fp,sp,4
 800050c:	e13fff15 	stw	r4,-4(fp)
  IOWR_ALTERA_AVALON_PIO_DATA(
 8000510:	00803804 	movi	r2,224
 8000514:	10c00037 	ldwio	r3,0(r2)
 8000518:	01000044 	movi	r4,1
 800051c:	e0bfff17 	ldw	r2,-4(fp)
 8000520:	2084983a 	sll	r2,r4,r2
 8000524:	1886b03a 	or	r3,r3,r2
 8000528:	00803804 	movi	r2,224
 800052c:	10c00035 	stwio	r3,0(r2)
      LEDS_PIO_BASE,
      (IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) | (0x001 << LED)));
}
 8000530:	0001883a 	nop
 8000534:	e037883a 	mov	sp,fp
 8000538:	df000017 	ldw	fp,0(sp)
 800053c:	dec00104 	addi	sp,sp,4
 8000540:	f800283a 	ret

08000544 <clearLED>:

void clearLED(int LED)
{
 8000544:	defffe04 	addi	sp,sp,-8
 8000548:	df000115 	stw	fp,4(sp)
 800054c:	df000104 	addi	fp,sp,4
 8000550:	e13fff15 	stw	r4,-4(fp)
  IOWR_ALTERA_AVALON_PIO_DATA(
 8000554:	00803804 	movi	r2,224
 8000558:	10c00037 	ldwio	r3,0(r2)
 800055c:	01000044 	movi	r4,1
 8000560:	e0bfff17 	ldw	r2,-4(fp)
 8000564:	2084983a 	sll	r2,r4,r2
 8000568:	0084303a 	nor	r2,zero,r2
 800056c:	1886703a 	and	r3,r3,r2
 8000570:	00803804 	movi	r2,224
 8000574:	10c00035 	stwio	r3,0(r2)
      LEDS_PIO_BASE,
      (IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) & ~(0x001 << LED)));
}
 8000578:	0001883a 	nop
 800057c:	e037883a 	mov	sp,fp
 8000580:	df000017 	ldw	fp,0(sp)
 8000584:	dec00104 	addi	sp,sp,4
 8000588:	f800283a 	ret

0800058c <printSignedHex0>:

void printSignedHex0(signed char value)
{
 800058c:	defffc04 	addi	sp,sp,-16
 8000590:	dfc00315 	stw	ra,12(sp)
 8000594:	df000215 	stw	fp,8(sp)
 8000598:	df000204 	addi	fp,sp,8
 800059c:	2005883a 	mov	r2,r4
 80005a0:	e0bfff05 	stb	r2,-4(fp)
  BYTE tens = 0;
 80005a4:	e03ffe05 	stb	zero,-8(fp)
  BYTE ones = 0;
 80005a8:	e03ffe45 	stb	zero,-7(fp)
  WORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 80005ac:	00803c04 	movi	r2,240
 80005b0:	10800037 	ldwio	r2,0(r2)
 80005b4:	e0bffe8d 	sth	r2,-6(fp)
  if (value < 0)
 80005b8:	e0bfff07 	ldb	r2,-4(fp)
 80005bc:	1000060e 	bge	r2,zero,80005d8 <printSignedHex0+0x4c>
  {
    setLED(11);
 80005c0:	010002c4 	movi	r4,11
 80005c4:	80005000 	call	8000500 <setLED>
    value = -value;
 80005c8:	e0bfff03 	ldbu	r2,-4(fp)
 80005cc:	0085c83a 	sub	r2,zero,r2
 80005d0:	e0bfff05 	stb	r2,-4(fp)
 80005d4:	00000206 	br	80005e0 <printSignedHex0+0x54>
  }
  else
  {
    clearLED(11);
 80005d8:	010002c4 	movi	r4,11
 80005dc:	80005440 	call	8000544 <clearLED>
  }
  // handled hundreds
  if (value / 100)
 80005e0:	e0bfff03 	ldbu	r2,-4(fp)
 80005e4:	108018c4 	addi	r2,r2,99
 80005e8:	10803fcc 	andi	r2,r2,255
 80005ec:	108031f0 	cmpltui	r2,r2,199
 80005f0:	1000031e 	bne	r2,zero,8000600 <printSignedHex0+0x74>
    setLED(13);
 80005f4:	01000344 	movi	r4,13
 80005f8:	80005000 	call	8000500 <setLED>
 80005fc:	00000206 	br	8000608 <printSignedHex0+0x7c>
  else
    clearLED(13);
 8000600:	01000344 	movi	r4,13
 8000604:	80005440 	call	8000544 <clearLED>

  value = value % 100;
 8000608:	e0bfff07 	ldb	r2,-4(fp)
 800060c:	01401904 	movi	r5,100
 8000610:	1009883a 	mov	r4,r2
 8000614:	80056640 	call	8005664 <__modsi3>
 8000618:	e0bfff05 	stb	r2,-4(fp)
  tens = value / 10;
 800061c:	e0bfff07 	ldb	r2,-4(fp)
 8000620:	01400284 	movi	r5,10
 8000624:	1009883a 	mov	r4,r2
 8000628:	80055e00 	call	80055e0 <__divsi3>
 800062c:	e0bffe05 	stb	r2,-8(fp)
  ones = value % 10;
 8000630:	e0bfff07 	ldb	r2,-4(fp)
 8000634:	01400284 	movi	r5,10
 8000638:	1009883a 	mov	r4,r2
 800063c:	80056640 	call	8005664 <__modsi3>
 8000640:	e0bffe45 	stb	r2,-7(fp)

  pio_val &= 0x00FF;
 8000644:	e0bffe8b 	ldhu	r2,-6(fp)
 8000648:	10803fcc 	andi	r2,r2,255
 800064c:	e0bffe8d 	sth	r2,-6(fp)
  pio_val |= (tens << 12);
 8000650:	e0bffe03 	ldbu	r2,-8(fp)
 8000654:	1004933a 	slli	r2,r2,12
 8000658:	1007883a 	mov	r3,r2
 800065c:	e0bffe8b 	ldhu	r2,-6(fp)
 8000660:	1884b03a 	or	r2,r3,r2
 8000664:	e0bffe8d 	sth	r2,-6(fp)
  pio_val |= (ones << 8);
 8000668:	e0bffe43 	ldbu	r2,-7(fp)
 800066c:	1004923a 	slli	r2,r2,8
 8000670:	1007883a 	mov	r3,r2
 8000674:	e0bffe8b 	ldhu	r2,-6(fp)
 8000678:	1884b03a 	or	r2,r3,r2
 800067c:	e0bffe8d 	sth	r2,-6(fp)

  IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 8000680:	e0fffe8b 	ldhu	r3,-6(fp)
 8000684:	00803c04 	movi	r2,240
 8000688:	10c00035 	stwio	r3,0(r2)
}
 800068c:	0001883a 	nop
 8000690:	e037883a 	mov	sp,fp
 8000694:	dfc00117 	ldw	ra,4(sp)
 8000698:	df000017 	ldw	fp,0(sp)
 800069c:	dec00204 	addi	sp,sp,8
 80006a0:	f800283a 	ret

080006a4 <printSignedHex1>:

void printSignedHex1(signed char value)
{
 80006a4:	defffb04 	addi	sp,sp,-20
 80006a8:	dfc00415 	stw	ra,16(sp)
 80006ac:	df000315 	stw	fp,12(sp)
 80006b0:	df000304 	addi	fp,sp,12
 80006b4:	2005883a 	mov	r2,r4
 80006b8:	e0bfff05 	stb	r2,-4(fp)
  BYTE tens = 0;
 80006bc:	e03ffd05 	stb	zero,-12(fp)
  BYTE ones = 0;
 80006c0:	e03ffd45 	stb	zero,-11(fp)
  DWORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 80006c4:	00803c04 	movi	r2,240
 80006c8:	10800037 	ldwio	r2,0(r2)
 80006cc:	e0bffe15 	stw	r2,-8(fp)
  if (value < 0)
 80006d0:	e0bfff07 	ldb	r2,-4(fp)
 80006d4:	1000060e 	bge	r2,zero,80006f0 <printSignedHex1+0x4c>
  {
    setLED(10);
 80006d8:	01000284 	movi	r4,10
 80006dc:	80005000 	call	8000500 <setLED>
    value = -value;
 80006e0:	e0bfff03 	ldbu	r2,-4(fp)
 80006e4:	0085c83a 	sub	r2,zero,r2
 80006e8:	e0bfff05 	stb	r2,-4(fp)
 80006ec:	00000206 	br	80006f8 <printSignedHex1+0x54>
  }
  else
  {
    clearLED(10);
 80006f0:	01000284 	movi	r4,10
 80006f4:	80005440 	call	8000544 <clearLED>
  }
  // handled hundreds
  if (value / 100)
 80006f8:	e0bfff03 	ldbu	r2,-4(fp)
 80006fc:	108018c4 	addi	r2,r2,99
 8000700:	10803fcc 	andi	r2,r2,255
 8000704:	108031f0 	cmpltui	r2,r2,199
 8000708:	1000031e 	bne	r2,zero,8000718 <printSignedHex1+0x74>
    setLED(12);
 800070c:	01000304 	movi	r4,12
 8000710:	80005000 	call	8000500 <setLED>
 8000714:	00000206 	br	8000720 <printSignedHex1+0x7c>
  else
    clearLED(12);
 8000718:	01000304 	movi	r4,12
 800071c:	80005440 	call	8000544 <clearLED>

  value = value % 100;
 8000720:	e0bfff07 	ldb	r2,-4(fp)
 8000724:	01401904 	movi	r5,100
 8000728:	1009883a 	mov	r4,r2
 800072c:	80056640 	call	8005664 <__modsi3>
 8000730:	e0bfff05 	stb	r2,-4(fp)
  tens = value / 10;
 8000734:	e0bfff07 	ldb	r2,-4(fp)
 8000738:	01400284 	movi	r5,10
 800073c:	1009883a 	mov	r4,r2
 8000740:	80055e00 	call	80055e0 <__divsi3>
 8000744:	e0bffd05 	stb	r2,-12(fp)
  ones = value % 10;
 8000748:	e0bfff07 	ldb	r2,-4(fp)
 800074c:	01400284 	movi	r5,10
 8000750:	1009883a 	mov	r4,r2
 8000754:	80056640 	call	8005664 <__modsi3>
 8000758:	e0bffd45 	stb	r2,-11(fp)
  tens = value / 10;
 800075c:	e0bfff07 	ldb	r2,-4(fp)
 8000760:	01400284 	movi	r5,10
 8000764:	1009883a 	mov	r4,r2
 8000768:	80055e00 	call	80055e0 <__divsi3>
 800076c:	e0bffd05 	stb	r2,-12(fp)
  ones = value % 10;
 8000770:	e0bfff07 	ldb	r2,-4(fp)
 8000774:	01400284 	movi	r5,10
 8000778:	1009883a 	mov	r4,r2
 800077c:	80056640 	call	8005664 <__modsi3>
 8000780:	e0bffd45 	stb	r2,-11(fp)

  pio_val &= 0xFF00;
 8000784:	e0bffe17 	ldw	r2,-8(fp)
 8000788:	10bfc00c 	andi	r2,r2,65280
 800078c:	e0bffe15 	stw	r2,-8(fp)
  pio_val |= (tens << 4);
 8000790:	e0bffd03 	ldbu	r2,-12(fp)
 8000794:	1004913a 	slli	r2,r2,4
 8000798:	1007883a 	mov	r3,r2
 800079c:	e0bffe17 	ldw	r2,-8(fp)
 80007a0:	10c4b03a 	or	r2,r2,r3
 80007a4:	e0bffe15 	stw	r2,-8(fp)
  pio_val |= (ones << 0);
 80007a8:	e0bffd43 	ldbu	r2,-11(fp)
 80007ac:	e0fffe17 	ldw	r3,-8(fp)
 80007b0:	1884b03a 	or	r2,r3,r2
 80007b4:	e0bffe15 	stw	r2,-8(fp)

  IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 80007b8:	e0fffe17 	ldw	r3,-8(fp)
 80007bc:	00803c04 	movi	r2,240
 80007c0:	10c00035 	stwio	r3,0(r2)
}
 80007c4:	0001883a 	nop
 80007c8:	e037883a 	mov	sp,fp
 80007cc:	dfc00117 	ldw	ra,4(sp)
 80007d0:	df000017 	ldw	fp,0(sp)
 80007d4:	dec00204 	addi	sp,sp,8
 80007d8:	f800283a 	ret

080007dc <setKeycode>:

void setKeycode(WORD keycode)
{
 80007dc:	defffe04 	addi	sp,sp,-8
 80007e0:	df000115 	stw	fp,4(sp)
 80007e4:	df000104 	addi	fp,sp,4
 80007e8:	2005883a 	mov	r2,r4
 80007ec:	e0bfff0d 	sth	r2,-4(fp)
  IOWR_ALTERA_AVALON_PIO_DATA(KEYCODE_BASE, keycode);
 80007f0:	e0ffff0b 	ldhu	r3,-4(fp)
 80007f4:	00808c04 	movi	r2,560
 80007f8:	10c00035 	stwio	r3,0(r2)
}
 80007fc:	0001883a 	nop
 8000800:	e037883a 	mov	sp,fp
 8000804:	df000017 	ldw	fp,0(sp)
 8000808:	dec00104 	addi	sp,sp,4
 800080c:	f800283a 	ret

08000810 <SGTL5000_init>:

int SGTL5000_init()
{
 8000810:	defffc04 	addi	sp,sp,-16
 8000814:	dfc00315 	stw	ra,12(sp)
 8000818:	df000215 	stw	fp,8(sp)
 800081c:	df000204 	addi	fp,sp,8
  ALT_AVALON_I2C_DEV_t *i2c_dev; // pointer to instance structure
  // get a pointer to the Avalon i2c instance
  i2c_dev = alt_avalon_i2c_open(
 8000820:	01020074 	movhi	r4,2049
 8000824:	212ed104 	addi	r4,r4,-17596
 8000828:	8007da40 	call	8007da4 <alt_avalon_i2c_open>
 800082c:	e0bffe15 	stw	r2,-8(fp)
      "/dev/i2c_0");   // this has to reflect Platform Designer name
  if (NULL == i2c_dev) // check the BSP if unsure
 8000830:	e0bffe17 	ldw	r2,-8(fp)
 8000834:	1000051e 	bne	r2,zero,800084c <SGTL5000_init+0x3c>
  {
    printf("Error: Cannot find /dev/i2c_0\n");
 8000838:	01020074 	movhi	r4,2049
 800083c:	212ed404 	addi	r4,r4,-17584
 8000840:	8006e200 	call	8006e20 <puts>
    return 1;
 8000844:	00800044 	movi	r2,1
 8000848:	0000ab06 	br	8000af8 <SGTL5000_init+0x2e8>
  }
  printf("I2C Test Program\n");
 800084c:	01020074 	movhi	r4,2049
 8000850:	212edc04 	addi	r4,r4,-17552
 8000854:	8006e200 	call	8006e20 <puts>

  alt_avalon_i2c_master_target_set(i2c_dev, 0xA); // CODEC at address 0b0001010
 8000858:	01400284 	movi	r5,10
 800085c:	e13ffe17 	ldw	r4,-8(fp)
 8000860:	80085740 	call	8008574 <alt_avalon_i2c_master_target_set>
  // print device ID (verify I2C is working)
  printf("Device ID register: %x\n",
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_ID));
 8000864:	000b883a 	mov	r5,zero
 8000868:	e13ffe17 	ldw	r4,-8(fp)
 800086c:	800343c0 	call	800343c <SGTL5000_Reg_Rd>
  }
  printf("I2C Test Program\n");

  alt_avalon_i2c_master_target_set(i2c_dev, 0xA); // CODEC at address 0b0001010
  // print device ID (verify I2C is working)
  printf("Device ID register: %x\n",
 8000870:	10bfffcc 	andi	r2,r2,65535
 8000874:	100b883a 	mov	r5,r2
 8000878:	01020074 	movhi	r4,2049
 800087c:	212ee104 	addi	r4,r4,-17532
 8000880:	8006d540 	call	8006d54 <printf>
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_ID));

  // configure PLL, input frequency is 12.5 MHz, output frequency is 180.6336
  // MHz if 44.1kHz is desired or 196.608 MHz else
  BYTE int_divisor = 180633600 / 12500000;
 8000884:	00800384 	movi	r2,14
 8000888:	e0bfff05 	stb	r2,-4(fp)
  WORD frac_divisor =
      (WORD)(((180633600.0f / 12500000.0f) - (float)int_divisor) * 2048.0f);
 800088c:	e0bfff03 	ldbu	r2,-4(fp)
 8000890:	1009883a 	mov	r4,r2
 8000894:	80061fc0 	call	80061fc <__floatunsisf>
 8000898:	1007883a 	mov	r3,r2
 800089c:	180b883a 	mov	r5,r3
 80008a0:	011059f4 	movhi	r4,16743
 80008a4:	210d8144 	addi	r4,r4,13829
 80008a8:	8005ca80 	call	8005ca8 <__subsf3>
 80008ac:	1007883a 	mov	r3,r2
 80008b0:	1805883a 	mov	r2,r3
 80008b4:	01514034 	movhi	r5,17664
 80008b8:	1009883a 	mov	r4,r2
 80008bc:	80058780 	call	8005878 <__mulsf3>
 80008c0:	1007883a 	mov	r3,r2
 80008c4:	1805883a 	mov	r2,r3
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_ID));

  // configure PLL, input frequency is 12.5 MHz, output frequency is 180.6336
  // MHz if 44.1kHz is desired or 196.608 MHz else
  BYTE int_divisor = 180633600 / 12500000;
  WORD frac_divisor =
 80008c8:	1009883a 	mov	r4,r2
 80008cc:	80055800 	call	8005580 <__fixunssfsi>
 80008d0:	e0bfff8d 	sth	r2,-2(fp)
      (WORD)(((180633600.0f / 12500000.0f) - (float)int_divisor) * 2048.0f);
  printf("Programming PLL with integer divisor: %d, fractional divisor %d\n",
 80008d4:	e0bfff03 	ldbu	r2,-4(fp)
 80008d8:	e0ffff8b 	ldhu	r3,-2(fp)
 80008dc:	180d883a 	mov	r6,r3
 80008e0:	100b883a 	mov	r5,r2
 80008e4:	01020074 	movhi	r4,2049
 80008e8:	212ee704 	addi	r4,r4,-17508
 80008ec:	8006d540 	call	8006d54 <printf>
         int_divisor, frac_divisor);
  SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_PLL_CTRL,
                  int_divisor << SGTL5000_PLL_INT_DIV_SHIFT |
 80008f0:	e0bfff03 	ldbu	r2,-4(fp)
 80008f4:	100492fa 	slli	r2,r2,11
  BYTE int_divisor = 180633600 / 12500000;
  WORD frac_divisor =
      (WORD)(((180633600.0f / 12500000.0f) - (float)int_divisor) * 2048.0f);
  printf("Programming PLL with integer divisor: %d, fractional divisor %d\n",
         int_divisor, frac_divisor);
  SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_PLL_CTRL,
 80008f8:	1007883a 	mov	r3,r2
 80008fc:	e0bfff8b 	ldhu	r2,-2(fp)
 8000900:	1884b03a 	or	r2,r3,r2
 8000904:	10bfffcc 	andi	r2,r2,65535
 8000908:	100d883a 	mov	r6,r2
 800090c:	01400c84 	movi	r5,50
 8000910:	e13ffe17 	ldw	r4,-8(fp)
 8000914:	80034f00 	call	80034f0 <SGTL5000_Reg_Wr>
                  int_divisor << SGTL5000_PLL_INT_DIV_SHIFT |
                      frac_divisor << SGTL5000_PLL_FRAC_DIV_SHIFT);
  printf("CHIP_PLL_CTRL register: %x\n",
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_PLL_CTRL));
 8000918:	01400c84 	movi	r5,50
 800091c:	e13ffe17 	ldw	r4,-8(fp)
 8000920:	800343c0 	call	800343c <SGTL5000_Reg_Rd>
  printf("Programming PLL with integer divisor: %d, fractional divisor %d\n",
         int_divisor, frac_divisor);
  SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_PLL_CTRL,
                  int_divisor << SGTL5000_PLL_INT_DIV_SHIFT |
                      frac_divisor << SGTL5000_PLL_FRAC_DIV_SHIFT);
  printf("CHIP_PLL_CTRL register: %x\n",
 8000924:	10bfffcc 	andi	r2,r2,65535
 8000928:	100b883a 	mov	r5,r2
 800092c:	01020074 	movhi	r4,2049
 8000930:	212ef804 	addi	r4,r4,-17440
 8000934:	8006d540 	call	8006d54 <printf>
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_PLL_CTRL));

  // configure power control, disable internal VDDD, VDDIO=3.3V, VDDA=VDDD=1.8V
  // (ext)
  SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_POWER,
 8000938:	01917f84 	movi	r6,17918
 800093c:	01400c04 	movi	r5,48
 8000940:	e13ffe17 	ldw	r4,-8(fp)
 8000944:	80034f00 	call	80034f0 <SGTL5000_Reg_Wr>
                      SGTL5000_VCOAMP_POWERUP | SGTL5000_VAG_POWERUP |
                      SGTL5000_ADC_STEREO | SGTL5000_REFTOP_POWERUP |
                      SGTL5000_HP_POWERUP | SGTL5000_DAC_POWERUP |
                      SGTL5000_CAPLESS_HP_POWERUP | SGTL5000_ADC_POWERUP);
  printf("CHIP_ANA_POWER register: %x\n",
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_ANA_POWER));
 8000948:	01400c04 	movi	r5,48
 800094c:	e13ffe17 	ldw	r4,-8(fp)
 8000950:	800343c0 	call	800343c <SGTL5000_Reg_Rd>
                  SGTL5000_DAC_STEREO | SGTL5000_PLL_POWERUP |
                      SGTL5000_VCOAMP_POWERUP | SGTL5000_VAG_POWERUP |
                      SGTL5000_ADC_STEREO | SGTL5000_REFTOP_POWERUP |
                      SGTL5000_HP_POWERUP | SGTL5000_DAC_POWERUP |
                      SGTL5000_CAPLESS_HP_POWERUP | SGTL5000_ADC_POWERUP);
  printf("CHIP_ANA_POWER register: %x\n",
 8000954:	10bfffcc 	andi	r2,r2,65535
 8000958:	100b883a 	mov	r5,r2
 800095c:	01020074 	movhi	r4,2049
 8000960:	212eff04 	addi	r4,r4,-17412
 8000964:	8006d540 	call	8006d54 <printf>
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_ANA_POWER));

  // select internal ground bias to .9V (1.8V/2)
  SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_REF_CTRL, 0x004E);
 8000968:	01801384 	movi	r6,78
 800096c:	01400a04 	movi	r5,40
 8000970:	e13ffe17 	ldw	r4,-8(fp)
 8000974:	80034f00 	call	80034f0 <SGTL5000_Reg_Wr>
  printf("CHIP_REF_CTRL register: %x\n",
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_REF_CTRL));
 8000978:	01400a04 	movi	r5,40
 800097c:	e13ffe17 	ldw	r4,-8(fp)
 8000980:	800343c0 	call	800343c <SGTL5000_Reg_Rd>
  printf("CHIP_ANA_POWER register: %x\n",
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_ANA_POWER));

  // select internal ground bias to .9V (1.8V/2)
  SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_REF_CTRL, 0x004E);
  printf("CHIP_REF_CTRL register: %x\n",
 8000984:	10bfffcc 	andi	r2,r2,65535
 8000988:	100b883a 	mov	r5,r2
 800098c:	01020074 	movhi	r4,2049
 8000990:	212f0704 	addi	r4,r4,-17380
 8000994:	8006d540 	call	8006d54 <printf>
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_REF_CTRL));

  // enable core modules
  SGTL5000_Reg_Wr(
 8000998:	018018c4 	movi	r6,99
 800099c:	01400084 	movi	r5,2
 80009a0:	e13ffe17 	ldw	r4,-8(fp)
 80009a4:	80034f00 	call	80034f0 <SGTL5000_Reg_Wr>
      i2c_dev, SGTL5000_CHIP_DIG_POWER,
      SGTL5000_ADC_EN | SGTL5000_DAC_EN |
          // SGTL5000_DAP_POWERUP| //disable digital audio processor in CODEC
          SGTL5000_I2S_OUT_POWERUP | SGTL5000_I2S_IN_POWERUP);
  printf("CHIP_DIG_POWER register: %x\n",
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_DIG_POWER));
 80009a8:	01400084 	movi	r5,2
 80009ac:	e13ffe17 	ldw	r4,-8(fp)
 80009b0:	800343c0 	call	800343c <SGTL5000_Reg_Rd>
  SGTL5000_Reg_Wr(
      i2c_dev, SGTL5000_CHIP_DIG_POWER,
      SGTL5000_ADC_EN | SGTL5000_DAC_EN |
          // SGTL5000_DAP_POWERUP| //disable digital audio processor in CODEC
          SGTL5000_I2S_OUT_POWERUP | SGTL5000_I2S_IN_POWERUP);
  printf("CHIP_DIG_POWER register: %x\n",
 80009b4:	10bfffcc 	andi	r2,r2,65535
 80009b8:	100b883a 	mov	r5,r2
 80009bc:	01020074 	movhi	r4,2049
 80009c0:	212f0e04 	addi	r4,r4,-17352
 80009c4:	8006d540 	call	8006d54 <printf>
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_DIG_POWER));

  // MCLK is 12.5 MHz, configure clocks to use PLL
  SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_CLK_CTRL,
 80009c8:	018001c4 	movi	r6,7
 80009cc:	01400104 	movi	r5,4
 80009d0:	e13ffe17 	ldw	r4,-8(fp)
 80009d4:	80034f00 	call	80034f0 <SGTL5000_Reg_Wr>
                  SGTL5000_SYS_FS_44_1k << SGTL5000_SYS_FS_SHIFT |
                      SGTL5000_MCLK_FREQ_PLL << SGTL5000_MCLK_FREQ_SHIFT);
  printf("CHIP_CLK_CTRL register: %x\n",
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_CLK_CTRL));
 80009d8:	01400104 	movi	r5,4
 80009dc:	e13ffe17 	ldw	r4,-8(fp)
 80009e0:	800343c0 	call	800343c <SGTL5000_Reg_Rd>

  // MCLK is 12.5 MHz, configure clocks to use PLL
  SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_CLK_CTRL,
                  SGTL5000_SYS_FS_44_1k << SGTL5000_SYS_FS_SHIFT |
                      SGTL5000_MCLK_FREQ_PLL << SGTL5000_MCLK_FREQ_SHIFT);
  printf("CHIP_CLK_CTRL register: %x\n",
 80009e4:	10bfffcc 	andi	r2,r2,65535
 80009e8:	100b883a 	mov	r5,r2
 80009ec:	01020074 	movhi	r4,2049
 80009f0:	212f1604 	addi	r4,r4,-17320
 80009f4:	8006d540 	call	8006d54 <printf>
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_CLK_CTRL));

  // Set as I2S master
  SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_I2S_CTRL, SGTL5000_I2S_MASTER);
 80009f8:	01802004 	movi	r6,128
 80009fc:	01400184 	movi	r5,6
 8000a00:	e13ffe17 	ldw	r4,-8(fp)
 8000a04:	80034f00 	call	80034f0 <SGTL5000_Reg_Wr>
  printf("CHIP_I2S_CTRL register: %x\n",
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_I2S_CTRL));
 8000a08:	01400184 	movi	r5,6
 8000a0c:	e13ffe17 	ldw	r4,-8(fp)
 8000a10:	800343c0 	call	800343c <SGTL5000_Reg_Rd>
  printf("CHIP_CLK_CTRL register: %x\n",
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_CLK_CTRL));

  // Set as I2S master
  SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_I2S_CTRL, SGTL5000_I2S_MASTER);
  printf("CHIP_I2S_CTRL register: %x\n",
 8000a14:	10bfffcc 	andi	r2,r2,65535
 8000a18:	100b883a 	mov	r5,r2
 8000a1c:	01020074 	movhi	r4,2049
 8000a20:	212f1d04 	addi	r4,r4,-17292
 8000a24:	8006d540 	call	8006d54 <printf>
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_I2S_CTRL));

  // ADC input from Line
  SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_CTRL,
 8000a28:	01800104 	movi	r6,4
 8000a2c:	01400904 	movi	r5,36
 8000a30:	e13ffe17 	ldw	r4,-8(fp)
 8000a34:	80034f00 	call	80034f0 <SGTL5000_Reg_Wr>
                  SGTL5000_ADC_SEL_LINE_IN << SGTL5000_ADC_SEL_SHIFT);
  printf("CHIP_ANA_CTRL register: %x\n",
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_ANA_CTRL));
 8000a38:	01400904 	movi	r5,36
 8000a3c:	e13ffe17 	ldw	r4,-8(fp)
 8000a40:	800343c0 	call	800343c <SGTL5000_Reg_Rd>
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_I2S_CTRL));

  // ADC input from Line
  SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_CTRL,
                  SGTL5000_ADC_SEL_LINE_IN << SGTL5000_ADC_SEL_SHIFT);
  printf("CHIP_ANA_CTRL register: %x\n",
 8000a44:	10bfffcc 	andi	r2,r2,65535
 8000a48:	100b883a 	mov	r5,r2
 8000a4c:	01020074 	movhi	r4,2049
 8000a50:	212f2404 	addi	r4,r4,-17264
 8000a54:	8006d540 	call	8006d54 <printf>
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_ANA_CTRL));

  // ADC -> I2S out, I2S in -> DAC
  SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_SSS_CTRL,
 8000a58:	01800404 	movi	r6,16
 8000a5c:	01400284 	movi	r5,10
 8000a60:	e13ffe17 	ldw	r4,-8(fp)
 8000a64:	80034f00 	call	80034f0 <SGTL5000_Reg_Wr>
                  SGTL5000_DAC_SEL_I2S_IN << SGTL5000_DAC_SEL_SHIFT |
                      SGTL5000_I2S_OUT_SEL_ADC << SGTL5000_I2S_OUT_SEL_SHIFT);
  printf("CHIP_SSS_CTRL register: %x\n",
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_SSS_CTRL));
 8000a68:	01400284 	movi	r5,10
 8000a6c:	e13ffe17 	ldw	r4,-8(fp)
 8000a70:	800343c0 	call	800343c <SGTL5000_Reg_Rd>

  // ADC -> I2S out, I2S in -> DAC
  SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_SSS_CTRL,
                  SGTL5000_DAC_SEL_I2S_IN << SGTL5000_DAC_SEL_SHIFT |
                      SGTL5000_I2S_OUT_SEL_ADC << SGTL5000_I2S_OUT_SEL_SHIFT);
  printf("CHIP_SSS_CTRL register: %x\n",
 8000a74:	10bfffcc 	andi	r2,r2,65535
 8000a78:	100b883a 	mov	r5,r2
 8000a7c:	01020074 	movhi	r4,2049
 8000a80:	212f2b04 	addi	r4,r4,-17236
 8000a84:	8006d540 	call	8006d54 <printf>
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_SSS_CTRL));

  printf("CHIP_ANA_CTRL register: %x\n",
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_ANA_CTRL));
 8000a88:	01400904 	movi	r5,36
 8000a8c:	e13ffe17 	ldw	r4,-8(fp)
 8000a90:	800343c0 	call	800343c <SGTL5000_Reg_Rd>
                  SGTL5000_DAC_SEL_I2S_IN << SGTL5000_DAC_SEL_SHIFT |
                      SGTL5000_I2S_OUT_SEL_ADC << SGTL5000_I2S_OUT_SEL_SHIFT);
  printf("CHIP_SSS_CTRL register: %x\n",
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_SSS_CTRL));

  printf("CHIP_ANA_CTRL register: %x\n",
 8000a94:	10bfffcc 	andi	r2,r2,65535
 8000a98:	100b883a 	mov	r5,r2
 8000a9c:	01020074 	movhi	r4,2049
 8000aa0:	212f2404 	addi	r4,r4,-17264
 8000aa4:	8006d540 	call	8006d54 <printf>
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_ANA_CTRL));

  // ADC -> I2S out, I2S in -> DAC
  SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL, 0x0000);
 8000aa8:	000d883a 	mov	r6,zero
 8000aac:	01400384 	movi	r5,14
 8000ab0:	e13ffe17 	ldw	r4,-8(fp)
 8000ab4:	80034f00 	call	80034f0 <SGTL5000_Reg_Wr>
  printf("CHIP_ADCDAC_CTRL register: %x\n",
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL));
 8000ab8:	01400384 	movi	r5,14
 8000abc:	e13ffe17 	ldw	r4,-8(fp)
 8000ac0:	800343c0 	call	800343c <SGTL5000_Reg_Rd>
  printf("CHIP_ANA_CTRL register: %x\n",
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_ANA_CTRL));

  // ADC -> I2S out, I2S in -> DAC
  SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL, 0x0000);
  printf("CHIP_ADCDAC_CTRL register: %x\n",
 8000ac4:	10bfffcc 	andi	r2,r2,65535
 8000ac8:	100b883a 	mov	r5,r2
 8000acc:	01020074 	movhi	r4,2049
 8000ad0:	212f3204 	addi	r4,r4,-17208
 8000ad4:	8006d540 	call	8006d54 <printf>
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL));
  printf("CHIP_PAD_STRENGTH register: %x\n",
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_PAD_STRENGTH));
 8000ad8:	01400504 	movi	r5,20
 8000adc:	e13ffe17 	ldw	r4,-8(fp)
 8000ae0:	800343c0 	call	800343c <SGTL5000_Reg_Rd>

  // ADC -> I2S out, I2S in -> DAC
  SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL, 0x0000);
  printf("CHIP_ADCDAC_CTRL register: %x\n",
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL));
  printf("CHIP_PAD_STRENGTH register: %x\n",
 8000ae4:	10bfffcc 	andi	r2,r2,65535
 8000ae8:	100b883a 	mov	r5,r2
 8000aec:	01020074 	movhi	r4,2049
 8000af0:	212f3a04 	addi	r4,r4,-17176
 8000af4:	8006d540 	call	8006d54 <printf>
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_PAD_STRENGTH));
}
 8000af8:	e037883a 	mov	sp,fp
 8000afc:	dfc00117 	ldw	ra,4(sp)
 8000b00:	df000017 	ldw	fp,0(sp)
 8000b04:	dec00204 	addi	sp,sp,8
 8000b08:	f800283a 	ret

08000b0c <key_detect>:
bool has_dashed = false;
int berry_tot = 0;
int death_tot = 0;

void key_detect(BOOT_KBD_REPORT kbdbuf)
{
 8000b0c:	defffb04 	addi	sp,sp,-20
 8000b10:	df000415 	stw	fp,16(sp)
 8000b14:	df000404 	addi	fp,sp,16
 8000b18:	e13ffe15 	stw	r4,-8(fp)
 8000b1c:	e17fff15 	stw	r5,-4(fp)
  for (int j = 0; j < 6; j++)
 8000b20:	e03ffc15 	stw	zero,-16(fp)
 8000b24:	00000706 	br	8000b44 <key_detect+0x38>
  {
    key_pressed[j] = false;
 8000b28:	e0fffc17 	ldw	r3,-16(fp)
 8000b2c:	d0abfc04 	addi	r2,gp,-20496
 8000b30:	1885883a 	add	r2,r3,r2
 8000b34:	10000005 	stb	zero,0(r2)
int berry_tot = 0;
int death_tot = 0;

void key_detect(BOOT_KBD_REPORT kbdbuf)
{
  for (int j = 0; j < 6; j++)
 8000b38:	e0bffc17 	ldw	r2,-16(fp)
 8000b3c:	10800044 	addi	r2,r2,1
 8000b40:	e0bffc15 	stw	r2,-16(fp)
 8000b44:	e0bffc17 	ldw	r2,-16(fp)
 8000b48:	10800190 	cmplti	r2,r2,6
 8000b4c:	103ff61e 	bne	r2,zero,8000b28 <__alt_data_end+0xfc000b28>
  {
    key_pressed[j] = false;
  }

  for (int i = 0; i < 6; i++)
 8000b50:	e03ffd15 	stw	zero,-12(fp)
 8000b54:	00003e06 	br	8000c50 <key_detect+0x144>
  {
    if (kbdbuf.keycode[i] == 26)
 8000b58:	e0fffe84 	addi	r3,fp,-6
 8000b5c:	e0bffd17 	ldw	r2,-12(fp)
 8000b60:	1885883a 	add	r2,r3,r2
 8000b64:	10800003 	ldbu	r2,0(r2)
 8000b68:	10803fcc 	andi	r2,r2,255
 8000b6c:	10800698 	cmpnei	r2,r2,26
 8000b70:	1000031e 	bne	r2,zero,8000b80 <key_detect+0x74>
      key_pressed[0] = true;
 8000b74:	00800044 	movi	r2,1
 8000b78:	d0abfc05 	stb	r2,-20496(gp)
 8000b7c:	00003106 	br	8000c44 <key_detect+0x138>
    else if (kbdbuf.keycode[i] == 4)
 8000b80:	e0fffe84 	addi	r3,fp,-6
 8000b84:	e0bffd17 	ldw	r2,-12(fp)
 8000b88:	1885883a 	add	r2,r3,r2
 8000b8c:	10800003 	ldbu	r2,0(r2)
 8000b90:	10803fcc 	andi	r2,r2,255
 8000b94:	10800118 	cmpnei	r2,r2,4
 8000b98:	1000031e 	bne	r2,zero,8000ba8 <key_detect+0x9c>
      key_pressed[1] = true;
 8000b9c:	00800044 	movi	r2,1
 8000ba0:	d0abfc45 	stb	r2,-20495(gp)
 8000ba4:	00002706 	br	8000c44 <key_detect+0x138>
    else if (kbdbuf.keycode[i] == 22)
 8000ba8:	e0fffe84 	addi	r3,fp,-6
 8000bac:	e0bffd17 	ldw	r2,-12(fp)
 8000bb0:	1885883a 	add	r2,r3,r2
 8000bb4:	10800003 	ldbu	r2,0(r2)
 8000bb8:	10803fcc 	andi	r2,r2,255
 8000bbc:	10800598 	cmpnei	r2,r2,22
 8000bc0:	1000031e 	bne	r2,zero,8000bd0 <key_detect+0xc4>
      key_pressed[2] = true;
 8000bc4:	00800044 	movi	r2,1
 8000bc8:	d0abfc85 	stb	r2,-20494(gp)
 8000bcc:	00001d06 	br	8000c44 <key_detect+0x138>
    else if (kbdbuf.keycode[i] == 7)
 8000bd0:	e0fffe84 	addi	r3,fp,-6
 8000bd4:	e0bffd17 	ldw	r2,-12(fp)
 8000bd8:	1885883a 	add	r2,r3,r2
 8000bdc:	10800003 	ldbu	r2,0(r2)
 8000be0:	10803fcc 	andi	r2,r2,255
 8000be4:	108001d8 	cmpnei	r2,r2,7
 8000be8:	1000031e 	bne	r2,zero,8000bf8 <key_detect+0xec>
      key_pressed[3] = true;
 8000bec:	00800044 	movi	r2,1
 8000bf0:	d0abfcc5 	stb	r2,-20493(gp)
 8000bf4:	00001306 	br	8000c44 <key_detect+0x138>
    else if (kbdbuf.keycode[i] == 44)
 8000bf8:	e0fffe84 	addi	r3,fp,-6
 8000bfc:	e0bffd17 	ldw	r2,-12(fp)
 8000c00:	1885883a 	add	r2,r3,r2
 8000c04:	10800003 	ldbu	r2,0(r2)
 8000c08:	10803fcc 	andi	r2,r2,255
 8000c0c:	10800b18 	cmpnei	r2,r2,44
 8000c10:	1000031e 	bne	r2,zero,8000c20 <key_detect+0x114>
      key_pressed[4] = true;
 8000c14:	00800044 	movi	r2,1
 8000c18:	d0abfd05 	stb	r2,-20492(gp)
 8000c1c:	00000906 	br	8000c44 <key_detect+0x138>
    else if (kbdbuf.keycode[i] == 14)
 8000c20:	e0fffe84 	addi	r3,fp,-6
 8000c24:	e0bffd17 	ldw	r2,-12(fp)
 8000c28:	1885883a 	add	r2,r3,r2
 8000c2c:	10800003 	ldbu	r2,0(r2)
 8000c30:	10803fcc 	andi	r2,r2,255
 8000c34:	10800398 	cmpnei	r2,r2,14
 8000c38:	1000021e 	bne	r2,zero,8000c44 <key_detect+0x138>
      key_pressed[5] = true;
 8000c3c:	00800044 	movi	r2,1
 8000c40:	d0abfd45 	stb	r2,-20491(gp)
  for (int j = 0; j < 6; j++)
  {
    key_pressed[j] = false;
  }

  for (int i = 0; i < 6; i++)
 8000c44:	e0bffd17 	ldw	r2,-12(fp)
 8000c48:	10800044 	addi	r2,r2,1
 8000c4c:	e0bffd15 	stw	r2,-12(fp)
 8000c50:	e0bffd17 	ldw	r2,-12(fp)
 8000c54:	10800190 	cmplti	r2,r2,6
 8000c58:	103fbf1e 	bne	r2,zero,8000b58 <__alt_data_end+0xfc000b58>
    else if (kbdbuf.keycode[i] == 44)
      key_pressed[4] = true;
    else if (kbdbuf.keycode[i] == 14)
      key_pressed[5] = true;
  }
}
 8000c5c:	0001883a 	nop
 8000c60:	e037883a 	mov	sp,fp
 8000c64:	df000017 	ldw	fp,0(sp)
 8000c68:	dec00104 	addi	sp,sp,4
 8000c6c:	f800283a 	ret

08000c70 <collision_fill>:
  int wall_dir; // 0: no wall jump; 1: wall is on the righ; -1: wall is on the
                // left
};

void collision_fill(int level)
{
 8000c70:	defff504 	addi	sp,sp,-44
 8000c74:	df000a15 	stw	fp,40(sp)
 8000c78:	df000a04 	addi	fp,sp,40
 8000c7c:	e13fff15 	stw	r4,-4(fp)
  for (int i = 0; i < 64; i++)
 8000c80:	e03ff615 	stw	zero,-40(fp)
 8000c84:	00001506 	br	8000cdc <collision_fill+0x6c>
  {
    for (int j = 0; j < 64; j++)
 8000c88:	e03ff715 	stw	zero,-36(fp)
 8000c8c:	00000d06 	br	8000cc4 <collision_fill+0x54>
    {
      collision[i][j] = 0;
 8000c90:	00820074 	movhi	r2,2049
 8000c94:	108fc304 	addi	r2,r2,16140
 8000c98:	e0fff617 	ldw	r3,-40(fp)
 8000c9c:	180891ba 	slli	r4,r3,6
 8000ca0:	e0fff717 	ldw	r3,-36(fp)
 8000ca4:	20c7883a 	add	r3,r4,r3
 8000ca8:	18c7883a 	add	r3,r3,r3
 8000cac:	18c7883a 	add	r3,r3,r3
 8000cb0:	10c5883a 	add	r2,r2,r3
 8000cb4:	10000015 	stw	zero,0(r2)

void collision_fill(int level)
{
  for (int i = 0; i < 64; i++)
  {
    for (int j = 0; j < 64; j++)
 8000cb8:	e0bff717 	ldw	r2,-36(fp)
 8000cbc:	10800044 	addi	r2,r2,1
 8000cc0:	e0bff715 	stw	r2,-36(fp)
 8000cc4:	e0bff717 	ldw	r2,-36(fp)
 8000cc8:	10801010 	cmplti	r2,r2,64
 8000ccc:	103ff01e 	bne	r2,zero,8000c90 <__alt_data_end+0xfc000c90>
                // left
};

void collision_fill(int level)
{
  for (int i = 0; i < 64; i++)
 8000cd0:	e0bff617 	ldw	r2,-40(fp)
 8000cd4:	10800044 	addi	r2,r2,1
 8000cd8:	e0bff615 	stw	r2,-40(fp)
 8000cdc:	e0bff617 	ldw	r2,-40(fp)
 8000ce0:	10801010 	cmplti	r2,r2,64
 8000ce4:	103fe81e 	bne	r2,zero,8000c88 <__alt_data_end+0xfc000c88>
    {
      collision[i][j] = 0;
    }
  }

  for (int i = 0; i < 16; i++)
 8000ce8:	e03ff815 	stw	zero,-32(fp)
 8000cec:	00004e06 	br	8000e28 <collision_fill+0x1b8>
  {
    for (int j = 0; j < 16; j++)
 8000cf0:	e03ff915 	stw	zero,-28(fp)
 8000cf4:	00004606 	br	8000e10 <collision_fill+0x1a0>
    {
      int spr_index = map[level][i][j];
 8000cf8:	00820074 	movhi	r2,2049
 8000cfc:	10afdf04 	addi	r2,r2,-16516
 8000d00:	e0ffff17 	ldw	r3,-4(fp)
 8000d04:	1808913a 	slli	r4,r3,4
 8000d08:	e0fff817 	ldw	r3,-32(fp)
 8000d0c:	20c7883a 	add	r3,r4,r3
 8000d10:	1808913a 	slli	r4,r3,4
 8000d14:	e0fff917 	ldw	r3,-28(fp)
 8000d18:	20c7883a 	add	r3,r4,r3
 8000d1c:	18c7883a 	add	r3,r3,r3
 8000d20:	18c7883a 	add	r3,r3,r3
 8000d24:	10c5883a 	add	r2,r2,r3
 8000d28:	10800017 	ldw	r2,0(r2)
 8000d2c:	e0bffc15 	stw	r2,-16(fp)
      int col0 = j * 4;
 8000d30:	e0bff917 	ldw	r2,-28(fp)
 8000d34:	1085883a 	add	r2,r2,r2
 8000d38:	1085883a 	add	r2,r2,r2
 8000d3c:	e0bffd15 	stw	r2,-12(fp)
      int row0 = i * 4;
 8000d40:	e0bff817 	ldw	r2,-32(fp)
 8000d44:	1085883a 	add	r2,r2,r2
 8000d48:	1085883a 	add	r2,r2,r2
 8000d4c:	e0bffe15 	stw	r2,-8(fp)
      for (int row = 0; row < 4; row++)
 8000d50:	e03ffa15 	stw	zero,-24(fp)
 8000d54:	00002806 	br	8000df8 <collision_fill+0x188>
      {
        for (int col = 0; col < 4; col++)
 8000d58:	e03ffb15 	stw	zero,-20(fp)
 8000d5c:	00002006 	br	8000de0 <collision_fill+0x170>
        {
          collision[row0 + row][col0 + col] = collide_box[spr_index][row][col];
 8000d60:	e0fffe17 	ldw	r3,-8(fp)
 8000d64:	e0bffa17 	ldw	r2,-24(fp)
 8000d68:	188d883a 	add	r6,r3,r2
 8000d6c:	e0fffd17 	ldw	r3,-12(fp)
 8000d70:	e0bffb17 	ldw	r2,-20(fp)
 8000d74:	188b883a 	add	r5,r3,r2
 8000d78:	00820074 	movhi	r2,2049
 8000d7c:	1087c304 	addi	r2,r2,7948
 8000d80:	e0fffc17 	ldw	r3,-16(fp)
 8000d84:	18c7883a 	add	r3,r3,r3
 8000d88:	18c9883a 	add	r4,r3,r3
 8000d8c:	e0fffa17 	ldw	r3,-24(fp)
 8000d90:	20c7883a 	add	r3,r4,r3
 8000d94:	18c7883a 	add	r3,r3,r3
 8000d98:	18c9883a 	add	r4,r3,r3
 8000d9c:	e0fffb17 	ldw	r3,-20(fp)
 8000da0:	20c7883a 	add	r3,r4,r3
 8000da4:	18c7883a 	add	r3,r3,r3
 8000da8:	18c7883a 	add	r3,r3,r3
 8000dac:	10c5883a 	add	r2,r2,r3
 8000db0:	11000017 	ldw	r4,0(r2)
 8000db4:	00820074 	movhi	r2,2049
 8000db8:	108fc304 	addi	r2,r2,16140
 8000dbc:	300691ba 	slli	r3,r6,6
 8000dc0:	1947883a 	add	r3,r3,r5
 8000dc4:	18c7883a 	add	r3,r3,r3
 8000dc8:	18c7883a 	add	r3,r3,r3
 8000dcc:	10c5883a 	add	r2,r2,r3
 8000dd0:	11000015 	stw	r4,0(r2)
      int spr_index = map[level][i][j];
      int col0 = j * 4;
      int row0 = i * 4;
      for (int row = 0; row < 4; row++)
      {
        for (int col = 0; col < 4; col++)
 8000dd4:	e0bffb17 	ldw	r2,-20(fp)
 8000dd8:	10800044 	addi	r2,r2,1
 8000ddc:	e0bffb15 	stw	r2,-20(fp)
 8000de0:	e0bffb17 	ldw	r2,-20(fp)
 8000de4:	10800110 	cmplti	r2,r2,4
 8000de8:	103fdd1e 	bne	r2,zero,8000d60 <__alt_data_end+0xfc000d60>
    for (int j = 0; j < 16; j++)
    {
      int spr_index = map[level][i][j];
      int col0 = j * 4;
      int row0 = i * 4;
      for (int row = 0; row < 4; row++)
 8000dec:	e0bffa17 	ldw	r2,-24(fp)
 8000df0:	10800044 	addi	r2,r2,1
 8000df4:	e0bffa15 	stw	r2,-24(fp)
 8000df8:	e0bffa17 	ldw	r2,-24(fp)
 8000dfc:	10800110 	cmplti	r2,r2,4
 8000e00:	103fd51e 	bne	r2,zero,8000d58 <__alt_data_end+0xfc000d58>
    }
  }

  for (int i = 0; i < 16; i++)
  {
    for (int j = 0; j < 16; j++)
 8000e04:	e0bff917 	ldw	r2,-28(fp)
 8000e08:	10800044 	addi	r2,r2,1
 8000e0c:	e0bff915 	stw	r2,-28(fp)
 8000e10:	e0bff917 	ldw	r2,-28(fp)
 8000e14:	10800410 	cmplti	r2,r2,16
 8000e18:	103fb71e 	bne	r2,zero,8000cf8 <__alt_data_end+0xfc000cf8>
    {
      collision[i][j] = 0;
    }
  }

  for (int i = 0; i < 16; i++)
 8000e1c:	e0bff817 	ldw	r2,-32(fp)
 8000e20:	10800044 	addi	r2,r2,1
 8000e24:	e0bff815 	stw	r2,-32(fp)
 8000e28:	e0bff817 	ldw	r2,-32(fp)
 8000e2c:	10800410 	cmplti	r2,r2,16
 8000e30:	103faf1e 	bne	r2,zero,8000cf0 <__alt_data_end+0xfc000cf0>
          collision[row0 + row][col0 + col] = collide_box[spr_index][row][col];
        }
      }
    }
  }
}
 8000e34:	0001883a 	nop
 8000e38:	e037883a 	mov	sp,fp
 8000e3c:	df000017 	ldw	fp,0(sp)
 8000e40:	dec00104 	addi	sp,sp,4
 8000e44:	f800283a 	ret

08000e48 <is_solid>:

int is_solid(int x0, int y0)
{
 8000e48:	defff604 	addi	sp,sp,-40
 8000e4c:	df000915 	stw	fp,36(sp)
 8000e50:	df000904 	addi	fp,sp,36
 8000e54:	e13ffe15 	stw	r4,-8(fp)
 8000e58:	e17fff15 	stw	r5,-4(fp)
  int collide_xl = (x0 + 2) / 4;
 8000e5c:	e0bffe17 	ldw	r2,-8(fp)
 8000e60:	10800084 	addi	r2,r2,2
 8000e64:	1000010e 	bge	r2,zero,8000e6c <is_solid+0x24>
 8000e68:	108000c4 	addi	r2,r2,3
 8000e6c:	1005d0ba 	srai	r2,r2,2
 8000e70:	e0bff715 	stw	r2,-36(fp)
  if (collide_xl >= 63)
 8000e74:	e0bff717 	ldw	r2,-36(fp)
 8000e78:	10800fd0 	cmplti	r2,r2,63
 8000e7c:	1000021e 	bne	r2,zero,8000e88 <is_solid+0x40>
    collide_xl = 63;
 8000e80:	00800fc4 	movi	r2,63
 8000e84:	e0bff715 	stw	r2,-36(fp)
  int collide_xh = (x0 + 13) / 4;
 8000e88:	e0bffe17 	ldw	r2,-8(fp)
 8000e8c:	10800344 	addi	r2,r2,13
 8000e90:	1000010e 	bge	r2,zero,8000e98 <is_solid+0x50>
 8000e94:	108000c4 	addi	r2,r2,3
 8000e98:	1005d0ba 	srai	r2,r2,2
 8000e9c:	e0bff815 	stw	r2,-32(fp)
  if (collide_xh >= 63)
 8000ea0:	e0bff817 	ldw	r2,-32(fp)
 8000ea4:	10800fd0 	cmplti	r2,r2,63
 8000ea8:	1000021e 	bne	r2,zero,8000eb4 <is_solid+0x6c>
    collide_xh = 63;
 8000eac:	00800fc4 	movi	r2,63
 8000eb0:	e0bff815 	stw	r2,-32(fp)
  int collide_yl = (y0 + 6) / 4;
 8000eb4:	e0bfff17 	ldw	r2,-4(fp)
 8000eb8:	10800184 	addi	r2,r2,6
 8000ebc:	1000010e 	bge	r2,zero,8000ec4 <is_solid+0x7c>
 8000ec0:	108000c4 	addi	r2,r2,3
 8000ec4:	1005d0ba 	srai	r2,r2,2
 8000ec8:	e0bff915 	stw	r2,-28(fp)
  if (collide_yl >= 63)
 8000ecc:	e0bff917 	ldw	r2,-28(fp)
 8000ed0:	10800fd0 	cmplti	r2,r2,63
 8000ed4:	1000021e 	bne	r2,zero,8000ee0 <is_solid+0x98>
    collide_yl = 63;
 8000ed8:	00800fc4 	movi	r2,63
 8000edc:	e0bff915 	stw	r2,-28(fp)
  int collide_yh = (y0 + 15) / 4;
 8000ee0:	e0bfff17 	ldw	r2,-4(fp)
 8000ee4:	108003c4 	addi	r2,r2,15
 8000ee8:	1000010e 	bge	r2,zero,8000ef0 <is_solid+0xa8>
 8000eec:	108000c4 	addi	r2,r2,3
 8000ef0:	1005d0ba 	srai	r2,r2,2
 8000ef4:	e0bffa15 	stw	r2,-24(fp)
  if (collide_yh >= 63)
 8000ef8:	e0bffa17 	ldw	r2,-24(fp)
 8000efc:	10800fd0 	cmplti	r2,r2,63
 8000f00:	1000021e 	bne	r2,zero,8000f0c <is_solid+0xc4>
    collide_yh = 63;
 8000f04:	00800fc4 	movi	r2,63
 8000f08:	e0bffa15 	stw	r2,-24(fp)
  int result = 0;
 8000f0c:	e03ffb15 	stw	zero,-20(fp)
  for (int i = collide_yl; i < collide_yh + 1; i++)
 8000f10:	e0bff917 	ldw	r2,-28(fp)
 8000f14:	e0bffc15 	stw	r2,-16(fp)
 8000f18:	00004906 	br	8001040 <is_solid+0x1f8>
  {
    for (int j = collide_xl; j < collide_xh + 1; j++)
 8000f1c:	e0bff717 	ldw	r2,-36(fp)
 8000f20:	e0bffd15 	stw	r2,-12(fp)
 8000f24:	00003f06 	br	8001024 <is_solid+0x1dc>
    {
      if (collision[i][j] == -1)
 8000f28:	00820074 	movhi	r2,2049
 8000f2c:	108fc304 	addi	r2,r2,16140
 8000f30:	e0fffc17 	ldw	r3,-16(fp)
 8000f34:	180891ba 	slli	r4,r3,6
 8000f38:	e0fffd17 	ldw	r3,-12(fp)
 8000f3c:	20c7883a 	add	r3,r4,r3
 8000f40:	18c7883a 	add	r3,r3,r3
 8000f44:	18c7883a 	add	r3,r3,r3
 8000f48:	10c5883a 	add	r2,r2,r3
 8000f4c:	10800017 	ldw	r2,0(r2)
 8000f50:	10bfffd8 	cmpnei	r2,r2,-1
 8000f54:	1000031e 	bne	r2,zero,8000f64 <is_solid+0x11c>
      {
        result = -1;
 8000f58:	00bfffc4 	movi	r2,-1
 8000f5c:	e0bffb15 	stw	r2,-20(fp)
        break;
 8000f60:	00003406 	br	8001034 <is_solid+0x1ec>
      }
      else if (collision[i][j] == 2)
 8000f64:	00820074 	movhi	r2,2049
 8000f68:	108fc304 	addi	r2,r2,16140
 8000f6c:	e0fffc17 	ldw	r3,-16(fp)
 8000f70:	180891ba 	slli	r4,r3,6
 8000f74:	e0fffd17 	ldw	r3,-12(fp)
 8000f78:	20c7883a 	add	r3,r4,r3
 8000f7c:	18c7883a 	add	r3,r3,r3
 8000f80:	18c7883a 	add	r3,r3,r3
 8000f84:	10c5883a 	add	r2,r2,r3
 8000f88:	10800017 	ldw	r2,0(r2)
 8000f8c:	10800098 	cmpnei	r2,r2,2
 8000f90:	1000031e 	bne	r2,zero,8000fa0 <is_solid+0x158>
      {
        result = 2;
 8000f94:	00800084 	movi	r2,2
 8000f98:	e0bffb15 	stw	r2,-20(fp)
        break;
 8000f9c:	00002506 	br	8001034 <is_solid+0x1ec>
      }
      else if (collision[i][j] == 1)
 8000fa0:	00820074 	movhi	r2,2049
 8000fa4:	108fc304 	addi	r2,r2,16140
 8000fa8:	e0fffc17 	ldw	r3,-16(fp)
 8000fac:	180891ba 	slli	r4,r3,6
 8000fb0:	e0fffd17 	ldw	r3,-12(fp)
 8000fb4:	20c7883a 	add	r3,r4,r3
 8000fb8:	18c7883a 	add	r3,r3,r3
 8000fbc:	18c7883a 	add	r3,r3,r3
 8000fc0:	10c5883a 	add	r2,r2,r3
 8000fc4:	10800017 	ldw	r2,0(r2)
 8000fc8:	10800058 	cmpnei	r2,r2,1
 8000fcc:	1000031e 	bne	r2,zero,8000fdc <is_solid+0x194>
      {
        result = 1;
 8000fd0:	00800044 	movi	r2,1
 8000fd4:	e0bffb15 	stw	r2,-20(fp)
        break;
 8000fd8:	00001606 	br	8001034 <is_solid+0x1ec>
      }
      else if (collision[i][j] == 4) // green orb, max dash = 2
 8000fdc:	00820074 	movhi	r2,2049
 8000fe0:	108fc304 	addi	r2,r2,16140
 8000fe4:	e0fffc17 	ldw	r3,-16(fp)
 8000fe8:	180891ba 	slli	r4,r3,6
 8000fec:	e0fffd17 	ldw	r3,-12(fp)
 8000ff0:	20c7883a 	add	r3,r4,r3
 8000ff4:	18c7883a 	add	r3,r3,r3
 8000ff8:	18c7883a 	add	r3,r3,r3
 8000ffc:	10c5883a 	add	r2,r2,r3
 8001000:	10800017 	ldw	r2,0(r2)
 8001004:	10800118 	cmpnei	r2,r2,4
 8001008:	1000031e 	bne	r2,zero,8001018 <is_solid+0x1d0>
      {
        result = 4;
 800100c:	00800104 	movi	r2,4
 8001010:	e0bffb15 	stw	r2,-20(fp)
        break;
 8001014:	00000706 	br	8001034 <is_solid+0x1ec>
  if (collide_yh >= 63)
    collide_yh = 63;
  int result = 0;
  for (int i = collide_yl; i < collide_yh + 1; i++)
  {
    for (int j = collide_xl; j < collide_xh + 1; j++)
 8001018:	e0bffd17 	ldw	r2,-12(fp)
 800101c:	10800044 	addi	r2,r2,1
 8001020:	e0bffd15 	stw	r2,-12(fp)
 8001024:	e0bff817 	ldw	r2,-32(fp)
 8001028:	10800044 	addi	r2,r2,1
 800102c:	e0fffd17 	ldw	r3,-12(fp)
 8001030:	18bfbd16 	blt	r3,r2,8000f28 <__alt_data_end+0xfc000f28>
    collide_yl = 63;
  int collide_yh = (y0 + 15) / 4;
  if (collide_yh >= 63)
    collide_yh = 63;
  int result = 0;
  for (int i = collide_yl; i < collide_yh + 1; i++)
 8001034:	e0bffc17 	ldw	r2,-16(fp)
 8001038:	10800044 	addi	r2,r2,1
 800103c:	e0bffc15 	stw	r2,-16(fp)
 8001040:	e0bffa17 	ldw	r2,-24(fp)
 8001044:	10800044 	addi	r2,r2,1
 8001048:	e0fffc17 	ldw	r3,-16(fp)
 800104c:	18bfb316 	blt	r3,r2,8000f1c <__alt_data_end+0xfc000f1c>
        result = 4;
        break;
      }
    }
  }
  return result;
 8001050:	e0bffb17 	ldw	r2,-20(fp)
}
 8001054:	e037883a 	mov	sp,fp
 8001058:	df000017 	ldw	fp,0(sp)
 800105c:	dec00104 	addi	sp,sp,4
 8001060:	f800283a 	ret

08001064 <clear_active>:

void clear_active(int x0, int y0)
{
 8001064:	defff204 	addi	sp,sp,-56
 8001068:	dfc00d15 	stw	ra,52(sp)
 800106c:	df000c15 	stw	fp,48(sp)
 8001070:	df000c04 	addi	fp,sp,48
 8001074:	e13ffe15 	stw	r4,-8(fp)
 8001078:	e17fff15 	stw	r5,-4(fp)
  int collide_xl = (x0 + 2) / 4;
 800107c:	e0bffe17 	ldw	r2,-8(fp)
 8001080:	10800084 	addi	r2,r2,2
 8001084:	1000010e 	bge	r2,zero,800108c <clear_active+0x28>
 8001088:	108000c4 	addi	r2,r2,3
 800108c:	1005d0ba 	srai	r2,r2,2
 8001090:	e0bff415 	stw	r2,-48(fp)
  if (collide_xl >= 63)
 8001094:	e0bff417 	ldw	r2,-48(fp)
 8001098:	10800fd0 	cmplti	r2,r2,63
 800109c:	1000021e 	bne	r2,zero,80010a8 <clear_active+0x44>
    collide_xl = 63;
 80010a0:	00800fc4 	movi	r2,63
 80010a4:	e0bff415 	stw	r2,-48(fp)
  int collide_xh = (x0 + 13) / 4;
 80010a8:	e0bffe17 	ldw	r2,-8(fp)
 80010ac:	10800344 	addi	r2,r2,13
 80010b0:	1000010e 	bge	r2,zero,80010b8 <clear_active+0x54>
 80010b4:	108000c4 	addi	r2,r2,3
 80010b8:	1005d0ba 	srai	r2,r2,2
 80010bc:	e0bff515 	stw	r2,-44(fp)
  if (collide_xh >= 63)
 80010c0:	e0bff517 	ldw	r2,-44(fp)
 80010c4:	10800fd0 	cmplti	r2,r2,63
 80010c8:	1000021e 	bne	r2,zero,80010d4 <clear_active+0x70>
    collide_xh = 63;
 80010cc:	00800fc4 	movi	r2,63
 80010d0:	e0bff515 	stw	r2,-44(fp)
  int collide_yl = (y0 + 6) / 4;
 80010d4:	e0bfff17 	ldw	r2,-4(fp)
 80010d8:	10800184 	addi	r2,r2,6
 80010dc:	1000010e 	bge	r2,zero,80010e4 <clear_active+0x80>
 80010e0:	108000c4 	addi	r2,r2,3
 80010e4:	1005d0ba 	srai	r2,r2,2
 80010e8:	e0bff615 	stw	r2,-40(fp)
  if (collide_yl >= 63)
 80010ec:	e0bff617 	ldw	r2,-40(fp)
 80010f0:	10800fd0 	cmplti	r2,r2,63
 80010f4:	1000021e 	bne	r2,zero,8001100 <clear_active+0x9c>
    collide_yl = 63;
 80010f8:	00800fc4 	movi	r2,63
 80010fc:	e0bff615 	stw	r2,-40(fp)
  int collide_yh = (y0 + 15) / 4;
 8001100:	e0bfff17 	ldw	r2,-4(fp)
 8001104:	108003c4 	addi	r2,r2,15
 8001108:	1000010e 	bge	r2,zero,8001110 <clear_active+0xac>
 800110c:	108000c4 	addi	r2,r2,3
 8001110:	1005d0ba 	srai	r2,r2,2
 8001114:	e0bff715 	stw	r2,-36(fp)
  if (collide_yh >= 63)
 8001118:	e0bff717 	ldw	r2,-36(fp)
 800111c:	10800fd0 	cmplti	r2,r2,63
 8001120:	1000021e 	bne	r2,zero,800112c <clear_active+0xc8>
    collide_yh = 63;
 8001124:	00800fc4 	movi	r2,63
 8001128:	e0bff715 	stw	r2,-36(fp)
  for (int i = collide_yl; i < collide_yh + 1; i++)
 800112c:	e0bff617 	ldw	r2,-40(fp)
 8001130:	e0bff815 	stw	r2,-32(fp)
 8001134:	00005106 	br	800127c <clear_active+0x218>
  {
    for (int j = collide_xl; j < collide_xh + 1; j++)
 8001138:	e0bff417 	ldw	r2,-48(fp)
 800113c:	e0bff915 	stw	r2,-28(fp)
 8001140:	00004706 	br	8001260 <clear_active+0x1fc>
    {
      if (collision[i][j] == 4)
 8001144:	00820074 	movhi	r2,2049
 8001148:	108fc304 	addi	r2,r2,16140
 800114c:	e0fff817 	ldw	r3,-32(fp)
 8001150:	180891ba 	slli	r4,r3,6
 8001154:	e0fff917 	ldw	r3,-28(fp)
 8001158:	20c7883a 	add	r3,r4,r3
 800115c:	18c7883a 	add	r3,r3,r3
 8001160:	18c7883a 	add	r3,r3,r3
 8001164:	10c5883a 	add	r2,r2,r3
 8001168:	10800017 	ldw	r2,0(r2)
 800116c:	10800118 	cmpnei	r2,r2,4
 8001170:	1000381e 	bne	r2,zero,8001254 <clear_active+0x1f0>
      {
        int row = i / 4;
 8001174:	e0bff817 	ldw	r2,-32(fp)
 8001178:	1000010e 	bge	r2,zero,8001180 <clear_active+0x11c>
 800117c:	108000c4 	addi	r2,r2,3
 8001180:	1005d0ba 	srai	r2,r2,2
 8001184:	e0bffc15 	stw	r2,-16(fp)
        int col = j / 4;
 8001188:	e0bff917 	ldw	r2,-28(fp)
 800118c:	1000010e 	bge	r2,zero,8001194 <clear_active+0x130>
 8001190:	108000c4 	addi	r2,r2,3
 8001194:	1005d0ba 	srai	r2,r2,2
 8001198:	e0bffd15 	stw	r2,-12(fp)
        setMAP(row * 16 + col, 0);
 800119c:	e0bffc17 	ldw	r2,-16(fp)
 80011a0:	1004913a 	slli	r2,r2,4
 80011a4:	1007883a 	mov	r3,r2
 80011a8:	e0bffd17 	ldw	r2,-12(fp)
 80011ac:	1885883a 	add	r2,r3,r2
 80011b0:	10803fcc 	andi	r2,r2,255
 80011b4:	000b883a 	mov	r5,zero
 80011b8:	1009883a 	mov	r4,r2
 80011bc:	80033a80 	call	80033a8 <setMAP>
        for (int i = 0; i < 4; i++)
 80011c0:	e03ffa15 	stw	zero,-24(fp)
 80011c4:	00001f06 	br	8001244 <clear_active+0x1e0>
        {
          for (int j = 0; j < 4; j++)
 80011c8:	e03ffb15 	stw	zero,-20(fp)
 80011cc:	00001706 	br	800122c <clear_active+0x1c8>
          {
            collision[row * 4 + i][col * 4 + j] = 0;
 80011d0:	e0bffc17 	ldw	r2,-16(fp)
 80011d4:	1085883a 	add	r2,r2,r2
 80011d8:	1085883a 	add	r2,r2,r2
 80011dc:	1007883a 	mov	r3,r2
 80011e0:	e0bffa17 	ldw	r2,-24(fp)
 80011e4:	1889883a 	add	r4,r3,r2
 80011e8:	e0bffd17 	ldw	r2,-12(fp)
 80011ec:	1085883a 	add	r2,r2,r2
 80011f0:	1085883a 	add	r2,r2,r2
 80011f4:	1007883a 	mov	r3,r2
 80011f8:	e0bffb17 	ldw	r2,-20(fp)
 80011fc:	1887883a 	add	r3,r3,r2
 8001200:	00820074 	movhi	r2,2049
 8001204:	108fc304 	addi	r2,r2,16140
 8001208:	200891ba 	slli	r4,r4,6
 800120c:	20c7883a 	add	r3,r4,r3
 8001210:	18c7883a 	add	r3,r3,r3
 8001214:	18c7883a 	add	r3,r3,r3
 8001218:	10c5883a 	add	r2,r2,r3
 800121c:	10000015 	stw	zero,0(r2)
        int row = i / 4;
        int col = j / 4;
        setMAP(row * 16 + col, 0);
        for (int i = 0; i < 4; i++)
        {
          for (int j = 0; j < 4; j++)
 8001220:	e0bffb17 	ldw	r2,-20(fp)
 8001224:	10800044 	addi	r2,r2,1
 8001228:	e0bffb15 	stw	r2,-20(fp)
 800122c:	e0bffb17 	ldw	r2,-20(fp)
 8001230:	10800110 	cmplti	r2,r2,4
 8001234:	103fe61e 	bne	r2,zero,80011d0 <__alt_data_end+0xfc0011d0>
      if (collision[i][j] == 4)
      {
        int row = i / 4;
        int col = j / 4;
        setMAP(row * 16 + col, 0);
        for (int i = 0; i < 4; i++)
 8001238:	e0bffa17 	ldw	r2,-24(fp)
 800123c:	10800044 	addi	r2,r2,1
 8001240:	e0bffa15 	stw	r2,-24(fp)
 8001244:	e0bffa17 	ldw	r2,-24(fp)
 8001248:	10800110 	cmplti	r2,r2,4
 800124c:	103fde1e 	bne	r2,zero,80011c8 <__alt_data_end+0xfc0011c8>
          for (int j = 0; j < 4; j++)
          {
            collision[row * 4 + i][col * 4 + j] = 0;
          }
        }
        break;
 8001250:	00000706 	br	8001270 <clear_active+0x20c>
  int collide_yh = (y0 + 15) / 4;
  if (collide_yh >= 63)
    collide_yh = 63;
  for (int i = collide_yl; i < collide_yh + 1; i++)
  {
    for (int j = collide_xl; j < collide_xh + 1; j++)
 8001254:	e0bff917 	ldw	r2,-28(fp)
 8001258:	10800044 	addi	r2,r2,1
 800125c:	e0bff915 	stw	r2,-28(fp)
 8001260:	e0bff517 	ldw	r2,-44(fp)
 8001264:	10800044 	addi	r2,r2,1
 8001268:	e0fff917 	ldw	r3,-28(fp)
 800126c:	18bfb516 	blt	r3,r2,8001144 <__alt_data_end+0xfc001144>
  if (collide_yl >= 63)
    collide_yl = 63;
  int collide_yh = (y0 + 15) / 4;
  if (collide_yh >= 63)
    collide_yh = 63;
  for (int i = collide_yl; i < collide_yh + 1; i++)
 8001270:	e0bff817 	ldw	r2,-32(fp)
 8001274:	10800044 	addi	r2,r2,1
 8001278:	e0bff815 	stw	r2,-32(fp)
 800127c:	e0bff717 	ldw	r2,-36(fp)
 8001280:	10800044 	addi	r2,r2,1
 8001284:	e0fff817 	ldw	r3,-32(fp)
 8001288:	18bfab16 	blt	r3,r2,8001138 <__alt_data_end+0xfc001138>
        }
        break;
      }
    }
  }
}
 800128c:	0001883a 	nop
 8001290:	e037883a 	mov	sp,fp
 8001294:	dfc00117 	ldw	ra,4(sp)
 8001298:	df000017 	ldw	fp,0(sp)
 800129c:	dec00204 	addi	sp,sp,8
 80012a0:	f800283a 	ret

080012a4 <spd_change>:

int spd_change(int spd, int target, int accel)
{
 80012a4:	defffb04 	addi	sp,sp,-20
 80012a8:	df000415 	stw	fp,16(sp)
 80012ac:	df000404 	addi	fp,sp,16
 80012b0:	e13ffd15 	stw	r4,-12(fp)
 80012b4:	e17ffe15 	stw	r5,-8(fp)
 80012b8:	e1bfff15 	stw	r6,-4(fp)
  if (spd == target)
 80012bc:	e0fffd17 	ldw	r3,-12(fp)
 80012c0:	e0bffe17 	ldw	r2,-8(fp)
 80012c4:	1880021e 	bne	r3,r2,80012d0 <spd_change+0x2c>
  {
    return spd;
 80012c8:	e0bffd17 	ldw	r2,-12(fp)
 80012cc:	00002706 	br	800136c <spd_change+0xc8>
  }
  int speed =
      (abs(spd + accel - target) < abs(spd - accel - target) ? spd + accel
 80012d0:	e0fffd17 	ldw	r3,-12(fp)
 80012d4:	e0bfff17 	ldw	r2,-4(fp)
 80012d8:	1887883a 	add	r3,r3,r2
 80012dc:	e0bffe17 	ldw	r2,-8(fp)
 80012e0:	1885c83a 	sub	r2,r3,r2
 80012e4:	1000010e 	bge	r2,zero,80012ec <spd_change+0x48>
 80012e8:	0085c83a 	sub	r2,zero,r2
 80012ec:	1009883a 	mov	r4,r2
 80012f0:	e0fffd17 	ldw	r3,-12(fp)
 80012f4:	e0bfff17 	ldw	r2,-4(fp)
 80012f8:	1887c83a 	sub	r3,r3,r2
 80012fc:	e0bffe17 	ldw	r2,-8(fp)
 8001300:	1885c83a 	sub	r2,r3,r2
 8001304:	1000010e 	bge	r2,zero,800130c <spd_change+0x68>
 8001308:	0085c83a 	sub	r2,zero,r2
                                                             : spd - accel);
 800130c:	2080040e 	bge	r4,r2,8001320 <spd_change+0x7c>
 8001310:	e0fffd17 	ldw	r3,-12(fp)
 8001314:	e0bfff17 	ldw	r2,-4(fp)
 8001318:	1885883a 	add	r2,r3,r2
 800131c:	00000306 	br	800132c <spd_change+0x88>
 8001320:	e0fffd17 	ldw	r3,-12(fp)
 8001324:	e0bfff17 	ldw	r2,-4(fp)
 8001328:	1885c83a 	sub	r2,r3,r2
{
  if (spd == target)
  {
    return spd;
  }
  int speed =
 800132c:	e0bffc15 	stw	r2,-16(fp)
      (abs(spd + accel - target) < abs(spd - accel - target) ? spd + accel
                                                             : spd - accel);

  if ((spd < target && speed > target) || (spd > target && speed < target))
 8001330:	e0fffd17 	ldw	r3,-12(fp)
 8001334:	e0bffe17 	ldw	r2,-8(fp)
 8001338:	1880030e 	bge	r3,r2,8001348 <spd_change+0xa4>
 800133c:	e0bffc17 	ldw	r2,-16(fp)
 8001340:	e0fffe17 	ldw	r3,-8(fp)
 8001344:	18800616 	blt	r3,r2,8001360 <spd_change+0xbc>
 8001348:	e0bffd17 	ldw	r2,-12(fp)
 800134c:	e0fffe17 	ldw	r3,-8(fp)
 8001350:	1880050e 	bge	r3,r2,8001368 <spd_change+0xc4>
 8001354:	e0fffc17 	ldw	r3,-16(fp)
 8001358:	e0bffe17 	ldw	r2,-8(fp)
 800135c:	1880020e 	bge	r3,r2,8001368 <spd_change+0xc4>
  {
    speed = target;
 8001360:	e0bffe17 	ldw	r2,-8(fp)
 8001364:	e0bffc15 	stw	r2,-16(fp)
  }

  return speed;
 8001368:	e0bffc17 	ldw	r2,-16(fp)
}
 800136c:	e037883a 	mov	sp,fp
 8001370:	df000017 	ldw	fp,0(sp)
 8001374:	dec00104 	addi	sp,sp,4
 8001378:	f800283a 	ret

0800137c <player_init>:

void player_init(struct Player *hero, int x0, int y0)
{
 800137c:	defffc04 	addi	sp,sp,-16
 8001380:	df000315 	stw	fp,12(sp)
 8001384:	df000304 	addi	fp,sp,12
 8001388:	e13ffd15 	stw	r4,-12(fp)
 800138c:	e17ffe15 	stw	r5,-8(fp)
 8001390:	e1bfff15 	stw	r6,-4(fp)
  // basic
  hero->hero_en = true;
 8001394:	e0bffd17 	ldw	r2,-12(fp)
 8001398:	00c00044 	movi	r3,1
 800139c:	10c00845 	stb	r3,33(r2)
  hero->dead = false;
 80013a0:	e0bffd17 	ldw	r2,-12(fp)
 80013a4:	10000005 	stb	zero,0(r2)
  hero->dead2 = false;
 80013a8:	e0bffd17 	ldw	r2,-12(fp)
 80013ac:	10000045 	stb	zero,1(r2)
  hero->x = x0;
 80013b0:	e0bffd17 	ldw	r2,-12(fp)
 80013b4:	e0fffe17 	ldw	r3,-8(fp)
 80013b8:	10c00115 	stw	r3,4(r2)
  hero->y = y0;
 80013bc:	e0bffd17 	ldw	r2,-12(fp)
 80013c0:	e0ffff17 	ldw	r3,-4(fp)
 80013c4:	10c00215 	stw	r3,8(r2)
  hero->spdX = 0;
 80013c8:	e0bffd17 	ldw	r2,-12(fp)
 80013cc:	10000315 	stw	zero,12(r2)
  hero->spdY = 0;
 80013d0:	e0bffd17 	ldw	r2,-12(fp)
 80013d4:	10000415 	stw	zero,16(r2)
  hero->moveX = 0;
 80013d8:	e0bffd17 	ldw	r2,-12(fp)
 80013dc:	10000515 	stw	zero,20(r2)
  hero->moveY = 0;
 80013e0:	e0bffd17 	ldw	r2,-12(fp)
 80013e4:	10000615 	stw	zero,24(r2)
  hero->flipX = 1;
 80013e8:	e0bffd17 	ldw	r2,-12(fp)
 80013ec:	00c00044 	movi	r3,1
 80013f0:	10c00715 	stw	r3,28(r2)
  hero->flip = false;
 80013f4:	e0bffd17 	ldw	r2,-12(fp)
 80013f8:	10000885 	stb	zero,34(r2)

  // player
  hero->hero_index = 1;
 80013fc:	e0bffd17 	ldw	r2,-12(fp)
 8001400:	00c00044 	movi	r3,1
 8001404:	10c00915 	stw	r3,36(r2)
  hero->walk_offset = 0;
 8001408:	e0bffd17 	ldw	r2,-12(fp)
 800140c:	10000b15 	stw	zero,44(r2)
  hero->hair_color = 1;
 8001410:	e0bffd17 	ldw	r2,-12(fp)
 8001414:	00c00044 	movi	r3,1
 8001418:	10c00a15 	stw	r3,40(r2)
  hero->p_jump = false;
 800141c:	e0bffd17 	ldw	r2,-12(fp)
 8001420:	10000c05 	stb	zero,48(r2)
  hero->p_dash = false;
 8001424:	e0bffd17 	ldw	r2,-12(fp)
 8001428:	10000c45 	stb	zero,49(r2)
  hero->grace = 0;
 800142c:	e0bffd17 	ldw	r2,-12(fp)
 8001430:	10000d15 	stw	zero,52(r2)
  hero->jbuffer = 0;
 8001434:	e0bffd17 	ldw	r2,-12(fp)
 8001438:	10000e15 	stw	zero,56(r2)
  hero->dashes = 1;
 800143c:	e0bffd17 	ldw	r2,-12(fp)
 8001440:	00c00044 	movi	r3,1
 8001444:	10c00f15 	stw	r3,60(r2)
  hero->dash_time = 0;
 8001448:	e0bffd17 	ldw	r2,-12(fp)
 800144c:	10001015 	stw	zero,64(r2)
  hero->dash_target_x = 0;
 8001450:	e0bffd17 	ldw	r2,-12(fp)
 8001454:	10001115 	stw	zero,68(r2)
  hero->dash_target_y = 0;
 8001458:	e0bffd17 	ldw	r2,-12(fp)
 800145c:	10001215 	stw	zero,72(r2)
  hero->dash_accel_x = 0;
 8001460:	e0bffd17 	ldw	r2,-12(fp)
 8001464:	10001315 	stw	zero,76(r2)
  hero->dash_accel_y = 0;
 8001468:	e0bffd17 	ldw	r2,-12(fp)
 800146c:	10001415 	stw	zero,80(r2)
  hero->was_on_ground = false;
 8001470:	e0bffd17 	ldw	r2,-12(fp)
 8001474:	10001505 	stb	zero,84(r2)
  hero->on_ground = false;
 8001478:	e0bffd17 	ldw	r2,-12(fp)
 800147c:	10001545 	stb	zero,85(r2)
  hero->on_ice = false;
 8001480:	e0bffd17 	ldw	r2,-12(fp)
 8001484:	10001585 	stb	zero,86(r2)
  hero->dash = false;
 8001488:	e0bffd17 	ldw	r2,-12(fp)
 800148c:	100015c5 	stb	zero,87(r2)
  hero->jump = false;
 8001490:	e0bffd17 	ldw	r2,-12(fp)
 8001494:	10001705 	stb	zero,92(r2)
  hero->h_maxspd = 0;
 8001498:	e0bffd17 	ldw	r2,-12(fp)
 800149c:	10001815 	stw	zero,96(r2)
  hero->h_accel = 0;
 80014a0:	e0bffd17 	ldw	r2,-12(fp)
 80014a4:	10001915 	stw	zero,100(r2)
  hero->h_deccel = 0;
 80014a8:	e0bffd17 	ldw	r2,-12(fp)
 80014ac:	10001a15 	stw	zero,104(r2)
  hero->v_maxspd = 0;
 80014b0:	e0bffd17 	ldw	r2,-12(fp)
 80014b4:	10001b15 	stw	zero,108(r2)
  hero->v_accel = 0;
 80014b8:	e0bffd17 	ldw	r2,-12(fp)
 80014bc:	10001c15 	stw	zero,112(r2)
  hero->v_deccel = 0;
 80014c0:	e0bffd17 	ldw	r2,-12(fp)
 80014c4:	10001d15 	stw	zero,116(r2)
  hero->wall_dir = 0;
 80014c8:	e0bffd17 	ldw	r2,-12(fp)
 80014cc:	10001e15 	stw	zero,120(r2)
}
 80014d0:	0001883a 	nop
 80014d4:	e037883a 	mov	sp,fp
 80014d8:	df000017 	ldw	fp,0(sp)
 80014dc:	dec00104 	addi	sp,sp,4
 80014e0:	f800283a 	ret

080014e4 <move>:

void move(struct Player *hero)
{
 80014e4:	defffb04 	addi	sp,sp,-20
 80014e8:	dfc00415 	stw	ra,16(sp)
 80014ec:	df000315 	stw	fp,12(sp)
 80014f0:	df000304 	addi	fp,sp,12
 80014f4:	e13fff15 	stw	r4,-4(fp)
  // X axis
  hero->moveX = hero->spdX; // 鍥涜垗浜斿叆
 80014f8:	e0bfff17 	ldw	r2,-4(fp)
 80014fc:	10c00317 	ldw	r3,12(r2)
 8001500:	e0bfff17 	ldw	r2,-4(fp)
 8001504:	10c00515 	stw	r3,20(r2)
  int stepX = (hero->moveX > 0 ? 1 : -1);
 8001508:	e0bfff17 	ldw	r2,-4(fp)
 800150c:	10800517 	ldw	r2,20(r2)
 8001510:	0080020e 	bge	zero,r2,800151c <move+0x38>
 8001514:	00800044 	movi	r2,1
 8001518:	00000106 	br	8001520 <move+0x3c>
 800151c:	00bfffc4 	movi	r2,-1
 8001520:	e0bffd15 	stw	r2,-12(fp)

  // Actor : detect collision at each pixel (not efficient but precise)

  while (hero->moveX != 0)
 8001524:	00002506 	br	80015bc <move+0xd8>
  {
    if ((is_solid(hero->x + stepX, hero->y) == 1) || (is_solid(hero->x + stepX, hero->y) == 2))
 8001528:	e0bfff17 	ldw	r2,-4(fp)
 800152c:	10c00117 	ldw	r3,4(r2)
 8001530:	e0bffd17 	ldw	r2,-12(fp)
 8001534:	1887883a 	add	r3,r3,r2
 8001538:	e0bfff17 	ldw	r2,-4(fp)
 800153c:	10800217 	ldw	r2,8(r2)
 8001540:	100b883a 	mov	r5,r2
 8001544:	1809883a 	mov	r4,r3
 8001548:	8000e480 	call	8000e48 <is_solid>
 800154c:	10800060 	cmpeqi	r2,r2,1
 8001550:	10000b1e 	bne	r2,zero,8001580 <move+0x9c>
 8001554:	e0bfff17 	ldw	r2,-4(fp)
 8001558:	10c00117 	ldw	r3,4(r2)
 800155c:	e0bffd17 	ldw	r2,-12(fp)
 8001560:	1887883a 	add	r3,r3,r2
 8001564:	e0bfff17 	ldw	r2,-4(fp)
 8001568:	10800217 	ldw	r2,8(r2)
 800156c:	100b883a 	mov	r5,r2
 8001570:	1809883a 	mov	r4,r3
 8001574:	8000e480 	call	8000e48 <is_solid>
 8001578:	10800098 	cmpnei	r2,r2,2
 800157c:	1000031e 	bne	r2,zero,800158c <move+0xa8>
    {
      // Hit a solid!
      hero->spdX = 0;
 8001580:	e0bfff17 	ldw	r2,-4(fp)
 8001584:	10000315 	stw	zero,12(r2)
      break;
 8001588:	00000f06 	br	80015c8 <move+0xe4>
    }
    else
    {
      // There is no wall immediately beside us
      hero->x += stepX;
 800158c:	e0bfff17 	ldw	r2,-4(fp)
 8001590:	10c00117 	ldw	r3,4(r2)
 8001594:	e0bffd17 	ldw	r2,-12(fp)
 8001598:	1887883a 	add	r3,r3,r2
 800159c:	e0bfff17 	ldw	r2,-4(fp)
 80015a0:	10c00115 	stw	r3,4(r2)
      hero->moveX -= stepX;
 80015a4:	e0bfff17 	ldw	r2,-4(fp)
 80015a8:	10c00517 	ldw	r3,20(r2)
 80015ac:	e0bffd17 	ldw	r2,-12(fp)
 80015b0:	1887c83a 	sub	r3,r3,r2
 80015b4:	e0bfff17 	ldw	r2,-4(fp)
 80015b8:	10c00515 	stw	r3,20(r2)
  hero->moveX = hero->spdX; // 鍥涜垗浜斿叆
  int stepX = (hero->moveX > 0 ? 1 : -1);

  // Actor : detect collision at each pixel (not efficient but precise)

  while (hero->moveX != 0)
 80015bc:	e0bfff17 	ldw	r2,-4(fp)
 80015c0:	10800517 	ldw	r2,20(r2)
 80015c4:	103fd81e 	bne	r2,zero,8001528 <__alt_data_end+0xfc001528>
      hero->moveX -= stepX;
    }
  }

  // Y axis
  hero->moveY = hero->spdY; // 鍥涜垗浜斿叆
 80015c8:	e0bfff17 	ldw	r2,-4(fp)
 80015cc:	10c00417 	ldw	r3,16(r2)
 80015d0:	e0bfff17 	ldw	r2,-4(fp)
 80015d4:	10c00615 	stw	r3,24(r2)
  int stepY = (hero->moveY > 0 ? 1 : -1);
 80015d8:	e0bfff17 	ldw	r2,-4(fp)
 80015dc:	10800617 	ldw	r2,24(r2)
 80015e0:	0080020e 	bge	zero,r2,80015ec <move+0x108>
 80015e4:	00800044 	movi	r2,1
 80015e8:	00000106 	br	80015f0 <move+0x10c>
 80015ec:	00bfffc4 	movi	r2,-1
 80015f0:	e0bffe15 	stw	r2,-8(fp)

  // Actor : detect collision at each pixel (not efficient but precise)
  while (hero->moveY != 0)
 80015f4:	00002306 	br	8001684 <move+0x1a0>
  {
    if ((is_solid(hero->x, hero->y + stepY) == 1) || (is_solid(hero->x, hero->y + stepY) == 2))
 80015f8:	e0bfff17 	ldw	r2,-4(fp)
 80015fc:	11000117 	ldw	r4,4(r2)
 8001600:	e0bfff17 	ldw	r2,-4(fp)
 8001604:	10c00217 	ldw	r3,8(r2)
 8001608:	e0bffe17 	ldw	r2,-8(fp)
 800160c:	1885883a 	add	r2,r3,r2
 8001610:	100b883a 	mov	r5,r2
 8001614:	8000e480 	call	8000e48 <is_solid>
 8001618:	10800060 	cmpeqi	r2,r2,1
 800161c:	10000a1e 	bne	r2,zero,8001648 <move+0x164>
 8001620:	e0bfff17 	ldw	r2,-4(fp)
 8001624:	11000117 	ldw	r4,4(r2)
 8001628:	e0bfff17 	ldw	r2,-4(fp)
 800162c:	10c00217 	ldw	r3,8(r2)
 8001630:	e0bffe17 	ldw	r2,-8(fp)
 8001634:	1885883a 	add	r2,r3,r2
 8001638:	100b883a 	mov	r5,r2
 800163c:	8000e480 	call	8000e48 <is_solid>
 8001640:	10800098 	cmpnei	r2,r2,2
 8001644:	1000031e 	bne	r2,zero,8001654 <move+0x170>
    {
      // Hit a solid!
      hero->spdY = 0;
 8001648:	e0bfff17 	ldw	r2,-4(fp)
 800164c:	10000415 	stw	zero,16(r2)
      break;
 8001650:	00000f06 	br	8001690 <move+0x1ac>
    }
    else
    {
      // There is no wall immediately beside us
      hero->y += stepY;
 8001654:	e0bfff17 	ldw	r2,-4(fp)
 8001658:	10c00217 	ldw	r3,8(r2)
 800165c:	e0bffe17 	ldw	r2,-8(fp)
 8001660:	1887883a 	add	r3,r3,r2
 8001664:	e0bfff17 	ldw	r2,-4(fp)
 8001668:	10c00215 	stw	r3,8(r2)
      hero->moveY -= stepY;
 800166c:	e0bfff17 	ldw	r2,-4(fp)
 8001670:	10c00617 	ldw	r3,24(r2)
 8001674:	e0bffe17 	ldw	r2,-8(fp)
 8001678:	1887c83a 	sub	r3,r3,r2
 800167c:	e0bfff17 	ldw	r2,-4(fp)
 8001680:	10c00615 	stw	r3,24(r2)
  // Y axis
  hero->moveY = hero->spdY; // 鍥涜垗浜斿叆
  int stepY = (hero->moveY > 0 ? 1 : -1);

  // Actor : detect collision at each pixel (not efficient but precise)
  while (hero->moveY != 0)
 8001684:	e0bfff17 	ldw	r2,-4(fp)
 8001688:	10800617 	ldw	r2,24(r2)
 800168c:	103fda1e 	bne	r2,zero,80015f8 <__alt_data_end+0xfc0015f8>
      // There is no wall immediately beside us
      hero->y += stepY;
      hero->moveY -= stepY;
    }
  }
}
 8001690:	0001883a 	nop
 8001694:	e037883a 	mov	sp,fp
 8001698:	dfc00117 	ldw	ra,4(sp)
 800169c:	df000017 	ldw	fp,0(sp)
 80016a0:	dec00204 	addi	sp,sp,8
 80016a4:	f800283a 	ret

080016a8 <Playerstep>:

void Playerstep(struct Player *hero)
{
 80016a8:	defff704 	addi	sp,sp,-36
 80016ac:	dfc00815 	stw	ra,32(sp)
 80016b0:	df000715 	stw	fp,28(sp)
 80016b4:	dc000615 	stw	r16,24(sp)
 80016b8:	df000704 	addi	fp,sp,28
 80016bc:	e13ffe15 	stw	r4,-8(fp)
  move(hero);
 80016c0:	e13ffe17 	ldw	r4,-8(fp)
 80016c4:	80014e40 	call	80014e4 <move>
  hero->shake = 0;
 80016c8:	e0bffe17 	ldw	r2,-8(fp)
 80016cc:	10000805 	stb	zero,32(r2)
  // limit position horizontally
  if (hero->x < 0)
 80016d0:	e0bffe17 	ldw	r2,-8(fp)
 80016d4:	10800117 	ldw	r2,4(r2)
 80016d8:	1000050e 	bge	r2,zero,80016f0 <Playerstep+0x48>
  {
    hero->x = 0;
 80016dc:	e0bffe17 	ldw	r2,-8(fp)
 80016e0:	10000115 	stw	zero,4(r2)
    hero->spdX = 0;
 80016e4:	e0bffe17 	ldw	r2,-8(fp)
 80016e8:	10000315 	stw	zero,12(r2)
 80016ec:	00001406 	br	8001740 <Playerstep+0x98>
    // printf("here\n");
  }
  else if (hero->x > 242)
 80016f0:	e0bffe17 	ldw	r2,-8(fp)
 80016f4:	10800117 	ldw	r2,4(r2)
 80016f8:	10803cd0 	cmplti	r2,r2,243
 80016fc:	1000061e 	bne	r2,zero,8001718 <Playerstep+0x70>
  {
    hero->x = 242;
 8001700:	e0bffe17 	ldw	r2,-8(fp)
 8001704:	00c03c84 	movi	r3,242
 8001708:	10c00115 	stw	r3,4(r2)
    hero->spdX = 0;
 800170c:	e0bffe17 	ldw	r2,-8(fp)
 8001710:	10000315 	stw	zero,12(r2)
 8001714:	00000a06 	br	8001740 <Playerstep+0x98>
  }
  else if (hero->y <= 0 && level_index == level_tot - 1)
 8001718:	e0bffe17 	ldw	r2,-8(fp)
 800171c:	10800217 	ldw	r2,8(r2)
 8001720:	00800716 	blt	zero,r2,8001740 <Playerstep+0x98>
 8001724:	d0abfe17 	ldw	r2,-20488(gp)
 8001728:	10800198 	cmpnei	r2,r2,6
 800172c:	1000041e 	bne	r2,zero,8001740 <Playerstep+0x98>
  {
    hero->y = 0;
 8001730:	e0bffe17 	ldw	r2,-8(fp)
 8001734:	10000215 	stw	zero,8(r2)
    hero->spdY = 0;
 8001738:	e0bffe17 	ldw	r2,-8(fp)
 800173c:	10000415 	stw	zero,16(r2)
  }

  // judge death
  if (is_solid(hero->x, hero->y) == -1) // collide with spike or drop down out of screen
 8001740:	e0bffe17 	ldw	r2,-8(fp)
 8001744:	10c00117 	ldw	r3,4(r2)
 8001748:	e0bffe17 	ldw	r2,-8(fp)
 800174c:	10800217 	ldw	r2,8(r2)
 8001750:	100b883a 	mov	r5,r2
 8001754:	1809883a 	mov	r4,r3
 8001758:	8000e480 	call	8000e48 <is_solid>
 800175c:	10bfffd8 	cmpnei	r2,r2,-1
 8001760:	1000071e 	bne	r2,zero,8001780 <Playerstep+0xd8>
  {
    death_tot++;
 8001764:	d0ac0117 	ldw	r2,-20476(gp)
 8001768:	10800044 	addi	r2,r2,1
 800176c:	d0ac0115 	stw	r2,-20476(gp)
    hero->dead = true;
 8001770:	e0bffe17 	ldw	r2,-8(fp)
 8001774:	00c00044 	movi	r3,1
 8001778:	10c00005 	stb	r3,0(r2)
    return;
 800177c:	0003d906 	br	80026e4 <Playerstep+0x103c>
    // kill_player(); // restart room
    // restart room after 0.5 second
    // hero_en = false;
  }
  else if (hero->y > 256)
 8001780:	e0bffe17 	ldw	r2,-8(fp)
 8001784:	10800217 	ldw	r2,8(r2)
 8001788:	10804050 	cmplti	r2,r2,257
 800178c:	1000071e 	bne	r2,zero,80017ac <Playerstep+0x104>
  {
    death_tot++;
 8001790:	d0ac0117 	ldw	r2,-20476(gp)
 8001794:	10800044 	addi	r2,r2,1
 8001798:	d0ac0115 	stw	r2,-20476(gp)
    hero->dead2 = true;
 800179c:	e0bffe17 	ldw	r2,-8(fp)
 80017a0:	00c00044 	movi	r3,1
 80017a4:	10c00045 	stb	r3,1(r2)
    return;
 80017a8:	0003ce06 	br	80026e4 <Playerstep+0x103c>
  // {
  //   hero->dashes = max_dashes;
  //   clear_active(hero->x, hero->y);
  // }
  // judge orb
  if (is_solid(hero->x, hero->y) == 4)
 80017ac:	e0bffe17 	ldw	r2,-8(fp)
 80017b0:	10c00117 	ldw	r3,4(r2)
 80017b4:	e0bffe17 	ldw	r2,-8(fp)
 80017b8:	10800217 	ldw	r2,8(r2)
 80017bc:	100b883a 	mov	r5,r2
 80017c0:	1809883a 	mov	r4,r3
 80017c4:	8000e480 	call	8000e48 <is_solid>
 80017c8:	10800118 	cmpnei	r2,r2,4
 80017cc:	10000c1e 	bne	r2,zero,8001800 <Playerstep+0x158>
  {
    max_dashes = 2;
 80017d0:	00800084 	movi	r2,2
 80017d4:	d0a00215 	stw	r2,-32760(gp)
    hero->dashes = max_dashes;
 80017d8:	d0e00217 	ldw	r3,-32760(gp)
 80017dc:	e0bffe17 	ldw	r2,-8(fp)
 80017e0:	10c00f15 	stw	r3,60(r2)
    clear_active(hero->x, hero->y);
 80017e4:	e0bffe17 	ldw	r2,-8(fp)
 80017e8:	10c00117 	ldw	r3,4(r2)
 80017ec:	e0bffe17 	ldw	r2,-8(fp)
 80017f0:	10800217 	ldw	r2,8(r2)
 80017f4:	100b883a 	mov	r5,r2
 80017f8:	1809883a 	mov	r4,r3
 80017fc:	80010640 	call	8001064 <clear_active>
  }

  hero->flip = false;
 8001800:	e0bffe17 	ldw	r2,-8(fp)
 8001804:	10000885 	stb	zero,34(r2)
  if (hero->spdX != 0) // sign(spdX)
 8001808:	e0bffe17 	ldw	r2,-8(fp)
 800180c:	10800317 	ldw	r2,12(r2)
 8001810:	10000826 	beq	r2,zero,8001834 <Playerstep+0x18c>
    hero->flipX = (hero->spdX < 0 ? -1 : 1);
 8001814:	e0bffe17 	ldw	r2,-8(fp)
 8001818:	10800317 	ldw	r2,12(r2)
 800181c:	1000020e 	bge	r2,zero,8001828 <Playerstep+0x180>
 8001820:	00bfffc4 	movi	r2,-1
 8001824:	00000106 	br	800182c <Playerstep+0x184>
 8001828:	00800044 	movi	r2,1
 800182c:	e0fffe17 	ldw	r3,-8(fp)
 8001830:	18800715 	stw	r2,28(r3)

  hero->on_ground = (is_solid(hero->x, hero->y + 1) == 1 ||
 8001834:	e0bffe17 	ldw	r2,-8(fp)
 8001838:	10c00117 	ldw	r3,4(r2)
 800183c:	e0bffe17 	ldw	r2,-8(fp)
 8001840:	10800217 	ldw	r2,8(r2)
 8001844:	10800044 	addi	r2,r2,1
 8001848:	100b883a 	mov	r5,r2
 800184c:	1809883a 	mov	r4,r3
 8001850:	8000e480 	call	8000e48 <is_solid>
 8001854:	10800060 	cmpeqi	r2,r2,1
 8001858:	10000a1e 	bne	r2,zero,8001884 <Playerstep+0x1dc>
                     is_solid(hero->x, hero->y + 1) ==
 800185c:	e0bffe17 	ldw	r2,-8(fp)
 8001860:	10c00117 	ldw	r3,4(r2)
 8001864:	e0bffe17 	ldw	r2,-8(fp)
 8001868:	10800217 	ldw	r2,8(r2)
 800186c:	10800044 	addi	r2,r2,1
 8001870:	100b883a 	mov	r5,r2
 8001874:	1809883a 	mov	r4,r3
 8001878:	8000e480 	call	8000e48 <is_solid>

  hero->flip = false;
  if (hero->spdX != 0) // sign(spdX)
    hero->flipX = (hero->spdX < 0 ? -1 : 1);

  hero->on_ground = (is_solid(hero->x, hero->y + 1) == 1 ||
 800187c:	10800098 	cmpnei	r2,r2,2
 8001880:	1000021e 	bne	r2,zero,800188c <Playerstep+0x1e4>
 8001884:	00800044 	movi	r2,1
 8001888:	00000106 	br	8001890 <Playerstep+0x1e8>
 800188c:	0005883a 	mov	r2,zero
 8001890:	1080004c 	andi	r2,r2,1
 8001894:	e0fffe17 	ldw	r3,-8(fp)
 8001898:	18801545 	stb	r2,85(r3)
                     is_solid(hero->x, hero->y + 1) ==
                         2); // 鑴氫笅1鍍忕礌鏄惁鏄痵olid
  hero->on_ice = is_solid(hero->x, hero->y + 1) == 2;
 800189c:	e0bffe17 	ldw	r2,-8(fp)
 80018a0:	10c00117 	ldw	r3,4(r2)
 80018a4:	e0bffe17 	ldw	r2,-8(fp)
 80018a8:	10800217 	ldw	r2,8(r2)
 80018ac:	10800044 	addi	r2,r2,1
 80018b0:	100b883a 	mov	r5,r2
 80018b4:	1809883a 	mov	r4,r3
 80018b8:	8000e480 	call	8000e48 <is_solid>
 80018bc:	108000a0 	cmpeqi	r2,r2,2
 80018c0:	1007883a 	mov	r3,r2
 80018c4:	e0bffe17 	ldw	r2,-8(fp)
 80018c8:	10c01585 	stb	r3,86(r2)
  hero->jump = key_pressed[4] && !hero->p_jump;
 80018cc:	d0abfd03 	ldbu	r2,-20492(gp)
 80018d0:	10803fcc 	andi	r2,r2,255
 80018d4:	10000726 	beq	r2,zero,80018f4 <Playerstep+0x24c>
 80018d8:	e0bffe17 	ldw	r2,-8(fp)
 80018dc:	10800c03 	ldbu	r2,48(r2)
 80018e0:	1080005c 	xori	r2,r2,1
 80018e4:	10803fcc 	andi	r2,r2,255
 80018e8:	10000226 	beq	r2,zero,80018f4 <Playerstep+0x24c>
 80018ec:	00800044 	movi	r2,1
 80018f0:	00000106 	br	80018f8 <Playerstep+0x250>
 80018f4:	0005883a 	mov	r2,zero
 80018f8:	1080004c 	andi	r2,r2,1
 80018fc:	e0fffe17 	ldw	r3,-8(fp)
 8001900:	18801705 	stb	r2,92(r3)
  hero->p_jump = key_pressed[4];
 8001904:	d0ebfd03 	ldbu	r3,-20492(gp)
 8001908:	e0bffe17 	ldw	r2,-8(fp)
 800190c:	10c00c05 	stb	r3,48(r2)

  if (hero->jump)
 8001910:	e0bffe17 	ldw	r2,-8(fp)
 8001914:	10801703 	ldbu	r2,92(r2)
 8001918:	10803fcc 	andi	r2,r2,255
 800191c:	10000426 	beq	r2,zero,8001930 <Playerstep+0x288>
    hero->jbuffer = 4;
 8001920:	e0bffe17 	ldw	r2,-8(fp)
 8001924:	00c00104 	movi	r3,4
 8001928:	10c00e15 	stw	r3,56(r2)
 800192c:	00000806 	br	8001950 <Playerstep+0x2a8>
  else if (hero->jbuffer > 0)
 8001930:	e0bffe17 	ldw	r2,-8(fp)
 8001934:	10800e17 	ldw	r2,56(r2)
 8001938:	0080050e 	bge	zero,r2,8001950 <Playerstep+0x2a8>
    hero->jbuffer--;
 800193c:	e0bffe17 	ldw	r2,-8(fp)
 8001940:	10800e17 	ldw	r2,56(r2)
 8001944:	10ffffc4 	addi	r3,r2,-1
 8001948:	e0bffe17 	ldw	r2,-8(fp)
 800194c:	10c00e15 	stw	r3,56(r2)

  hero->dash = key_pressed[5] && !hero->p_dash;
 8001950:	d0abfd43 	ldbu	r2,-20491(gp)
 8001954:	10803fcc 	andi	r2,r2,255
 8001958:	10000726 	beq	r2,zero,8001978 <Playerstep+0x2d0>
 800195c:	e0bffe17 	ldw	r2,-8(fp)
 8001960:	10800c43 	ldbu	r2,49(r2)
 8001964:	1080005c 	xori	r2,r2,1
 8001968:	10803fcc 	andi	r2,r2,255
 800196c:	10000226 	beq	r2,zero,8001978 <Playerstep+0x2d0>
 8001970:	00800044 	movi	r2,1
 8001974:	00000106 	br	800197c <Playerstep+0x2d4>
 8001978:	0005883a 	mov	r2,zero
 800197c:	1080004c 	andi	r2,r2,1
 8001980:	e0fffe17 	ldw	r3,-8(fp)
 8001984:	188015c5 	stb	r2,87(r3)
  hero->p_dash = key_pressed[5];
 8001988:	d0ebfd43 	ldbu	r3,-20491(gp)
 800198c:	e0bffe17 	ldw	r2,-8(fp)
 8001990:	10c00c45 	stb	r3,49(r2)

  if (hero->on_ground)
 8001994:	e0bffe17 	ldw	r2,-8(fp)
 8001998:	10801543 	ldbu	r2,85(r2)
 800199c:	10803fcc 	andi	r2,r2,255
 80019a0:	10000b26 	beq	r2,zero,80019d0 <Playerstep+0x328>
  {
    hero->grace = 6;
 80019a4:	e0bffe17 	ldw	r2,-8(fp)
 80019a8:	00c00184 	movi	r3,6
 80019ac:	10c00d15 	stw	r3,52(r2)
    if (hero->dashes < max_dashes) // recover dash
 80019b0:	e0bffe17 	ldw	r2,-8(fp)
 80019b4:	10c00f17 	ldw	r3,60(r2)
 80019b8:	d0a00217 	ldw	r2,-32760(gp)
 80019bc:	18800c0e 	bge	r3,r2,80019f0 <Playerstep+0x348>
      hero->dashes = max_dashes;
 80019c0:	d0e00217 	ldw	r3,-32760(gp)
 80019c4:	e0bffe17 	ldw	r2,-8(fp)
 80019c8:	10c00f15 	stw	r3,60(r2)
 80019cc:	00000806 	br	80019f0 <Playerstep+0x348>
  }
  else if (hero->grace > 0)
 80019d0:	e0bffe17 	ldw	r2,-8(fp)
 80019d4:	10800d17 	ldw	r2,52(r2)
 80019d8:	0080050e 	bge	zero,r2,80019f0 <Playerstep+0x348>
    hero->grace--;
 80019dc:	e0bffe17 	ldw	r2,-8(fp)
 80019e0:	10800d17 	ldw	r2,52(r2)
 80019e4:	10ffffc4 	addi	r3,r2,-1
 80019e8:	e0bffe17 	ldw	r2,-8(fp)
 80019ec:	10c00d15 	stw	r3,52(r2)

  // judge movements and change speed
  if (hero->dash_time > 0)
 80019f0:	e0bffe17 	ldw	r2,-8(fp)
 80019f4:	10801017 	ldw	r2,64(r2)
 80019f8:	0080200e 	bge	zero,r2,8001a7c <Playerstep+0x3d4>
  {
    // if just dashed before (in 4 frames)
    hero->dash_time--;
 80019fc:	e0bffe17 	ldw	r2,-8(fp)
 8001a00:	10801017 	ldw	r2,64(r2)
 8001a04:	10ffffc4 	addi	r3,r2,-1
 8001a08:	e0bffe17 	ldw	r2,-8(fp)
 8001a0c:	10c01015 	stw	r3,64(r2)
    hero->spdX =
        spd_change(hero->spdX, hero->dash_target_x, hero->dash_accel_x);
 8001a10:	e0bffe17 	ldw	r2,-8(fp)
 8001a14:	10c00317 	ldw	r3,12(r2)
 8001a18:	e0bffe17 	ldw	r2,-8(fp)
 8001a1c:	11001117 	ldw	r4,68(r2)
 8001a20:	e0bffe17 	ldw	r2,-8(fp)
 8001a24:	10801317 	ldw	r2,76(r2)
 8001a28:	100d883a 	mov	r6,r2
 8001a2c:	200b883a 	mov	r5,r4
 8001a30:	1809883a 	mov	r4,r3
 8001a34:	80012a40 	call	80012a4 <spd_change>
 8001a38:	1007883a 	mov	r3,r2
  // judge movements and change speed
  if (hero->dash_time > 0)
  {
    // if just dashed before (in 4 frames)
    hero->dash_time--;
    hero->spdX =
 8001a3c:	e0bffe17 	ldw	r2,-8(fp)
 8001a40:	10c00315 	stw	r3,12(r2)
        spd_change(hero->spdX, hero->dash_target_x, hero->dash_accel_x);
    hero->spdY =
        spd_change(hero->spdY, hero->dash_target_y, hero->dash_accel_y);
 8001a44:	e0bffe17 	ldw	r2,-8(fp)
 8001a48:	10c00417 	ldw	r3,16(r2)
 8001a4c:	e0bffe17 	ldw	r2,-8(fp)
 8001a50:	11001217 	ldw	r4,72(r2)
 8001a54:	e0bffe17 	ldw	r2,-8(fp)
 8001a58:	10801417 	ldw	r2,80(r2)
 8001a5c:	100d883a 	mov	r6,r2
 8001a60:	200b883a 	mov	r5,r4
 8001a64:	1809883a 	mov	r4,r3
 8001a68:	80012a40 	call	80012a4 <spd_change>
 8001a6c:	1007883a 	mov	r3,r2
  {
    // if just dashed before (in 4 frames)
    hero->dash_time--;
    hero->spdX =
        spd_change(hero->spdX, hero->dash_target_x, hero->dash_accel_x);
    hero->spdY =
 8001a70:	e0bffe17 	ldw	r2,-8(fp)
 8001a74:	10c00415 	stw	r3,16(r2)
 8001a78:	00023c06 	br	800236c <Playerstep+0xcc4>
        spd_change(hero->spdY, hero->dash_target_y, hero->dash_accel_y);
  }
  else
  {
    // move
    hero->h_maxspd = 6;
 8001a7c:	e0bffe17 	ldw	r2,-8(fp)
 8001a80:	00c00184 	movi	r3,6
 8001a84:	10c01815 	stw	r3,96(r2)
    hero->h_deccel = 3;
 8001a88:	e0bffe17 	ldw	r2,-8(fp)
 8001a8c:	00c000c4 	movi	r3,3
 8001a90:	10c01a15 	stw	r3,104(r2)
    if (!hero->on_ground)
 8001a94:	e0bffe17 	ldw	r2,-8(fp)
 8001a98:	10801543 	ldbu	r2,85(r2)
 8001a9c:	1080005c 	xori	r2,r2,1
 8001aa0:	10803fcc 	andi	r2,r2,255
 8001aa4:	10000426 	beq	r2,zero,8001ab8 <Playerstep+0x410>
      hero->h_accel = 2;
 8001aa8:	e0bffe17 	ldw	r2,-8(fp)
 8001aac:	00c00084 	movi	r3,2
 8001ab0:	10c01915 	stw	r3,100(r2)
 8001ab4:	00000b06 	br	8001ae4 <Playerstep+0x43c>
    else if (hero->on_ice)
 8001ab8:	e0bffe17 	ldw	r2,-8(fp)
 8001abc:	10801583 	ldbu	r2,86(r2)
 8001ac0:	10803fcc 	andi	r2,r2,255
 8001ac4:	10000426 	beq	r2,zero,8001ad8 <Playerstep+0x430>
      hero->h_accel = 1;
 8001ac8:	e0bffe17 	ldw	r2,-8(fp)
 8001acc:	00c00044 	movi	r3,1
 8001ad0:	10c01915 	stw	r3,100(r2)
 8001ad4:	00000306 	br	8001ae4 <Playerstep+0x43c>
    else
      hero->h_accel = 3;
 8001ad8:	e0bffe17 	ldw	r2,-8(fp)
 8001adc:	00c000c4 	movi	r3,3
 8001ae0:	10c01915 	stw	r3,100(r2)

    if (abs(hero->spdX) > hero->h_maxspd)
 8001ae4:	e0bffe17 	ldw	r2,-8(fp)
 8001ae8:	10800317 	ldw	r2,12(r2)
 8001aec:	1000010e 	bge	r2,zero,8001af4 <Playerstep+0x44c>
 8001af0:	0085c83a 	sub	r2,zero,r2
 8001af4:	1007883a 	mov	r3,r2
 8001af8:	e0bffe17 	ldw	r2,-8(fp)
 8001afc:	10801817 	ldw	r2,96(r2)
 8001b00:	10c0140e 	bge	r2,r3,8001b54 <Playerstep+0x4ac>
      hero->spdX =
          spd_change(hero->spdX, hero->flipX * hero->h_maxspd, hero->h_deccel);
 8001b04:	e0bffe17 	ldw	r2,-8(fp)
 8001b08:	14000317 	ldw	r16,12(r2)
 8001b0c:	e0bffe17 	ldw	r2,-8(fp)
 8001b10:	10c00717 	ldw	r3,28(r2)
 8001b14:	e0bffe17 	ldw	r2,-8(fp)
 8001b18:	10801817 	ldw	r2,96(r2)
 8001b1c:	100b883a 	mov	r5,r2
 8001b20:	1809883a 	mov	r4,r3
 8001b24:	80057940 	call	8005794 <__mulsi3>
 8001b28:	1007883a 	mov	r3,r2
 8001b2c:	e0bffe17 	ldw	r2,-8(fp)
 8001b30:	10801a17 	ldw	r2,104(r2)
 8001b34:	100d883a 	mov	r6,r2
 8001b38:	180b883a 	mov	r5,r3
 8001b3c:	8009883a 	mov	r4,r16
 8001b40:	80012a40 	call	80012a4 <spd_change>
 8001b44:	1007883a 	mov	r3,r2
      hero->h_accel = 1;
    else
      hero->h_accel = 3;

    if (abs(hero->spdX) > hero->h_maxspd)
      hero->spdX =
 8001b48:	e0bffe17 	ldw	r2,-8(fp)
 8001b4c:	10c00315 	stw	r3,12(r2)
 8001b50:	00002e06 	br	8001c0c <Playerstep+0x564>
          spd_change(hero->spdX, hero->flipX * hero->h_maxspd, hero->h_deccel);
    else if (key_pressed[3]) // pressed right
 8001b54:	d0abfcc3 	ldbu	r2,-20493(gp)
 8001b58:	10803fcc 	andi	r2,r2,255
 8001b5c:	10000e26 	beq	r2,zero,8001b98 <Playerstep+0x4f0>
      hero->spdX = spd_change(hero->spdX, hero->h_maxspd, hero->h_accel);
 8001b60:	e0bffe17 	ldw	r2,-8(fp)
 8001b64:	10c00317 	ldw	r3,12(r2)
 8001b68:	e0bffe17 	ldw	r2,-8(fp)
 8001b6c:	11001817 	ldw	r4,96(r2)
 8001b70:	e0bffe17 	ldw	r2,-8(fp)
 8001b74:	10801917 	ldw	r2,100(r2)
 8001b78:	100d883a 	mov	r6,r2
 8001b7c:	200b883a 	mov	r5,r4
 8001b80:	1809883a 	mov	r4,r3
 8001b84:	80012a40 	call	80012a4 <spd_change>
 8001b88:	1007883a 	mov	r3,r2
 8001b8c:	e0bffe17 	ldw	r2,-8(fp)
 8001b90:	10c00315 	stw	r3,12(r2)
 8001b94:	00001d06 	br	8001c0c <Playerstep+0x564>
    else if (key_pressed[1]) // pressed left
 8001b98:	d0abfc43 	ldbu	r2,-20495(gp)
 8001b9c:	10803fcc 	andi	r2,r2,255
 8001ba0:	10000f26 	beq	r2,zero,8001be0 <Playerstep+0x538>
      hero->spdX = spd_change(hero->spdX, -hero->h_maxspd, hero->h_accel);
 8001ba4:	e0bffe17 	ldw	r2,-8(fp)
 8001ba8:	10c00317 	ldw	r3,12(r2)
 8001bac:	e0bffe17 	ldw	r2,-8(fp)
 8001bb0:	10801817 	ldw	r2,96(r2)
 8001bb4:	0089c83a 	sub	r4,zero,r2
 8001bb8:	e0bffe17 	ldw	r2,-8(fp)
 8001bbc:	10801917 	ldw	r2,100(r2)
 8001bc0:	100d883a 	mov	r6,r2
 8001bc4:	200b883a 	mov	r5,r4
 8001bc8:	1809883a 	mov	r4,r3
 8001bcc:	80012a40 	call	80012a4 <spd_change>
 8001bd0:	1007883a 	mov	r3,r2
 8001bd4:	e0bffe17 	ldw	r2,-8(fp)
 8001bd8:	10c00315 	stw	r3,12(r2)
 8001bdc:	00000b06 	br	8001c0c <Playerstep+0x564>
    else
      hero->spdX = spd_change(hero->spdX, 0, hero->h_accel);
 8001be0:	e0bffe17 	ldw	r2,-8(fp)
 8001be4:	10c00317 	ldw	r3,12(r2)
 8001be8:	e0bffe17 	ldw	r2,-8(fp)
 8001bec:	10801917 	ldw	r2,100(r2)
 8001bf0:	100d883a 	mov	r6,r2
 8001bf4:	000b883a 	mov	r5,zero
 8001bf8:	1809883a 	mov	r4,r3
 8001bfc:	80012a40 	call	80012a4 <spd_change>
 8001c00:	1007883a 	mov	r3,r2
 8001c04:	e0bffe17 	ldw	r2,-8(fp)
 8001c08:	10c00315 	stw	r3,12(r2)

    // fall
    hero->v_maxspd = 8;
 8001c0c:	e0bffe17 	ldw	r2,-8(fp)
 8001c10:	00c00204 	movi	r3,8
 8001c14:	10c01b15 	stw	r3,108(r2)
    hero->v_accel = 2; // TODO:
 8001c18:	e0bffe17 	ldw	r2,-8(fp)
 8001c1c:	00c00084 	movi	r3,2
 8001c20:	10c01c15 	stw	r3,112(r2)
    if (abs(hero->spdY) <= 1)
 8001c24:	e0bffe17 	ldw	r2,-8(fp)
 8001c28:	10800417 	ldw	r2,16(r2)
 8001c2c:	10bfffd0 	cmplti	r2,r2,-1
 8001c30:	1000191e 	bne	r2,zero,8001c98 <Playerstep+0x5f0>
 8001c34:	e0bffe17 	ldw	r2,-8(fp)
 8001c38:	10800417 	ldw	r2,16(r2)
 8001c3c:	10800088 	cmpgei	r2,r2,2
 8001c40:	1000151e 	bne	r2,zero,8001c98 <Playerstep+0x5f0>
      hero->v_accel *= 0.5; // half gravity at top
 8001c44:	e0bffe17 	ldw	r2,-8(fp)
 8001c48:	10801c17 	ldw	r2,112(r2)
 8001c4c:	1009883a 	mov	r4,r2
 8001c50:	8006bd80 	call	8006bd8 <__floatsidf>
 8001c54:	1011883a 	mov	r8,r2
 8001c58:	1813883a 	mov	r9,r3
 8001c5c:	000d883a 	mov	r6,zero
 8001c60:	01cff834 	movhi	r7,16352
 8001c64:	4009883a 	mov	r4,r8
 8001c68:	480b883a 	mov	r5,r9
 8001c6c:	80062ec0 	call	80062ec <__muldf3>
 8001c70:	1009883a 	mov	r4,r2
 8001c74:	180b883a 	mov	r5,r3
 8001c78:	2005883a 	mov	r2,r4
 8001c7c:	2807883a 	mov	r3,r5
 8001c80:	1009883a 	mov	r4,r2
 8001c84:	180b883a 	mov	r5,r3
 8001c88:	8006b580 	call	8006b58 <__fixdfsi>
 8001c8c:	1007883a 	mov	r3,r2
 8001c90:	e0bffe17 	ldw	r2,-8(fp)
 8001c94:	10c01c15 	stw	r3,112(r2)
    if (key_pressed[3] && (is_solid(hero->x + 1, hero->y) == 1) ||
 8001c98:	d0abfcc3 	ldbu	r2,-20493(gp)
 8001c9c:	10803fcc 	andi	r2,r2,255
 8001ca0:	10000a26 	beq	r2,zero,8001ccc <Playerstep+0x624>
 8001ca4:	e0bffe17 	ldw	r2,-8(fp)
 8001ca8:	10800117 	ldw	r2,4(r2)
 8001cac:	10c00044 	addi	r3,r2,1
 8001cb0:	e0bffe17 	ldw	r2,-8(fp)
 8001cb4:	10800217 	ldw	r2,8(r2)
 8001cb8:	100b883a 	mov	r5,r2
 8001cbc:	1809883a 	mov	r4,r3
 8001cc0:	8000e480 	call	8000e48 <is_solid>
 8001cc4:	10800060 	cmpeqi	r2,r2,1
 8001cc8:	10000d1e 	bne	r2,zero,8001d00 <Playerstep+0x658>
        key_pressed[1] && (is_solid(hero->x - 1, hero->y) ==
 8001ccc:	d0abfc43 	ldbu	r2,-20495(gp)
    // fall
    hero->v_maxspd = 8;
    hero->v_accel = 2; // TODO:
    if (abs(hero->spdY) <= 1)
      hero->v_accel *= 0.5; // half gravity at top
    if (key_pressed[3] && (is_solid(hero->x + 1, hero->y) == 1) ||
 8001cd0:	10803fcc 	andi	r2,r2,255
 8001cd4:	10000d26 	beq	r2,zero,8001d0c <Playerstep+0x664>
        key_pressed[1] && (is_solid(hero->x - 1, hero->y) ==
 8001cd8:	e0bffe17 	ldw	r2,-8(fp)
 8001cdc:	10800117 	ldw	r2,4(r2)
 8001ce0:	10ffffc4 	addi	r3,r2,-1
 8001ce4:	e0bffe17 	ldw	r2,-8(fp)
 8001ce8:	10800217 	ldw	r2,8(r2)
 8001cec:	100b883a 	mov	r5,r2
 8001cf0:	1809883a 	mov	r4,r3
 8001cf4:	8000e480 	call	8000e48 <is_solid>
 8001cf8:	10800058 	cmpnei	r2,r2,1
 8001cfc:	1000031e 	bne	r2,zero,8001d0c <Playerstep+0x664>
                           1)) // press against wall, fall slower
      hero->v_maxspd = 3;
 8001d00:	e0bffe17 	ldw	r2,-8(fp)
 8001d04:	00c000c4 	movi	r3,3
 8001d08:	10c01b15 	stw	r3,108(r2)
    if (!hero->on_ground)
 8001d0c:	e0bffe17 	ldw	r2,-8(fp)
 8001d10:	10801543 	ldbu	r2,85(r2)
 8001d14:	1080005c 	xori	r2,r2,1
 8001d18:	10803fcc 	andi	r2,r2,255
 8001d1c:	10000d26 	beq	r2,zero,8001d54 <Playerstep+0x6ac>
      hero->spdY = spd_change(hero->spdY, hero->v_maxspd, hero->v_accel);
 8001d20:	e0bffe17 	ldw	r2,-8(fp)
 8001d24:	10c00417 	ldw	r3,16(r2)
 8001d28:	e0bffe17 	ldw	r2,-8(fp)
 8001d2c:	11001b17 	ldw	r4,108(r2)
 8001d30:	e0bffe17 	ldw	r2,-8(fp)
 8001d34:	10801c17 	ldw	r2,112(r2)
 8001d38:	100d883a 	mov	r6,r2
 8001d3c:	200b883a 	mov	r5,r4
 8001d40:	1809883a 	mov	r4,r3
 8001d44:	80012a40 	call	80012a4 <spd_change>
 8001d48:	1007883a 	mov	r3,r2
 8001d4c:	e0bffe17 	ldw	r2,-8(fp)
 8001d50:	10c00415 	stw	r3,16(r2)

    // jump
    if (hero->jbuffer > 0)
 8001d54:	e0bffe17 	ldw	r2,-8(fp)
 8001d58:	10800e17 	ldw	r2,56(r2)
 8001d5c:	00803b0e 	bge	zero,r2,8001e4c <Playerstep+0x7a4>
    {
      if (hero->grace > 0) // jump from ground
 8001d60:	e0bffe17 	ldw	r2,-8(fp)
 8001d64:	10800d17 	ldw	r2,52(r2)
 8001d68:	0080080e 	bge	zero,r2,8001d8c <Playerstep+0x6e4>
      {
        hero->jbuffer = 0;
 8001d6c:	e0bffe17 	ldw	r2,-8(fp)
 8001d70:	10000e15 	stw	zero,56(r2)
        hero->grace = 0;
 8001d74:	e0bffe17 	ldw	r2,-8(fp)
 8001d78:	10000d15 	stw	zero,52(r2)
        hero->spdY = -12;
 8001d7c:	e0bffe17 	ldw	r2,-8(fp)
 8001d80:	00fffd04 	movi	r3,-12
 8001d84:	10c00415 	stw	r3,16(r2)
 8001d88:	00003006 	br	8001e4c <Playerstep+0x7a4>
      }
      else // wall jump
      {
        if (is_solid(hero->x - 5, hero->y))
 8001d8c:	e0bffe17 	ldw	r2,-8(fp)
 8001d90:	10800117 	ldw	r2,4(r2)
 8001d94:	10fffec4 	addi	r3,r2,-5
 8001d98:	e0bffe17 	ldw	r2,-8(fp)
 8001d9c:	10800217 	ldw	r2,8(r2)
 8001da0:	100b883a 	mov	r5,r2
 8001da4:	1809883a 	mov	r4,r3
 8001da8:	8000e480 	call	8000e48 <is_solid>
 8001dac:	10000426 	beq	r2,zero,8001dc0 <Playerstep+0x718>
          hero->wall_dir = -1; // left wall
 8001db0:	e0bffe17 	ldw	r2,-8(fp)
 8001db4:	00ffffc4 	movi	r3,-1
 8001db8:	10c01e15 	stw	r3,120(r2)
 8001dbc:	00000f06 	br	8001dfc <Playerstep+0x754>
        else if (is_solid(hero->x + 5, hero->y))
 8001dc0:	e0bffe17 	ldw	r2,-8(fp)
 8001dc4:	10800117 	ldw	r2,4(r2)
 8001dc8:	10c00144 	addi	r3,r2,5
 8001dcc:	e0bffe17 	ldw	r2,-8(fp)
 8001dd0:	10800217 	ldw	r2,8(r2)
 8001dd4:	100b883a 	mov	r5,r2
 8001dd8:	1809883a 	mov	r4,r3
 8001ddc:	8000e480 	call	8000e48 <is_solid>
 8001de0:	10000426 	beq	r2,zero,8001df4 <Playerstep+0x74c>
          hero->wall_dir = 1; // right wall
 8001de4:	e0bffe17 	ldw	r2,-8(fp)
 8001de8:	00c00044 	movi	r3,1
 8001dec:	10c01e15 	stw	r3,120(r2)
 8001df0:	00000206 	br	8001dfc <Playerstep+0x754>
        else
          hero->wall_dir = 0; // no wall
 8001df4:	e0bffe17 	ldw	r2,-8(fp)
 8001df8:	10001e15 	stw	zero,120(r2)
        if (hero->wall_dir != 0)
 8001dfc:	e0bffe17 	ldw	r2,-8(fp)
 8001e00:	10801e17 	ldw	r2,120(r2)
 8001e04:	10001126 	beq	r2,zero,8001e4c <Playerstep+0x7a4>
        {
          // printf("kaka\n");
          hero->jbuffer = 0;
 8001e08:	e0bffe17 	ldw	r2,-8(fp)
 8001e0c:	10000e15 	stw	zero,56(r2)
          hero->spdY = -12;
 8001e10:	e0bffe17 	ldw	r2,-8(fp)
 8001e14:	00fffd04 	movi	r3,-12
 8001e18:	10c00415 	stw	r3,16(r2)
          hero->spdX = -hero->wall_dir * (hero->h_maxspd + 6);
 8001e1c:	e0bffe17 	ldw	r2,-8(fp)
 8001e20:	10801e17 	ldw	r2,120(r2)
 8001e24:	0087c83a 	sub	r3,zero,r2
 8001e28:	e0bffe17 	ldw	r2,-8(fp)
 8001e2c:	10801817 	ldw	r2,96(r2)
 8001e30:	10800184 	addi	r2,r2,6
 8001e34:	100b883a 	mov	r5,r2
 8001e38:	1809883a 	mov	r4,r3
 8001e3c:	80057940 	call	8005794 <__mulsi3>
 8001e40:	1007883a 	mov	r3,r2
 8001e44:	e0bffe17 	ldw	r2,-8(fp)
 8001e48:	10c00315 	stw	r3,12(r2)
        }
      }
    }

    // dash
    if (hero->dashes > 0 && hero->dash)
 8001e4c:	e0bffe17 	ldw	r2,-8(fp)
 8001e50:	10800f17 	ldw	r2,60(r2)
 8001e54:	0081450e 	bge	zero,r2,800236c <Playerstep+0xcc4>
 8001e58:	e0bffe17 	ldw	r2,-8(fp)
 8001e5c:	108015c3 	ldbu	r2,87(r2)
 8001e60:	10803fcc 	andi	r2,r2,255
 8001e64:	10014126 	beq	r2,zero,800236c <Playerstep+0xcc4>
    {
      hero->shake = 1;
 8001e68:	e0bffe17 	ldw	r2,-8(fp)
 8001e6c:	00c00044 	movi	r3,1
 8001e70:	10c00805 	stb	r3,32(r2)

      hero->dashes--;
 8001e74:	e0bffe17 	ldw	r2,-8(fp)
 8001e78:	10800f17 	ldw	r2,60(r2)
 8001e7c:	10ffffc4 	addi	r3,r2,-1
 8001e80:	e0bffe17 	ldw	r2,-8(fp)
 8001e84:	10c00f15 	stw	r3,60(r2)
      hero->dash_time = 4;
 8001e88:	e0bffe17 	ldw	r2,-8(fp)
 8001e8c:	00c00104 	movi	r3,4
 8001e90:	10c01015 	stw	r3,64(r2)
      has_dashed = true;
 8001e94:	00800044 	movi	r2,1
 8001e98:	d0abff45 	stb	r2,-20483(gp)
      hero->dash_spd = 20;
 8001e9c:	e0bffe17 	ldw	r2,-8(fp)
 8001ea0:	00c00504 	movi	r3,20
 8001ea4:	10c01615 	stw	r3,88(r2)

      // 8 dash directions
      if (key_pressed[0] && key_pressed[3])
 8001ea8:	d0abfc03 	ldbu	r2,-20496(gp)
 8001eac:	10803fcc 	andi	r2,r2,255
 8001eb0:	10003326 	beq	r2,zero,8001f80 <Playerstep+0x8d8>
 8001eb4:	d0abfcc3 	ldbu	r2,-20493(gp)
 8001eb8:	10803fcc 	andi	r2,r2,255
 8001ebc:	10003026 	beq	r2,zero,8001f80 <Playerstep+0x8d8>
      {
        hero->spdX = hero->dash_spd * 0.7; // TODO:
 8001ec0:	e0bffe17 	ldw	r2,-8(fp)
 8001ec4:	10801617 	ldw	r2,88(r2)
 8001ec8:	1009883a 	mov	r4,r2
 8001ecc:	8006bd80 	call	8006bd8 <__floatsidf>
 8001ed0:	1011883a 	mov	r8,r2
 8001ed4:	1813883a 	mov	r9,r3
 8001ed8:	019999b4 	movhi	r6,26214
 8001edc:	31999984 	addi	r6,r6,26214
 8001ee0:	01cff9b4 	movhi	r7,16358
 8001ee4:	39d99984 	addi	r7,r7,26214
 8001ee8:	4009883a 	mov	r4,r8
 8001eec:	480b883a 	mov	r5,r9
 8001ef0:	80062ec0 	call	80062ec <__muldf3>
 8001ef4:	1009883a 	mov	r4,r2
 8001ef8:	180b883a 	mov	r5,r3
 8001efc:	2005883a 	mov	r2,r4
 8001f00:	2807883a 	mov	r3,r5
 8001f04:	1009883a 	mov	r4,r2
 8001f08:	180b883a 	mov	r5,r3
 8001f0c:	8006b580 	call	8006b58 <__fixdfsi>
 8001f10:	1007883a 	mov	r3,r2
 8001f14:	e0bffe17 	ldw	r2,-8(fp)
 8001f18:	10c00315 	stw	r3,12(r2)
        hero->spdY = -hero->dash_spd * 0.7;
 8001f1c:	e0bffe17 	ldw	r2,-8(fp)
 8001f20:	10801617 	ldw	r2,88(r2)
 8001f24:	0085c83a 	sub	r2,zero,r2
 8001f28:	1009883a 	mov	r4,r2
 8001f2c:	8006bd80 	call	8006bd8 <__floatsidf>
 8001f30:	1011883a 	mov	r8,r2
 8001f34:	1813883a 	mov	r9,r3
 8001f38:	019999b4 	movhi	r6,26214
 8001f3c:	31999984 	addi	r6,r6,26214
 8001f40:	01cff9b4 	movhi	r7,16358
 8001f44:	39d99984 	addi	r7,r7,26214
 8001f48:	4009883a 	mov	r4,r8
 8001f4c:	480b883a 	mov	r5,r9
 8001f50:	80062ec0 	call	80062ec <__muldf3>
 8001f54:	1009883a 	mov	r4,r2
 8001f58:	180b883a 	mov	r5,r3
 8001f5c:	2005883a 	mov	r2,r4
 8001f60:	2807883a 	mov	r3,r5
 8001f64:	1009883a 	mov	r4,r2
 8001f68:	180b883a 	mov	r5,r3
 8001f6c:	8006b580 	call	8006b58 <__fixdfsi>
 8001f70:	1007883a 	mov	r3,r2
 8001f74:	e0bffe17 	ldw	r2,-8(fp)
 8001f78:	10c00415 	stw	r3,16(r2)
 8001f7c:	0000cb06 	br	80022ac <Playerstep+0xc04>
      }
      else if (key_pressed[2] && key_pressed[3])
 8001f80:	d0abfc83 	ldbu	r2,-20494(gp)
 8001f84:	10803fcc 	andi	r2,r2,255
 8001f88:	10003226 	beq	r2,zero,8002054 <Playerstep+0x9ac>
 8001f8c:	d0abfcc3 	ldbu	r2,-20493(gp)
 8001f90:	10803fcc 	andi	r2,r2,255
 8001f94:	10002f26 	beq	r2,zero,8002054 <Playerstep+0x9ac>
      {
        hero->spdX = hero->dash_spd * 0.7;
 8001f98:	e0bffe17 	ldw	r2,-8(fp)
 8001f9c:	10801617 	ldw	r2,88(r2)
 8001fa0:	1009883a 	mov	r4,r2
 8001fa4:	8006bd80 	call	8006bd8 <__floatsidf>
 8001fa8:	1011883a 	mov	r8,r2
 8001fac:	1813883a 	mov	r9,r3
 8001fb0:	019999b4 	movhi	r6,26214
 8001fb4:	31999984 	addi	r6,r6,26214
 8001fb8:	01cff9b4 	movhi	r7,16358
 8001fbc:	39d99984 	addi	r7,r7,26214
 8001fc0:	4009883a 	mov	r4,r8
 8001fc4:	480b883a 	mov	r5,r9
 8001fc8:	80062ec0 	call	80062ec <__muldf3>
 8001fcc:	1009883a 	mov	r4,r2
 8001fd0:	180b883a 	mov	r5,r3
 8001fd4:	2005883a 	mov	r2,r4
 8001fd8:	2807883a 	mov	r3,r5
 8001fdc:	1009883a 	mov	r4,r2
 8001fe0:	180b883a 	mov	r5,r3
 8001fe4:	8006b580 	call	8006b58 <__fixdfsi>
 8001fe8:	1007883a 	mov	r3,r2
 8001fec:	e0bffe17 	ldw	r2,-8(fp)
 8001ff0:	10c00315 	stw	r3,12(r2)
        hero->spdY = hero->dash_spd * 0.7;
 8001ff4:	e0bffe17 	ldw	r2,-8(fp)
 8001ff8:	10801617 	ldw	r2,88(r2)
 8001ffc:	1009883a 	mov	r4,r2
 8002000:	8006bd80 	call	8006bd8 <__floatsidf>
 8002004:	1011883a 	mov	r8,r2
 8002008:	1813883a 	mov	r9,r3
 800200c:	019999b4 	movhi	r6,26214
 8002010:	31999984 	addi	r6,r6,26214
 8002014:	01cff9b4 	movhi	r7,16358
 8002018:	39d99984 	addi	r7,r7,26214
 800201c:	4009883a 	mov	r4,r8
 8002020:	480b883a 	mov	r5,r9
 8002024:	80062ec0 	call	80062ec <__muldf3>
 8002028:	1009883a 	mov	r4,r2
 800202c:	180b883a 	mov	r5,r3
 8002030:	2005883a 	mov	r2,r4
 8002034:	2807883a 	mov	r3,r5
 8002038:	1009883a 	mov	r4,r2
 800203c:	180b883a 	mov	r5,r3
 8002040:	8006b580 	call	8006b58 <__fixdfsi>
 8002044:	1007883a 	mov	r3,r2
 8002048:	e0bffe17 	ldw	r2,-8(fp)
 800204c:	10c00415 	stw	r3,16(r2)
 8002050:	00009606 	br	80022ac <Playerstep+0xc04>
      }
      else if (key_pressed[0] && key_pressed[1])
 8002054:	d0abfc03 	ldbu	r2,-20496(gp)
 8002058:	10803fcc 	andi	r2,r2,255
 800205c:	10003426 	beq	r2,zero,8002130 <Playerstep+0xa88>
 8002060:	d0abfc43 	ldbu	r2,-20495(gp)
 8002064:	10803fcc 	andi	r2,r2,255
 8002068:	10003126 	beq	r2,zero,8002130 <Playerstep+0xa88>
      {
        hero->spdX = -hero->dash_spd * 0.7;
 800206c:	e0bffe17 	ldw	r2,-8(fp)
 8002070:	10801617 	ldw	r2,88(r2)
 8002074:	0085c83a 	sub	r2,zero,r2
 8002078:	1009883a 	mov	r4,r2
 800207c:	8006bd80 	call	8006bd8 <__floatsidf>
 8002080:	1011883a 	mov	r8,r2
 8002084:	1813883a 	mov	r9,r3
 8002088:	019999b4 	movhi	r6,26214
 800208c:	31999984 	addi	r6,r6,26214
 8002090:	01cff9b4 	movhi	r7,16358
 8002094:	39d99984 	addi	r7,r7,26214
 8002098:	4009883a 	mov	r4,r8
 800209c:	480b883a 	mov	r5,r9
 80020a0:	80062ec0 	call	80062ec <__muldf3>
 80020a4:	1009883a 	mov	r4,r2
 80020a8:	180b883a 	mov	r5,r3
 80020ac:	2005883a 	mov	r2,r4
 80020b0:	2807883a 	mov	r3,r5
 80020b4:	1009883a 	mov	r4,r2
 80020b8:	180b883a 	mov	r5,r3
 80020bc:	8006b580 	call	8006b58 <__fixdfsi>
 80020c0:	1007883a 	mov	r3,r2
 80020c4:	e0bffe17 	ldw	r2,-8(fp)
 80020c8:	10c00315 	stw	r3,12(r2)
        hero->spdY = -hero->dash_spd * 0.7;
 80020cc:	e0bffe17 	ldw	r2,-8(fp)
 80020d0:	10801617 	ldw	r2,88(r2)
 80020d4:	0085c83a 	sub	r2,zero,r2
 80020d8:	1009883a 	mov	r4,r2
 80020dc:	8006bd80 	call	8006bd8 <__floatsidf>
 80020e0:	1011883a 	mov	r8,r2
 80020e4:	1813883a 	mov	r9,r3
 80020e8:	019999b4 	movhi	r6,26214
 80020ec:	31999984 	addi	r6,r6,26214
 80020f0:	01cff9b4 	movhi	r7,16358
 80020f4:	39d99984 	addi	r7,r7,26214
 80020f8:	4009883a 	mov	r4,r8
 80020fc:	480b883a 	mov	r5,r9
 8002100:	80062ec0 	call	80062ec <__muldf3>
 8002104:	1009883a 	mov	r4,r2
 8002108:	180b883a 	mov	r5,r3
 800210c:	2005883a 	mov	r2,r4
 8002110:	2807883a 	mov	r3,r5
 8002114:	1009883a 	mov	r4,r2
 8002118:	180b883a 	mov	r5,r3
 800211c:	8006b580 	call	8006b58 <__fixdfsi>
 8002120:	1007883a 	mov	r3,r2
 8002124:	e0bffe17 	ldw	r2,-8(fp)
 8002128:	10c00415 	stw	r3,16(r2)
 800212c:	00005f06 	br	80022ac <Playerstep+0xc04>
      }
      else if (key_pressed[1] && key_pressed[2])
 8002130:	d0abfc43 	ldbu	r2,-20495(gp)
 8002134:	10803fcc 	andi	r2,r2,255
 8002138:	10003326 	beq	r2,zero,8002208 <Playerstep+0xb60>
 800213c:	d0abfc83 	ldbu	r2,-20494(gp)
 8002140:	10803fcc 	andi	r2,r2,255
 8002144:	10003026 	beq	r2,zero,8002208 <Playerstep+0xb60>
      {
        hero->spdX = -hero->dash_spd * 0.7;
 8002148:	e0bffe17 	ldw	r2,-8(fp)
 800214c:	10801617 	ldw	r2,88(r2)
 8002150:	0085c83a 	sub	r2,zero,r2
 8002154:	1009883a 	mov	r4,r2
 8002158:	8006bd80 	call	8006bd8 <__floatsidf>
 800215c:	1011883a 	mov	r8,r2
 8002160:	1813883a 	mov	r9,r3
 8002164:	019999b4 	movhi	r6,26214
 8002168:	31999984 	addi	r6,r6,26214
 800216c:	01cff9b4 	movhi	r7,16358
 8002170:	39d99984 	addi	r7,r7,26214
 8002174:	4009883a 	mov	r4,r8
 8002178:	480b883a 	mov	r5,r9
 800217c:	80062ec0 	call	80062ec <__muldf3>
 8002180:	1009883a 	mov	r4,r2
 8002184:	180b883a 	mov	r5,r3
 8002188:	2005883a 	mov	r2,r4
 800218c:	2807883a 	mov	r3,r5
 8002190:	1009883a 	mov	r4,r2
 8002194:	180b883a 	mov	r5,r3
 8002198:	8006b580 	call	8006b58 <__fixdfsi>
 800219c:	1007883a 	mov	r3,r2
 80021a0:	e0bffe17 	ldw	r2,-8(fp)
 80021a4:	10c00315 	stw	r3,12(r2)
        hero->spdY = hero->dash_spd * 0.7;
 80021a8:	e0bffe17 	ldw	r2,-8(fp)
 80021ac:	10801617 	ldw	r2,88(r2)
 80021b0:	1009883a 	mov	r4,r2
 80021b4:	8006bd80 	call	8006bd8 <__floatsidf>
 80021b8:	1011883a 	mov	r8,r2
 80021bc:	1813883a 	mov	r9,r3
 80021c0:	019999b4 	movhi	r6,26214
 80021c4:	31999984 	addi	r6,r6,26214
 80021c8:	01cff9b4 	movhi	r7,16358
 80021cc:	39d99984 	addi	r7,r7,26214
 80021d0:	4009883a 	mov	r4,r8
 80021d4:	480b883a 	mov	r5,r9
 80021d8:	80062ec0 	call	80062ec <__muldf3>
 80021dc:	1009883a 	mov	r4,r2
 80021e0:	180b883a 	mov	r5,r3
 80021e4:	2005883a 	mov	r2,r4
 80021e8:	2807883a 	mov	r3,r5
 80021ec:	1009883a 	mov	r4,r2
 80021f0:	180b883a 	mov	r5,r3
 80021f4:	8006b580 	call	8006b58 <__fixdfsi>
 80021f8:	1007883a 	mov	r3,r2
 80021fc:	e0bffe17 	ldw	r2,-8(fp)
 8002200:	10c00415 	stw	r3,16(r2)
 8002204:	00002906 	br	80022ac <Playerstep+0xc04>
      }
      else if (key_pressed[0])
 8002208:	d0abfc03 	ldbu	r2,-20496(gp)
 800220c:	10803fcc 	andi	r2,r2,255
 8002210:	10000826 	beq	r2,zero,8002234 <Playerstep+0xb8c>
      {
        hero->spdX = 0;
 8002214:	e0bffe17 	ldw	r2,-8(fp)
 8002218:	10000315 	stw	zero,12(r2)
        hero->spdY = -hero->dash_spd;
 800221c:	e0bffe17 	ldw	r2,-8(fp)
 8002220:	10801617 	ldw	r2,88(r2)
 8002224:	0087c83a 	sub	r3,zero,r2
 8002228:	e0bffe17 	ldw	r2,-8(fp)
 800222c:	10c00415 	stw	r3,16(r2)
 8002230:	00001e06 	br	80022ac <Playerstep+0xc04>
      }
      else if (key_pressed[1])
 8002234:	d0abfc43 	ldbu	r2,-20495(gp)
 8002238:	10803fcc 	andi	r2,r2,255
 800223c:	10000826 	beq	r2,zero,8002260 <Playerstep+0xbb8>
      {
        hero->spdX = -hero->dash_spd;
 8002240:	e0bffe17 	ldw	r2,-8(fp)
 8002244:	10801617 	ldw	r2,88(r2)
 8002248:	0087c83a 	sub	r3,zero,r2
 800224c:	e0bffe17 	ldw	r2,-8(fp)
 8002250:	10c00315 	stw	r3,12(r2)
        hero->spdY = 0;
 8002254:	e0bffe17 	ldw	r2,-8(fp)
 8002258:	10000415 	stw	zero,16(r2)
 800225c:	00001306 	br	80022ac <Playerstep+0xc04>
      }
      else if (key_pressed[2])
 8002260:	d0abfc83 	ldbu	r2,-20494(gp)
 8002264:	10803fcc 	andi	r2,r2,255
 8002268:	10000726 	beq	r2,zero,8002288 <Playerstep+0xbe0>
      {
        hero->spdX = 0;
 800226c:	e0bffe17 	ldw	r2,-8(fp)
 8002270:	10000315 	stw	zero,12(r2)
        hero->spdY = hero->dash_spd;
 8002274:	e0bffe17 	ldw	r2,-8(fp)
 8002278:	10c01617 	ldw	r3,88(r2)
 800227c:	e0bffe17 	ldw	r2,-8(fp)
 8002280:	10c00415 	stw	r3,16(r2)
 8002284:	00000906 	br	80022ac <Playerstep+0xc04>
      }
      else if (key_pressed[3])
 8002288:	d0abfcc3 	ldbu	r2,-20493(gp)
 800228c:	10803fcc 	andi	r2,r2,255
 8002290:	10000626 	beq	r2,zero,80022ac <Playerstep+0xc04>
      {
        hero->spdX = hero->dash_spd;
 8002294:	e0bffe17 	ldw	r2,-8(fp)
 8002298:	10c01617 	ldw	r3,88(r2)
 800229c:	e0bffe17 	ldw	r2,-8(fp)
 80022a0:	10c00315 	stw	r3,12(r2)
        hero->spdY = 0;
 80022a4:	e0bffe17 	ldw	r2,-8(fp)
 80022a8:	10000415 	stw	zero,16(r2)
      }

      // update dash target and accel
      if (hero->spdX == 0)
 80022ac:	e0bffe17 	ldw	r2,-8(fp)
 80022b0:	10800317 	ldw	r2,12(r2)
 80022b4:	1000031e 	bne	r2,zero,80022c4 <Playerstep+0xc1c>
        hero->dash_target_x = 0;
 80022b8:	e0bffe17 	ldw	r2,-8(fp)
 80022bc:	10001115 	stw	zero,68(r2)
 80022c0:	00000a06 	br	80022ec <Playerstep+0xc44>
      else if (hero->spdX > 0)
 80022c4:	e0bffe17 	ldw	r2,-8(fp)
 80022c8:	10800317 	ldw	r2,12(r2)
 80022cc:	0080040e 	bge	zero,r2,80022e0 <Playerstep+0xc38>
        hero->dash_target_x = 8;
 80022d0:	e0bffe17 	ldw	r2,-8(fp)
 80022d4:	00c00204 	movi	r3,8
 80022d8:	10c01115 	stw	r3,68(r2)
 80022dc:	00000306 	br	80022ec <Playerstep+0xc44>
      else
        hero->dash_target_x = -8;
 80022e0:	e0bffe17 	ldw	r2,-8(fp)
 80022e4:	00fffe04 	movi	r3,-8
 80022e8:	10c01115 	stw	r3,68(r2)
      if (hero->spdY == 0)
 80022ec:	e0bffe17 	ldw	r2,-8(fp)
 80022f0:	10800417 	ldw	r2,16(r2)
 80022f4:	1000031e 	bne	r2,zero,8002304 <Playerstep+0xc5c>
        hero->dash_target_y = 0;
 80022f8:	e0bffe17 	ldw	r2,-8(fp)
 80022fc:	10001215 	stw	zero,72(r2)
 8002300:	00000a06 	br	800232c <Playerstep+0xc84>
      else if (hero->spdY > 0)
 8002304:	e0bffe17 	ldw	r2,-8(fp)
 8002308:	10800417 	ldw	r2,16(r2)
 800230c:	0080040e 	bge	zero,r2,8002320 <Playerstep+0xc78>
        hero->dash_target_y = 8;
 8002310:	e0bffe17 	ldw	r2,-8(fp)
 8002314:	00c00204 	movi	r3,8
 8002318:	10c01215 	stw	r3,72(r2)
 800231c:	00000306 	br	800232c <Playerstep+0xc84>
      else
        hero->dash_target_y = -6;
 8002320:	e0bffe17 	ldw	r2,-8(fp)
 8002324:	00fffe84 	movi	r3,-6
 8002328:	10c01215 	stw	r3,72(r2)
      hero->dash_accel_x = (hero->spdY == 0 ? 6 : (6 * sqrt(2) / 2));
 800232c:	e0bffe17 	ldw	r2,-8(fp)
 8002330:	10800417 	ldw	r2,16(r2)
 8002334:	1000021e 	bne	r2,zero,8002340 <Playerstep+0xc98>
 8002338:	00800184 	movi	r2,6
 800233c:	00000106 	br	8002344 <Playerstep+0xc9c>
 8002340:	00800104 	movi	r2,4
 8002344:	e0fffe17 	ldw	r3,-8(fp)
 8002348:	18801315 	stw	r2,76(r3)
      hero->dash_accel_y = (hero->spdX == 0 ? 6 : (6 * sqrt(2) / 2));
 800234c:	e0bffe17 	ldw	r2,-8(fp)
 8002350:	10800317 	ldw	r2,12(r2)
 8002354:	1000021e 	bne	r2,zero,8002360 <Playerstep+0xcb8>
 8002358:	00800184 	movi	r2,6
 800235c:	00000106 	br	8002364 <Playerstep+0xcbc>
 8002360:	00800104 	movi	r2,4
 8002364:	e0fffe17 	ldw	r3,-8(fp)
 8002368:	18801415 	stw	r2,80(r3)
    }
  }

  // judge sprite index
  if (!hero->on_ground) // in the air
 800236c:	e0bffe17 	ldw	r2,-8(fp)
 8002370:	10801543 	ldbu	r2,85(r2)
 8002374:	1080005c 	xori	r2,r2,1
 8002378:	10803fcc 	andi	r2,r2,255
 800237c:	10003126 	beq	r2,zero,8002444 <Playerstep+0xd9c>
  {
    hero->hero_index = 3;
 8002380:	e0bffe17 	ldw	r2,-8(fp)
 8002384:	00c000c4 	movi	r3,3
 8002388:	10c00915 	stw	r3,36(r2)
    if (is_solid(hero->x + 1, hero->y))
 800238c:	e0bffe17 	ldw	r2,-8(fp)
 8002390:	10800117 	ldw	r2,4(r2)
 8002394:	10c00044 	addi	r3,r2,1
 8002398:	e0bffe17 	ldw	r2,-8(fp)
 800239c:	10800217 	ldw	r2,8(r2)
 80023a0:	100b883a 	mov	r5,r2
 80023a4:	1809883a 	mov	r4,r3
 80023a8:	8000e480 	call	8000e48 <is_solid>
 80023ac:	10000426 	beq	r2,zero,80023c0 <Playerstep+0xd18>
      hero->hero_index = 5;
 80023b0:	e0bffe17 	ldw	r2,-8(fp)
 80023b4:	00c00144 	movi	r3,5
 80023b8:	10c00915 	stw	r3,36(r2)
 80023bc:	00006406 	br	8002550 <Playerstep+0xea8>
    else if (is_solid(hero->x - 1, hero->y))
 80023c0:	e0bffe17 	ldw	r2,-8(fp)
 80023c4:	10800117 	ldw	r2,4(r2)
 80023c8:	10ffffc4 	addi	r3,r2,-1
 80023cc:	e0bffe17 	ldw	r2,-8(fp)
 80023d0:	10800217 	ldw	r2,8(r2)
 80023d4:	100b883a 	mov	r5,r2
 80023d8:	1809883a 	mov	r4,r3
 80023dc:	8000e480 	call	8000e48 <is_solid>
 80023e0:	10000726 	beq	r2,zero,8002400 <Playerstep+0xd58>
    {
      hero->hero_index = 5;
 80023e4:	e0bffe17 	ldw	r2,-8(fp)
 80023e8:	00c00144 	movi	r3,5
 80023ec:	10c00915 	stw	r3,36(r2)
      hero->flip = true;
 80023f0:	e0bffe17 	ldw	r2,-8(fp)
 80023f4:	00c00044 	movi	r3,1
 80023f8:	10c00885 	stb	r3,34(r2)
 80023fc:	00005406 	br	8002550 <Playerstep+0xea8>
    }
    else if (key_pressed[3])
 8002400:	d0abfcc3 	ldbu	r2,-20493(gp)
 8002404:	10803fcc 	andi	r2,r2,255
 8002408:	10000426 	beq	r2,zero,800241c <Playerstep+0xd74>
      hero->hero_index = 3;
 800240c:	e0bffe17 	ldw	r2,-8(fp)
 8002410:	00c000c4 	movi	r3,3
 8002414:	10c00915 	stw	r3,36(r2)
 8002418:	00004d06 	br	8002550 <Playerstep+0xea8>
    else if (key_pressed[1])
 800241c:	d0abfc43 	ldbu	r2,-20495(gp)
 8002420:	10803fcc 	andi	r2,r2,255
 8002424:	10004a26 	beq	r2,zero,8002550 <Playerstep+0xea8>
    {
      hero->hero_index = 3;
 8002428:	e0bffe17 	ldw	r2,-8(fp)
 800242c:	00c000c4 	movi	r3,3
 8002430:	10c00915 	stw	r3,36(r2)
      hero->flip = true;
 8002434:	e0bffe17 	ldw	r2,-8(fp)
 8002438:	00c00044 	movi	r3,1
 800243c:	10c00885 	stb	r3,34(r2)
 8002440:	00004306 	br	8002550 <Playerstep+0xea8>
    }
  }
  else if (key_pressed[2])
 8002444:	d0abfc83 	ldbu	r2,-20494(gp)
 8002448:	10803fcc 	andi	r2,r2,255
 800244c:	10000a26 	beq	r2,zero,8002478 <Playerstep+0xdd0>
  {
    hero->hero_index = 6;
 8002450:	e0bffe17 	ldw	r2,-8(fp)
 8002454:	00c00184 	movi	r3,6
 8002458:	10c00915 	stw	r3,36(r2)
    if (key_pressed[1])
 800245c:	d0abfc43 	ldbu	r2,-20495(gp)
 8002460:	10803fcc 	andi	r2,r2,255
 8002464:	10003a26 	beq	r2,zero,8002550 <Playerstep+0xea8>
      hero->flip = true;
 8002468:	e0bffe17 	ldw	r2,-8(fp)
 800246c:	00c00044 	movi	r3,1
 8002470:	10c00885 	stb	r3,34(r2)
 8002474:	00003606 	br	8002550 <Playerstep+0xea8>
  }
  else if (key_pressed[0])
 8002478:	d0abfc03 	ldbu	r2,-20496(gp)
 800247c:	10803fcc 	andi	r2,r2,255
 8002480:	10000a26 	beq	r2,zero,80024ac <Playerstep+0xe04>
  {
    hero->hero_index = 7;
 8002484:	e0bffe17 	ldw	r2,-8(fp)
 8002488:	00c001c4 	movi	r3,7
 800248c:	10c00915 	stw	r3,36(r2)
    if (key_pressed[1])
 8002490:	d0abfc43 	ldbu	r2,-20495(gp)
 8002494:	10803fcc 	andi	r2,r2,255
 8002498:	10002d26 	beq	r2,zero,8002550 <Playerstep+0xea8>
      hero->flip = true;
 800249c:	e0bffe17 	ldw	r2,-8(fp)
 80024a0:	00c00044 	movi	r3,1
 80024a4:	10c00885 	stb	r3,34(r2)
 80024a8:	00002906 	br	8002550 <Playerstep+0xea8>
  }
  else if (hero->spdX == 0 || (!key_pressed[1]) && (!key_pressed[3]))
 80024ac:	e0bffe17 	ldw	r2,-8(fp)
 80024b0:	10800317 	ldw	r2,12(r2)
 80024b4:	10000826 	beq	r2,zero,80024d8 <Playerstep+0xe30>
 80024b8:	d0abfc43 	ldbu	r2,-20495(gp)
 80024bc:	1080005c 	xori	r2,r2,1
 80024c0:	10803fcc 	andi	r2,r2,255
 80024c4:	10000826 	beq	r2,zero,80024e8 <Playerstep+0xe40>
 80024c8:	d0abfcc3 	ldbu	r2,-20493(gp)
 80024cc:	1080005c 	xori	r2,r2,1
 80024d0:	10803fcc 	andi	r2,r2,255
 80024d4:	10000426 	beq	r2,zero,80024e8 <Playerstep+0xe40>
    hero->hero_index = 1;
 80024d8:	e0bffe17 	ldw	r2,-8(fp)
 80024dc:	00c00044 	movi	r3,1
 80024e0:	10c00915 	stw	r3,36(r2)
 80024e4:	00001a06 	br	8002550 <Playerstep+0xea8>
  else // walking
  {
    hero->walk_offset += 1;
 80024e8:	e0bffe17 	ldw	r2,-8(fp)
 80024ec:	10800b17 	ldw	r2,44(r2)
 80024f0:	10c00044 	addi	r3,r2,1
 80024f4:	e0bffe17 	ldw	r2,-8(fp)
 80024f8:	10c00b15 	stw	r3,44(r2)
    if (hero->walk_offset > 4)
 80024fc:	e0bffe17 	ldw	r2,-8(fp)
 8002500:	10800b17 	ldw	r2,44(r2)
 8002504:	10800150 	cmplti	r2,r2,5
 8002508:	1000021e 	bne	r2,zero,8002514 <Playerstep+0xe6c>
      hero->walk_offset = 0;
 800250c:	e0bffe17 	ldw	r2,-8(fp)
 8002510:	10000b15 	stw	zero,44(r2)
    hero->hero_index = (hero->walk_offset < 2 ? 2 : 4);
 8002514:	e0bffe17 	ldw	r2,-8(fp)
 8002518:	10800b17 	ldw	r2,44(r2)
 800251c:	10800088 	cmpgei	r2,r2,2
 8002520:	1000021e 	bne	r2,zero,800252c <Playerstep+0xe84>
 8002524:	00800084 	movi	r2,2
 8002528:	00000106 	br	8002530 <Playerstep+0xe88>
 800252c:	00800104 	movi	r2,4
 8002530:	e0fffe17 	ldw	r3,-8(fp)
 8002534:	18800915 	stw	r2,36(r3)
    if (key_pressed[1])
 8002538:	d0abfc43 	ldbu	r2,-20495(gp)
 800253c:	10803fcc 	andi	r2,r2,255
 8002540:	10000326 	beq	r2,zero,8002550 <Playerstep+0xea8>
      hero->flip = true;
 8002544:	e0bffe17 	ldw	r2,-8(fp)
 8002548:	00c00044 	movi	r3,1
 800254c:	10c00885 	stb	r3,34(r2)
  }

  // judge color
  hero->hair_color = hero->dashes;
 8002550:	e0bffe17 	ldw	r2,-8(fp)
 8002554:	10c00f17 	ldw	r3,60(r2)
 8002558:	e0bffe17 	ldw	r2,-8(fp)
 800255c:	10c00a15 	stw	r3,40(r2)

  // next level
  if (hero->y < -8 && level_index < level_tot - 1) // level_tot =2
 8002560:	e0bffe17 	ldw	r2,-8(fp)
 8002564:	10800217 	ldw	r2,8(r2)
 8002568:	10bffe08 	cmpgei	r2,r2,-8
 800256c:	10005d1e 	bne	r2,zero,80026e4 <Playerstep+0x103c>
 8002570:	d0abfe17 	ldw	r2,-20488(gp)
 8002574:	10800188 	cmpgei	r2,r2,6
 8002578:	10005a1e 	bne	r2,zero,80026e4 <Playerstep+0x103c>
  {
    level_index++;
 800257c:	d0abfe17 	ldw	r2,-20488(gp)
 8002580:	10800044 	addi	r2,r2,1
 8002584:	d0abfe15 	stw	r2,-20488(gp)
    collision_fill(level_index);
 8002588:	d0abfe17 	ldw	r2,-20488(gp)
 800258c:	1009883a 	mov	r4,r2
 8002590:	8000c700 	call	8000c70 <collision_fill>
    // set map
    for (int i = 0; i < 16; i++)
 8002594:	e03ffc15 	stw	zero,-16(fp)
 8002598:	00002206 	br	8002624 <Playerstep+0xf7c>
    {
      for (int j = 0; j < 16; j++)
 800259c:	e03ffd15 	stw	zero,-12(fp)
 80025a0:	00001a06 	br	800260c <Playerstep+0xf64>
      {
        setMAP(i * 16 + j, map[level_index][i][j]);
 80025a4:	e0bffc17 	ldw	r2,-16(fp)
 80025a8:	1004913a 	slli	r2,r2,4
 80025ac:	1007883a 	mov	r3,r2
 80025b0:	e0bffd17 	ldw	r2,-12(fp)
 80025b4:	1885883a 	add	r2,r3,r2
 80025b8:	11803fcc 	andi	r6,r2,255
 80025bc:	d0ebfe17 	ldw	r3,-20488(gp)
 80025c0:	00820074 	movhi	r2,2049
 80025c4:	10afdf04 	addi	r2,r2,-16516
 80025c8:	1808913a 	slli	r4,r3,4
 80025cc:	e0fffc17 	ldw	r3,-16(fp)
 80025d0:	20c7883a 	add	r3,r4,r3
 80025d4:	1808913a 	slli	r4,r3,4
 80025d8:	e0fffd17 	ldw	r3,-12(fp)
 80025dc:	20c7883a 	add	r3,r4,r3
 80025e0:	18c7883a 	add	r3,r3,r3
 80025e4:	18c7883a 	add	r3,r3,r3
 80025e8:	10c5883a 	add	r2,r2,r3
 80025ec:	10800017 	ldw	r2,0(r2)
 80025f0:	10803fcc 	andi	r2,r2,255
 80025f4:	100b883a 	mov	r5,r2
 80025f8:	3009883a 	mov	r4,r6
 80025fc:	80033a80 	call	80033a8 <setMAP>
    level_index++;
    collision_fill(level_index);
    // set map
    for (int i = 0; i < 16; i++)
    {
      for (int j = 0; j < 16; j++)
 8002600:	e0bffd17 	ldw	r2,-12(fp)
 8002604:	10800044 	addi	r2,r2,1
 8002608:	e0bffd15 	stw	r2,-12(fp)
 800260c:	e0bffd17 	ldw	r2,-12(fp)
 8002610:	10800410 	cmplti	r2,r2,16
 8002614:	103fe31e 	bne	r2,zero,80025a4 <__alt_data_end+0xfc0025a4>
  if (hero->y < -8 && level_index < level_tot - 1) // level_tot =2
  {
    level_index++;
    collision_fill(level_index);
    // set map
    for (int i = 0; i < 16; i++)
 8002618:	e0bffc17 	ldw	r2,-16(fp)
 800261c:	10800044 	addi	r2,r2,1
 8002620:	e0bffc15 	stw	r2,-16(fp)
 8002624:	e0bffc17 	ldw	r2,-16(fp)
 8002628:	10800410 	cmplti	r2,r2,16
 800262c:	103fdb1e 	bne	r2,zero,800259c <__alt_data_end+0xfc00259c>
      for (int j = 0; j < 16; j++)
      {
        setMAP(i * 16 + j, map[level_index][i][j]);
      }
    }
    hero->hero_index = 0;
 8002630:	e0bffe17 	ldw	r2,-8(fp)
 8002634:	10000915 	stw	zero,36(r2)
    setHERO(hero->hero_index, hero->x, hero->y, hero->flip, hero->hair_color, 0,
 8002638:	e0bffe17 	ldw	r2,-8(fp)
 800263c:	10800917 	ldw	r2,36(r2)
 8002640:	10c03fcc 	andi	r3,r2,255
 8002644:	e0bffe17 	ldw	r2,-8(fp)
 8002648:	10800117 	ldw	r2,4(r2)
 800264c:	11003fcc 	andi	r4,r2,255
 8002650:	e0bffe17 	ldw	r2,-8(fp)
 8002654:	10800217 	ldw	r2,8(r2)
 8002658:	11403fcc 	andi	r5,r2,255
 800265c:	e0bffe17 	ldw	r2,-8(fp)
 8002660:	10800883 	ldbu	r2,34(r2)
 8002664:	11803fcc 	andi	r6,r2,255
 8002668:	e0bffe17 	ldw	r2,-8(fp)
 800266c:	10800a17 	ldw	r2,40(r2)
 8002670:	10803fcc 	andi	r2,r2,255
 8002674:	d8000215 	stw	zero,8(sp)
 8002678:	d8000115 	stw	zero,4(sp)
 800267c:	d8800015 	stw	r2,0(sp)
 8002680:	300f883a 	mov	r7,r6
 8002684:	280d883a 	mov	r6,r5
 8002688:	200b883a 	mov	r5,r4
 800268c:	1809883a 	mov	r4,r3
 8002690:	800045c0 	call	800045c <setHERO>
            0);
    player_init(hero, birth[level_index][0], birth[level_index][1]);
 8002694:	d0ebfe17 	ldw	r3,-20488(gp)
 8002698:	00820074 	movhi	r2,2049
 800269c:	109fcd04 	addi	r2,r2,32564
 80026a0:	180690fa 	slli	r3,r3,3
 80026a4:	10c5883a 	add	r2,r2,r3
 80026a8:	11000017 	ldw	r4,0(r2)
 80026ac:	d0ebfe17 	ldw	r3,-20488(gp)
 80026b0:	00820074 	movhi	r2,2049
 80026b4:	109fcd04 	addi	r2,r2,32564
 80026b8:	180690fa 	slli	r3,r3,3
 80026bc:	10c5883a 	add	r2,r2,r3
 80026c0:	10800104 	addi	r2,r2,4
 80026c4:	10800017 	ldw	r2,0(r2)
 80026c8:	100d883a 	mov	r6,r2
 80026cc:	200b883a 	mov	r5,r4
 80026d0:	e13ffe17 	ldw	r4,-8(fp)
 80026d4:	800137c0 	call	800137c <player_init>
    usleep(100000);
 80026d8:	010000b4 	movhi	r4,2
 80026dc:	2121a804 	addi	r4,r4,-31072
 80026e0:	80078200 	call	8007820 <usleep>
    // TODO:
  }
}
 80026e4:	e6ffff04 	addi	sp,fp,-4
 80026e8:	dfc00217 	ldw	ra,8(sp)
 80026ec:	df000117 	ldw	fp,4(sp)
 80026f0:	dc000017 	ldw	r16,0(sp)
 80026f4:	dec00304 	addi	sp,sp,12
 80026f8:	f800283a 	ret

080026fc <main>:

int main()
{
 80026fc:	deffcd04 	addi	sp,sp,-204
 8002700:	dfc03215 	stw	ra,200(sp)
 8002704:	df003115 	stw	fp,196(sp)
 8002708:	df003104 	addi	fp,sp,196
  SGTL5000_init();
 800270c:	80008100 	call	8000810 <SGTL5000_init>
  printf("SGTL5000 initialized!\n");
 8002710:	01020074 	movhi	r4,2049
 8002714:	212f4204 	addi	r4,r4,-17144
 8002718:	8006e200 	call	8006e20 <puts>
  BYTE rcode;
  BOOT_MOUSE_REPORT buf; // USB mouse report
  BOOT_KBD_REPORT kbdbuf;

  BYTE runningdebugflag = 0; // flag to dump out a bunch of information when we
 800271c:	e03fda05 	stb	zero,-152(fp)
                             // first get to USB_STATE_RUNNING
  BYTE errorflag = 0;        // flag once we get an error device so we don't keep
 8002720:	e03fda45 	stb	zero,-151(fp)
                             // dumping out state info
  BYTE device;
  WORD keycode;

  printf("initializing MAX3421E...\n");
 8002724:	01020074 	movhi	r4,2049
 8002728:	212f4804 	addi	r4,r4,-17120
 800272c:	8006e200 	call	8006e20 <puts>
  MAX3421E_init();
 8002730:	800450c0 	call	800450c <MAX3421E_init>
  printf("initializing USB...\n");
 8002734:	01020074 	movhi	r4,2049
 8002738:	212f4f04 	addi	r4,r4,-17092
 800273c:	8006e200 	call	8006e20 <puts>
  USB_init();
 8002740:	8004c9c0 	call	8004c9c <USB_init>

  // init collide_box
  // wall
  for (int i = 0; i < 4; i++)
 8002744:	e03fd215 	stw	zero,-184(fp)
 8002748:	00011c06 	br	8002bbc <main+0x4c0>
  {
    for (int j = 0; j < 4; j++)
 800274c:	e03fd315 	stw	zero,-180(fp)
 8002750:	00011406 	br	8002ba4 <main+0x4a8>
    {
      collide_box[32][i][j] = 1;
 8002754:	00820074 	movhi	r2,2049
 8002758:	1087c304 	addi	r2,r2,7948
 800275c:	e0ffd217 	ldw	r3,-184(fp)
 8002760:	18c7883a 	add	r3,r3,r3
 8002764:	18c9883a 	add	r4,r3,r3
 8002768:	e0ffd317 	ldw	r3,-180(fp)
 800276c:	20c7883a 	add	r3,r4,r3
 8002770:	18c08004 	addi	r3,r3,512
 8002774:	18c7883a 	add	r3,r3,r3
 8002778:	18c7883a 	add	r3,r3,r3
 800277c:	10c5883a 	add	r2,r2,r3
 8002780:	00c00044 	movi	r3,1
 8002784:	10c00015 	stw	r3,0(r2)
      collide_box[33][i][j] = 1;
 8002788:	00820074 	movhi	r2,2049
 800278c:	1087c304 	addi	r2,r2,7948
 8002790:	e0ffd217 	ldw	r3,-184(fp)
 8002794:	18c7883a 	add	r3,r3,r3
 8002798:	18c9883a 	add	r4,r3,r3
 800279c:	e0ffd317 	ldw	r3,-180(fp)
 80027a0:	20c7883a 	add	r3,r4,r3
 80027a4:	18c08404 	addi	r3,r3,528
 80027a8:	18c7883a 	add	r3,r3,r3
 80027ac:	18c7883a 	add	r3,r3,r3
 80027b0:	10c5883a 	add	r2,r2,r3
 80027b4:	00c00044 	movi	r3,1
 80027b8:	10c00015 	stw	r3,0(r2)
      collide_box[34][i][j] = 1;
 80027bc:	00820074 	movhi	r2,2049
 80027c0:	1087c304 	addi	r2,r2,7948
 80027c4:	e0ffd217 	ldw	r3,-184(fp)
 80027c8:	18c7883a 	add	r3,r3,r3
 80027cc:	18c9883a 	add	r4,r3,r3
 80027d0:	e0ffd317 	ldw	r3,-180(fp)
 80027d4:	20c7883a 	add	r3,r4,r3
 80027d8:	18c08804 	addi	r3,r3,544
 80027dc:	18c7883a 	add	r3,r3,r3
 80027e0:	18c7883a 	add	r3,r3,r3
 80027e4:	10c5883a 	add	r2,r2,r3
 80027e8:	00c00044 	movi	r3,1
 80027ec:	10c00015 	stw	r3,0(r2)
      collide_box[35][i][j] = 1;
 80027f0:	00820074 	movhi	r2,2049
 80027f4:	1087c304 	addi	r2,r2,7948
 80027f8:	e0ffd217 	ldw	r3,-184(fp)
 80027fc:	18c7883a 	add	r3,r3,r3
 8002800:	18c9883a 	add	r4,r3,r3
 8002804:	e0ffd317 	ldw	r3,-180(fp)
 8002808:	20c7883a 	add	r3,r4,r3
 800280c:	18c08c04 	addi	r3,r3,560
 8002810:	18c7883a 	add	r3,r3,r3
 8002814:	18c7883a 	add	r3,r3,r3
 8002818:	10c5883a 	add	r2,r2,r3
 800281c:	00c00044 	movi	r3,1
 8002820:	10c00015 	stw	r3,0(r2)
      collide_box[36][i][j] = 1;
 8002824:	00820074 	movhi	r2,2049
 8002828:	1087c304 	addi	r2,r2,7948
 800282c:	e0ffd217 	ldw	r3,-184(fp)
 8002830:	18c7883a 	add	r3,r3,r3
 8002834:	18c9883a 	add	r4,r3,r3
 8002838:	e0ffd317 	ldw	r3,-180(fp)
 800283c:	20c7883a 	add	r3,r4,r3
 8002840:	18c09004 	addi	r3,r3,576
 8002844:	18c7883a 	add	r3,r3,r3
 8002848:	18c7883a 	add	r3,r3,r3
 800284c:	10c5883a 	add	r2,r2,r3
 8002850:	00c00044 	movi	r3,1
 8002854:	10c00015 	stw	r3,0(r2)
      collide_box[37][i][j] = 1;
 8002858:	00820074 	movhi	r2,2049
 800285c:	1087c304 	addi	r2,r2,7948
 8002860:	e0ffd217 	ldw	r3,-184(fp)
 8002864:	18c7883a 	add	r3,r3,r3
 8002868:	18c9883a 	add	r4,r3,r3
 800286c:	e0ffd317 	ldw	r3,-180(fp)
 8002870:	20c7883a 	add	r3,r4,r3
 8002874:	18c09404 	addi	r3,r3,592
 8002878:	18c7883a 	add	r3,r3,r3
 800287c:	18c7883a 	add	r3,r3,r3
 8002880:	10c5883a 	add	r2,r2,r3
 8002884:	00c00044 	movi	r3,1
 8002888:	10c00015 	stw	r3,0(r2)
      collide_box[38][i][j] = 1;
 800288c:	00820074 	movhi	r2,2049
 8002890:	1087c304 	addi	r2,r2,7948
 8002894:	e0ffd217 	ldw	r3,-184(fp)
 8002898:	18c7883a 	add	r3,r3,r3
 800289c:	18c9883a 	add	r4,r3,r3
 80028a0:	e0ffd317 	ldw	r3,-180(fp)
 80028a4:	20c7883a 	add	r3,r4,r3
 80028a8:	18c09804 	addi	r3,r3,608
 80028ac:	18c7883a 	add	r3,r3,r3
 80028b0:	18c7883a 	add	r3,r3,r3
 80028b4:	10c5883a 	add	r2,r2,r3
 80028b8:	00c00044 	movi	r3,1
 80028bc:	10c00015 	stw	r3,0(r2)
      collide_box[39][i][j] = 1;
 80028c0:	00820074 	movhi	r2,2049
 80028c4:	1087c304 	addi	r2,r2,7948
 80028c8:	e0ffd217 	ldw	r3,-184(fp)
 80028cc:	18c7883a 	add	r3,r3,r3
 80028d0:	18c9883a 	add	r4,r3,r3
 80028d4:	e0ffd317 	ldw	r3,-180(fp)
 80028d8:	20c7883a 	add	r3,r4,r3
 80028dc:	18c09c04 	addi	r3,r3,624
 80028e0:	18c7883a 	add	r3,r3,r3
 80028e4:	18c7883a 	add	r3,r3,r3
 80028e8:	10c5883a 	add	r2,r2,r3
 80028ec:	00c00044 	movi	r3,1
 80028f0:	10c00015 	stw	r3,0(r2)
      collide_box[48][i][j] = 1;
 80028f4:	00820074 	movhi	r2,2049
 80028f8:	1087c304 	addi	r2,r2,7948
 80028fc:	e0ffd217 	ldw	r3,-184(fp)
 8002900:	18c7883a 	add	r3,r3,r3
 8002904:	18c9883a 	add	r4,r3,r3
 8002908:	e0ffd317 	ldw	r3,-180(fp)
 800290c:	20c7883a 	add	r3,r4,r3
 8002910:	18c0c004 	addi	r3,r3,768
 8002914:	18c7883a 	add	r3,r3,r3
 8002918:	18c7883a 	add	r3,r3,r3
 800291c:	10c5883a 	add	r2,r2,r3
 8002920:	00c00044 	movi	r3,1
 8002924:	10c00015 	stw	r3,0(r2)
      collide_box[49][i][j] = 1;
 8002928:	00820074 	movhi	r2,2049
 800292c:	1087c304 	addi	r2,r2,7948
 8002930:	e0ffd217 	ldw	r3,-184(fp)
 8002934:	18c7883a 	add	r3,r3,r3
 8002938:	18c9883a 	add	r4,r3,r3
 800293c:	e0ffd317 	ldw	r3,-180(fp)
 8002940:	20c7883a 	add	r3,r4,r3
 8002944:	18c0c404 	addi	r3,r3,784
 8002948:	18c7883a 	add	r3,r3,r3
 800294c:	18c7883a 	add	r3,r3,r3
 8002950:	10c5883a 	add	r2,r2,r3
 8002954:	00c00044 	movi	r3,1
 8002958:	10c00015 	stw	r3,0(r2)
      collide_box[50][i][j] = 1;
 800295c:	00820074 	movhi	r2,2049
 8002960:	1087c304 	addi	r2,r2,7948
 8002964:	e0ffd217 	ldw	r3,-184(fp)
 8002968:	18c7883a 	add	r3,r3,r3
 800296c:	18c9883a 	add	r4,r3,r3
 8002970:	e0ffd317 	ldw	r3,-180(fp)
 8002974:	20c7883a 	add	r3,r4,r3
 8002978:	18c0c804 	addi	r3,r3,800
 800297c:	18c7883a 	add	r3,r3,r3
 8002980:	18c7883a 	add	r3,r3,r3
 8002984:	10c5883a 	add	r2,r2,r3
 8002988:	00c00044 	movi	r3,1
 800298c:	10c00015 	stw	r3,0(r2)
      collide_box[51][i][j] = 1;
 8002990:	00820074 	movhi	r2,2049
 8002994:	1087c304 	addi	r2,r2,7948
 8002998:	e0ffd217 	ldw	r3,-184(fp)
 800299c:	18c7883a 	add	r3,r3,r3
 80029a0:	18c9883a 	add	r4,r3,r3
 80029a4:	e0ffd317 	ldw	r3,-180(fp)
 80029a8:	20c7883a 	add	r3,r4,r3
 80029ac:	18c0cc04 	addi	r3,r3,816
 80029b0:	18c7883a 	add	r3,r3,r3
 80029b4:	18c7883a 	add	r3,r3,r3
 80029b8:	10c5883a 	add	r2,r2,r3
 80029bc:	00c00044 	movi	r3,1
 80029c0:	10c00015 	stw	r3,0(r2)
      collide_box[52][i][j] = 1;
 80029c4:	00820074 	movhi	r2,2049
 80029c8:	1087c304 	addi	r2,r2,7948
 80029cc:	e0ffd217 	ldw	r3,-184(fp)
 80029d0:	18c7883a 	add	r3,r3,r3
 80029d4:	18c9883a 	add	r4,r3,r3
 80029d8:	e0ffd317 	ldw	r3,-180(fp)
 80029dc:	20c7883a 	add	r3,r4,r3
 80029e0:	18c0d004 	addi	r3,r3,832
 80029e4:	18c7883a 	add	r3,r3,r3
 80029e8:	18c7883a 	add	r3,r3,r3
 80029ec:	10c5883a 	add	r2,r2,r3
 80029f0:	00c00044 	movi	r3,1
 80029f4:	10c00015 	stw	r3,0(r2)
      collide_box[53][i][j] = 1;
 80029f8:	00820074 	movhi	r2,2049
 80029fc:	1087c304 	addi	r2,r2,7948
 8002a00:	e0ffd217 	ldw	r3,-184(fp)
 8002a04:	18c7883a 	add	r3,r3,r3
 8002a08:	18c9883a 	add	r4,r3,r3
 8002a0c:	e0ffd317 	ldw	r3,-180(fp)
 8002a10:	20c7883a 	add	r3,r4,r3
 8002a14:	18c0d404 	addi	r3,r3,848
 8002a18:	18c7883a 	add	r3,r3,r3
 8002a1c:	18c7883a 	add	r3,r3,r3
 8002a20:	10c5883a 	add	r2,r2,r3
 8002a24:	00c00044 	movi	r3,1
 8002a28:	10c00015 	stw	r3,0(r2)
      collide_box[54][i][j] = 1;
 8002a2c:	00820074 	movhi	r2,2049
 8002a30:	1087c304 	addi	r2,r2,7948
 8002a34:	e0ffd217 	ldw	r3,-184(fp)
 8002a38:	18c7883a 	add	r3,r3,r3
 8002a3c:	18c9883a 	add	r4,r3,r3
 8002a40:	e0ffd317 	ldw	r3,-180(fp)
 8002a44:	20c7883a 	add	r3,r4,r3
 8002a48:	18c0d804 	addi	r3,r3,864
 8002a4c:	18c7883a 	add	r3,r3,r3
 8002a50:	18c7883a 	add	r3,r3,r3
 8002a54:	10c5883a 	add	r2,r2,r3
 8002a58:	00c00044 	movi	r3,1
 8002a5c:	10c00015 	stw	r3,0(r2)
      collide_box[55][i][j] = 1;
 8002a60:	00820074 	movhi	r2,2049
 8002a64:	1087c304 	addi	r2,r2,7948
 8002a68:	e0ffd217 	ldw	r3,-184(fp)
 8002a6c:	18c7883a 	add	r3,r3,r3
 8002a70:	18c9883a 	add	r4,r3,r3
 8002a74:	e0ffd317 	ldw	r3,-180(fp)
 8002a78:	20c7883a 	add	r3,r4,r3
 8002a7c:	18c0dc04 	addi	r3,r3,880
 8002a80:	18c7883a 	add	r3,r3,r3
 8002a84:	18c7883a 	add	r3,r3,r3
 8002a88:	10c5883a 	add	r2,r2,r3
 8002a8c:	00c00044 	movi	r3,1
 8002a90:	10c00015 	stw	r3,0(r2)
      collide_box[64][i][j] = 1;
 8002a94:	00820074 	movhi	r2,2049
 8002a98:	1087c304 	addi	r2,r2,7948
 8002a9c:	e0ffd217 	ldw	r3,-184(fp)
 8002aa0:	18c7883a 	add	r3,r3,r3
 8002aa4:	18c9883a 	add	r4,r3,r3
 8002aa8:	e0ffd317 	ldw	r3,-180(fp)
 8002aac:	20c7883a 	add	r3,r4,r3
 8002ab0:	18c10004 	addi	r3,r3,1024
 8002ab4:	18c7883a 	add	r3,r3,r3
 8002ab8:	18c7883a 	add	r3,r3,r3
 8002abc:	10c5883a 	add	r2,r2,r3
 8002ac0:	00c00044 	movi	r3,1
 8002ac4:	10c00015 	stw	r3,0(r2)
      collide_box[65][i][j] = 1;
 8002ac8:	00820074 	movhi	r2,2049
 8002acc:	1087c304 	addi	r2,r2,7948
 8002ad0:	e0ffd217 	ldw	r3,-184(fp)
 8002ad4:	18c7883a 	add	r3,r3,r3
 8002ad8:	18c9883a 	add	r4,r3,r3
 8002adc:	e0ffd317 	ldw	r3,-180(fp)
 8002ae0:	20c7883a 	add	r3,r4,r3
 8002ae4:	18c10404 	addi	r3,r3,1040
 8002ae8:	18c7883a 	add	r3,r3,r3
 8002aec:	18c7883a 	add	r3,r3,r3
 8002af0:	10c5883a 	add	r2,r2,r3
 8002af4:	00c00044 	movi	r3,1
 8002af8:	10c00015 	stw	r3,0(r2)
      collide_box[80][i][j] = 1;
 8002afc:	00820074 	movhi	r2,2049
 8002b00:	1087c304 	addi	r2,r2,7948
 8002b04:	e0ffd217 	ldw	r3,-184(fp)
 8002b08:	18c7883a 	add	r3,r3,r3
 8002b0c:	18c9883a 	add	r4,r3,r3
 8002b10:	e0ffd317 	ldw	r3,-180(fp)
 8002b14:	20c7883a 	add	r3,r4,r3
 8002b18:	18c14004 	addi	r3,r3,1280
 8002b1c:	18c7883a 	add	r3,r3,r3
 8002b20:	18c7883a 	add	r3,r3,r3
 8002b24:	10c5883a 	add	r2,r2,r3
 8002b28:	00c00044 	movi	r3,1
 8002b2c:	10c00015 	stw	r3,0(r2)
      collide_box[81][i][j] = 1;
 8002b30:	00820074 	movhi	r2,2049
 8002b34:	1087c304 	addi	r2,r2,7948
 8002b38:	e0ffd217 	ldw	r3,-184(fp)
 8002b3c:	18c7883a 	add	r3,r3,r3
 8002b40:	18c9883a 	add	r4,r3,r3
 8002b44:	e0ffd317 	ldw	r3,-180(fp)
 8002b48:	20c7883a 	add	r3,r4,r3
 8002b4c:	18c14404 	addi	r3,r3,1296
 8002b50:	18c7883a 	add	r3,r3,r3
 8002b54:	18c7883a 	add	r3,r3,r3
 8002b58:	10c5883a 	add	r2,r2,r3
 8002b5c:	00c00044 	movi	r3,1
 8002b60:	10c00015 	stw	r3,0(r2)
      collide_box[72][i][j] = 1;
 8002b64:	00820074 	movhi	r2,2049
 8002b68:	1087c304 	addi	r2,r2,7948
 8002b6c:	e0ffd217 	ldw	r3,-184(fp)
 8002b70:	18c7883a 	add	r3,r3,r3
 8002b74:	18c9883a 	add	r4,r3,r3
 8002b78:	e0ffd317 	ldw	r3,-180(fp)
 8002b7c:	20c7883a 	add	r3,r4,r3
 8002b80:	18c12004 	addi	r3,r3,1152
 8002b84:	18c7883a 	add	r3,r3,r3
 8002b88:	18c7883a 	add	r3,r3,r3
 8002b8c:	10c5883a 	add	r2,r2,r3
 8002b90:	00c00044 	movi	r3,1
 8002b94:	10c00015 	stw	r3,0(r2)

  // init collide_box
  // wall
  for (int i = 0; i < 4; i++)
  {
    for (int j = 0; j < 4; j++)
 8002b98:	e0bfd317 	ldw	r2,-180(fp)
 8002b9c:	10800044 	addi	r2,r2,1
 8002ba0:	e0bfd315 	stw	r2,-180(fp)
 8002ba4:	e0bfd317 	ldw	r2,-180(fp)
 8002ba8:	10800110 	cmplti	r2,r2,4
 8002bac:	103ee91e 	bne	r2,zero,8002754 <__alt_data_end+0xfc002754>
  printf("initializing USB...\n");
  USB_init();

  // init collide_box
  // wall
  for (int i = 0; i < 4; i++)
 8002bb0:	e0bfd217 	ldw	r2,-184(fp)
 8002bb4:	10800044 	addi	r2,r2,1
 8002bb8:	e0bfd215 	stw	r2,-184(fp)
 8002bbc:	e0bfd217 	ldw	r2,-184(fp)
 8002bc0:	10800110 	cmplti	r2,r2,4
 8002bc4:	103ee11e 	bne	r2,zero,800274c <__alt_data_end+0xfc00274c>
      collide_box[81][i][j] = 1;
      collide_box[72][i][j] = 1;
    }
  }
  // spike
  for (int i = 0; i < 4; i++)
 8002bc8:	e03fd415 	stw	zero,-176(fp)
 8002bcc:	00002506 	br	8002c64 <main+0x568>
  {
    collide_box[17][3][i] = -1;
 8002bd0:	00820074 	movhi	r2,2049
 8002bd4:	1087c304 	addi	r2,r2,7948
 8002bd8:	e0ffd417 	ldw	r3,-176(fp)
 8002bdc:	18c04704 	addi	r3,r3,284
 8002be0:	18c7883a 	add	r3,r3,r3
 8002be4:	18c7883a 	add	r3,r3,r3
 8002be8:	10c5883a 	add	r2,r2,r3
 8002bec:	00ffffc4 	movi	r3,-1
 8002bf0:	10c00015 	stw	r3,0(r2)
    collide_box[27][0][i] = -1;
 8002bf4:	00820074 	movhi	r2,2049
 8002bf8:	1087c304 	addi	r2,r2,7948
 8002bfc:	e0ffd417 	ldw	r3,-176(fp)
 8002c00:	18c06c04 	addi	r3,r3,432
 8002c04:	18c7883a 	add	r3,r3,r3
 8002c08:	18c7883a 	add	r3,r3,r3
 8002c0c:	10c5883a 	add	r2,r2,r3
 8002c10:	00ffffc4 	movi	r3,-1
 8002c14:	10c00015 	stw	r3,0(r2)
    collide_box[43][i][0] = -1;
 8002c18:	00820074 	movhi	r2,2049
 8002c1c:	1087c304 	addi	r2,r2,7948
 8002c20:	e0ffd417 	ldw	r3,-176(fp)
 8002c24:	18c02b04 	addi	r3,r3,172
 8002c28:	1806913a 	slli	r3,r3,4
 8002c2c:	10c5883a 	add	r2,r2,r3
 8002c30:	00ffffc4 	movi	r3,-1
 8002c34:	10c00015 	stw	r3,0(r2)
    collide_box[59][i][3] = -1;
 8002c38:	00820074 	movhi	r2,2049
 8002c3c:	1087c304 	addi	r2,r2,7948
 8002c40:	e0ffd417 	ldw	r3,-176(fp)
 8002c44:	1806913a 	slli	r3,r3,4
 8002c48:	10c5883a 	add	r2,r2,r3
 8002c4c:	1083b304 	addi	r2,r2,3788
 8002c50:	00ffffc4 	movi	r3,-1
 8002c54:	10c00015 	stw	r3,0(r2)
      collide_box[81][i][j] = 1;
      collide_box[72][i][j] = 1;
    }
  }
  // spike
  for (int i = 0; i < 4; i++)
 8002c58:	e0bfd417 	ldw	r2,-176(fp)
 8002c5c:	10800044 	addi	r2,r2,1
 8002c60:	e0bfd415 	stw	r2,-176(fp)
 8002c64:	e0bfd417 	ldw	r2,-176(fp)
 8002c68:	10800110 	cmplti	r2,r2,4
 8002c6c:	103fd81e 	bne	r2,zero,8002bd0 <__alt_data_end+0xfc002bd0>
    collide_box[27][0][i] = -1;
    collide_box[43][i][0] = -1;
    collide_box[59][i][3] = -1;
  }
  // ice
  for (int i = 0; i < 4; i++)
 8002c70:	e03fd515 	stw	zero,-172(fp)
 8002c74:	0000e806 	br	8003018 <main+0x91c>
  {
    for (int j = 0; j < 4; j++)
 8002c78:	e03fd615 	stw	zero,-168(fp)
 8002c7c:	0000e006 	br	8003000 <main+0x904>
    {
      collide_box[66][i][j] = 2;
 8002c80:	00820074 	movhi	r2,2049
 8002c84:	1087c304 	addi	r2,r2,7948
 8002c88:	e0ffd517 	ldw	r3,-172(fp)
 8002c8c:	18c7883a 	add	r3,r3,r3
 8002c90:	18c9883a 	add	r4,r3,r3
 8002c94:	e0ffd617 	ldw	r3,-168(fp)
 8002c98:	20c7883a 	add	r3,r4,r3
 8002c9c:	18c10804 	addi	r3,r3,1056
 8002ca0:	18c7883a 	add	r3,r3,r3
 8002ca4:	18c7883a 	add	r3,r3,r3
 8002ca8:	10c5883a 	add	r2,r2,r3
 8002cac:	00c00084 	movi	r3,2
 8002cb0:	10c00015 	stw	r3,0(r2)
      collide_box[67][i][j] = 2;
 8002cb4:	00820074 	movhi	r2,2049
 8002cb8:	1087c304 	addi	r2,r2,7948
 8002cbc:	e0ffd517 	ldw	r3,-172(fp)
 8002cc0:	18c7883a 	add	r3,r3,r3
 8002cc4:	18c9883a 	add	r4,r3,r3
 8002cc8:	e0ffd617 	ldw	r3,-168(fp)
 8002ccc:	20c7883a 	add	r3,r4,r3
 8002cd0:	18c10c04 	addi	r3,r3,1072
 8002cd4:	18c7883a 	add	r3,r3,r3
 8002cd8:	18c7883a 	add	r3,r3,r3
 8002cdc:	10c5883a 	add	r2,r2,r3
 8002ce0:	00c00084 	movi	r3,2
 8002ce4:	10c00015 	stw	r3,0(r2)
      collide_box[68][i][j] = 2;
 8002ce8:	00820074 	movhi	r2,2049
 8002cec:	1087c304 	addi	r2,r2,7948
 8002cf0:	e0ffd517 	ldw	r3,-172(fp)
 8002cf4:	18c7883a 	add	r3,r3,r3
 8002cf8:	18c9883a 	add	r4,r3,r3
 8002cfc:	e0ffd617 	ldw	r3,-168(fp)
 8002d00:	20c7883a 	add	r3,r4,r3
 8002d04:	18c11004 	addi	r3,r3,1088
 8002d08:	18c7883a 	add	r3,r3,r3
 8002d0c:	18c7883a 	add	r3,r3,r3
 8002d10:	10c5883a 	add	r2,r2,r3
 8002d14:	00c00084 	movi	r3,2
 8002d18:	10c00015 	stw	r3,0(r2)
      collide_box[69][i][j] = 2;
 8002d1c:	00820074 	movhi	r2,2049
 8002d20:	1087c304 	addi	r2,r2,7948
 8002d24:	e0ffd517 	ldw	r3,-172(fp)
 8002d28:	18c7883a 	add	r3,r3,r3
 8002d2c:	18c9883a 	add	r4,r3,r3
 8002d30:	e0ffd617 	ldw	r3,-168(fp)
 8002d34:	20c7883a 	add	r3,r4,r3
 8002d38:	18c11404 	addi	r3,r3,1104
 8002d3c:	18c7883a 	add	r3,r3,r3
 8002d40:	18c7883a 	add	r3,r3,r3
 8002d44:	10c5883a 	add	r2,r2,r3
 8002d48:	00c00084 	movi	r3,2
 8002d4c:	10c00015 	stw	r3,0(r2)
      collide_box[82][i][j] = 2;
 8002d50:	00820074 	movhi	r2,2049
 8002d54:	1087c304 	addi	r2,r2,7948
 8002d58:	e0ffd517 	ldw	r3,-172(fp)
 8002d5c:	18c7883a 	add	r3,r3,r3
 8002d60:	18c9883a 	add	r4,r3,r3
 8002d64:	e0ffd617 	ldw	r3,-168(fp)
 8002d68:	20c7883a 	add	r3,r4,r3
 8002d6c:	18c14804 	addi	r3,r3,1312
 8002d70:	18c7883a 	add	r3,r3,r3
 8002d74:	18c7883a 	add	r3,r3,r3
 8002d78:	10c5883a 	add	r2,r2,r3
 8002d7c:	00c00084 	movi	r3,2
 8002d80:	10c00015 	stw	r3,0(r2)
      collide_box[83][i][j] = 2;
 8002d84:	00820074 	movhi	r2,2049
 8002d88:	1087c304 	addi	r2,r2,7948
 8002d8c:	e0ffd517 	ldw	r3,-172(fp)
 8002d90:	18c7883a 	add	r3,r3,r3
 8002d94:	18c9883a 	add	r4,r3,r3
 8002d98:	e0ffd617 	ldw	r3,-168(fp)
 8002d9c:	20c7883a 	add	r3,r4,r3
 8002da0:	18c14c04 	addi	r3,r3,1328
 8002da4:	18c7883a 	add	r3,r3,r3
 8002da8:	18c7883a 	add	r3,r3,r3
 8002dac:	10c5883a 	add	r2,r2,r3
 8002db0:	00c00084 	movi	r3,2
 8002db4:	10c00015 	stw	r3,0(r2)
      collide_box[84][i][j] = 2;
 8002db8:	00820074 	movhi	r2,2049
 8002dbc:	1087c304 	addi	r2,r2,7948
 8002dc0:	e0ffd517 	ldw	r3,-172(fp)
 8002dc4:	18c7883a 	add	r3,r3,r3
 8002dc8:	18c9883a 	add	r4,r3,r3
 8002dcc:	e0ffd617 	ldw	r3,-168(fp)
 8002dd0:	20c7883a 	add	r3,r4,r3
 8002dd4:	18c15004 	addi	r3,r3,1344
 8002dd8:	18c7883a 	add	r3,r3,r3
 8002ddc:	18c7883a 	add	r3,r3,r3
 8002de0:	10c5883a 	add	r2,r2,r3
 8002de4:	00c00084 	movi	r3,2
 8002de8:	10c00015 	stw	r3,0(r2)
      collide_box[85][i][j] = 2;
 8002dec:	00820074 	movhi	r2,2049
 8002df0:	1087c304 	addi	r2,r2,7948
 8002df4:	e0ffd517 	ldw	r3,-172(fp)
 8002df8:	18c7883a 	add	r3,r3,r3
 8002dfc:	18c9883a 	add	r4,r3,r3
 8002e00:	e0ffd617 	ldw	r3,-168(fp)
 8002e04:	20c7883a 	add	r3,r4,r3
 8002e08:	18c15404 	addi	r3,r3,1360
 8002e0c:	18c7883a 	add	r3,r3,r3
 8002e10:	18c7883a 	add	r3,r3,r3
 8002e14:	10c5883a 	add	r2,r2,r3
 8002e18:	00c00084 	movi	r3,2
 8002e1c:	10c00015 	stw	r3,0(r2)
      collide_box[98][i][j] = 2;
 8002e20:	00820074 	movhi	r2,2049
 8002e24:	1087c304 	addi	r2,r2,7948
 8002e28:	e0ffd517 	ldw	r3,-172(fp)
 8002e2c:	18c7883a 	add	r3,r3,r3
 8002e30:	18c9883a 	add	r4,r3,r3
 8002e34:	e0ffd617 	ldw	r3,-168(fp)
 8002e38:	20c7883a 	add	r3,r4,r3
 8002e3c:	18c18804 	addi	r3,r3,1568
 8002e40:	18c7883a 	add	r3,r3,r3
 8002e44:	18c7883a 	add	r3,r3,r3
 8002e48:	10c5883a 	add	r2,r2,r3
 8002e4c:	00c00084 	movi	r3,2
 8002e50:	10c00015 	stw	r3,0(r2)
      collide_box[99][i][j] = 2;
 8002e54:	00820074 	movhi	r2,2049
 8002e58:	1087c304 	addi	r2,r2,7948
 8002e5c:	e0ffd517 	ldw	r3,-172(fp)
 8002e60:	18c7883a 	add	r3,r3,r3
 8002e64:	18c9883a 	add	r4,r3,r3
 8002e68:	e0ffd617 	ldw	r3,-168(fp)
 8002e6c:	20c7883a 	add	r3,r4,r3
 8002e70:	18c18c04 	addi	r3,r3,1584
 8002e74:	18c7883a 	add	r3,r3,r3
 8002e78:	18c7883a 	add	r3,r3,r3
 8002e7c:	10c5883a 	add	r2,r2,r3
 8002e80:	00c00084 	movi	r3,2
 8002e84:	10c00015 	stw	r3,0(r2)
      collide_box[100][i][j] = 2;
 8002e88:	00820074 	movhi	r2,2049
 8002e8c:	1087c304 	addi	r2,r2,7948
 8002e90:	e0ffd517 	ldw	r3,-172(fp)
 8002e94:	18c7883a 	add	r3,r3,r3
 8002e98:	18c9883a 	add	r4,r3,r3
 8002e9c:	e0ffd617 	ldw	r3,-168(fp)
 8002ea0:	20c7883a 	add	r3,r4,r3
 8002ea4:	18c19004 	addi	r3,r3,1600
 8002ea8:	18c7883a 	add	r3,r3,r3
 8002eac:	18c7883a 	add	r3,r3,r3
 8002eb0:	10c5883a 	add	r2,r2,r3
 8002eb4:	00c00084 	movi	r3,2
 8002eb8:	10c00015 	stw	r3,0(r2)
      collide_box[101][i][j] = 2;
 8002ebc:	00820074 	movhi	r2,2049
 8002ec0:	1087c304 	addi	r2,r2,7948
 8002ec4:	e0ffd517 	ldw	r3,-172(fp)
 8002ec8:	18c7883a 	add	r3,r3,r3
 8002ecc:	18c9883a 	add	r4,r3,r3
 8002ed0:	e0ffd617 	ldw	r3,-168(fp)
 8002ed4:	20c7883a 	add	r3,r4,r3
 8002ed8:	18c19404 	addi	r3,r3,1616
 8002edc:	18c7883a 	add	r3,r3,r3
 8002ee0:	18c7883a 	add	r3,r3,r3
 8002ee4:	10c5883a 	add	r2,r2,r3
 8002ee8:	00c00084 	movi	r3,2
 8002eec:	10c00015 	stw	r3,0(r2)
      collide_box[114][i][j] = 2;
 8002ef0:	00820074 	movhi	r2,2049
 8002ef4:	1087c304 	addi	r2,r2,7948
 8002ef8:	e0ffd517 	ldw	r3,-172(fp)
 8002efc:	18c7883a 	add	r3,r3,r3
 8002f00:	18c9883a 	add	r4,r3,r3
 8002f04:	e0ffd617 	ldw	r3,-168(fp)
 8002f08:	20c7883a 	add	r3,r4,r3
 8002f0c:	18c1c804 	addi	r3,r3,1824
 8002f10:	18c7883a 	add	r3,r3,r3
 8002f14:	18c7883a 	add	r3,r3,r3
 8002f18:	10c5883a 	add	r2,r2,r3
 8002f1c:	00c00084 	movi	r3,2
 8002f20:	10c00015 	stw	r3,0(r2)
      collide_box[115][i][j] = 2;
 8002f24:	00820074 	movhi	r2,2049
 8002f28:	1087c304 	addi	r2,r2,7948
 8002f2c:	e0ffd517 	ldw	r3,-172(fp)
 8002f30:	18c7883a 	add	r3,r3,r3
 8002f34:	18c9883a 	add	r4,r3,r3
 8002f38:	e0ffd617 	ldw	r3,-168(fp)
 8002f3c:	20c7883a 	add	r3,r4,r3
 8002f40:	18c1cc04 	addi	r3,r3,1840
 8002f44:	18c7883a 	add	r3,r3,r3
 8002f48:	18c7883a 	add	r3,r3,r3
 8002f4c:	10c5883a 	add	r2,r2,r3
 8002f50:	00c00084 	movi	r3,2
 8002f54:	10c00015 	stw	r3,0(r2)
      collide_box[116][i][j] = 2;
 8002f58:	00820074 	movhi	r2,2049
 8002f5c:	1087c304 	addi	r2,r2,7948
 8002f60:	e0ffd517 	ldw	r3,-172(fp)
 8002f64:	18c7883a 	add	r3,r3,r3
 8002f68:	18c9883a 	add	r4,r3,r3
 8002f6c:	e0ffd617 	ldw	r3,-168(fp)
 8002f70:	20c7883a 	add	r3,r4,r3
 8002f74:	18c1d004 	addi	r3,r3,1856
 8002f78:	18c7883a 	add	r3,r3,r3
 8002f7c:	18c7883a 	add	r3,r3,r3
 8002f80:	10c5883a 	add	r2,r2,r3
 8002f84:	00c00084 	movi	r3,2
 8002f88:	10c00015 	stw	r3,0(r2)
      collide_box[117][i][j] = 2;
 8002f8c:	00820074 	movhi	r2,2049
 8002f90:	1087c304 	addi	r2,r2,7948
 8002f94:	e0ffd517 	ldw	r3,-172(fp)
 8002f98:	18c7883a 	add	r3,r3,r3
 8002f9c:	18c9883a 	add	r4,r3,r3
 8002fa0:	e0ffd617 	ldw	r3,-168(fp)
 8002fa4:	20c7883a 	add	r3,r4,r3
 8002fa8:	18c1d404 	addi	r3,r3,1872
 8002fac:	18c7883a 	add	r3,r3,r3
 8002fb0:	18c7883a 	add	r3,r3,r3
 8002fb4:	10c5883a 	add	r2,r2,r3
 8002fb8:	00c00084 	movi	r3,2
 8002fbc:	10c00015 	stw	r3,0(r2)
      // collide_box[22][i][j] = 3;  // balloon
      collide_box[102][i][j] = 4; // two dashes
 8002fc0:	00820074 	movhi	r2,2049
 8002fc4:	1087c304 	addi	r2,r2,7948
 8002fc8:	e0ffd517 	ldw	r3,-172(fp)
 8002fcc:	18c7883a 	add	r3,r3,r3
 8002fd0:	18c9883a 	add	r4,r3,r3
 8002fd4:	e0ffd617 	ldw	r3,-168(fp)
 8002fd8:	20c7883a 	add	r3,r4,r3
 8002fdc:	18c19804 	addi	r3,r3,1632
 8002fe0:	18c7883a 	add	r3,r3,r3
 8002fe4:	18c7883a 	add	r3,r3,r3
 8002fe8:	10c5883a 	add	r2,r2,r3
 8002fec:	00c00104 	movi	r3,4
 8002ff0:	10c00015 	stw	r3,0(r2)
    collide_box[59][i][3] = -1;
  }
  // ice
  for (int i = 0; i < 4; i++)
  {
    for (int j = 0; j < 4; j++)
 8002ff4:	e0bfd617 	ldw	r2,-168(fp)
 8002ff8:	10800044 	addi	r2,r2,1
 8002ffc:	e0bfd615 	stw	r2,-168(fp)
 8003000:	e0bfd617 	ldw	r2,-168(fp)
 8003004:	10800110 	cmplti	r2,r2,4
 8003008:	103f1d1e 	bne	r2,zero,8002c80 <__alt_data_end+0xfc002c80>
    collide_box[27][0][i] = -1;
    collide_box[43][i][0] = -1;
    collide_box[59][i][3] = -1;
  }
  // ice
  for (int i = 0; i < 4; i++)
 800300c:	e0bfd517 	ldw	r2,-172(fp)
 8003010:	10800044 	addi	r2,r2,1
 8003014:	e0bfd515 	stw	r2,-172(fp)
 8003018:	e0bfd517 	ldw	r2,-172(fp)
 800301c:	10800110 	cmplti	r2,r2,4
 8003020:	103f151e 	bne	r2,zero,8002c78 <__alt_data_end+0xfc002c78>
      collide_box[102][i][j] = 4; // two dashes
    }
  }

  // init birth
  birth[0][0] = 4;
 8003024:	00820074 	movhi	r2,2049
 8003028:	109fcd04 	addi	r2,r2,32564
 800302c:	00c00104 	movi	r3,4
 8003030:	10c00015 	stw	r3,0(r2)
  birth[0][1] = 181;
 8003034:	00820074 	movhi	r2,2049
 8003038:	109fcd04 	addi	r2,r2,32564
 800303c:	00c02d44 	movi	r3,181
 8003040:	10c00115 	stw	r3,4(r2)
  birth[1][0] = 16;
 8003044:	00820074 	movhi	r2,2049
 8003048:	109fcd04 	addi	r2,r2,32564
 800304c:	00c00404 	movi	r3,16
 8003050:	10c00215 	stw	r3,8(r2)
  birth[1][1] = 208;
 8003054:	00820074 	movhi	r2,2049
 8003058:	109fcd04 	addi	r2,r2,32564
 800305c:	00c03404 	movi	r3,208
 8003060:	10c00315 	stw	r3,12(r2)
  birth[2][0] = 32;
 8003064:	00820074 	movhi	r2,2049
 8003068:	109fcd04 	addi	r2,r2,32564
 800306c:	00c00804 	movi	r3,32
 8003070:	10c00415 	stw	r3,16(r2)
  birth[2][1] = 152;
 8003074:	00820074 	movhi	r2,2049
 8003078:	109fcd04 	addi	r2,r2,32564
 800307c:	00c02604 	movi	r3,152
 8003080:	10c00515 	stw	r3,20(r2)
  birth[3][0] = 32;
 8003084:	00820074 	movhi	r2,2049
 8003088:	109fcd04 	addi	r2,r2,32564
 800308c:	00c00804 	movi	r3,32
 8003090:	10c00615 	stw	r3,24(r2)
  birth[3][1] = 196;
 8003094:	00820074 	movhi	r2,2049
 8003098:	109fcd04 	addi	r2,r2,32564
 800309c:	00c03104 	movi	r3,196
 80030a0:	10c00715 	stw	r3,28(r2)
  birth[4][0] = 64;
 80030a4:	00820074 	movhi	r2,2049
 80030a8:	109fcd04 	addi	r2,r2,32564
 80030ac:	00c01004 	movi	r3,64
 80030b0:	10c00815 	stw	r3,32(r2)
  birth[4][1] = 192;
 80030b4:	00820074 	movhi	r2,2049
 80030b8:	109fcd04 	addi	r2,r2,32564
 80030bc:	00c03004 	movi	r3,192
 80030c0:	10c00915 	stw	r3,36(r2)
  birth[5][0] = 16;
 80030c4:	00820074 	movhi	r2,2049
 80030c8:	109fcd04 	addi	r2,r2,32564
 80030cc:	00c00404 	movi	r3,16
 80030d0:	10c00a15 	stw	r3,40(r2)
  birth[5][1] = 208;
 80030d4:	00820074 	movhi	r2,2049
 80030d8:	109fcd04 	addi	r2,r2,32564
 80030dc:	00c03404 	movi	r3,208
 80030e0:	10c00b15 	stw	r3,44(r2)
  birth[6][0] = 0;
 80030e4:	00820074 	movhi	r2,2049
 80030e8:	109fcd04 	addi	r2,r2,32564
 80030ec:	10000c15 	stw	zero,48(r2)
  birth[6][1] = 216;
 80030f0:	00820074 	movhi	r2,2049
 80030f4:	109fcd04 	addi	r2,r2,32564
 80030f8:	00c03604 	movi	r3,216
 80030fc:	10c00d15 	stw	r3,52(r2)

  // set collision
  collision_fill(0);
 8003100:	0009883a 	mov	r4,zero
 8003104:	8000c700 	call	8000c70 <collision_fill>

  // set map
  for (int i = 0; i < 16; i++)
 8003108:	e03fd715 	stw	zero,-164(fp)
 800310c:	00001f06 	br	800318c <main+0xa90>
  {
    for (int j = 0; j < 16; j++)
 8003110:	e03fd815 	stw	zero,-160(fp)
 8003114:	00001706 	br	8003174 <main+0xa78>
    {
      setMAP(i * 16 + j, map[0][i][j]);
 8003118:	e0bfd717 	ldw	r2,-164(fp)
 800311c:	1004913a 	slli	r2,r2,4
 8003120:	1007883a 	mov	r3,r2
 8003124:	e0bfd817 	ldw	r2,-160(fp)
 8003128:	1885883a 	add	r2,r3,r2
 800312c:	11803fcc 	andi	r6,r2,255
 8003130:	00820074 	movhi	r2,2049
 8003134:	10afdf04 	addi	r2,r2,-16516
 8003138:	e0ffd717 	ldw	r3,-164(fp)
 800313c:	1808913a 	slli	r4,r3,4
 8003140:	e0ffd817 	ldw	r3,-160(fp)
 8003144:	20c7883a 	add	r3,r4,r3
 8003148:	18c7883a 	add	r3,r3,r3
 800314c:	18c7883a 	add	r3,r3,r3
 8003150:	10c5883a 	add	r2,r2,r3
 8003154:	10800017 	ldw	r2,0(r2)
 8003158:	10803fcc 	andi	r2,r2,255
 800315c:	100b883a 	mov	r5,r2
 8003160:	3009883a 	mov	r4,r6
 8003164:	80033a80 	call	80033a8 <setMAP>
  collision_fill(0);

  // set map
  for (int i = 0; i < 16; i++)
  {
    for (int j = 0; j < 16; j++)
 8003168:	e0bfd817 	ldw	r2,-160(fp)
 800316c:	10800044 	addi	r2,r2,1
 8003170:	e0bfd815 	stw	r2,-160(fp)
 8003174:	e0bfd817 	ldw	r2,-160(fp)
 8003178:	10800410 	cmplti	r2,r2,16
 800317c:	103fe61e 	bne	r2,zero,8003118 <__alt_data_end+0xfc003118>

  // set collision
  collision_fill(0);

  // set map
  for (int i = 0; i < 16; i++)
 8003180:	e0bfd717 	ldw	r2,-164(fp)
 8003184:	10800044 	addi	r2,r2,1
 8003188:	e0bfd715 	stw	r2,-164(fp)
 800318c:	e0bfd717 	ldw	r2,-164(fp)
 8003190:	10800410 	cmplti	r2,r2,16
 8003194:	103fde1e 	bne	r2,zero,8003110 <__alt_data_end+0xfc003110>
    }
  }

  struct Player hero;

  player_init(&hero, birth[0][0], birth[0][1]);
 8003198:	00820074 	movhi	r2,2049
 800319c:	109fcd04 	addi	r2,r2,32564
 80031a0:	10c00017 	ldw	r3,0(r2)
 80031a4:	00820074 	movhi	r2,2049
 80031a8:	109fcd04 	addi	r2,r2,32564
 80031ac:	11000117 	ldw	r4,4(r2)
 80031b0:	e0bfe104 	addi	r2,fp,-124
 80031b4:	200d883a 	mov	r6,r4
 80031b8:	180b883a 	mov	r5,r3
 80031bc:	1009883a 	mov	r4,r2
 80031c0:	800137c0 	call	800137c <player_init>

  BYTE HERO_X, HERO_Y;
  int flag_cnt = 0; // (0~14)/5
 80031c4:	e03fd915 	stw	zero,-156(fp)

  while (1)
  {
    usleep(8000);
 80031c8:	0107d004 	movi	r4,8000
 80031cc:	80078200 	call	8007820 <usleep>

    if (level_index == level_tot - 1) // flag animation
 80031d0:	d0abfe17 	ldw	r2,-20488(gp)
 80031d4:	10800198 	cmpnei	r2,r2,6
 80031d8:	1000121e 	bne	r2,zero,8003224 <main+0xb28>
    {
      int temp = flag_cnt / 5;
 80031dc:	e0bfd917 	ldw	r2,-156(fp)
 80031e0:	01400144 	movi	r5,5
 80031e4:	1009883a 	mov	r4,r2
 80031e8:	80055e00 	call	80055e0 <__divsi3>
 80031ec:	e0bfdb15 	stw	r2,-148(fp)
      setMAP(103, 118 + temp);
 80031f0:	e0bfdb17 	ldw	r2,-148(fp)
 80031f4:	10801d84 	addi	r2,r2,118
 80031f8:	10803fcc 	andi	r2,r2,255
 80031fc:	100b883a 	mov	r5,r2
 8003200:	010019c4 	movi	r4,103
 8003204:	80033a80 	call	80033a8 <setMAP>
      flag_cnt++;
 8003208:	e0bfd917 	ldw	r2,-156(fp)
 800320c:	10800044 	addi	r2,r2,1
 8003210:	e0bfd915 	stw	r2,-156(fp)
      if (flag_cnt == 15)
 8003214:	e0bfd917 	ldw	r2,-156(fp)
 8003218:	108003d8 	cmpnei	r2,r2,15
 800321c:	1000011e 	bne	r2,zero,8003224 <main+0xb28>
        flag_cnt = 0;
 8003220:	e03fd915 	stw	zero,-156(fp)
    }

    key_detect(kbdbuf);
 8003224:	e13fdf17 	ldw	r4,-132(fp)
 8003228:	e17fe017 	ldw	r5,-128(fp)
 800322c:	8000b0c0 	call	8000b0c <key_detect>
    // printf("x = %d\n", hero.x);
    // printf("y = %d\n", hero.y);
    // printf("spdX = %d\n", hero.spdX);
    // printf("spdY = %d\n", hero.spdY);

    Playerstep(&hero);
 8003230:	e0bfe104 	addi	r2,fp,-124
 8003234:	1009883a 	mov	r4,r2
 8003238:	80016a80 	call	80016a8 <Playerstep>

    if (hero.dead || hero.dead2)
 800323c:	e0bfe103 	ldbu	r2,-124(fp)
 8003240:	10803fcc 	andi	r2,r2,255
 8003244:	1000031e 	bne	r2,zero,8003254 <main+0xb58>
 8003248:	e0bfe143 	ldbu	r2,-123(fp)
 800324c:	10803fcc 	andi	r2,r2,255
 8003250:	10002d26 	beq	r2,zero,8003308 <main+0xc0c>
    {
      if (hero.dead)
 8003254:	e0bfe103 	ldbu	r2,-124(fp)
 8003258:	10803fcc 	andi	r2,r2,255
 800325c:	10000326 	beq	r2,zero,800326c <main+0xb70>
        hero.hero_index = 2;
 8003260:	00800084 	movi	r2,2
 8003264:	e0bfea15 	stw	r2,-88(fp)
 8003268:	00000106 	br	8003270 <main+0xb74>
      else
        hero.hero_index = 0;
 800326c:	e03fea15 	stw	zero,-88(fp)
      setHERO(hero.hero_index, hero.x, hero.y, 0, 1, 1, 1);
 8003270:	e0bfea17 	ldw	r2,-88(fp)
 8003274:	10c03fcc 	andi	r3,r2,255
 8003278:	e0bfe217 	ldw	r2,-120(fp)
 800327c:	11003fcc 	andi	r4,r2,255
 8003280:	e0bfe317 	ldw	r2,-116(fp)
 8003284:	11403fcc 	andi	r5,r2,255
 8003288:	00800044 	movi	r2,1
 800328c:	d8800215 	stw	r2,8(sp)
 8003290:	00800044 	movi	r2,1
 8003294:	d8800115 	stw	r2,4(sp)
 8003298:	00800044 	movi	r2,1
 800329c:	d8800015 	stw	r2,0(sp)
 80032a0:	000f883a 	mov	r7,zero
 80032a4:	280d883a 	mov	r6,r5
 80032a8:	200b883a 	mov	r5,r4
 80032ac:	1809883a 	mov	r4,r3
 80032b0:	800045c0 	call	800045c <setHERO>
      usleep(120000); // half second
 80032b4:	010000b4 	movhi	r4,2
 80032b8:	21353004 	addi	r4,r4,-11072
 80032bc:	80078200 	call	8007820 <usleep>
      player_init(&hero, birth[level_index][0], birth[level_index][1]);
 80032c0:	d0ebfe17 	ldw	r3,-20488(gp)
 80032c4:	00820074 	movhi	r2,2049
 80032c8:	109fcd04 	addi	r2,r2,32564
 80032cc:	180690fa 	slli	r3,r3,3
 80032d0:	10c5883a 	add	r2,r2,r3
 80032d4:	11000017 	ldw	r4,0(r2)
 80032d8:	d0ebfe17 	ldw	r3,-20488(gp)
 80032dc:	00820074 	movhi	r2,2049
 80032e0:	109fcd04 	addi	r2,r2,32564
 80032e4:	180690fa 	slli	r3,r3,3
 80032e8:	10c5883a 	add	r2,r2,r3
 80032ec:	10800104 	addi	r2,r2,4
 80032f0:	10c00017 	ldw	r3,0(r2)
 80032f4:	e0bfe104 	addi	r2,fp,-124
 80032f8:	180d883a 	mov	r6,r3
 80032fc:	200b883a 	mov	r5,r4
 8003300:	1009883a 	mov	r4,r2
 8003304:	800137c0 	call	800137c <player_init>
    }

    HERO_X = hero.x;
 8003308:	e0bfe217 	ldw	r2,-120(fp)
 800330c:	e0bfdc05 	stb	r2,-144(fp)
    HERO_Y = hero.y;
 8003310:	e0bfe317 	ldw	r2,-116(fp)
 8003314:	e0bfdc45 	stb	r2,-143(fp)
    setHERO(hero.hero_index, hero.x, hero.y, hero.flip, hero.hair_color,
 8003318:	e0bfea17 	ldw	r2,-88(fp)
 800331c:	12003fcc 	andi	r8,r2,255
 8003320:	e0bfe217 	ldw	r2,-120(fp)
 8003324:	11403fcc 	andi	r5,r2,255
 8003328:	e0bfe317 	ldw	r2,-116(fp)
 800332c:	11803fcc 	andi	r6,r2,255
 8003330:	e0bfe983 	ldbu	r2,-90(fp)
 8003334:	11c03fcc 	andi	r7,r2,255
 8003338:	e0bfeb17 	ldw	r2,-84(fp)
 800333c:	10803fcc 	andi	r2,r2,255
            hero.shake, hero.shake);
 8003340:	e0ffe903 	ldbu	r3,-92(fp)
      player_init(&hero, birth[level_index][0], birth[level_index][1]);
    }

    HERO_X = hero.x;
    HERO_Y = hero.y;
    setHERO(hero.hero_index, hero.x, hero.y, hero.flip, hero.hair_color,
 8003344:	18c03fcc 	andi	r3,r3,255
            hero.shake, hero.shake);
 8003348:	e13fe903 	ldbu	r4,-92(fp)
      player_init(&hero, birth[level_index][0], birth[level_index][1]);
    }

    HERO_X = hero.x;
    HERO_Y = hero.y;
    setHERO(hero.hero_index, hero.x, hero.y, hero.flip, hero.hair_color,
 800334c:	21003fcc 	andi	r4,r4,255
 8003350:	d9000215 	stw	r4,8(sp)
 8003354:	d8c00115 	stw	r3,4(sp)
 8003358:	d8800015 	stw	r2,0(sp)
 800335c:	4009883a 	mov	r4,r8
 8003360:	800045c0 	call	800045c <setHERO>
            hero.shake, hero.shake);

    printSignedHex0(death_tot);
 8003364:	d0ac0117 	ldw	r2,-20476(gp)
 8003368:	10803fcc 	andi	r2,r2,255
 800336c:	1080201c 	xori	r2,r2,128
 8003370:	10bfe004 	addi	r2,r2,-128
 8003374:	1009883a 	mov	r4,r2
 8003378:	800058c0 	call	800058c <printSignedHex0>
    //    setHERO(HERO_X, HERO_Y);

    USB_Task();
 800337c:	8004d340 	call	8004d34 <USB_Task>
    BYTE TaskState = GetUsbTaskState();
 8003380:	80054a40 	call	80054a4 <GetUsbTaskState>
 8003384:	e0bfdc85 	stb	r2,-142(fp)
    if (TaskState == USB_STATE_RUNNING)
 8003388:	e0bfdc83 	ldbu	r2,-142(fp)
 800338c:	10801018 	cmpnei	r2,r2,64
 8003390:	103f8d1e 	bne	r2,zero,80031c8 <__alt_data_end+0xfc0031c8>
    {
      rcode = kbdPoll(&kbdbuf);
 8003394:	e0bfdf04 	addi	r2,fp,-132
 8003398:	1009883a 	mov	r4,r2
 800339c:	8003e680 	call	8003e68 <kbdPoll>
 80033a0:	e0bfdcc5 	stb	r2,-141(fp)
    }
  }
 80033a4:	003f8806 	br	80031c8 <__alt_data_end+0xfc0031c8>

080033a8 <setMAP>:
 80033a8:	defffd04 	addi	sp,sp,-12
 80033ac:	df000215 	stw	fp,8(sp)
 80033b0:	df000204 	addi	fp,sp,8
 80033b4:	2007883a 	mov	r3,r4
 80033b8:	2805883a 	mov	r2,r5
 80033bc:	e0fffe05 	stb	r3,-8(fp)
 80033c0:	e0bfff05 	stb	r2,-4(fp)
 80033c4:	d0e00317 	ldw	r3,-32756(gp)
 80033c8:	e0bffe03 	ldbu	r2,-8(fp)
 80033cc:	1885883a 	add	r2,r3,r2
 80033d0:	e0ffff03 	ldbu	r3,-4(fp)
 80033d4:	10c00005 	stb	r3,0(r2)
 80033d8:	0001883a 	nop
 80033dc:	e037883a 	mov	sp,fp
 80033e0:	df000017 	ldw	fp,0(sp)
 80033e4:	dec00104 	addi	sp,sp,4
 80033e8:	f800283a 	ret

080033ec <clearMAP>:
 80033ec:	defffe04 	addi	sp,sp,-8
 80033f0:	df000115 	stw	fp,4(sp)
 80033f4:	df000104 	addi	fp,sp,4
 80033f8:	e03fff15 	stw	zero,-4(fp)
 80033fc:	00000706 	br	800341c <clearMAP+0x30>
 8003400:	d0e00317 	ldw	r3,-32756(gp)
 8003404:	e0bfff17 	ldw	r2,-4(fp)
 8003408:	1885883a 	add	r2,r3,r2
 800340c:	10000005 	stb	zero,0(r2)
 8003410:	e0bfff17 	ldw	r2,-4(fp)
 8003414:	10800044 	addi	r2,r2,1
 8003418:	e0bfff15 	stw	r2,-4(fp)
 800341c:	e0bfff17 	ldw	r2,-4(fp)
 8003420:	10804010 	cmplti	r2,r2,256
 8003424:	103ff61e 	bne	r2,zero,8003400 <__alt_data_end+0xfc003400>
 8003428:	0001883a 	nop
 800342c:	e037883a 	mov	sp,fp
 8003430:	df000017 	ldw	fp,0(sp)
 8003434:	dec00104 	addi	sp,sp,4
 8003438:	f800283a 	ret

0800343c <SGTL5000_Reg_Rd>:
 800343c:	defff804 	addi	sp,sp,-32
 8003440:	dfc00715 	stw	ra,28(sp)
 8003444:	df000615 	stw	fp,24(sp)
 8003448:	df000604 	addi	fp,sp,24
 800344c:	e13ffe15 	stw	r4,-8(fp)
 8003450:	2805883a 	mov	r2,r5
 8003454:	e0bfff0d 	sth	r2,-4(fp)
 8003458:	e0bfff0b 	ldhu	r2,-4(fp)
 800345c:	1004d23a 	srli	r2,r2,8
 8003460:	e0bffd85 	stb	r2,-10(fp)
 8003464:	e0bfff0b 	ldhu	r2,-4(fp)
 8003468:	e0bffdc5 	stb	r2,-9(fp)
 800346c:	e13ffd84 	addi	r4,fp,-10
 8003470:	e0fffd84 	addi	r3,fp,-10
 8003474:	d8000115 	stw	zero,4(sp)
 8003478:	00800084 	movi	r2,2
 800347c:	d8800015 	stw	r2,0(sp)
 8003480:	200f883a 	mov	r7,r4
 8003484:	01800084 	movi	r6,2
 8003488:	180b883a 	mov	r5,r3
 800348c:	e13ffe17 	ldw	r4,-8(fp)
 8003490:	80089a00 	call	80089a0 <alt_avalon_i2c_master_tx_rx>
 8003494:	e0bffc15 	stw	r2,-16(fp)
 8003498:	e0bffc17 	ldw	r2,-16(fp)
 800349c:	10000626 	beq	r2,zero,80034b8 <SGTL5000_Reg_Rd+0x7c>
 80034a0:	e0bfff0b 	ldhu	r2,-4(fp)
 80034a4:	100b883a 	mov	r5,r2
 80034a8:	01020074 	movhi	r4,2049
 80034ac:	212f5404 	addi	r4,r4,-17072
 80034b0:	8006d540 	call	8006d54 <printf>
 80034b4:	003fff06 	br	80034b4 <__alt_data_end+0xfc0034b4>
 80034b8:	e0bffd83 	ldbu	r2,-10(fp)
 80034bc:	10803fcc 	andi	r2,r2,255
 80034c0:	1004923a 	slli	r2,r2,8
 80034c4:	1007883a 	mov	r3,r2
 80034c8:	e0bffdc3 	ldbu	r2,-9(fp)
 80034cc:	10803fcc 	andi	r2,r2,255
 80034d0:	1884b03a 	or	r2,r3,r2
 80034d4:	e0bffd0d 	sth	r2,-12(fp)
 80034d8:	e0bffd0b 	ldhu	r2,-12(fp)
 80034dc:	e037883a 	mov	sp,fp
 80034e0:	dfc00117 	ldw	ra,4(sp)
 80034e4:	df000017 	ldw	fp,0(sp)
 80034e8:	dec00204 	addi	sp,sp,8
 80034ec:	f800283a 	ret

080034f0 <SGTL5000_Reg_Wr>:
 80034f0:	defff904 	addi	sp,sp,-28
 80034f4:	dfc00615 	stw	ra,24(sp)
 80034f8:	df000515 	stw	fp,20(sp)
 80034fc:	df000504 	addi	fp,sp,20
 8003500:	e13ffd15 	stw	r4,-12(fp)
 8003504:	2807883a 	mov	r3,r5
 8003508:	3005883a 	mov	r2,r6
 800350c:	e0fffe0d 	sth	r3,-8(fp)
 8003510:	e0bfff0d 	sth	r2,-4(fp)
 8003514:	e0bffe0b 	ldhu	r2,-8(fp)
 8003518:	1004d23a 	srli	r2,r2,8
 800351c:	e0bffc05 	stb	r2,-16(fp)
 8003520:	e0bffe0b 	ldhu	r2,-8(fp)
 8003524:	e0bffc45 	stb	r2,-15(fp)
 8003528:	e0bfff0b 	ldhu	r2,-4(fp)
 800352c:	1004d23a 	srli	r2,r2,8
 8003530:	e0bffc85 	stb	r2,-14(fp)
 8003534:	e0bfff0b 	ldhu	r2,-4(fp)
 8003538:	e0bffcc5 	stb	r2,-13(fp)
 800353c:	e0bffc04 	addi	r2,fp,-16
 8003540:	000f883a 	mov	r7,zero
 8003544:	01800104 	movi	r6,4
 8003548:	100b883a 	mov	r5,r2
 800354c:	e13ffd17 	ldw	r4,-12(fp)
 8003550:	800877c0 	call	800877c <alt_avalon_i2c_master_tx>
 8003554:	e0bffb15 	stw	r2,-20(fp)
 8003558:	e0bffb17 	ldw	r2,-20(fp)
 800355c:	10000626 	beq	r2,zero,8003578 <SGTL5000_Reg_Wr+0x88>
 8003560:	e0bffe0b 	ldhu	r2,-8(fp)
 8003564:	100b883a 	mov	r5,r2
 8003568:	01020074 	movhi	r4,2049
 800356c:	212f5404 	addi	r4,r4,-17072
 8003570:	8006d540 	call	8006d54 <printf>
 8003574:	003fff06 	br	8003574 <__alt_data_end+0xfc003574>
 8003578:	e0bfff0b 	ldhu	r2,-4(fp)
 800357c:	e037883a 	mov	sp,fp
 8003580:	dfc00117 	ldw	ra,4(sp)
 8003584:	df000017 	ldw	fp,0(sp)
 8003588:	dec00204 	addi	sp,sp,8
 800358c:	f800283a 	ret

08003590 <HIDMProbe>:
 8003590:	defff204 	addi	sp,sp,-56
 8003594:	dfc00d15 	stw	ra,52(sp)
 8003598:	df000c15 	stw	fp,48(sp)
 800359c:	df000c04 	addi	fp,sp,48
 80035a0:	2005883a 	mov	r2,r4
 80035a4:	e17fff15 	stw	r5,-4(fp)
 80035a8:	e0bffe05 	stb	r2,-8(fp)
 80035ac:	00820074 	movhi	r2,2049
 80035b0:	109fdb04 	addi	r2,r2,32620
 80035b4:	e0bffa15 	stw	r2,-24(fp)
 80035b8:	00820074 	movhi	r2,2049
 80035bc:	109fdb04 	addi	r2,r2,32620
 80035c0:	e0bffb15 	stw	r2,-20(fp)
 80035c4:	e0fffe03 	ldbu	r3,-8(fp)
 80035c8:	00820074 	movhi	r2,2049
 80035cc:	109fdb04 	addi	r2,r2,32620
 80035d0:	d8800415 	stw	r2,16(sp)
 80035d4:	00800244 	movi	r2,9
 80035d8:	d8800315 	stw	r2,12(sp)
 80035dc:	d8000215 	stw	zero,8(sp)
 80035e0:	00800084 	movi	r2,2
 80035e4:	d8800115 	stw	r2,4(sp)
 80035e8:	d8000015 	stw	zero,0(sp)
 80035ec:	01c00184 	movi	r7,6
 80035f0:	01802004 	movi	r6,128
 80035f4:	000b883a 	mov	r5,zero
 80035f8:	1809883a 	mov	r4,r3
 80035fc:	80047040 	call	8004704 <XferCtrlReq>
 8003600:	e0bffc05 	stb	r2,-16(fp)
 8003604:	e0bffc03 	ldbu	r2,-16(fp)
 8003608:	10000226 	beq	r2,zero,8003614 <HIDMProbe+0x84>
 800360c:	0005883a 	mov	r2,zero
 8003610:	0000dc06 	br	8003984 <HIDMProbe+0x3f4>
 8003614:	e0bffa17 	ldw	r2,-24(fp)
 8003618:	1080008b 	ldhu	r2,2(r2)
 800361c:	10bfffcc 	andi	r2,r2,65535
 8003620:	10804070 	cmpltui	r2,r2,257
 8003624:	1000031e 	bne	r2,zero,8003634 <HIDMProbe+0xa4>
 8003628:	00804004 	movi	r2,256
 800362c:	e0bff90d 	sth	r2,-28(fp)
 8003630:	00000306 	br	8003640 <HIDMProbe+0xb0>
 8003634:	e0bffa17 	ldw	r2,-24(fp)
 8003638:	1080008b 	ldhu	r2,2(r2)
 800363c:	e0bff90d 	sth	r2,-28(fp)
 8003640:	e13ffe03 	ldbu	r4,-8(fp)
 8003644:	e0fff90b 	ldhu	r3,-28(fp)
 8003648:	00820074 	movhi	r2,2049
 800364c:	109fdb04 	addi	r2,r2,32620
 8003650:	d8800415 	stw	r2,16(sp)
 8003654:	d8c00315 	stw	r3,12(sp)
 8003658:	d8000215 	stw	zero,8(sp)
 800365c:	00800084 	movi	r2,2
 8003660:	d8800115 	stw	r2,4(sp)
 8003664:	d8000015 	stw	zero,0(sp)
 8003668:	01c00184 	movi	r7,6
 800366c:	01802004 	movi	r6,128
 8003670:	000b883a 	mov	r5,zero
 8003674:	80047040 	call	8004704 <XferCtrlReq>
 8003678:	e0bffc05 	stb	r2,-16(fp)
 800367c:	e0bffc03 	ldbu	r2,-16(fp)
 8003680:	10000226 	beq	r2,zero,800368c <HIDMProbe+0xfc>
 8003684:	0005883a 	mov	r2,zero
 8003688:	0000be06 	br	8003984 <HIDMProbe+0x3f4>
 800368c:	e0bffa17 	ldw	r2,-24(fp)
 8003690:	10800143 	ldbu	r2,5(r2)
 8003694:	e0bffc45 	stb	r2,-15(fp)
 8003698:	0000b306 	br	8003968 <HIDMProbe+0x3d8>
 800369c:	e0bffa17 	ldw	r2,-24(fp)
 80036a0:	10800043 	ldbu	r2,1(r2)
 80036a4:	10803fcc 	andi	r2,r2,255
 80036a8:	10800120 	cmpeqi	r2,r2,4
 80036ac:	1000091e 	bne	r2,zero,80036d4 <HIDMProbe+0x144>
 80036b0:	e0bffa17 	ldw	r2,-24(fp)
 80036b4:	10800003 	ldbu	r2,0(r2)
 80036b8:	10803fcc 	andi	r2,r2,255
 80036bc:	e0fffb17 	ldw	r3,-20(fp)
 80036c0:	1885883a 	add	r2,r3,r2
 80036c4:	e0bffb15 	stw	r2,-20(fp)
 80036c8:	e0bffb17 	ldw	r2,-20(fp)
 80036cc:	e0bffa15 	stw	r2,-24(fp)
 80036d0:	0000a506 	br	8003968 <HIDMProbe+0x3d8>
 80036d4:	e0bffa17 	ldw	r2,-24(fp)
 80036d8:	10800143 	ldbu	r2,5(r2)
 80036dc:	e0bffc85 	stb	r2,-14(fp)
 80036e0:	e0bffa17 	ldw	r2,-24(fp)
 80036e4:	10800183 	ldbu	r2,6(r2)
 80036e8:	e0bffcc5 	stb	r2,-13(fp)
 80036ec:	e0bffa17 	ldw	r2,-24(fp)
 80036f0:	108001c3 	ldbu	r2,7(r2)
 80036f4:	e0bffd05 	stb	r2,-12(fp)
 80036f8:	e0bffc83 	ldbu	r2,-14(fp)
 80036fc:	108000d8 	cmpnei	r2,r2,3
 8003700:	1000971e 	bne	r2,zero,8003960 <HIDMProbe+0x3d0>
 8003704:	e0bffcc3 	ldbu	r2,-13(fp)
 8003708:	10800058 	cmpnei	r2,r2,1
 800370c:	1000941e 	bne	r2,zero,8003960 <HIDMProbe+0x3d0>
 8003710:	e0bffd03 	ldbu	r2,-12(fp)
 8003714:	10800098 	cmpnei	r2,r2,2
 8003718:	1000911e 	bne	r2,zero,8003960 <HIDMProbe+0x3d0>
 800371c:	e0fffe03 	ldbu	r3,-8(fp)
 8003720:	008200b4 	movhi	r2,2050
 8003724:	10a01b04 	addi	r2,r2,-32660
 8003728:	180690fa 	slli	r3,r3,3
 800372c:	10c5883a 	add	r2,r2,r3
 8003730:	10800104 	addi	r2,r2,4
 8003734:	00c00084 	movi	r3,2
 8003738:	10c00005 	stb	r3,0(r2)
 800373c:	e0fffe03 	ldbu	r3,-8(fp)
 8003740:	008200b4 	movhi	r2,2050
 8003744:	10a01b04 	addi	r2,r2,-32660
 8003748:	180690fa 	slli	r3,r3,3
 800374c:	10c5883a 	add	r2,r2,r3
 8003750:	10800017 	ldw	r2,0(r2)
 8003754:	1080008b 	ldhu	r2,2(r2)
 8003758:	e0bffd45 	stb	r2,-11(fp)
 800375c:	8003da00 	call	8003da0 <HID_init>
 8003760:	e0fffe03 	ldbu	r3,-8(fp)
 8003764:	008200b4 	movhi	r2,2050
 8003768:	10a01b04 	addi	r2,r2,-32660
 800376c:	180690fa 	slli	r3,r3,3
 8003770:	10c7883a 	add	r3,r2,r3
 8003774:	00820074 	movhi	r2,2049
 8003778:	109fc304 	addi	r2,r2,32524
 800377c:	18800015 	stw	r2,0(r3)
 8003780:	e0fffe03 	ldbu	r3,-8(fp)
 8003784:	008200b4 	movhi	r2,2050
 8003788:	10a01b04 	addi	r2,r2,-32660
 800378c:	180690fa 	slli	r3,r3,3
 8003790:	10c5883a 	add	r2,r2,r3
 8003794:	10800017 	ldw	r2,0(r2)
 8003798:	e0fffd43 	ldbu	r3,-11(fp)
 800379c:	10c0008d 	sth	r3,2(r2)
 80037a0:	e0bffa17 	ldw	r2,-24(fp)
 80037a4:	10800083 	ldbu	r2,2(r2)
 80037a8:	d0ac0245 	stb	r2,-20471(gp)
 80037ac:	e0bffe03 	ldbu	r2,-8(fp)
 80037b0:	d0ac0205 	stb	r2,-20472(gp)
 80037b4:	e0bffa17 	ldw	r2,-24(fp)
 80037b8:	10800003 	ldbu	r2,0(r2)
 80037bc:	10803fcc 	andi	r2,r2,255
 80037c0:	e0fffb17 	ldw	r3,-20(fp)
 80037c4:	1885883a 	add	r2,r3,r2
 80037c8:	e0bffb15 	stw	r2,-20(fp)
 80037cc:	e0bffb17 	ldw	r2,-20(fp)
 80037d0:	e0bffa15 	stw	r2,-24(fp)
 80037d4:	00005b06 	br	8003944 <HIDMProbe+0x3b4>
 80037d8:	e0bffa17 	ldw	r2,-24(fp)
 80037dc:	10800043 	ldbu	r2,1(r2)
 80037e0:	10803fcc 	andi	r2,r2,255
 80037e4:	10800160 	cmpeqi	r2,r2,5
 80037e8:	1000091e 	bne	r2,zero,8003810 <HIDMProbe+0x280>
 80037ec:	e0bffa17 	ldw	r2,-24(fp)
 80037f0:	10800003 	ldbu	r2,0(r2)
 80037f4:	10803fcc 	andi	r2,r2,255
 80037f8:	e0fffb17 	ldw	r3,-20(fp)
 80037fc:	1885883a 	add	r2,r3,r2
 8003800:	e0bffb15 	stw	r2,-20(fp)
 8003804:	e0bffb17 	ldw	r2,-20(fp)
 8003808:	e0bffa15 	stw	r2,-24(fp)
 800380c:	00004d06 	br	8003944 <HIDMProbe+0x3b4>
 8003810:	e0fffe03 	ldbu	r3,-8(fp)
 8003814:	008200b4 	movhi	r2,2050
 8003818:	10a01b04 	addi	r2,r2,-32660
 800381c:	180690fa 	slli	r3,r3,3
 8003820:	10c5883a 	add	r2,r2,r3
 8003824:	10800017 	ldw	r2,0(r2)
 8003828:	10800204 	addi	r2,r2,8
 800382c:	e0fffa17 	ldw	r3,-24(fp)
 8003830:	18c00083 	ldbu	r3,2(r3)
 8003834:	10c00005 	stb	r3,0(r2)
 8003838:	e0fffe03 	ldbu	r3,-8(fp)
 800383c:	008200b4 	movhi	r2,2050
 8003840:	10a01b04 	addi	r2,r2,-32660
 8003844:	180690fa 	slli	r3,r3,3
 8003848:	10c5883a 	add	r2,r2,r3
 800384c:	10800017 	ldw	r2,0(r2)
 8003850:	10800204 	addi	r2,r2,8
 8003854:	e0fffa17 	ldw	r3,-24(fp)
 8003858:	18c000c3 	ldbu	r3,3(r3)
 800385c:	10c00045 	stb	r3,1(r2)
 8003860:	e0fffe03 	ldbu	r3,-8(fp)
 8003864:	008200b4 	movhi	r2,2050
 8003868:	10a01b04 	addi	r2,r2,-32660
 800386c:	180690fa 	slli	r3,r3,3
 8003870:	10c5883a 	add	r2,r2,r3
 8003874:	10800017 	ldw	r2,0(r2)
 8003878:	10800204 	addi	r2,r2,8
 800387c:	e0fffa17 	ldw	r3,-24(fp)
 8003880:	18c0010b 	ldhu	r3,4(r3)
 8003884:	10c0008d 	sth	r3,2(r2)
 8003888:	e0fffe03 	ldbu	r3,-8(fp)
 800388c:	008200b4 	movhi	r2,2050
 8003890:	10a01b04 	addi	r2,r2,-32660
 8003894:	180690fa 	slli	r3,r3,3
 8003898:	10c5883a 	add	r2,r2,r3
 800389c:	10800017 	ldw	r2,0(r2)
 80038a0:	10800204 	addi	r2,r2,8
 80038a4:	e0fffa17 	ldw	r3,-24(fp)
 80038a8:	18c00183 	ldbu	r3,6(r3)
 80038ac:	10c00105 	stb	r3,4(r2)
 80038b0:	e0fffe03 	ldbu	r3,-8(fp)
 80038b4:	e0bffc43 	ldbu	r2,-15(fp)
 80038b8:	d8000415 	stw	zero,16(sp)
 80038bc:	d8000315 	stw	zero,12(sp)
 80038c0:	d8000215 	stw	zero,8(sp)
 80038c4:	d8000115 	stw	zero,4(sp)
 80038c8:	d8800015 	stw	r2,0(sp)
 80038cc:	01c00244 	movi	r7,9
 80038d0:	000d883a 	mov	r6,zero
 80038d4:	000b883a 	mov	r5,zero
 80038d8:	1809883a 	mov	r4,r3
 80038dc:	80047040 	call	8004704 <XferCtrlReq>
 80038e0:	e0bffc05 	stb	r2,-16(fp)
 80038e4:	e0bffc03 	ldbu	r2,-16(fp)
 80038e8:	10000226 	beq	r2,zero,80038f4 <HIDMProbe+0x364>
 80038ec:	0005883a 	mov	r2,zero
 80038f0:	00002406 	br	8003984 <HIDMProbe+0x3f4>
 80038f4:	e0fffe03 	ldbu	r3,-8(fp)
 80038f8:	d0ac0243 	ldbu	r2,-20471(gp)
 80038fc:	10803fcc 	andi	r2,r2,255
 8003900:	d8000415 	stw	zero,16(sp)
 8003904:	d8000315 	stw	zero,12(sp)
 8003908:	d8800215 	stw	r2,8(sp)
 800390c:	d8000115 	stw	zero,4(sp)
 8003910:	d8000015 	stw	zero,0(sp)
 8003914:	01c002c4 	movi	r7,11
 8003918:	01800844 	movi	r6,33
 800391c:	000b883a 	mov	r5,zero
 8003920:	1809883a 	mov	r4,r3
 8003924:	80047040 	call	8004704 <XferCtrlReq>
 8003928:	e0bffc05 	stb	r2,-16(fp)
 800392c:	e0bffc03 	ldbu	r2,-16(fp)
 8003930:	10000226 	beq	r2,zero,800393c <HIDMProbe+0x3ac>
 8003934:	0005883a 	mov	r2,zero
 8003938:	00001206 	br	8003984 <HIDMProbe+0x3f4>
 800393c:	00800044 	movi	r2,1
 8003940:	00001006 	br	8003984 <HIDMProbe+0x3f4>
 8003944:	e0fff90b 	ldhu	r3,-28(fp)
 8003948:	00820074 	movhi	r2,2049
 800394c:	109fdb04 	addi	r2,r2,32620
 8003950:	1885883a 	add	r2,r3,r2
 8003954:	e0fffb17 	ldw	r3,-20(fp)
 8003958:	18bf9f36 	bltu	r3,r2,80037d8 <__alt_data_end+0xfc0037d8>
 800395c:	00000206 	br	8003968 <HIDMProbe+0x3d8>
 8003960:	0005883a 	mov	r2,zero
 8003964:	00000706 	br	8003984 <HIDMProbe+0x3f4>
 8003968:	e0fff90b 	ldhu	r3,-28(fp)
 800396c:	00820074 	movhi	r2,2049
 8003970:	109fdb04 	addi	r2,r2,32620
 8003974:	1885883a 	add	r2,r3,r2
 8003978:	e0fffb17 	ldw	r3,-20(fp)
 800397c:	18bf4736 	bltu	r3,r2,800369c <__alt_data_end+0xfc00369c>
 8003980:	0005883a 	mov	r2,zero
 8003984:	e037883a 	mov	sp,fp
 8003988:	dfc00117 	ldw	ra,4(sp)
 800398c:	df000017 	ldw	fp,0(sp)
 8003990:	dec00204 	addi	sp,sp,8
 8003994:	f800283a 	ret

08003998 <HIDKProbe>:
 8003998:	defff204 	addi	sp,sp,-56
 800399c:	dfc00d15 	stw	ra,52(sp)
 80039a0:	df000c15 	stw	fp,48(sp)
 80039a4:	df000c04 	addi	fp,sp,48
 80039a8:	2005883a 	mov	r2,r4
 80039ac:	e17fff15 	stw	r5,-4(fp)
 80039b0:	e0bffe05 	stb	r2,-8(fp)
 80039b4:	00820074 	movhi	r2,2049
 80039b8:	109fdb04 	addi	r2,r2,32620
 80039bc:	e0bffa15 	stw	r2,-24(fp)
 80039c0:	00820074 	movhi	r2,2049
 80039c4:	109fdb04 	addi	r2,r2,32620
 80039c8:	e0bffb15 	stw	r2,-20(fp)
 80039cc:	e0fffe03 	ldbu	r3,-8(fp)
 80039d0:	00820074 	movhi	r2,2049
 80039d4:	109fdb04 	addi	r2,r2,32620
 80039d8:	d8800415 	stw	r2,16(sp)
 80039dc:	00800244 	movi	r2,9
 80039e0:	d8800315 	stw	r2,12(sp)
 80039e4:	d8000215 	stw	zero,8(sp)
 80039e8:	00800084 	movi	r2,2
 80039ec:	d8800115 	stw	r2,4(sp)
 80039f0:	d8000015 	stw	zero,0(sp)
 80039f4:	01c00184 	movi	r7,6
 80039f8:	01802004 	movi	r6,128
 80039fc:	000b883a 	mov	r5,zero
 8003a00:	1809883a 	mov	r4,r3
 8003a04:	80047040 	call	8004704 <XferCtrlReq>
 8003a08:	e0bffc05 	stb	r2,-16(fp)
 8003a0c:	e0bffc03 	ldbu	r2,-16(fp)
 8003a10:	10000226 	beq	r2,zero,8003a1c <HIDKProbe+0x84>
 8003a14:	0005883a 	mov	r2,zero
 8003a18:	0000dc06 	br	8003d8c <HIDKProbe+0x3f4>
 8003a1c:	e0bffa17 	ldw	r2,-24(fp)
 8003a20:	1080008b 	ldhu	r2,2(r2)
 8003a24:	10bfffcc 	andi	r2,r2,65535
 8003a28:	10804070 	cmpltui	r2,r2,257
 8003a2c:	1000031e 	bne	r2,zero,8003a3c <HIDKProbe+0xa4>
 8003a30:	00804004 	movi	r2,256
 8003a34:	e0bff90d 	sth	r2,-28(fp)
 8003a38:	00000306 	br	8003a48 <HIDKProbe+0xb0>
 8003a3c:	e0bffa17 	ldw	r2,-24(fp)
 8003a40:	1080008b 	ldhu	r2,2(r2)
 8003a44:	e0bff90d 	sth	r2,-28(fp)
 8003a48:	e13ffe03 	ldbu	r4,-8(fp)
 8003a4c:	e0fff90b 	ldhu	r3,-28(fp)
 8003a50:	00820074 	movhi	r2,2049
 8003a54:	109fdb04 	addi	r2,r2,32620
 8003a58:	d8800415 	stw	r2,16(sp)
 8003a5c:	d8c00315 	stw	r3,12(sp)
 8003a60:	d8000215 	stw	zero,8(sp)
 8003a64:	00800084 	movi	r2,2
 8003a68:	d8800115 	stw	r2,4(sp)
 8003a6c:	d8000015 	stw	zero,0(sp)
 8003a70:	01c00184 	movi	r7,6
 8003a74:	01802004 	movi	r6,128
 8003a78:	000b883a 	mov	r5,zero
 8003a7c:	80047040 	call	8004704 <XferCtrlReq>
 8003a80:	e0bffc05 	stb	r2,-16(fp)
 8003a84:	e0bffc03 	ldbu	r2,-16(fp)
 8003a88:	10000226 	beq	r2,zero,8003a94 <HIDKProbe+0xfc>
 8003a8c:	0005883a 	mov	r2,zero
 8003a90:	0000be06 	br	8003d8c <HIDKProbe+0x3f4>
 8003a94:	e0bffa17 	ldw	r2,-24(fp)
 8003a98:	10800143 	ldbu	r2,5(r2)
 8003a9c:	e0bffc45 	stb	r2,-15(fp)
 8003aa0:	0000b306 	br	8003d70 <HIDKProbe+0x3d8>
 8003aa4:	e0bffa17 	ldw	r2,-24(fp)
 8003aa8:	10800043 	ldbu	r2,1(r2)
 8003aac:	10803fcc 	andi	r2,r2,255
 8003ab0:	10800120 	cmpeqi	r2,r2,4
 8003ab4:	1000091e 	bne	r2,zero,8003adc <HIDKProbe+0x144>
 8003ab8:	e0bffa17 	ldw	r2,-24(fp)
 8003abc:	10800003 	ldbu	r2,0(r2)
 8003ac0:	10803fcc 	andi	r2,r2,255
 8003ac4:	e0fffb17 	ldw	r3,-20(fp)
 8003ac8:	1885883a 	add	r2,r3,r2
 8003acc:	e0bffb15 	stw	r2,-20(fp)
 8003ad0:	e0bffb17 	ldw	r2,-20(fp)
 8003ad4:	e0bffa15 	stw	r2,-24(fp)
 8003ad8:	0000a506 	br	8003d70 <HIDKProbe+0x3d8>
 8003adc:	e0bffa17 	ldw	r2,-24(fp)
 8003ae0:	10800143 	ldbu	r2,5(r2)
 8003ae4:	e0bffc85 	stb	r2,-14(fp)
 8003ae8:	e0bffa17 	ldw	r2,-24(fp)
 8003aec:	10800183 	ldbu	r2,6(r2)
 8003af0:	e0bffcc5 	stb	r2,-13(fp)
 8003af4:	e0bffa17 	ldw	r2,-24(fp)
 8003af8:	108001c3 	ldbu	r2,7(r2)
 8003afc:	e0bffd05 	stb	r2,-12(fp)
 8003b00:	e0bffc83 	ldbu	r2,-14(fp)
 8003b04:	108000d8 	cmpnei	r2,r2,3
 8003b08:	1000971e 	bne	r2,zero,8003d68 <HIDKProbe+0x3d0>
 8003b0c:	e0bffcc3 	ldbu	r2,-13(fp)
 8003b10:	10800058 	cmpnei	r2,r2,1
 8003b14:	1000941e 	bne	r2,zero,8003d68 <HIDKProbe+0x3d0>
 8003b18:	e0bffd03 	ldbu	r2,-12(fp)
 8003b1c:	10800058 	cmpnei	r2,r2,1
 8003b20:	1000911e 	bne	r2,zero,8003d68 <HIDKProbe+0x3d0>
 8003b24:	e0fffe03 	ldbu	r3,-8(fp)
 8003b28:	008200b4 	movhi	r2,2050
 8003b2c:	10a01b04 	addi	r2,r2,-32660
 8003b30:	180690fa 	slli	r3,r3,3
 8003b34:	10c5883a 	add	r2,r2,r3
 8003b38:	10800104 	addi	r2,r2,4
 8003b3c:	00c00044 	movi	r3,1
 8003b40:	10c00005 	stb	r3,0(r2)
 8003b44:	e0fffe03 	ldbu	r3,-8(fp)
 8003b48:	008200b4 	movhi	r2,2050
 8003b4c:	10a01b04 	addi	r2,r2,-32660
 8003b50:	180690fa 	slli	r3,r3,3
 8003b54:	10c5883a 	add	r2,r2,r3
 8003b58:	10800017 	ldw	r2,0(r2)
 8003b5c:	1080008b 	ldhu	r2,2(r2)
 8003b60:	e0bffd45 	stb	r2,-11(fp)
 8003b64:	8003da00 	call	8003da0 <HID_init>
 8003b68:	e0fffe03 	ldbu	r3,-8(fp)
 8003b6c:	008200b4 	movhi	r2,2050
 8003b70:	10a01b04 	addi	r2,r2,-32660
 8003b74:	180690fa 	slli	r3,r3,3
 8003b78:	10c7883a 	add	r3,r2,r3
 8003b7c:	00820074 	movhi	r2,2049
 8003b80:	109fc304 	addi	r2,r2,32524
 8003b84:	18800015 	stw	r2,0(r3)
 8003b88:	e0fffe03 	ldbu	r3,-8(fp)
 8003b8c:	008200b4 	movhi	r2,2050
 8003b90:	10a01b04 	addi	r2,r2,-32660
 8003b94:	180690fa 	slli	r3,r3,3
 8003b98:	10c5883a 	add	r2,r2,r3
 8003b9c:	10800017 	ldw	r2,0(r2)
 8003ba0:	e0fffd43 	ldbu	r3,-11(fp)
 8003ba4:	10c0008d 	sth	r3,2(r2)
 8003ba8:	e0bffa17 	ldw	r2,-24(fp)
 8003bac:	10800083 	ldbu	r2,2(r2)
 8003bb0:	d0ac0245 	stb	r2,-20471(gp)
 8003bb4:	e0bffe03 	ldbu	r2,-8(fp)
 8003bb8:	d0ac0205 	stb	r2,-20472(gp)
 8003bbc:	e0bffa17 	ldw	r2,-24(fp)
 8003bc0:	10800003 	ldbu	r2,0(r2)
 8003bc4:	10803fcc 	andi	r2,r2,255
 8003bc8:	e0fffb17 	ldw	r3,-20(fp)
 8003bcc:	1885883a 	add	r2,r3,r2
 8003bd0:	e0bffb15 	stw	r2,-20(fp)
 8003bd4:	e0bffb17 	ldw	r2,-20(fp)
 8003bd8:	e0bffa15 	stw	r2,-24(fp)
 8003bdc:	00005b06 	br	8003d4c <HIDKProbe+0x3b4>
 8003be0:	e0bffa17 	ldw	r2,-24(fp)
 8003be4:	10800043 	ldbu	r2,1(r2)
 8003be8:	10803fcc 	andi	r2,r2,255
 8003bec:	10800160 	cmpeqi	r2,r2,5
 8003bf0:	1000091e 	bne	r2,zero,8003c18 <HIDKProbe+0x280>
 8003bf4:	e0bffa17 	ldw	r2,-24(fp)
 8003bf8:	10800003 	ldbu	r2,0(r2)
 8003bfc:	10803fcc 	andi	r2,r2,255
 8003c00:	e0fffb17 	ldw	r3,-20(fp)
 8003c04:	1885883a 	add	r2,r3,r2
 8003c08:	e0bffb15 	stw	r2,-20(fp)
 8003c0c:	e0bffb17 	ldw	r2,-20(fp)
 8003c10:	e0bffa15 	stw	r2,-24(fp)
 8003c14:	00004d06 	br	8003d4c <HIDKProbe+0x3b4>
 8003c18:	e0fffe03 	ldbu	r3,-8(fp)
 8003c1c:	008200b4 	movhi	r2,2050
 8003c20:	10a01b04 	addi	r2,r2,-32660
 8003c24:	180690fa 	slli	r3,r3,3
 8003c28:	10c5883a 	add	r2,r2,r3
 8003c2c:	10800017 	ldw	r2,0(r2)
 8003c30:	10800204 	addi	r2,r2,8
 8003c34:	e0fffa17 	ldw	r3,-24(fp)
 8003c38:	18c00083 	ldbu	r3,2(r3)
 8003c3c:	10c00005 	stb	r3,0(r2)
 8003c40:	e0fffe03 	ldbu	r3,-8(fp)
 8003c44:	008200b4 	movhi	r2,2050
 8003c48:	10a01b04 	addi	r2,r2,-32660
 8003c4c:	180690fa 	slli	r3,r3,3
 8003c50:	10c5883a 	add	r2,r2,r3
 8003c54:	10800017 	ldw	r2,0(r2)
 8003c58:	10800204 	addi	r2,r2,8
 8003c5c:	e0fffa17 	ldw	r3,-24(fp)
 8003c60:	18c000c3 	ldbu	r3,3(r3)
 8003c64:	10c00045 	stb	r3,1(r2)
 8003c68:	e0fffe03 	ldbu	r3,-8(fp)
 8003c6c:	008200b4 	movhi	r2,2050
 8003c70:	10a01b04 	addi	r2,r2,-32660
 8003c74:	180690fa 	slli	r3,r3,3
 8003c78:	10c5883a 	add	r2,r2,r3
 8003c7c:	10800017 	ldw	r2,0(r2)
 8003c80:	10800204 	addi	r2,r2,8
 8003c84:	e0fffa17 	ldw	r3,-24(fp)
 8003c88:	18c0010b 	ldhu	r3,4(r3)
 8003c8c:	10c0008d 	sth	r3,2(r2)
 8003c90:	e0fffe03 	ldbu	r3,-8(fp)
 8003c94:	008200b4 	movhi	r2,2050
 8003c98:	10a01b04 	addi	r2,r2,-32660
 8003c9c:	180690fa 	slli	r3,r3,3
 8003ca0:	10c5883a 	add	r2,r2,r3
 8003ca4:	10800017 	ldw	r2,0(r2)
 8003ca8:	10800204 	addi	r2,r2,8
 8003cac:	e0fffa17 	ldw	r3,-24(fp)
 8003cb0:	18c00183 	ldbu	r3,6(r3)
 8003cb4:	10c00105 	stb	r3,4(r2)
 8003cb8:	e0fffe03 	ldbu	r3,-8(fp)
 8003cbc:	e0bffc43 	ldbu	r2,-15(fp)
 8003cc0:	d8000415 	stw	zero,16(sp)
 8003cc4:	d8000315 	stw	zero,12(sp)
 8003cc8:	d8000215 	stw	zero,8(sp)
 8003ccc:	d8000115 	stw	zero,4(sp)
 8003cd0:	d8800015 	stw	r2,0(sp)
 8003cd4:	01c00244 	movi	r7,9
 8003cd8:	000d883a 	mov	r6,zero
 8003cdc:	000b883a 	mov	r5,zero
 8003ce0:	1809883a 	mov	r4,r3
 8003ce4:	80047040 	call	8004704 <XferCtrlReq>
 8003ce8:	e0bffc05 	stb	r2,-16(fp)
 8003cec:	e0bffc03 	ldbu	r2,-16(fp)
 8003cf0:	10000226 	beq	r2,zero,8003cfc <HIDKProbe+0x364>
 8003cf4:	0005883a 	mov	r2,zero
 8003cf8:	00002406 	br	8003d8c <HIDKProbe+0x3f4>
 8003cfc:	e0fffe03 	ldbu	r3,-8(fp)
 8003d00:	d0ac0243 	ldbu	r2,-20471(gp)
 8003d04:	10803fcc 	andi	r2,r2,255
 8003d08:	d8000415 	stw	zero,16(sp)
 8003d0c:	d8000315 	stw	zero,12(sp)
 8003d10:	d8800215 	stw	r2,8(sp)
 8003d14:	d8000115 	stw	zero,4(sp)
 8003d18:	d8000015 	stw	zero,0(sp)
 8003d1c:	01c002c4 	movi	r7,11
 8003d20:	01800844 	movi	r6,33
 8003d24:	000b883a 	mov	r5,zero
 8003d28:	1809883a 	mov	r4,r3
 8003d2c:	80047040 	call	8004704 <XferCtrlReq>
 8003d30:	e0bffc05 	stb	r2,-16(fp)
 8003d34:	e0bffc03 	ldbu	r2,-16(fp)
 8003d38:	10000226 	beq	r2,zero,8003d44 <HIDKProbe+0x3ac>
 8003d3c:	0005883a 	mov	r2,zero
 8003d40:	00001206 	br	8003d8c <HIDKProbe+0x3f4>
 8003d44:	00800044 	movi	r2,1
 8003d48:	00001006 	br	8003d8c <HIDKProbe+0x3f4>
 8003d4c:	e0fff90b 	ldhu	r3,-28(fp)
 8003d50:	00820074 	movhi	r2,2049
 8003d54:	109fdb04 	addi	r2,r2,32620
 8003d58:	1885883a 	add	r2,r3,r2
 8003d5c:	e0fffb17 	ldw	r3,-20(fp)
 8003d60:	18bf9f36 	bltu	r3,r2,8003be0 <__alt_data_end+0xfc003be0>
 8003d64:	00000206 	br	8003d70 <HIDKProbe+0x3d8>
 8003d68:	0005883a 	mov	r2,zero
 8003d6c:	00000706 	br	8003d8c <HIDKProbe+0x3f4>
 8003d70:	e0fff90b 	ldhu	r3,-28(fp)
 8003d74:	00820074 	movhi	r2,2049
 8003d78:	109fdb04 	addi	r2,r2,32620
 8003d7c:	1885883a 	add	r2,r3,r2
 8003d80:	e0fffb17 	ldw	r3,-20(fp)
 8003d84:	18bf4736 	bltu	r3,r2,8003aa4 <__alt_data_end+0xfc003aa4>
 8003d88:	0005883a 	mov	r2,zero
 8003d8c:	e037883a 	mov	sp,fp
 8003d90:	dfc00117 	ldw	ra,4(sp)
 8003d94:	df000017 	ldw	fp,0(sp)
 8003d98:	dec00204 	addi	sp,sp,8
 8003d9c:	f800283a 	ret

08003da0 <HID_init>:
 8003da0:	deffff04 	addi	sp,sp,-4
 8003da4:	df000015 	stw	fp,0(sp)
 8003da8:	d839883a 	mov	fp,sp
 8003dac:	00820074 	movhi	r2,2049
 8003db0:	109fc304 	addi	r2,r2,32524
 8003db4:	00c01004 	movi	r3,64
 8003db8:	10c00345 	stb	r3,13(r2)
 8003dbc:	00820074 	movhi	r2,2049
 8003dc0:	109fc304 	addi	r2,r2,32524
 8003dc4:	00c00404 	movi	r3,16
 8003dc8:	10c00385 	stb	r3,14(r2)
 8003dcc:	0001883a 	nop
 8003dd0:	e037883a 	mov	sp,fp
 8003dd4:	df000017 	ldw	fp,0(sp)
 8003dd8:	dec00104 	addi	sp,sp,4
 8003ddc:	f800283a 	ret

08003de0 <mousePoll>:
 8003de0:	defffb04 	addi	sp,sp,-20
 8003de4:	dfc00415 	stw	ra,16(sp)
 8003de8:	df000315 	stw	fp,12(sp)
 8003dec:	df000304 	addi	fp,sp,12
 8003df0:	e13fff15 	stw	r4,-4(fp)
 8003df4:	d0ac0203 	ldbu	r2,-20472(gp)
 8003df8:	10803fcc 	andi	r2,r2,255
 8003dfc:	100b883a 	mov	r5,r2
 8003e00:	01003804 	movi	r4,224
 8003e04:	8003fbc0 	call	8003fbc <MAXreg_wr>
 8003e08:	d0ac0203 	ldbu	r2,-20472(gp)
 8003e0c:	11003fcc 	andi	r4,r2,255
 8003e10:	d0ac0203 	ldbu	r2,-20472(gp)
 8003e14:	10c03fcc 	andi	r3,r2,255
 8003e18:	008200b4 	movhi	r2,2050
 8003e1c:	10a01b04 	addi	r2,r2,-32660
 8003e20:	180690fa 	slli	r3,r3,3
 8003e24:	10c5883a 	add	r2,r2,r3
 8003e28:	10800017 	ldw	r2,0(r2)
 8003e2c:	10800204 	addi	r2,r2,8
 8003e30:	1080008b 	ldhu	r2,2(r2)
 8003e34:	10803fcc 	andi	r2,r2,255
 8003e38:	d8800015 	stw	r2,0(sp)
 8003e3c:	e1ffff17 	ldw	r7,-4(fp)
 8003e40:	01800204 	movi	r6,8
 8003e44:	01400044 	movi	r5,1
 8003e48:	8004b0c0 	call	8004b0c <XferInTransfer>
 8003e4c:	e0bffe05 	stb	r2,-8(fp)
 8003e50:	e0bffe03 	ldbu	r2,-8(fp)
 8003e54:	e037883a 	mov	sp,fp
 8003e58:	dfc00117 	ldw	ra,4(sp)
 8003e5c:	df000017 	ldw	fp,0(sp)
 8003e60:	dec00204 	addi	sp,sp,8
 8003e64:	f800283a 	ret

08003e68 <kbdPoll>:
 8003e68:	defffb04 	addi	sp,sp,-20
 8003e6c:	dfc00415 	stw	ra,16(sp)
 8003e70:	df000315 	stw	fp,12(sp)
 8003e74:	df000304 	addi	fp,sp,12
 8003e78:	e13fff15 	stw	r4,-4(fp)
 8003e7c:	d0ac0203 	ldbu	r2,-20472(gp)
 8003e80:	10803fcc 	andi	r2,r2,255
 8003e84:	100b883a 	mov	r5,r2
 8003e88:	01003804 	movi	r4,224
 8003e8c:	8003fbc0 	call	8003fbc <MAXreg_wr>
 8003e90:	d0ac0203 	ldbu	r2,-20472(gp)
 8003e94:	11003fcc 	andi	r4,r2,255
 8003e98:	d0ac0203 	ldbu	r2,-20472(gp)
 8003e9c:	10c03fcc 	andi	r3,r2,255
 8003ea0:	008200b4 	movhi	r2,2050
 8003ea4:	10a01b04 	addi	r2,r2,-32660
 8003ea8:	180690fa 	slli	r3,r3,3
 8003eac:	10c5883a 	add	r2,r2,r3
 8003eb0:	10800017 	ldw	r2,0(r2)
 8003eb4:	10800204 	addi	r2,r2,8
 8003eb8:	1080008b 	ldhu	r2,2(r2)
 8003ebc:	10803fcc 	andi	r2,r2,255
 8003ec0:	d8800015 	stw	r2,0(sp)
 8003ec4:	e1ffff17 	ldw	r7,-4(fp)
 8003ec8:	01800204 	movi	r6,8
 8003ecc:	01400044 	movi	r5,1
 8003ed0:	8004b0c0 	call	8004b0c <XferInTransfer>
 8003ed4:	e0bffe05 	stb	r2,-8(fp)
 8003ed8:	e0bffe03 	ldbu	r2,-8(fp)
 8003edc:	e037883a 	mov	sp,fp
 8003ee0:	dfc00117 	ldw	ra,4(sp)
 8003ee4:	df000017 	ldw	fp,0(sp)
 8003ee8:	dec00204 	addi	sp,sp,8
 8003eec:	f800283a 	ret

08003ef0 <HIDMEventHandler>:
 8003ef0:	defffb04 	addi	sp,sp,-20
 8003ef4:	df000415 	stw	fp,16(sp)
 8003ef8:	df000404 	addi	fp,sp,16
 8003efc:	2007883a 	mov	r3,r4
 8003f00:	2805883a 	mov	r2,r5
 8003f04:	e1bffe15 	stw	r6,-8(fp)
 8003f08:	e1ffff15 	stw	r7,-4(fp)
 8003f0c:	e0fffc05 	stb	r3,-16(fp)
 8003f10:	e0bffd05 	stb	r2,-12(fp)
 8003f14:	0005883a 	mov	r2,zero
 8003f18:	e037883a 	mov	sp,fp
 8003f1c:	df000017 	ldw	fp,0(sp)
 8003f20:	dec00104 	addi	sp,sp,4
 8003f24:	f800283a 	ret

08003f28 <HIDKEventHandler>:
 8003f28:	defffb04 	addi	sp,sp,-20
 8003f2c:	df000415 	stw	fp,16(sp)
 8003f30:	df000404 	addi	fp,sp,16
 8003f34:	2007883a 	mov	r3,r4
 8003f38:	2805883a 	mov	r2,r5
 8003f3c:	e1bffe15 	stw	r6,-8(fp)
 8003f40:	e1ffff15 	stw	r7,-4(fp)
 8003f44:	e0fffc05 	stb	r3,-16(fp)
 8003f48:	e0bffd05 	stb	r2,-12(fp)
 8003f4c:	0005883a 	mov	r2,zero
 8003f50:	e037883a 	mov	sp,fp
 8003f54:	df000017 	ldw	fp,0(sp)
 8003f58:	dec00104 	addi	sp,sp,4
 8003f5c:	f800283a 	ret

08003f60 <SPI_init>:
 8003f60:	defffc04 	addi	sp,sp,-16
 8003f64:	df000315 	stw	fp,12(sp)
 8003f68:	df000304 	addi	fp,sp,12
 8003f6c:	2807883a 	mov	r3,r5
 8003f70:	3005883a 	mov	r2,r6
 8003f74:	e13ffd05 	stb	r4,-12(fp)
 8003f78:	e0fffe05 	stb	r3,-8(fp)
 8003f7c:	e0bfff05 	stb	r2,-4(fp)
 8003f80:	0001883a 	nop
 8003f84:	e037883a 	mov	sp,fp
 8003f88:	df000017 	ldw	fp,0(sp)
 8003f8c:	dec00104 	addi	sp,sp,4
 8003f90:	f800283a 	ret

08003f94 <SPI_wr>:
 8003f94:	defffe04 	addi	sp,sp,-8
 8003f98:	df000115 	stw	fp,4(sp)
 8003f9c:	df000104 	addi	fp,sp,4
 8003fa0:	2005883a 	mov	r2,r4
 8003fa4:	e0bfff05 	stb	r2,-4(fp)
 8003fa8:	0001883a 	nop
 8003fac:	e037883a 	mov	sp,fp
 8003fb0:	df000017 	ldw	fp,0(sp)
 8003fb4:	dec00104 	addi	sp,sp,4
 8003fb8:	f800283a 	ret

08003fbc <MAXreg_wr>:
 8003fbc:	defff704 	addi	sp,sp,-36
 8003fc0:	dfc00815 	stw	ra,32(sp)
 8003fc4:	df000715 	stw	fp,28(sp)
 8003fc8:	df000704 	addi	fp,sp,28
 8003fcc:	2007883a 	mov	r3,r4
 8003fd0:	2805883a 	mov	r2,r5
 8003fd4:	e0fffe05 	stb	r3,-8(fp)
 8003fd8:	e0bfff05 	stb	r2,-4(fp)
 8003fdc:	e0bffe03 	ldbu	r2,-8(fp)
 8003fe0:	10800084 	addi	r2,r2,2
 8003fe4:	e0bffd05 	stb	r2,-12(fp)
 8003fe8:	e0bfff03 	ldbu	r2,-4(fp)
 8003fec:	e0bffd45 	stb	r2,-11(fp)
 8003ff0:	e0bffd04 	addi	r2,fp,-12
 8003ff4:	d8000215 	stw	zero,8(sp)
 8003ff8:	d8000115 	stw	zero,4(sp)
 8003ffc:	d8000015 	stw	zero,0(sp)
 8004000:	100f883a 	mov	r7,r2
 8004004:	01800084 	movi	r6,2
 8004008:	000b883a 	mov	r5,zero
 800400c:	01000804 	movi	r4,32
 8004010:	800a0e80 	call	800a0e8 <alt_avalon_spi_command>
 8004014:	e0bffc15 	stw	r2,-16(fp)
 8004018:	e0bffc17 	ldw	r2,-16(fp)
 800401c:	1000030e 	bge	r2,zero,800402c <MAXreg_wr+0x70>
 8004020:	01020074 	movhi	r4,2049
 8004024:	212f5c04 	addi	r4,r4,-17040
 8004028:	8006e200 	call	8006e20 <puts>
 800402c:	0001883a 	nop
 8004030:	e037883a 	mov	sp,fp
 8004034:	dfc00117 	ldw	ra,4(sp)
 8004038:	df000017 	ldw	fp,0(sp)
 800403c:	dec00204 	addi	sp,sp,8
 8004040:	f800283a 	ret

08004044 <MAXbytes_wr>:
 8004044:	defff304 	addi	sp,sp,-52
 8004048:	dfc00c15 	stw	ra,48(sp)
 800404c:	df000b15 	stw	fp,44(sp)
 8004050:	dc000a15 	stw	r16,40(sp)
 8004054:	df000b04 	addi	fp,sp,44
 8004058:	201b883a 	mov	r13,r4
 800405c:	2809883a 	mov	r4,r5
 8004060:	e1bffe15 	stw	r6,-8(fp)
 8004064:	e37ffc05 	stb	r13,-16(fp)
 8004068:	e13ffd05 	stb	r4,-12(fp)
 800406c:	d809883a 	mov	r4,sp
 8004070:	2021883a 	mov	r16,r4
 8004074:	e13ffd03 	ldbu	r4,-12(fp)
 8004078:	21000044 	addi	r4,r4,1
 800407c:	217fffc4 	addi	r5,r4,-1
 8004080:	e17ff915 	stw	r5,-28(fp)
 8004084:	200b883a 	mov	r5,r4
 8004088:	2817883a 	mov	r11,r5
 800408c:	0019883a 	mov	r12,zero
 8004090:	580ad77a 	srli	r5,r11,29
 8004094:	601090fa 	slli	r8,r12,3
 8004098:	2a10b03a 	or	r8,r5,r8
 800409c:	580e90fa 	slli	r7,r11,3
 80040a0:	200b883a 	mov	r5,r4
 80040a4:	2813883a 	mov	r9,r5
 80040a8:	0015883a 	mov	r10,zero
 80040ac:	480ad77a 	srli	r5,r9,29
 80040b0:	500690fa 	slli	r3,r10,3
 80040b4:	28c6b03a 	or	r3,r5,r3
 80040b8:	480490fa 	slli	r2,r9,3
 80040bc:	2005883a 	mov	r2,r4
 80040c0:	108000c4 	addi	r2,r2,3
 80040c4:	1004d0ba 	srli	r2,r2,2
 80040c8:	1085883a 	add	r2,r2,r2
 80040cc:	1085883a 	add	r2,r2,r2
 80040d0:	d8b7c83a 	sub	sp,sp,r2
 80040d4:	d8800304 	addi	r2,sp,12
 80040d8:	1005883a 	mov	r2,r2
 80040dc:	e0bffa15 	stw	r2,-24(fp)
 80040e0:	e0bffc03 	ldbu	r2,-16(fp)
 80040e4:	10800084 	addi	r2,r2,2
 80040e8:	1007883a 	mov	r3,r2
 80040ec:	e0bffa17 	ldw	r2,-24(fp)
 80040f0:	10c00005 	stb	r3,0(r2)
 80040f4:	e03ff815 	stw	zero,-32(fp)
 80040f8:	00000c06 	br	800412c <MAXbytes_wr+0xe8>
 80040fc:	e0bff817 	ldw	r2,-32(fp)
 8004100:	10800044 	addi	r2,r2,1
 8004104:	e0fff817 	ldw	r3,-32(fp)
 8004108:	e13ffe17 	ldw	r4,-8(fp)
 800410c:	20c7883a 	add	r3,r4,r3
 8004110:	18c00003 	ldbu	r3,0(r3)
 8004114:	e13ffa17 	ldw	r4,-24(fp)
 8004118:	2085883a 	add	r2,r4,r2
 800411c:	10c00005 	stb	r3,0(r2)
 8004120:	e0bff817 	ldw	r2,-32(fp)
 8004124:	10800044 	addi	r2,r2,1
 8004128:	e0bff815 	stw	r2,-32(fp)
 800412c:	e0bffd03 	ldbu	r2,-12(fp)
 8004130:	e0fff817 	ldw	r3,-32(fp)
 8004134:	18bff116 	blt	r3,r2,80040fc <__alt_data_end+0xfc0040fc>
 8004138:	e0bffd03 	ldbu	r2,-12(fp)
 800413c:	10800044 	addi	r2,r2,1
 8004140:	1007883a 	mov	r3,r2
 8004144:	e0bffa17 	ldw	r2,-24(fp)
 8004148:	d8000215 	stw	zero,8(sp)
 800414c:	d8000115 	stw	zero,4(sp)
 8004150:	d8000015 	stw	zero,0(sp)
 8004154:	100f883a 	mov	r7,r2
 8004158:	180d883a 	mov	r6,r3
 800415c:	000b883a 	mov	r5,zero
 8004160:	01000804 	movi	r4,32
 8004164:	800a0e80 	call	800a0e8 <alt_avalon_spi_command>
 8004168:	e0bffb15 	stw	r2,-20(fp)
 800416c:	e0bffb17 	ldw	r2,-20(fp)
 8004170:	1000030e 	bge	r2,zero,8004180 <MAXbytes_wr+0x13c>
 8004174:	01020074 	movhi	r4,2049
 8004178:	212f5c04 	addi	r4,r4,-17040
 800417c:	8006e200 	call	8006e20 <puts>
 8004180:	e0bffd03 	ldbu	r2,-12(fp)
 8004184:	e0fffe17 	ldw	r3,-8(fp)
 8004188:	1885883a 	add	r2,r3,r2
 800418c:	8037883a 	mov	sp,r16
 8004190:	e6ffff04 	addi	sp,fp,-4
 8004194:	dfc00217 	ldw	ra,8(sp)
 8004198:	df000117 	ldw	fp,4(sp)
 800419c:	dc000017 	ldw	r16,0(sp)
 80041a0:	dec00304 	addi	sp,sp,12
 80041a4:	f800283a 	ret

080041a8 <MAXreg_rd>:
 80041a8:	defff804 	addi	sp,sp,-32
 80041ac:	dfc00715 	stw	ra,28(sp)
 80041b0:	df000615 	stw	fp,24(sp)
 80041b4:	df000604 	addi	fp,sp,24
 80041b8:	2005883a 	mov	r2,r4
 80041bc:	e0bfff05 	stb	r2,-4(fp)
 80041c0:	00820074 	movhi	r2,2049
 80041c4:	10af5e04 	addi	r2,r2,-17032
 80041c8:	e0bffe05 	stb	r2,-8(fp)
 80041cc:	e0bfff03 	ldbu	r2,-4(fp)
 80041d0:	e0bffe45 	stb	r2,-7(fp)
 80041d4:	e0fffe44 	addi	r3,fp,-7
 80041d8:	d8000215 	stw	zero,8(sp)
 80041dc:	e0bffe04 	addi	r2,fp,-8
 80041e0:	d8800115 	stw	r2,4(sp)
 80041e4:	00800044 	movi	r2,1
 80041e8:	d8800015 	stw	r2,0(sp)
 80041ec:	180f883a 	mov	r7,r3
 80041f0:	01800044 	movi	r6,1
 80041f4:	000b883a 	mov	r5,zero
 80041f8:	01000804 	movi	r4,32
 80041fc:	800a0e80 	call	800a0e8 <alt_avalon_spi_command>
 8004200:	e0bffd15 	stw	r2,-12(fp)
 8004204:	e0bffd17 	ldw	r2,-12(fp)
 8004208:	1000030e 	bge	r2,zero,8004218 <MAXreg_rd+0x70>
 800420c:	01020074 	movhi	r4,2049
 8004210:	212f5c04 	addi	r4,r4,-17040
 8004214:	8006e200 	call	8006e20 <puts>
 8004218:	e0bffe03 	ldbu	r2,-8(fp)
 800421c:	e037883a 	mov	sp,fp
 8004220:	dfc00117 	ldw	ra,4(sp)
 8004224:	df000017 	ldw	fp,0(sp)
 8004228:	dec00204 	addi	sp,sp,8
 800422c:	f800283a 	ret

08004230 <MAXbytes_rd>:
 8004230:	defff604 	addi	sp,sp,-40
 8004234:	dfc00915 	stw	ra,36(sp)
 8004238:	df000815 	stw	fp,32(sp)
 800423c:	df000804 	addi	fp,sp,32
 8004240:	2007883a 	mov	r3,r4
 8004244:	2805883a 	mov	r2,r5
 8004248:	e1bfff15 	stw	r6,-4(fp)
 800424c:	e0fffd05 	stb	r3,-12(fp)
 8004250:	e0bffe05 	stb	r2,-8(fp)
 8004254:	e0bffd03 	ldbu	r2,-12(fp)
 8004258:	e0bffc05 	stb	r2,-16(fp)
 800425c:	e0bffe03 	ldbu	r2,-8(fp)
 8004260:	e13ffc04 	addi	r4,fp,-16
 8004264:	d8000215 	stw	zero,8(sp)
 8004268:	e0ffff17 	ldw	r3,-4(fp)
 800426c:	d8c00115 	stw	r3,4(sp)
 8004270:	d8800015 	stw	r2,0(sp)
 8004274:	200f883a 	mov	r7,r4
 8004278:	01800044 	movi	r6,1
 800427c:	000b883a 	mov	r5,zero
 8004280:	01000804 	movi	r4,32
 8004284:	800a0e80 	call	800a0e8 <alt_avalon_spi_command>
 8004288:	e0bffb15 	stw	r2,-20(fp)
 800428c:	e0bffb17 	ldw	r2,-20(fp)
 8004290:	1000030e 	bge	r2,zero,80042a0 <MAXbytes_rd+0x70>
 8004294:	01020074 	movhi	r4,2049
 8004298:	212f5c04 	addi	r4,r4,-17040
 800429c:	8006e200 	call	8006e20 <puts>
 80042a0:	e0bffe03 	ldbu	r2,-8(fp)
 80042a4:	e0ffff17 	ldw	r3,-4(fp)
 80042a8:	1885883a 	add	r2,r3,r2
 80042ac:	e037883a 	mov	sp,fp
 80042b0:	dfc00117 	ldw	ra,4(sp)
 80042b4:	df000017 	ldw	fp,0(sp)
 80042b8:	dec00204 	addi	sp,sp,8
 80042bc:	f800283a 	ret

080042c0 <MAX3421E_reset>:
 80042c0:	defffd04 	addi	sp,sp,-12
 80042c4:	dfc00215 	stw	ra,8(sp)
 80042c8:	df000115 	stw	fp,4(sp)
 80042cc:	df000104 	addi	fp,sp,4
 80042d0:	0007883a 	mov	r3,zero
 80042d4:	00808004 	movi	r2,512
 80042d8:	10c00035 	stwio	r3,0(r2)
 80042dc:	010003f4 	movhi	r4,15
 80042e0:	21109004 	addi	r4,r4,16960
 80042e4:	80078200 	call	8007820 <usleep>
 80042e8:	00c00044 	movi	r3,1
 80042ec:	00808004 	movi	r2,512
 80042f0:	10c00035 	stwio	r3,0(r2)
 80042f4:	e03fff05 	stb	zero,-4(fp)
 80042f8:	01400804 	movi	r5,32
 80042fc:	01001e04 	movi	r4,120
 8004300:	8003fbc0 	call	8003fbc <MAXreg_wr>
 8004304:	000b883a 	mov	r5,zero
 8004308:	01001e04 	movi	r4,120
 800430c:	8003fbc0 	call	8003fbc <MAXreg_wr>
 8004310:	00000806 	br	8004334 <MAX3421E_reset+0x74>
 8004314:	e0bfff03 	ldbu	r2,-4(fp)
 8004318:	10800044 	addi	r2,r2,1
 800431c:	e0bfff05 	stb	r2,-4(fp)
 8004320:	e0bfff03 	ldbu	r2,-4(fp)
 8004324:	1000031e 	bne	r2,zero,8004334 <MAX3421E_reset+0x74>
 8004328:	01020074 	movhi	r4,2049
 800432c:	212f5f04 	addi	r4,r4,-17028
 8004330:	8006d540 	call	8006d54 <printf>
 8004334:	01001a04 	movi	r4,104
 8004338:	80041a80 	call	80041a8 <MAXreg_rd>
 800433c:	10803fcc 	andi	r2,r2,255
 8004340:	1080004c 	andi	r2,r2,1
 8004344:	103ff326 	beq	r2,zero,8004314 <__alt_data_end+0xfc004314>
 8004348:	0001883a 	nop
 800434c:	e037883a 	mov	sp,fp
 8004350:	dfc00117 	ldw	ra,4(sp)
 8004354:	df000017 	ldw	fp,0(sp)
 8004358:	dec00204 	addi	sp,sp,8
 800435c:	f800283a 	ret

08004360 <Vbus_power>:
 8004360:	defffe04 	addi	sp,sp,-8
 8004364:	df000115 	stw	fp,4(sp)
 8004368:	df000104 	addi	fp,sp,4
 800436c:	e13fff15 	stw	r4,-4(fp)
 8004370:	00800044 	movi	r2,1
 8004374:	e037883a 	mov	sp,fp
 8004378:	df000017 	ldw	fp,0(sp)
 800437c:	dec00104 	addi	sp,sp,4
 8004380:	f800283a 	ret

08004384 <MAX_busprobe>:
 8004384:	defffd04 	addi	sp,sp,-12
 8004388:	dfc00215 	stw	ra,8(sp)
 800438c:	df000115 	stw	fp,4(sp)
 8004390:	df000104 	addi	fp,sp,4
 8004394:	01003e04 	movi	r4,248
 8004398:	80041a80 	call	80041a8 <MAXreg_rd>
 800439c:	e0bfff05 	stb	r2,-4(fp)
 80043a0:	e0ffff03 	ldbu	r3,-4(fp)
 80043a4:	00bff004 	movi	r2,-64
 80043a8:	1884703a 	and	r2,r3,r2
 80043ac:	e0bfff05 	stb	r2,-4(fp)
 80043b0:	e0bfff03 	ldbu	r2,-4(fp)
 80043b4:	10c01020 	cmpeqi	r3,r2,64
 80043b8:	1800221e 	bne	r3,zero,8004444 <MAX_busprobe+0xc0>
 80043bc:	10c01048 	cmpgei	r3,r2,65
 80043c0:	1800021e 	bne	r3,zero,80043cc <MAX_busprobe+0x48>
 80043c4:	10003b26 	beq	r2,zero,80044b4 <MAX_busprobe+0x130>
 80043c8:	00004a06 	br	80044f4 <MAX_busprobe+0x170>
 80043cc:	10c02020 	cmpeqi	r3,r2,128
 80043d0:	1800031e 	bne	r3,zero,80043e0 <MAX_busprobe+0x5c>
 80043d4:	10803020 	cmpeqi	r2,r2,192
 80043d8:	1000331e 	bne	r2,zero,80044a8 <MAX_busprobe+0x124>
 80043dc:	00004506 	br	80044f4 <MAX_busprobe+0x170>
 80043e0:	d0a00603 	ldbu	r2,-32744(gp)
 80043e4:	10803fcc 	andi	r2,r2,255
 80043e8:	108004e0 	cmpeqi	r2,r2,19
 80043ec:	10003e1e 	bne	r2,zero,80044e8 <MAX_busprobe+0x164>
 80043f0:	01003604 	movi	r4,216
 80043f4:	80041a80 	call	80041a8 <MAXreg_rd>
 80043f8:	10803fcc 	andi	r2,r2,255
 80043fc:	1080008c 	andi	r2,r2,2
 8004400:	1000071e 	bne	r2,zero,8004420 <MAX_busprobe+0x9c>
 8004404:	01403244 	movi	r5,201
 8004408:	01003604 	movi	r4,216
 800440c:	8003fbc0 	call	8003fbc <MAXreg_wr>
 8004410:	01020074 	movhi	r4,2049
 8004414:	212f6304 	addi	r4,r4,-17012
 8004418:	8006e200 	call	8006e20 <puts>
 800441c:	00000606 	br	8004438 <MAX_busprobe+0xb4>
 8004420:	014032c4 	movi	r5,203
 8004424:	01003604 	movi	r4,216
 8004428:	8003fbc0 	call	8003fbc <MAXreg_wr>
 800442c:	01020074 	movhi	r4,2049
 8004430:	212f6904 	addi	r4,r4,-16988
 8004434:	8006e200 	call	8006e20 <puts>
 8004438:	00800404 	movi	r2,16
 800443c:	d0a00605 	stb	r2,-32744(gp)
 8004440:	00002906 	br	80044e8 <MAX_busprobe+0x164>
 8004444:	d0a00603 	ldbu	r2,-32744(gp)
 8004448:	10803fcc 	andi	r2,r2,255
 800444c:	108004e0 	cmpeqi	r2,r2,19
 8004450:	1000271e 	bne	r2,zero,80044f0 <MAX_busprobe+0x16c>
 8004454:	01003604 	movi	r4,216
 8004458:	80041a80 	call	80041a8 <MAXreg_rd>
 800445c:	10803fcc 	andi	r2,r2,255
 8004460:	1080008c 	andi	r2,r2,2
 8004464:	1000071e 	bne	r2,zero,8004484 <MAX_busprobe+0x100>
 8004468:	014032c4 	movi	r5,203
 800446c:	01003604 	movi	r4,216
 8004470:	8003fbc0 	call	8003fbc <MAXreg_wr>
 8004474:	01020074 	movhi	r4,2049
 8004478:	212f6904 	addi	r4,r4,-16988
 800447c:	8006e200 	call	8006e20 <puts>
 8004480:	00000606 	br	800449c <MAX_busprobe+0x118>
 8004484:	01403244 	movi	r5,201
 8004488:	01003604 	movi	r4,216
 800448c:	8003fbc0 	call	8003fbc <MAXreg_wr>
 8004490:	01020074 	movhi	r4,2049
 8004494:	212f6304 	addi	r4,r4,-17012
 8004498:	8006e200 	call	8006e20 <puts>
 800449c:	00800404 	movi	r2,16
 80044a0:	d0a00605 	stb	r2,-32744(gp)
 80044a4:	00001206 	br	80044f0 <MAX_busprobe+0x16c>
 80044a8:	00800104 	movi	r2,4
 80044ac:	d0a00605 	stb	r2,-32744(gp)
 80044b0:	00001006 	br	80044f4 <MAX_busprobe+0x170>
 80044b4:	d0a00603 	ldbu	r2,-32744(gp)
 80044b8:	10803fcc 	andi	r2,r2,255
 80044bc:	10803c0c 	andi	r2,r2,240
 80044c0:	10000326 	beq	r2,zero,80044d0 <MAX_busprobe+0x14c>
 80044c4:	00800044 	movi	r2,1
 80044c8:	d0a00605 	stb	r2,-32744(gp)
 80044cc:	00000906 	br	80044f4 <MAX_busprobe+0x170>
 80044d0:	01403244 	movi	r5,201
 80044d4:	01003604 	movi	r4,216
 80044d8:	8003fbc0 	call	8003fbc <MAXreg_wr>
 80044dc:	008000c4 	movi	r2,3
 80044e0:	d0a00605 	stb	r2,-32744(gp)
 80044e4:	00000306 	br	80044f4 <MAX_busprobe+0x170>
 80044e8:	0001883a 	nop
 80044ec:	00000106 	br	80044f4 <MAX_busprobe+0x170>
 80044f0:	0001883a 	nop
 80044f4:	0001883a 	nop
 80044f8:	e037883a 	mov	sp,fp
 80044fc:	dfc00117 	ldw	ra,4(sp)
 8004500:	df000017 	ldw	fp,0(sp)
 8004504:	dec00204 	addi	sp,sp,8
 8004508:	f800283a 	ret

0800450c <MAX3421E_init>:
 800450c:	defffe04 	addi	sp,sp,-8
 8004510:	dfc00115 	stw	ra,4(sp)
 8004514:	df000015 	stw	fp,0(sp)
 8004518:	d839883a 	mov	fp,sp
 800451c:	01400684 	movi	r5,26
 8004520:	01002204 	movi	r4,136
 8004524:	8003fbc0 	call	8003fbc <MAXreg_wr>
 8004528:	80042c00 	call	80042c0 <MAX3421E_reset>
 800452c:	0009883a 	mov	r4,zero
 8004530:	80043600 	call	8004360 <Vbus_power>
 8004534:	01402004 	movi	r5,128
 8004538:	01002e04 	movi	r4,184
 800453c:	8003fbc0 	call	8003fbc <MAXreg_wr>
 8004540:	01000044 	movi	r4,1
 8004544:	80043600 	call	8004360 <Vbus_power>
 8004548:	01403444 	movi	r5,209
 800454c:	01003604 	movi	r4,216
 8004550:	8003fbc0 	call	8003fbc <MAXreg_wr>
 8004554:	01400804 	movi	r5,32
 8004558:	01003404 	movi	r4,208
 800455c:	8003fbc0 	call	8003fbc <MAXreg_wr>
 8004560:	01400104 	movi	r5,4
 8004564:	01003a04 	movi	r4,232
 8004568:	8003fbc0 	call	8003fbc <MAXreg_wr>
 800456c:	80043840 	call	8004384 <MAX_busprobe>
 8004570:	01400804 	movi	r5,32
 8004574:	01003204 	movi	r4,200
 8004578:	8003fbc0 	call	8003fbc <MAXreg_wr>
 800457c:	01400044 	movi	r5,1
 8004580:	01002004 	movi	r4,128
 8004584:	8003fbc0 	call	8003fbc <MAXreg_wr>
 8004588:	0001883a 	nop
 800458c:	e037883a 	mov	sp,fp
 8004590:	dfc00117 	ldw	ra,4(sp)
 8004594:	df000017 	ldw	fp,0(sp)
 8004598:	dec00204 	addi	sp,sp,8
 800459c:	f800283a 	ret

080045a0 <MAX3421E_Task>:
 80045a0:	defffe04 	addi	sp,sp,-8
 80045a4:	dfc00115 	stw	ra,4(sp)
 80045a8:	df000015 	stw	fp,0(sp)
 80045ac:	d839883a 	mov	fp,sp
 80045b0:	00808804 	movi	r2,544
 80045b4:	10800037 	ldwio	r2,0(r2)
 80045b8:	1000041e 	bne	r2,zero,80045cc <MAX3421E_Task+0x2c>
 80045bc:	01020074 	movhi	r4,2049
 80045c0:	212f6f04 	addi	r4,r4,-16964
 80045c4:	8006d540 	call	8006d54 <printf>
 80045c8:	80046040 	call	8004604 <MaxIntHandler>
 80045cc:	00808404 	movi	r2,528
 80045d0:	10800037 	ldwio	r2,0(r2)
 80045d4:	10800058 	cmpnei	r2,r2,1
 80045d8:	1000041e 	bne	r2,zero,80045ec <MAX3421E_Task+0x4c>
 80045dc:	01020074 	movhi	r4,2049
 80045e0:	212f7304 	addi	r4,r4,-16948
 80045e4:	8006d540 	call	8006d54 <printf>
 80045e8:	80046d00 	call	80046d0 <MaxGpxHandler>
 80045ec:	0001883a 	nop
 80045f0:	e037883a 	mov	sp,fp
 80045f4:	dfc00117 	ldw	ra,4(sp)
 80045f8:	df000017 	ldw	fp,0(sp)
 80045fc:	dec00204 	addi	sp,sp,8
 8004600:	f800283a 	ret

08004604 <MaxIntHandler>:
 8004604:	defffd04 	addi	sp,sp,-12
 8004608:	dfc00215 	stw	ra,8(sp)
 800460c:	df000115 	stw	fp,4(sp)
 8004610:	df000104 	addi	fp,sp,4
 8004614:	e03fff05 	stb	zero,-4(fp)
 8004618:	01003204 	movi	r4,200
 800461c:	80041a80 	call	80041a8 <MAXreg_rd>
 8004620:	e0bfff45 	stb	r2,-3(fp)
 8004624:	e0bfff43 	ldbu	r2,-3(fp)
 8004628:	100b883a 	mov	r5,r2
 800462c:	01020074 	movhi	r4,2049
 8004630:	212f7704 	addi	r4,r4,-16932
 8004634:	8006d540 	call	8006d54 <printf>
 8004638:	e0bfff43 	ldbu	r2,-3(fp)
 800463c:	1080100c 	andi	r2,r2,64
 8004640:	10000326 	beq	r2,zero,8004650 <MaxIntHandler+0x4c>
 8004644:	e0bfff03 	ldbu	r2,-4(fp)
 8004648:	10801014 	ori	r2,r2,64
 800464c:	e0bfff05 	stb	r2,-4(fp)
 8004650:	e0bfff43 	ldbu	r2,-3(fp)
 8004654:	1080080c 	andi	r2,r2,32
 8004658:	10000426 	beq	r2,zero,800466c <MaxIntHandler+0x68>
 800465c:	80043840 	call	8004384 <MAX_busprobe>
 8004660:	e0bfff03 	ldbu	r2,-4(fp)
 8004664:	10800814 	ori	r2,r2,32
 8004668:	e0bfff05 	stb	r2,-4(fp)
 800466c:	e0bfff43 	ldbu	r2,-3(fp)
 8004670:	1080020c 	andi	r2,r2,8
 8004674:	10000326 	beq	r2,zero,8004684 <MaxIntHandler+0x80>
 8004678:	000b883a 	mov	r5,zero
 800467c:	01000e04 	movi	r4,56
 8004680:	8003fbc0 	call	8003fbc <MAXreg_wr>
 8004684:	e0bfff43 	ldbu	r2,-3(fp)
 8004688:	1080004c 	andi	r2,r2,1
 800468c:	10000626 	beq	r2,zero,80046a8 <MaxIntHandler+0xa4>
 8004690:	d0a00603 	ldbu	r2,-32744(gp)
 8004694:	10800044 	addi	r2,r2,1
 8004698:	d0a00605 	stb	r2,-32744(gp)
 800469c:	e0bfff03 	ldbu	r2,-4(fp)
 80046a0:	10800054 	ori	r2,r2,1
 80046a4:	e0bfff05 	stb	r2,-4(fp)
 80046a8:	e0bfff03 	ldbu	r2,-4(fp)
 80046ac:	100b883a 	mov	r5,r2
 80046b0:	01003204 	movi	r4,200
 80046b4:	8003fbc0 	call	8003fbc <MAXreg_wr>
 80046b8:	0001883a 	nop
 80046bc:	e037883a 	mov	sp,fp
 80046c0:	dfc00117 	ldw	ra,4(sp)
 80046c4:	df000017 	ldw	fp,0(sp)
 80046c8:	dec00204 	addi	sp,sp,8
 80046cc:	f800283a 	ret

080046d0 <MaxGpxHandler>:
 80046d0:	defffd04 	addi	sp,sp,-12
 80046d4:	dfc00215 	stw	ra,8(sp)
 80046d8:	df000115 	stw	fp,4(sp)
 80046dc:	df000104 	addi	fp,sp,4
 80046e0:	01002c04 	movi	r4,176
 80046e4:	80041a80 	call	80041a8 <MAXreg_rd>
 80046e8:	e0bfff05 	stb	r2,-4(fp)
 80046ec:	0001883a 	nop
 80046f0:	e037883a 	mov	sp,fp
 80046f4:	dfc00117 	ldw	ra,4(sp)
 80046f8:	df000017 	ldw	fp,0(sp)
 80046fc:	dec00204 	addi	sp,sp,8
 8004700:	f800283a 	ret

08004704 <XferCtrlReq>:
 8004704:	defff104 	addi	sp,sp,-60
 8004708:	dfc00e15 	stw	ra,56(sp)
 800470c:	df000d15 	stw	fp,52(sp)
 8004710:	df000d04 	addi	fp,sp,52
 8004714:	2015883a 	mov	r10,r4
 8004718:	2813883a 	mov	r9,r5
 800471c:	3011883a 	mov	r8,r6
 8004720:	380d883a 	mov	r6,r7
 8004724:	e1400217 	ldw	r5,8(fp)
 8004728:	e1000317 	ldw	r4,12(fp)
 800472c:	e0c00417 	ldw	r3,16(fp)
 8004730:	e0800517 	ldw	r2,20(fp)
 8004734:	e2bff805 	stb	r10,-32(fp)
 8004738:	e27ff905 	stb	r9,-28(fp)
 800473c:	e23ffa05 	stb	r8,-24(fp)
 8004740:	e1bffb05 	stb	r6,-20(fp)
 8004744:	e17ffc05 	stb	r5,-16(fp)
 8004748:	e13ffd05 	stb	r4,-12(fp)
 800474c:	e0fffe0d 	sth	r3,-8(fp)
 8004750:	e0bfff0d 	sth	r2,-4(fp)
 8004754:	e03ff415 	stw	zero,-48(fp)
 8004758:	00800044 	movi	r2,1
 800475c:	e0bff505 	stb	r2,-44(fp)
 8004760:	e0800617 	ldw	r2,24(fp)
 8004764:	1000011e 	bne	r2,zero,800476c <XferCtrlReq+0x68>
 8004768:	e03ff505 	stb	zero,-44(fp)
 800476c:	e0bff803 	ldbu	r2,-32(fp)
 8004770:	100b883a 	mov	r5,r2
 8004774:	01003804 	movi	r4,224
 8004778:	8003fbc0 	call	8003fbc <MAXreg_wr>
 800477c:	e0bffa03 	ldbu	r2,-24(fp)
 8004780:	10803fcc 	andi	r2,r2,255
 8004784:	1080201c 	xori	r2,r2,128
 8004788:	10bfe004 	addi	r2,r2,-128
 800478c:	1000020e 	bge	r2,zero,8004798 <XferCtrlReq+0x94>
 8004790:	00800044 	movi	r2,1
 8004794:	e0bff415 	stw	r2,-48(fp)
 8004798:	e0bffa03 	ldbu	r2,-24(fp)
 800479c:	e0bff585 	stb	r2,-42(fp)
 80047a0:	e0bffb03 	ldbu	r2,-20(fp)
 80047a4:	e0bff5c5 	stb	r2,-41(fp)
 80047a8:	e0bffc03 	ldbu	r2,-16(fp)
 80047ac:	e0bff605 	stb	r2,-40(fp)
 80047b0:	e0bffd03 	ldbu	r2,-12(fp)
 80047b4:	e0bff645 	stb	r2,-39(fp)
 80047b8:	e0bffe0b 	ldhu	r2,-8(fp)
 80047bc:	e0bff68d 	sth	r2,-38(fp)
 80047c0:	e0bfff0b 	ldhu	r2,-4(fp)
 80047c4:	e0bff70d 	sth	r2,-36(fp)
 80047c8:	e0bff584 	addi	r2,fp,-42
 80047cc:	100d883a 	mov	r6,r2
 80047d0:	01400204 	movi	r5,8
 80047d4:	01000804 	movi	r4,32
 80047d8:	80040440 	call	8004044 <MAXbytes_wr>
 80047dc:	e0bff903 	ldbu	r2,-28(fp)
 80047e0:	100b883a 	mov	r5,r2
 80047e4:	01000404 	movi	r4,16
 80047e8:	80049ac0 	call	80049ac <XferDispatchPkt>
 80047ec:	e0bff545 	stb	r2,-43(fp)
 80047f0:	e0bff543 	ldbu	r2,-43(fp)
 80047f4:	10000226 	beq	r2,zero,8004800 <XferCtrlReq+0xfc>
 80047f8:	e0bff543 	ldbu	r2,-43(fp)
 80047fc:	00000f06 	br	800483c <XferCtrlReq+0x138>
 8004800:	e0bff503 	ldbu	r2,-44(fp)
 8004804:	1085883a 	add	r2,r2,r2
 8004808:	1087883a 	add	r3,r2,r2
 800480c:	d0a00404 	addi	r2,gp,-32752
 8004810:	1885883a 	add	r2,r3,r2
 8004814:	10800017 	ldw	r2,0(r2)
 8004818:	e13ff803 	ldbu	r4,-32(fp)
 800481c:	e17ff903 	ldbu	r5,-28(fp)
 8004820:	e1bfff0b 	ldhu	r6,-4(fp)
 8004824:	e0fff417 	ldw	r3,-48(fp)
 8004828:	d8c00015 	stw	r3,0(sp)
 800482c:	e1c00617 	ldw	r7,24(fp)
 8004830:	103ee83a 	callr	r2
 8004834:	e0bff545 	stb	r2,-43(fp)
 8004838:	e0bff543 	ldbu	r2,-43(fp)
 800483c:	e037883a 	mov	sp,fp
 8004840:	dfc00117 	ldw	ra,4(sp)
 8004844:	df000017 	ldw	fp,0(sp)
 8004848:	dec00204 	addi	sp,sp,8
 800484c:	f800283a 	ret

08004850 <XferCtrlData>:
 8004850:	defff804 	addi	sp,sp,-32
 8004854:	dfc00715 	stw	ra,28(sp)
 8004858:	df000615 	stw	fp,24(sp)
 800485c:	df000604 	addi	fp,sp,24
 8004860:	2807883a 	mov	r3,r5
 8004864:	3005883a 	mov	r2,r6
 8004868:	e1ffff15 	stw	r7,-4(fp)
 800486c:	e13ffc05 	stb	r4,-16(fp)
 8004870:	e0fffd05 	stb	r3,-12(fp)
 8004874:	e0bffe0d 	sth	r2,-8(fp)
 8004878:	e0800217 	ldw	r2,8(fp)
 800487c:	10002826 	beq	r2,zero,8004920 <XferCtrlData+0xd0>
 8004880:	e0fffc03 	ldbu	r3,-16(fp)
 8004884:	008200b4 	movhi	r2,2050
 8004888:	10a01b04 	addi	r2,r2,-32660
 800488c:	180690fa 	slli	r3,r3,3
 8004890:	10c5883a 	add	r2,r2,r3
 8004894:	10c00017 	ldw	r3,0(r2)
 8004898:	e0bffd03 	ldbu	r2,-12(fp)
 800489c:	100490fa 	slli	r2,r2,3
 80048a0:	1885883a 	add	r2,r3,r2
 80048a4:	00c00804 	movi	r3,32
 80048a8:	10c00185 	stb	r3,6(r2)
 80048ac:	e13ffc03 	ldbu	r4,-16(fp)
 80048b0:	e17ffd03 	ldbu	r5,-12(fp)
 80048b4:	e1bffe0b 	ldhu	r6,-8(fp)
 80048b8:	e0fffc03 	ldbu	r3,-16(fp)
 80048bc:	008200b4 	movhi	r2,2050
 80048c0:	10a01b04 	addi	r2,r2,-32660
 80048c4:	180690fa 	slli	r3,r3,3
 80048c8:	10c5883a 	add	r2,r2,r3
 80048cc:	10c00017 	ldw	r3,0(r2)
 80048d0:	e0bffd03 	ldbu	r2,-12(fp)
 80048d4:	100490fa 	slli	r2,r2,3
 80048d8:	1885883a 	add	r2,r3,r2
 80048dc:	1080008b 	ldhu	r2,2(r2)
 80048e0:	10803fcc 	andi	r2,r2,255
 80048e4:	d8800015 	stw	r2,0(sp)
 80048e8:	e1ffff17 	ldw	r7,-4(fp)
 80048ec:	8004b0c0 	call	8004b0c <XferInTransfer>
 80048f0:	e0bffb05 	stb	r2,-20(fp)
 80048f4:	e0bffb03 	ldbu	r2,-20(fp)
 80048f8:	10000226 	beq	r2,zero,8004904 <XferCtrlData+0xb4>
 80048fc:	e0bffb03 	ldbu	r2,-20(fp)
 8004900:	00000806 	br	8004924 <XferCtrlData+0xd4>
 8004904:	e0bffd03 	ldbu	r2,-12(fp)
 8004908:	100b883a 	mov	r5,r2
 800490c:	01002804 	movi	r4,160
 8004910:	80049ac0 	call	80049ac <XferDispatchPkt>
 8004914:	e0bffb05 	stb	r2,-20(fp)
 8004918:	e0bffb03 	ldbu	r2,-20(fp)
 800491c:	00000106 	br	8004924 <XferCtrlData+0xd4>
 8004920:	00bfffc4 	movi	r2,-1
 8004924:	e037883a 	mov	sp,fp
 8004928:	dfc00117 	ldw	ra,4(sp)
 800492c:	df000017 	ldw	fp,0(sp)
 8004930:	dec00204 	addi	sp,sp,8
 8004934:	f800283a 	ret

08004938 <XferCtrlND>:
 8004938:	defff904 	addi	sp,sp,-28
 800493c:	dfc00615 	stw	ra,24(sp)
 8004940:	df000515 	stw	fp,20(sp)
 8004944:	df000504 	addi	fp,sp,20
 8004948:	2807883a 	mov	r3,r5
 800494c:	3005883a 	mov	r2,r6
 8004950:	e1ffff15 	stw	r7,-4(fp)
 8004954:	e13ffc05 	stb	r4,-16(fp)
 8004958:	e0fffd05 	stb	r3,-12(fp)
 800495c:	e0bffe0d 	sth	r2,-8(fp)
 8004960:	e0800217 	ldw	r2,8(fp)
 8004964:	10000626 	beq	r2,zero,8004980 <XferCtrlND+0x48>
 8004968:	e0bffd03 	ldbu	r2,-12(fp)
 800496c:	100b883a 	mov	r5,r2
 8004970:	01002804 	movi	r4,160
 8004974:	80049ac0 	call	80049ac <XferDispatchPkt>
 8004978:	e0bffb05 	stb	r2,-20(fp)
 800497c:	00000506 	br	8004994 <XferCtrlND+0x5c>
 8004980:	e0bffd03 	ldbu	r2,-12(fp)
 8004984:	100b883a 	mov	r5,r2
 8004988:	01002004 	movi	r4,128
 800498c:	80049ac0 	call	80049ac <XferDispatchPkt>
 8004990:	e0bffb05 	stb	r2,-20(fp)
 8004994:	e0bffb03 	ldbu	r2,-20(fp)
 8004998:	e037883a 	mov	sp,fp
 800499c:	dfc00117 	ldw	ra,4(sp)
 80049a0:	df000017 	ldw	fp,0(sp)
 80049a4:	dec00204 	addi	sp,sp,8
 80049a8:	f800283a 	ret

080049ac <XferDispatchPkt>:
 80049ac:	defff904 	addi	sp,sp,-28
 80049b0:	dfc00615 	stw	ra,24(sp)
 80049b4:	df000515 	stw	fp,20(sp)
 80049b8:	df000504 	addi	fp,sp,20
 80049bc:	2007883a 	mov	r3,r4
 80049c0:	2805883a 	mov	r2,r5
 80049c4:	e0fffe05 	stb	r3,-8(fp)
 80049c8:	e0bfff05 	stb	r2,-4(fp)
 80049cc:	d0ac0d17 	ldw	r2,-20428(gp)
 80049d0:	0140fa04 	movi	r5,1000
 80049d4:	1009883a 	mov	r4,r2
 80049d8:	80057940 	call	8005794 <__mulsi3>
 80049dc:	1007883a 	mov	r3,r2
 80049e0:	d0ac0c17 	ldw	r2,-20432(gp)
 80049e4:	100b883a 	mov	r5,r2
 80049e8:	1809883a 	mov	r4,r3
 80049ec:	80056d80 	call	80056d8 <__udivsi3>
 80049f0:	1084e204 	addi	r2,r2,5000
 80049f4:	e0bffc15 	stw	r2,-16(fp)
 80049f8:	e03ffb45 	stb	zero,-19(fp)
 80049fc:	e03ffd05 	stb	zero,-12(fp)
 8004a00:	e0fffe03 	ldbu	r3,-8(fp)
 8004a04:	e0bfff03 	ldbu	r2,-4(fp)
 8004a08:	1884b03a 	or	r2,r3,r2
 8004a0c:	10803fcc 	andi	r2,r2,255
 8004a10:	100b883a 	mov	r5,r2
 8004a14:	01003c04 	movi	r4,240
 8004a18:	8003fbc0 	call	8003fbc <MAXreg_wr>
 8004a1c:	00bfffc4 	movi	r2,-1
 8004a20:	e0bffb05 	stb	r2,-20(fp)
 8004a24:	00000d06 	br	8004a5c <XferDispatchPkt+0xb0>
 8004a28:	01003204 	movi	r4,200
 8004a2c:	80041a80 	call	80041a8 <MAXreg_rd>
 8004a30:	e0bffd45 	stb	r2,-11(fp)
 8004a34:	e0bffd43 	ldbu	r2,-11(fp)
 8004a38:	10803fcc 	andi	r2,r2,255
 8004a3c:	1080201c 	xori	r2,r2,128
 8004a40:	10bfe004 	addi	r2,r2,-128
 8004a44:	1000050e 	bge	r2,zero,8004a5c <XferDispatchPkt+0xb0>
 8004a48:	01402004 	movi	r5,128
 8004a4c:	01003204 	movi	r4,200
 8004a50:	8003fbc0 	call	8003fbc <MAXreg_wr>
 8004a54:	e03ffb05 	stb	zero,-20(fp)
 8004a58:	00000c06 	br	8004a8c <XferDispatchPkt+0xe0>
 8004a5c:	d0ac0d17 	ldw	r2,-20428(gp)
 8004a60:	0140fa04 	movi	r5,1000
 8004a64:	1009883a 	mov	r4,r2
 8004a68:	80057940 	call	8005794 <__mulsi3>
 8004a6c:	1007883a 	mov	r3,r2
 8004a70:	d0ac0c17 	ldw	r2,-20432(gp)
 8004a74:	100b883a 	mov	r5,r2
 8004a78:	1809883a 	mov	r4,r3
 8004a7c:	80056d80 	call	80056d8 <__udivsi3>
 8004a80:	1007883a 	mov	r3,r2
 8004a84:	e0bffc17 	ldw	r2,-16(fp)
 8004a88:	18bfe736 	bltu	r3,r2,8004a28 <__alt_data_end+0xfc004a28>
 8004a8c:	e0bffb03 	ldbu	r2,-20(fp)
 8004a90:	10000226 	beq	r2,zero,8004a9c <XferDispatchPkt+0xf0>
 8004a94:	e0bffb03 	ldbu	r2,-20(fp)
 8004a98:	00001706 	br	8004af8 <XferDispatchPkt+0x14c>
 8004a9c:	01003e04 	movi	r4,248
 8004aa0:	80041a80 	call	80041a8 <MAXreg_rd>
 8004aa4:	108003cc 	andi	r2,r2,15
 8004aa8:	e0bffb05 	stb	r2,-20(fp)
 8004aac:	e0bffb03 	ldbu	r2,-20(fp)
 8004ab0:	10800118 	cmpnei	r2,r2,4
 8004ab4:	10000a26 	beq	r2,zero,8004ae0 <XferDispatchPkt+0x134>
 8004ab8:	e0bffb03 	ldbu	r2,-20(fp)
 8004abc:	10800398 	cmpnei	r2,r2,14
 8004ac0:	1000091e 	bne	r2,zero,8004ae8 <XferDispatchPkt+0x13c>
 8004ac4:	e0bffb43 	ldbu	r2,-19(fp)
 8004ac8:	10800044 	addi	r2,r2,1
 8004acc:	e0bffb45 	stb	r2,-19(fp)
 8004ad0:	e0bffb47 	ldb	r2,-19(fp)
 8004ad4:	108000d8 	cmpnei	r2,r2,3
 8004ad8:	10000526 	beq	r2,zero,8004af0 <XferDispatchPkt+0x144>
 8004adc:	003fc806 	br	8004a00 <__alt_data_end+0xfc004a00>
 8004ae0:	0001883a 	nop
 8004ae4:	00000306 	br	8004af4 <XferDispatchPkt+0x148>
 8004ae8:	0001883a 	nop
 8004aec:	00000106 	br	8004af4 <XferDispatchPkt+0x148>
 8004af0:	0001883a 	nop
 8004af4:	e0bffb03 	ldbu	r2,-20(fp)
 8004af8:	e037883a 	mov	sp,fp
 8004afc:	dfc00117 	ldw	ra,4(sp)
 8004b00:	df000017 	ldw	fp,0(sp)
 8004b04:	dec00204 	addi	sp,sp,8
 8004b08:	f800283a 	ret

08004b0c <XferInTransfer>:
 8004b0c:	defff804 	addi	sp,sp,-32
 8004b10:	dfc00715 	stw	ra,28(sp)
 8004b14:	df000615 	stw	fp,24(sp)
 8004b18:	df000604 	addi	fp,sp,24
 8004b1c:	2011883a 	mov	r8,r4
 8004b20:	2809883a 	mov	r4,r5
 8004b24:	3007883a 	mov	r3,r6
 8004b28:	e1fffe15 	stw	r7,-8(fp)
 8004b2c:	e0800217 	ldw	r2,8(fp)
 8004b30:	e23ffb05 	stb	r8,-20(fp)
 8004b34:	e13ffc05 	stb	r4,-16(fp)
 8004b38:	e0fffd0d 	sth	r3,-12(fp)
 8004b3c:	e0bfff05 	stb	r2,-4(fp)
 8004b40:	e03ffa0d 	sth	zero,-24(fp)
 8004b44:	e0fffb03 	ldbu	r3,-20(fp)
 8004b48:	008200b4 	movhi	r2,2050
 8004b4c:	10a01b04 	addi	r2,r2,-32660
 8004b50:	180690fa 	slli	r3,r3,3
 8004b54:	10c5883a 	add	r2,r2,r3
 8004b58:	10c00017 	ldw	r3,0(r2)
 8004b5c:	e0bffc03 	ldbu	r2,-16(fp)
 8004b60:	100490fa 	slli	r2,r2,3
 8004b64:	1885883a 	add	r2,r3,r2
 8004b68:	10800183 	ldbu	r2,6(r2)
 8004b6c:	10803fcc 	andi	r2,r2,255
 8004b70:	100b883a 	mov	r5,r2
 8004b74:	01003a04 	movi	r4,232
 8004b78:	8003fbc0 	call	8003fbc <MAXreg_wr>
 8004b7c:	e0bffc03 	ldbu	r2,-16(fp)
 8004b80:	100b883a 	mov	r5,r2
 8004b84:	0009883a 	mov	r4,zero
 8004b88:	80049ac0 	call	80049ac <XferDispatchPkt>
 8004b8c:	e0bffa85 	stb	r2,-22(fp)
 8004b90:	e0bffa83 	ldbu	r2,-22(fp)
 8004b94:	10000226 	beq	r2,zero,8004ba0 <XferInTransfer+0x94>
 8004b98:	e0bffa83 	ldbu	r2,-22(fp)
 8004b9c:	00003a06 	br	8004c88 <XferInTransfer+0x17c>
 8004ba0:	01003204 	movi	r4,200
 8004ba4:	80041a80 	call	80041a8 <MAXreg_rd>
 8004ba8:	10803fcc 	andi	r2,r2,255
 8004bac:	1080010c 	andi	r2,r2,4
 8004bb0:	1000021e 	bne	r2,zero,8004bbc <XferInTransfer+0xb0>
 8004bb4:	00bffc04 	movi	r2,-16
 8004bb8:	00003306 	br	8004c88 <XferInTransfer+0x17c>
 8004bbc:	01000c04 	movi	r4,48
 8004bc0:	80041a80 	call	80041a8 <MAXreg_rd>
 8004bc4:	e0bffac5 	stb	r2,-21(fp)
 8004bc8:	e0bffac3 	ldbu	r2,-21(fp)
 8004bcc:	e1bffe17 	ldw	r6,-8(fp)
 8004bd0:	100b883a 	mov	r5,r2
 8004bd4:	01000204 	movi	r4,8
 8004bd8:	80042300 	call	8004230 <MAXbytes_rd>
 8004bdc:	e0bffe15 	stw	r2,-8(fp)
 8004be0:	01400104 	movi	r5,4
 8004be4:	01003204 	movi	r4,200
 8004be8:	8003fbc0 	call	8003fbc <MAXreg_wr>
 8004bec:	e0fffac3 	ldbu	r3,-21(fp)
 8004bf0:	e0bffa0b 	ldhu	r2,-24(fp)
 8004bf4:	1885883a 	add	r2,r3,r2
 8004bf8:	e0bffa0d 	sth	r2,-24(fp)
 8004bfc:	e0fffac3 	ldbu	r3,-21(fp)
 8004c00:	e0bfff03 	ldbu	r2,-4(fp)
 8004c04:	18800336 	bltu	r3,r2,8004c14 <XferInTransfer+0x108>
 8004c08:	e0fffa0b 	ldhu	r3,-24(fp)
 8004c0c:	e0bffd0b 	ldhu	r2,-12(fp)
 8004c10:	18bfda36 	bltu	r3,r2,8004b7c <__alt_data_end+0xfc004b7c>
 8004c14:	01003e04 	movi	r4,248
 8004c18:	80041a80 	call	80041a8 <MAXreg_rd>
 8004c1c:	10803fcc 	andi	r2,r2,255
 8004c20:	1080040c 	andi	r2,r2,16
 8004c24:	10000c26 	beq	r2,zero,8004c58 <XferInTransfer+0x14c>
 8004c28:	e0fffb03 	ldbu	r3,-20(fp)
 8004c2c:	008200b4 	movhi	r2,2050
 8004c30:	10a01b04 	addi	r2,r2,-32660
 8004c34:	180690fa 	slli	r3,r3,3
 8004c38:	10c5883a 	add	r2,r2,r3
 8004c3c:	10c00017 	ldw	r3,0(r2)
 8004c40:	e0bffc03 	ldbu	r2,-16(fp)
 8004c44:	100490fa 	slli	r2,r2,3
 8004c48:	1885883a 	add	r2,r3,r2
 8004c4c:	00c00804 	movi	r3,32
 8004c50:	10c00185 	stb	r3,6(r2)
 8004c54:	00000b06 	br	8004c84 <XferInTransfer+0x178>
 8004c58:	e0fffb03 	ldbu	r3,-20(fp)
 8004c5c:	008200b4 	movhi	r2,2050
 8004c60:	10a01b04 	addi	r2,r2,-32660
 8004c64:	180690fa 	slli	r3,r3,3
 8004c68:	10c5883a 	add	r2,r2,r3
 8004c6c:	10c00017 	ldw	r3,0(r2)
 8004c70:	e0bffc03 	ldbu	r2,-16(fp)
 8004c74:	100490fa 	slli	r2,r2,3
 8004c78:	1885883a 	add	r2,r3,r2
 8004c7c:	00c00404 	movi	r3,16
 8004c80:	10c00185 	stb	r3,6(r2)
 8004c84:	0005883a 	mov	r2,zero
 8004c88:	e037883a 	mov	sp,fp
 8004c8c:	dfc00117 	ldw	ra,4(sp)
 8004c90:	df000017 	ldw	fp,0(sp)
 8004c94:	dec00204 	addi	sp,sp,8
 8004c98:	f800283a 	ret

08004c9c <USB_init>:
 8004c9c:	defffe04 	addi	sp,sp,-8
 8004ca0:	df000115 	stw	fp,4(sp)
 8004ca4:	df000104 	addi	fp,sp,4
 8004ca8:	e03fff05 	stb	zero,-4(fp)
 8004cac:	00001006 	br	8004cf0 <USB_init+0x54>
 8004cb0:	e0ffff03 	ldbu	r3,-4(fp)
 8004cb4:	008200b4 	movhi	r2,2050
 8004cb8:	10a01b04 	addi	r2,r2,-32660
 8004cbc:	180690fa 	slli	r3,r3,3
 8004cc0:	10c5883a 	add	r2,r2,r3
 8004cc4:	10000015 	stw	zero,0(r2)
 8004cc8:	e0ffff03 	ldbu	r3,-4(fp)
 8004ccc:	008200b4 	movhi	r2,2050
 8004cd0:	10a01b04 	addi	r2,r2,-32660
 8004cd4:	180690fa 	slli	r3,r3,3
 8004cd8:	10c5883a 	add	r2,r2,r3
 8004cdc:	10800104 	addi	r2,r2,4
 8004ce0:	10000005 	stb	zero,0(r2)
 8004ce4:	e0bfff03 	ldbu	r2,-4(fp)
 8004ce8:	10800044 	addi	r2,r2,1
 8004cec:	e0bfff05 	stb	r2,-4(fp)
 8004cf0:	e0bfff03 	ldbu	r2,-4(fp)
 8004cf4:	10800270 	cmpltui	r2,r2,9
 8004cf8:	103fed1e 	bne	r2,zero,8004cb0 <__alt_data_end+0xfc004cb0>
 8004cfc:	008200b4 	movhi	r2,2050
 8004d00:	10a01b04 	addi	r2,r2,-32660
 8004d04:	d0ec0304 	addi	r3,gp,-20468
 8004d08:	10c00015 	stw	r3,0(r2)
 8004d0c:	d02c038d 	sth	zero,-20466(gp)
 8004d10:	00801004 	movi	r2,64
 8004d14:	d0ac0445 	stb	r2,-20463(gp)
 8004d18:	00800404 	movi	r2,16
 8004d1c:	d0ac0485 	stb	r2,-20462(gp)
 8004d20:	0001883a 	nop
 8004d24:	e037883a 	mov	sp,fp
 8004d28:	df000017 	ldw	fp,0(sp)
 8004d2c:	dec00104 	addi	sp,sp,4
 8004d30:	f800283a 	ret

08004d34 <USB_Task>:
 8004d34:	deffb204 	addi	sp,sp,-312
 8004d38:	dfc04d15 	stw	ra,308(sp)
 8004d3c:	df004c15 	stw	fp,304(sp)
 8004d40:	dc004b15 	stw	r16,300(sp)
 8004d44:	df004c04 	addi	fp,sp,304
 8004d48:	d0a00603 	ldbu	r2,-32744(gp)
 8004d4c:	10803fcc 	andi	r2,r2,255
 8004d50:	10803c0c 	andi	r2,r2,240
 8004d54:	10c00820 	cmpeqi	r3,r2,32
 8004d58:	1801121e 	bne	r3,zero,80051a4 <USB_Task+0x470>
 8004d5c:	10c00848 	cmpgei	r3,r2,33
 8004d60:	1800041e 	bne	r3,zero,8004d74 <USB_Task+0x40>
 8004d64:	10000a26 	beq	r2,zero,8004d90 <USB_Task+0x5c>
 8004d68:	10800420 	cmpeqi	r2,r2,16
 8004d6c:	10001b1e 	bne	r2,zero,8004ddc <USB_Task+0xa8>
 8004d70:	00017a06 	br	800535c <USB_Task+0x628>
 8004d74:	10c01020 	cmpeqi	r3,r2,64
 8004d78:	18016f1e 	bne	r3,zero,8005338 <USB_Task+0x604>
 8004d7c:	10c03fe0 	cmpeqi	r3,r2,255
 8004d80:	18016f1e 	bne	r3,zero,8005340 <USB_Task+0x60c>
 8004d84:	10800c20 	cmpeqi	r2,r2,48
 8004d88:	1001441e 	bne	r2,zero,800529c <USB_Task+0x568>
 8004d8c:	00017306 	br	800535c <USB_Task+0x628>
 8004d90:	d0a00603 	ldbu	r2,-32744(gp)
 8004d94:	10803fcc 	andi	r2,r2,255
 8004d98:	10c000e0 	cmpeqi	r3,r2,3
 8004d9c:	1800091e 	bne	r3,zero,8004dc4 <USB_Task+0x90>
 8004da0:	10c00120 	cmpeqi	r3,r2,4
 8004da4:	18000b1e 	bne	r3,zero,8004dd4 <USB_Task+0xa0>
 8004da8:	10800060 	cmpeqi	r2,r2,1
 8004dac:	1000011e 	bne	r2,zero,8004db4 <USB_Task+0x80>
 8004db0:	00016a06 	br	800535c <USB_Task+0x628>
 8004db4:	8004c9c0 	call	8004c9c <USB_init>
 8004db8:	008000c4 	movi	r2,3
 8004dbc:	d0a00605 	stb	r2,-32744(gp)
 8004dc0:	00000506 	br	8004dd8 <USB_Task+0xa4>
 8004dc4:	01400104 	movi	r5,4
 8004dc8:	01003a04 	movi	r4,232
 8004dcc:	8003fbc0 	call	8003fbc <MAXreg_wr>
 8004dd0:	00000106 	br	8004dd8 <USB_Task+0xa4>
 8004dd4:	0001883a 	nop
 8004dd8:	00016006 	br	800535c <USB_Task+0x628>
 8004ddc:	d0a00603 	ldbu	r2,-32744(gp)
 8004de0:	10803fcc 	andi	r2,r2,255
 8004de4:	10bffc04 	addi	r2,r2,-16
 8004de8:	10c001a8 	cmpgeui	r3,r2,6
 8004dec:	1801561e 	bne	r3,zero,8005348 <USB_Task+0x614>
 8004df0:	100690ba 	slli	r3,r2,2
 8004df4:	00820034 	movhi	r2,2048
 8004df8:	10938204 	addi	r2,r2,19976
 8004dfc:	1885883a 	add	r2,r3,r2
 8004e00:	10800017 	ldw	r2,0(r2)
 8004e04:	1000683a 	jmp	r2
 8004e08:	08004e20 	cmpeqi	zero,at,312
 8004e0c:	08004e58 	cmpnei	zero,at,313
 8004e10:	08004e94 	ori	zero,at,314
 8004e14:	08004eb8 	rdprs	zero,at,314
 8004e18:	08004ef8 	rdprs	zero,at,315
 8004e1c:	08004f0c 	andi	zero,at,316
 8004e20:	d0ac0d17 	ldw	r2,-20428(gp)
 8004e24:	01407d04 	movi	r5,500
 8004e28:	1009883a 	mov	r4,r2
 8004e2c:	80057940 	call	8005794 <__mulsi3>
 8004e30:	1007883a 	mov	r3,r2
 8004e34:	d0ac0c17 	ldw	r2,-20432(gp)
 8004e38:	100b883a 	mov	r5,r2
 8004e3c:	1809883a 	mov	r4,r3
 8004e40:	80056d80 	call	80056d8 <__udivsi3>
 8004e44:	10803204 	addi	r2,r2,200
 8004e48:	d0ac0615 	stw	r2,-20456(gp)
 8004e4c:	00800444 	movi	r2,17
 8004e50:	d0a00605 	stb	r2,-32744(gp)
 8004e54:	0000d206 	br	80051a0 <USB_Task+0x46c>
 8004e58:	d0ac0d17 	ldw	r2,-20428(gp)
 8004e5c:	0140fa04 	movi	r5,1000
 8004e60:	1009883a 	mov	r4,r2
 8004e64:	80057940 	call	8005794 <__mulsi3>
 8004e68:	1007883a 	mov	r3,r2
 8004e6c:	d0ac0c17 	ldw	r2,-20432(gp)
 8004e70:	100b883a 	mov	r5,r2
 8004e74:	1809883a 	mov	r4,r3
 8004e78:	80056d80 	call	80056d8 <__udivsi3>
 8004e7c:	1007883a 	mov	r3,r2
 8004e80:	d0ac0617 	ldw	r2,-20456(gp)
 8004e84:	10c0c32e 	bgeu	r2,r3,8005194 <USB_Task+0x460>
 8004e88:	00800484 	movi	r2,18
 8004e8c:	d0a00605 	stb	r2,-32744(gp)
 8004e90:	0000c006 	br	8005194 <USB_Task+0x460>
 8004e94:	01400044 	movi	r5,1
 8004e98:	01003204 	movi	r4,200
 8004e9c:	8003fbc0 	call	8003fbc <MAXreg_wr>
 8004ea0:	01400044 	movi	r5,1
 8004ea4:	01003a04 	movi	r4,232
 8004ea8:	8003fbc0 	call	8003fbc <MAXreg_wr>
 8004eac:	008004c4 	movi	r2,19
 8004eb0:	d0a00605 	stb	r2,-32744(gp)
 8004eb4:	0000ba06 	br	80051a0 <USB_Task+0x46c>
 8004eb8:	01003a04 	movi	r4,232
 8004ebc:	80041a80 	call	80041a8 <MAXreg_rd>
 8004ec0:	10803fcc 	andi	r2,r2,255
 8004ec4:	1080004c 	andi	r2,r2,1
 8004ec8:	1000b41e 	bne	r2,zero,800519c <USB_Task+0x468>
 8004ecc:	01003604 	movi	r4,216
 8004ed0:	80041a80 	call	80041a8 <MAXreg_rd>
 8004ed4:	10800214 	ori	r2,r2,8
 8004ed8:	e0bfb945 	stb	r2,-283(fp)
 8004edc:	e0bfb943 	ldbu	r2,-283(fp)
 8004ee0:	100b883a 	mov	r5,r2
 8004ee4:	01003604 	movi	r4,216
 8004ee8:	8003fbc0 	call	8003fbc <MAXreg_wr>
 8004eec:	00800504 	movi	r2,20
 8004ef0:	d0a00605 	stb	r2,-32744(gp)
 8004ef4:	0000a906 	br	800519c <USB_Task+0x468>
 8004ef8:	01003204 	movi	r4,200
 8004efc:	80041a80 	call	80041a8 <MAXreg_rd>
 8004f00:	00800544 	movi	r2,21
 8004f04:	d0a00605 	stb	r2,-32744(gp)
 8004f08:	0000a506 	br	80051a0 <USB_Task+0x46c>
 8004f0c:	008200b4 	movhi	r2,2050
 8004f10:	10a01b04 	addi	r2,r2,-32660
 8004f14:	10800017 	ldw	r2,0(r2)
 8004f18:	00c00204 	movi	r3,8
 8004f1c:	10c0008d 	sth	r3,2(r2)
 8004f20:	e0bfba04 	addi	r2,fp,-280
 8004f24:	d8800415 	stw	r2,16(sp)
 8004f28:	00800204 	movi	r2,8
 8004f2c:	d8800315 	stw	r2,12(sp)
 8004f30:	d8000215 	stw	zero,8(sp)
 8004f34:	00800044 	movi	r2,1
 8004f38:	d8800115 	stw	r2,4(sp)
 8004f3c:	d8000015 	stw	zero,0(sp)
 8004f40:	01c00184 	movi	r7,6
 8004f44:	01802004 	movi	r6,128
 8004f48:	000b883a 	mov	r5,zero
 8004f4c:	0009883a 	mov	r4,zero
 8004f50:	80047040 	call	8004704 <XferCtrlReq>
 8004f54:	e0bfb985 	stb	r2,-282(fp)
 8004f58:	e0bfb983 	ldbu	r2,-282(fp)
 8004f5c:	1000861e 	bne	r2,zero,8005178 <USB_Task+0x444>
 8004f60:	008200b4 	movhi	r2,2050
 8004f64:	10a01b04 	addi	r2,r2,-32660
 8004f68:	10800017 	ldw	r2,0(r2)
 8004f6c:	e0ffbbc3 	ldbu	r3,-273(fp)
 8004f70:	18c03fcc 	andi	r3,r3,255
 8004f74:	10c0008d 	sth	r3,2(r2)
 8004f78:	e0bfba03 	ldbu	r2,-280(fp)
 8004f7c:	10803fcc 	andi	r2,r2,255
 8004f80:	e0ffba04 	addi	r3,fp,-280
 8004f84:	d8c00415 	stw	r3,16(sp)
 8004f88:	d8800315 	stw	r2,12(sp)
 8004f8c:	d8000215 	stw	zero,8(sp)
 8004f90:	00800044 	movi	r2,1
 8004f94:	d8800115 	stw	r2,4(sp)
 8004f98:	d8000015 	stw	zero,0(sp)
 8004f9c:	01c00184 	movi	r7,6
 8004fa0:	01802004 	movi	r6,128
 8004fa4:	000b883a 	mov	r5,zero
 8004fa8:	0009883a 	mov	r4,zero
 8004fac:	80047040 	call	8004704 <XferCtrlReq>
 8004fb0:	e0bfb985 	stb	r2,-282(fp)
 8004fb4:	e0bfbd83 	ldbu	r2,-266(fp)
 8004fb8:	10803fcc 	andi	r2,r2,255
 8004fbc:	10003426 	beq	r2,zero,8005090 <USB_Task+0x35c>
 8004fc0:	e0bfbd83 	ldbu	r2,-266(fp)
 8004fc4:	10803fcc 	andi	r2,r2,255
 8004fc8:	e0ffbe84 	addi	r3,fp,-262
 8004fcc:	d8c00415 	stw	r3,16(sp)
 8004fd0:	00c00084 	movi	r3,2
 8004fd4:	d8c00315 	stw	r3,12(sp)
 8004fd8:	00c10244 	movi	r3,1033
 8004fdc:	d8c00215 	stw	r3,8(sp)
 8004fe0:	00c000c4 	movi	r3,3
 8004fe4:	d8c00115 	stw	r3,4(sp)
 8004fe8:	d8800015 	stw	r2,0(sp)
 8004fec:	01c00184 	movi	r7,6
 8004ff0:	01802004 	movi	r6,128
 8004ff4:	000b883a 	mov	r5,zero
 8004ff8:	0009883a 	mov	r4,zero
 8004ffc:	80047040 	call	8004704 <XferCtrlReq>
 8005000:	e0bfb985 	stb	r2,-282(fp)
 8005004:	e0bfbd83 	ldbu	r2,-266(fp)
 8005008:	10803fcc 	andi	r2,r2,255
 800500c:	e0ffbe83 	ldbu	r3,-262(fp)
 8005010:	18c03fcc 	andi	r3,r3,255
 8005014:	e13fbe84 	addi	r4,fp,-262
 8005018:	d9000415 	stw	r4,16(sp)
 800501c:	d8c00315 	stw	r3,12(sp)
 8005020:	00c10244 	movi	r3,1033
 8005024:	d8c00215 	stw	r3,8(sp)
 8005028:	00c000c4 	movi	r3,3
 800502c:	d8c00115 	stw	r3,4(sp)
 8005030:	d8800015 	stw	r2,0(sp)
 8005034:	01c00184 	movi	r7,6
 8005038:	01802004 	movi	r6,128
 800503c:	000b883a 	mov	r5,zero
 8005040:	0009883a 	mov	r4,zero
 8005044:	80047040 	call	8004704 <XferCtrlReq>
 8005048:	e0bfb985 	stb	r2,-282(fp)
 800504c:	e0bfbd83 	ldbu	r2,-266(fp)
 8005050:	14003fcc 	andi	r16,r2,255
 8005054:	e0bfbe83 	ldbu	r2,-262(fp)
 8005058:	10803fcc 	andi	r2,r2,255
 800505c:	1004d07a 	srli	r2,r2,1
 8005060:	10bfffc4 	addi	r2,r2,-1
 8005064:	10c03fcc 	andi	r3,r2,255
 8005068:	e0bfbe84 	addi	r2,fp,-262
 800506c:	10800084 	addi	r2,r2,2
 8005070:	180b883a 	mov	r5,r3
 8005074:	1009883a 	mov	r4,r2
 8005078:	80054fc0 	call	80054fc <ConvUTF8ToStr>
 800507c:	100d883a 	mov	r6,r2
 8005080:	800b883a 	mov	r5,r16
 8005084:	01020074 	movhi	r4,2049
 8005088:	212f7a04 	addi	r4,r4,-16920
 800508c:	8006d540 	call	8006d54 <printf>
 8005090:	e0bfbdc3 	ldbu	r2,-265(fp)
 8005094:	10803fcc 	andi	r2,r2,255
 8005098:	10003426 	beq	r2,zero,800516c <USB_Task+0x438>
 800509c:	e0bfbdc3 	ldbu	r2,-265(fp)
 80050a0:	10803fcc 	andi	r2,r2,255
 80050a4:	e0ffbe84 	addi	r3,fp,-262
 80050a8:	d8c00415 	stw	r3,16(sp)
 80050ac:	00c00084 	movi	r3,2
 80050b0:	d8c00315 	stw	r3,12(sp)
 80050b4:	00c10244 	movi	r3,1033
 80050b8:	d8c00215 	stw	r3,8(sp)
 80050bc:	00c000c4 	movi	r3,3
 80050c0:	d8c00115 	stw	r3,4(sp)
 80050c4:	d8800015 	stw	r2,0(sp)
 80050c8:	01c00184 	movi	r7,6
 80050cc:	01802004 	movi	r6,128
 80050d0:	000b883a 	mov	r5,zero
 80050d4:	0009883a 	mov	r4,zero
 80050d8:	80047040 	call	8004704 <XferCtrlReq>
 80050dc:	e0bfb985 	stb	r2,-282(fp)
 80050e0:	e0bfbdc3 	ldbu	r2,-265(fp)
 80050e4:	10803fcc 	andi	r2,r2,255
 80050e8:	e0ffbe83 	ldbu	r3,-262(fp)
 80050ec:	18c03fcc 	andi	r3,r3,255
 80050f0:	e13fbe84 	addi	r4,fp,-262
 80050f4:	d9000415 	stw	r4,16(sp)
 80050f8:	d8c00315 	stw	r3,12(sp)
 80050fc:	00c10244 	movi	r3,1033
 8005100:	d8c00215 	stw	r3,8(sp)
 8005104:	00c000c4 	movi	r3,3
 8005108:	d8c00115 	stw	r3,4(sp)
 800510c:	d8800015 	stw	r2,0(sp)
 8005110:	01c00184 	movi	r7,6
 8005114:	01802004 	movi	r6,128
 8005118:	000b883a 	mov	r5,zero
 800511c:	0009883a 	mov	r4,zero
 8005120:	80047040 	call	8004704 <XferCtrlReq>
 8005124:	e0bfb985 	stb	r2,-282(fp)
 8005128:	e0bfbdc3 	ldbu	r2,-265(fp)
 800512c:	14003fcc 	andi	r16,r2,255
 8005130:	e0bfbe83 	ldbu	r2,-262(fp)
 8005134:	10803fcc 	andi	r2,r2,255
 8005138:	1004d07a 	srli	r2,r2,1
 800513c:	10bfffc4 	addi	r2,r2,-1
 8005140:	10c03fcc 	andi	r3,r2,255
 8005144:	e0bfbe84 	addi	r2,fp,-262
 8005148:	10800084 	addi	r2,r2,2
 800514c:	180b883a 	mov	r5,r3
 8005150:	1009883a 	mov	r4,r2
 8005154:	80054fc0 	call	80054fc <ConvUTF8ToStr>
 8005158:	100d883a 	mov	r6,r2
 800515c:	800b883a 	mov	r5,r16
 8005160:	01020074 	movhi	r4,2049
 8005164:	212f8004 	addi	r4,r4,-16896
 8005168:	8006d540 	call	8006d54 <printf>
 800516c:	00800804 	movi	r2,32
 8005170:	d0a00605 	stb	r2,-32744(gp)
 8005174:	00000a06 	br	80051a0 <USB_Task+0x46c>
 8005178:	e0bfb983 	ldbu	r2,-282(fp)
 800517c:	d0ac0745 	stb	r2,-20451(gp)
 8005180:	d0a00603 	ldbu	r2,-32744(gp)
 8005184:	d0ac0505 	stb	r2,-20460(gp)
 8005188:	00bfffc4 	movi	r2,-1
 800518c:	d0a00605 	stb	r2,-32744(gp)
 8005190:	00000306 	br	80051a0 <USB_Task+0x46c>
 8005194:	0001883a 	nop
 8005198:	00006b06 	br	8005348 <USB_Task+0x614>
 800519c:	0001883a 	nop
 80051a0:	00006906 	br	8005348 <USB_Task+0x614>
 80051a4:	00800044 	movi	r2,1
 80051a8:	e0bfb905 	stb	r2,-284(fp)
 80051ac:	00002d06 	br	8005264 <USB_Task+0x530>
 80051b0:	e0ffb903 	ldbu	r3,-284(fp)
 80051b4:	008200b4 	movhi	r2,2050
 80051b8:	10a01b04 	addi	r2,r2,-32660
 80051bc:	180690fa 	slli	r3,r3,3
 80051c0:	10c5883a 	add	r2,r2,r3
 80051c4:	10800017 	ldw	r2,0(r2)
 80051c8:	1000231e 	bne	r2,zero,8005258 <USB_Task+0x524>
 80051cc:	e13fb903 	ldbu	r4,-284(fp)
 80051d0:	008200b4 	movhi	r2,2050
 80051d4:	10a01b04 	addi	r2,r2,-32660
 80051d8:	10c00017 	ldw	r3,0(r2)
 80051dc:	008200b4 	movhi	r2,2050
 80051e0:	10a01b04 	addi	r2,r2,-32660
 80051e4:	200890fa 	slli	r4,r4,3
 80051e8:	1105883a 	add	r2,r2,r4
 80051ec:	10c00015 	stw	r3,0(r2)
 80051f0:	e0bfb903 	ldbu	r2,-284(fp)
 80051f4:	d8000415 	stw	zero,16(sp)
 80051f8:	d8000315 	stw	zero,12(sp)
 80051fc:	d8000215 	stw	zero,8(sp)
 8005200:	d8000115 	stw	zero,4(sp)
 8005204:	d8800015 	stw	r2,0(sp)
 8005208:	01c00144 	movi	r7,5
 800520c:	000d883a 	mov	r6,zero
 8005210:	000b883a 	mov	r5,zero
 8005214:	0009883a 	mov	r4,zero
 8005218:	80047040 	call	8004704 <XferCtrlReq>
 800521c:	e0bfb985 	stb	r2,-282(fp)
 8005220:	e0bfb983 	ldbu	r2,-282(fp)
 8005224:	1000051e 	bne	r2,zero,800523c <USB_Task+0x508>
 8005228:	e0bfb903 	ldbu	r2,-284(fp)
 800522c:	d0ac0705 	stb	r2,-20452(gp)
 8005230:	00800c04 	movi	r2,48
 8005234:	d0a00605 	stb	r2,-32744(gp)
 8005238:	00000d06 	br	8005270 <USB_Task+0x53c>
 800523c:	e0bfb983 	ldbu	r2,-282(fp)
 8005240:	d0ac0745 	stb	r2,-20451(gp)
 8005244:	d0a00603 	ldbu	r2,-32744(gp)
 8005248:	d0ac0505 	stb	r2,-20460(gp)
 800524c:	00bfffc4 	movi	r2,-1
 8005250:	d0a00605 	stb	r2,-32744(gp)
 8005254:	00000606 	br	8005270 <USB_Task+0x53c>
 8005258:	e0bfb903 	ldbu	r2,-284(fp)
 800525c:	10800044 	addi	r2,r2,1
 8005260:	e0bfb905 	stb	r2,-284(fp)
 8005264:	e0bfb903 	ldbu	r2,-284(fp)
 8005268:	10800230 	cmpltui	r2,r2,8
 800526c:	103fd01e 	bne	r2,zero,80051b0 <__alt_data_end+0xfc0051b0>
 8005270:	d0a00603 	ldbu	r2,-32744(gp)
 8005274:	10803fcc 	andi	r2,r2,255
 8005278:	10800818 	cmpnei	r2,r2,32
 800527c:	1000341e 	bne	r2,zero,8005350 <USB_Task+0x61c>
 8005280:	00bfff84 	movi	r2,-2
 8005284:	d0ac0745 	stb	r2,-20451(gp)
 8005288:	d0a00603 	ldbu	r2,-32744(gp)
 800528c:	d0ac0505 	stb	r2,-20460(gp)
 8005290:	00bfffc4 	movi	r2,-1
 8005294:	d0a00605 	stb	r2,-32744(gp)
 8005298:	00002d06 	br	8005350 <USB_Task+0x61c>
 800529c:	e03fb905 	stb	zero,-284(fp)
 80052a0:	00001706 	br	8005300 <USB_Task+0x5cc>
 80052a4:	e0bfb903 	ldbu	r2,-284(fp)
 80052a8:	04020074 	movhi	r16,2049
 80052ac:	8436df04 	addi	r16,r16,-9348
 80052b0:	01400304 	movi	r5,12
 80052b4:	1009883a 	mov	r4,r2
 80052b8:	80057940 	call	8005794 <__mulsi3>
 80052bc:	8085883a 	add	r2,r16,r2
 80052c0:	10800017 	ldw	r2,0(r2)
 80052c4:	d0ec0703 	ldbu	r3,-20452(gp)
 80052c8:	18c03fcc 	andi	r3,r3,255
 80052cc:	000b883a 	mov	r5,zero
 80052d0:	1809883a 	mov	r4,r3
 80052d4:	103ee83a 	callr	r2
 80052d8:	e0bfb985 	stb	r2,-282(fp)
 80052dc:	e0bfb983 	ldbu	r2,-282(fp)
 80052e0:	10800058 	cmpnei	r2,r2,1
 80052e4:	1000031e 	bne	r2,zero,80052f4 <USB_Task+0x5c0>
 80052e8:	00801004 	movi	r2,64
 80052ec:	d0a00605 	stb	r2,-32744(gp)
 80052f0:	00000606 	br	800530c <USB_Task+0x5d8>
 80052f4:	e0bfb903 	ldbu	r2,-284(fp)
 80052f8:	10800044 	addi	r2,r2,1
 80052fc:	e0bfb905 	stb	r2,-284(fp)
 8005300:	e0bfb903 	ldbu	r2,-284(fp)
 8005304:	10800130 	cmpltui	r2,r2,4
 8005308:	103fe61e 	bne	r2,zero,80052a4 <__alt_data_end+0xfc0052a4>
 800530c:	d0a00603 	ldbu	r2,-32744(gp)
 8005310:	10803fcc 	andi	r2,r2,255
 8005314:	10800c18 	cmpnei	r2,r2,48
 8005318:	10000f1e 	bne	r2,zero,8005358 <USB_Task+0x624>
 800531c:	00bfff44 	movi	r2,-3
 8005320:	d0ac0745 	stb	r2,-20451(gp)
 8005324:	d0a00603 	ldbu	r2,-32744(gp)
 8005328:	d0ac0505 	stb	r2,-20460(gp)
 800532c:	00bfffc4 	movi	r2,-1
 8005330:	d0a00605 	stb	r2,-32744(gp)
 8005334:	00000806 	br	8005358 <USB_Task+0x624>
 8005338:	0001883a 	nop
 800533c:	00000706 	br	800535c <USB_Task+0x628>
 8005340:	0001883a 	nop
 8005344:	00000506 	br	800535c <USB_Task+0x628>
 8005348:	0001883a 	nop
 800534c:	00000306 	br	800535c <USB_Task+0x628>
 8005350:	0001883a 	nop
 8005354:	00000106 	br	800535c <USB_Task+0x628>
 8005358:	0001883a 	nop
 800535c:	0001883a 	nop
 8005360:	e6ffff04 	addi	sp,fp,-4
 8005364:	dfc00217 	ldw	ra,8(sp)
 8005368:	df000117 	ldw	fp,4(sp)
 800536c:	dc000017 	ldw	r16,0(sp)
 8005370:	dec00304 	addi	sp,sp,12
 8005374:	f800283a 	ret

08005378 <MSDProbe>:
 8005378:	defffd04 	addi	sp,sp,-12
 800537c:	df000215 	stw	fp,8(sp)
 8005380:	df000204 	addi	fp,sp,8
 8005384:	2005883a 	mov	r2,r4
 8005388:	e17fff15 	stw	r5,-4(fp)
 800538c:	e0bffe05 	stb	r2,-8(fp)
 8005390:	0005883a 	mov	r2,zero
 8005394:	e037883a 	mov	sp,fp
 8005398:	df000017 	ldw	fp,0(sp)
 800539c:	dec00104 	addi	sp,sp,4
 80053a0:	f800283a 	ret

080053a4 <MSDEventHandler>:
 80053a4:	defffb04 	addi	sp,sp,-20
 80053a8:	df000415 	stw	fp,16(sp)
 80053ac:	df000404 	addi	fp,sp,16
 80053b0:	2007883a 	mov	r3,r4
 80053b4:	2805883a 	mov	r2,r5
 80053b8:	e1bffe15 	stw	r6,-8(fp)
 80053bc:	e1ffff15 	stw	r7,-4(fp)
 80053c0:	e0fffc05 	stb	r3,-16(fp)
 80053c4:	e0bffd05 	stb	r2,-12(fp)
 80053c8:	0005883a 	mov	r2,zero
 80053cc:	e037883a 	mov	sp,fp
 80053d0:	df000017 	ldw	fp,0(sp)
 80053d4:	dec00104 	addi	sp,sp,4
 80053d8:	f800283a 	ret

080053dc <CDCProbe>:
 80053dc:	defffd04 	addi	sp,sp,-12
 80053e0:	df000215 	stw	fp,8(sp)
 80053e4:	df000204 	addi	fp,sp,8
 80053e8:	2005883a 	mov	r2,r4
 80053ec:	e17fff15 	stw	r5,-4(fp)
 80053f0:	e0bffe05 	stb	r2,-8(fp)
 80053f4:	0005883a 	mov	r2,zero
 80053f8:	e037883a 	mov	sp,fp
 80053fc:	df000017 	ldw	fp,0(sp)
 8005400:	dec00104 	addi	sp,sp,4
 8005404:	f800283a 	ret

08005408 <CDCEventHandler>:
 8005408:	defffb04 	addi	sp,sp,-20
 800540c:	df000415 	stw	fp,16(sp)
 8005410:	df000404 	addi	fp,sp,16
 8005414:	2007883a 	mov	r3,r4
 8005418:	2805883a 	mov	r2,r5
 800541c:	e1bffe15 	stw	r6,-8(fp)
 8005420:	e1ffff15 	stw	r7,-4(fp)
 8005424:	e0fffc05 	stb	r3,-16(fp)
 8005428:	e0bffd05 	stb	r2,-12(fp)
 800542c:	0005883a 	mov	r2,zero
 8005430:	e037883a 	mov	sp,fp
 8005434:	df000017 	ldw	fp,0(sp)
 8005438:	dec00104 	addi	sp,sp,4
 800543c:	f800283a 	ret

08005440 <DummyProbe>:
 8005440:	defffd04 	addi	sp,sp,-12
 8005444:	df000215 	stw	fp,8(sp)
 8005448:	df000204 	addi	fp,sp,8
 800544c:	2005883a 	mov	r2,r4
 8005450:	e17fff15 	stw	r5,-4(fp)
 8005454:	e0bffe05 	stb	r2,-8(fp)
 8005458:	0005883a 	mov	r2,zero
 800545c:	e037883a 	mov	sp,fp
 8005460:	df000017 	ldw	fp,0(sp)
 8005464:	dec00104 	addi	sp,sp,4
 8005468:	f800283a 	ret

0800546c <DummyEventHandler>:
 800546c:	defffb04 	addi	sp,sp,-20
 8005470:	df000415 	stw	fp,16(sp)
 8005474:	df000404 	addi	fp,sp,16
 8005478:	2007883a 	mov	r3,r4
 800547c:	2805883a 	mov	r2,r5
 8005480:	e1bffe15 	stw	r6,-8(fp)
 8005484:	e1ffff15 	stw	r7,-4(fp)
 8005488:	e0fffc05 	stb	r3,-16(fp)
 800548c:	e0bffd05 	stb	r2,-12(fp)
 8005490:	0005883a 	mov	r2,zero
 8005494:	e037883a 	mov	sp,fp
 8005498:	df000017 	ldw	fp,0(sp)
 800549c:	dec00104 	addi	sp,sp,4
 80054a0:	f800283a 	ret

080054a4 <GetUsbTaskState>:
 80054a4:	deffff04 	addi	sp,sp,-4
 80054a8:	df000015 	stw	fp,0(sp)
 80054ac:	d839883a 	mov	fp,sp
 80054b0:	d0a00603 	ldbu	r2,-32744(gp)
 80054b4:	e037883a 	mov	sp,fp
 80054b8:	df000017 	ldw	fp,0(sp)
 80054bc:	dec00104 	addi	sp,sp,4
 80054c0:	f800283a 	ret

080054c4 <GetDevtable>:
 80054c4:	defffe04 	addi	sp,sp,-8
 80054c8:	df000115 	stw	fp,4(sp)
 80054cc:	df000104 	addi	fp,sp,4
 80054d0:	2005883a 	mov	r2,r4
 80054d4:	e0bfff05 	stb	r2,-4(fp)
 80054d8:	e0bfff03 	ldbu	r2,-4(fp)
 80054dc:	100690fa 	slli	r3,r2,3
 80054e0:	008200b4 	movhi	r2,2050
 80054e4:	10a01b04 	addi	r2,r2,-32660
 80054e8:	1885883a 	add	r2,r3,r2
 80054ec:	e037883a 	mov	sp,fp
 80054f0:	df000017 	ldw	fp,0(sp)
 80054f4:	dec00104 	addi	sp,sp,4
 80054f8:	f800283a 	ret

080054fc <ConvUTF8ToStr>:
 80054fc:	defffc04 	addi	sp,sp,-16
 8005500:	df000315 	stw	fp,12(sp)
 8005504:	df000304 	addi	fp,sp,12
 8005508:	e13ffe15 	stw	r4,-8(fp)
 800550c:	2805883a 	mov	r2,r5
 8005510:	e0bfff05 	stb	r2,-4(fp)
 8005514:	e03ffd05 	stb	zero,-12(fp)
 8005518:	00000d06 	br	8005550 <ConvUTF8ToStr+0x54>
 800551c:	e0bffd03 	ldbu	r2,-12(fp)
 8005520:	e0fffe17 	ldw	r3,-8(fp)
 8005524:	1887883a 	add	r3,r3,r2
 8005528:	e0bffd03 	ldbu	r2,-12(fp)
 800552c:	1085883a 	add	r2,r2,r2
 8005530:	1009883a 	mov	r4,r2
 8005534:	e0bffe17 	ldw	r2,-8(fp)
 8005538:	1105883a 	add	r2,r2,r4
 800553c:	10800003 	ldbu	r2,0(r2)
 8005540:	18800005 	stb	r2,0(r3)
 8005544:	e0bffd03 	ldbu	r2,-12(fp)
 8005548:	10800044 	addi	r2,r2,1
 800554c:	e0bffd05 	stb	r2,-12(fp)
 8005550:	e0fffd03 	ldbu	r3,-12(fp)
 8005554:	e0bfff03 	ldbu	r2,-4(fp)
 8005558:	18bff036 	bltu	r3,r2,800551c <__alt_data_end+0xfc00551c>
 800555c:	e0bfff03 	ldbu	r2,-4(fp)
 8005560:	e0fffe17 	ldw	r3,-8(fp)
 8005564:	1885883a 	add	r2,r3,r2
 8005568:	10000005 	stb	zero,0(r2)
 800556c:	e0bffe17 	ldw	r2,-8(fp)
 8005570:	e037883a 	mov	sp,fp
 8005574:	df000017 	ldw	fp,0(sp)
 8005578:	dec00104 	addi	sp,sp,4
 800557c:	f800283a 	ret

08005580 <__fixunssfsi>:
 8005580:	defffd04 	addi	sp,sp,-12
 8005584:	dc000015 	stw	r16,0(sp)
 8005588:	0413c034 	movhi	r16,20224
 800558c:	800b883a 	mov	r5,r16
 8005590:	dc400115 	stw	r17,4(sp)
 8005594:	dfc00215 	stw	ra,8(sp)
 8005598:	2023883a 	mov	r17,r4
 800559c:	80057bc0 	call	80057bc <__gesf2>
 80055a0:	1000070e 	bge	r2,zero,80055c0 <__fixunssfsi+0x40>
 80055a4:	8809883a 	mov	r4,r17
 80055a8:	800618c0 	call	800618c <__fixsfsi>
 80055ac:	dfc00217 	ldw	ra,8(sp)
 80055b0:	dc400117 	ldw	r17,4(sp)
 80055b4:	dc000017 	ldw	r16,0(sp)
 80055b8:	dec00304 	addi	sp,sp,12
 80055bc:	f800283a 	ret
 80055c0:	800b883a 	mov	r5,r16
 80055c4:	8809883a 	mov	r4,r17
 80055c8:	8005ca80 	call	8005ca8 <__subsf3>
 80055cc:	1009883a 	mov	r4,r2
 80055d0:	800618c0 	call	800618c <__fixsfsi>
 80055d4:	00e00034 	movhi	r3,32768
 80055d8:	10c5883a 	add	r2,r2,r3
 80055dc:	003ff306 	br	80055ac <__alt_data_end+0xfc0055ac>

080055e0 <__divsi3>:
 80055e0:	20001b16 	blt	r4,zero,8005650 <__divsi3+0x70>
 80055e4:	000f883a 	mov	r7,zero
 80055e8:	28001616 	blt	r5,zero,8005644 <__divsi3+0x64>
 80055ec:	200d883a 	mov	r6,r4
 80055f0:	29001a2e 	bgeu	r5,r4,800565c <__divsi3+0x7c>
 80055f4:	00800804 	movi	r2,32
 80055f8:	00c00044 	movi	r3,1
 80055fc:	00000106 	br	8005604 <__divsi3+0x24>
 8005600:	10000d26 	beq	r2,zero,8005638 <__divsi3+0x58>
 8005604:	294b883a 	add	r5,r5,r5
 8005608:	10bfffc4 	addi	r2,r2,-1
 800560c:	18c7883a 	add	r3,r3,r3
 8005610:	293ffb36 	bltu	r5,r4,8005600 <__alt_data_end+0xfc005600>
 8005614:	0005883a 	mov	r2,zero
 8005618:	18000726 	beq	r3,zero,8005638 <__divsi3+0x58>
 800561c:	0005883a 	mov	r2,zero
 8005620:	31400236 	bltu	r6,r5,800562c <__divsi3+0x4c>
 8005624:	314dc83a 	sub	r6,r6,r5
 8005628:	10c4b03a 	or	r2,r2,r3
 800562c:	1806d07a 	srli	r3,r3,1
 8005630:	280ad07a 	srli	r5,r5,1
 8005634:	183ffa1e 	bne	r3,zero,8005620 <__alt_data_end+0xfc005620>
 8005638:	38000126 	beq	r7,zero,8005640 <__divsi3+0x60>
 800563c:	0085c83a 	sub	r2,zero,r2
 8005640:	f800283a 	ret
 8005644:	014bc83a 	sub	r5,zero,r5
 8005648:	39c0005c 	xori	r7,r7,1
 800564c:	003fe706 	br	80055ec <__alt_data_end+0xfc0055ec>
 8005650:	0109c83a 	sub	r4,zero,r4
 8005654:	01c00044 	movi	r7,1
 8005658:	003fe306 	br	80055e8 <__alt_data_end+0xfc0055e8>
 800565c:	00c00044 	movi	r3,1
 8005660:	003fee06 	br	800561c <__alt_data_end+0xfc00561c>

08005664 <__modsi3>:
 8005664:	20001716 	blt	r4,zero,80056c4 <__modsi3+0x60>
 8005668:	000f883a 	mov	r7,zero
 800566c:	2005883a 	mov	r2,r4
 8005670:	28001216 	blt	r5,zero,80056bc <__modsi3+0x58>
 8005674:	2900162e 	bgeu	r5,r4,80056d0 <__modsi3+0x6c>
 8005678:	01800804 	movi	r6,32
 800567c:	00c00044 	movi	r3,1
 8005680:	00000106 	br	8005688 <__modsi3+0x24>
 8005684:	30000a26 	beq	r6,zero,80056b0 <__modsi3+0x4c>
 8005688:	294b883a 	add	r5,r5,r5
 800568c:	31bfffc4 	addi	r6,r6,-1
 8005690:	18c7883a 	add	r3,r3,r3
 8005694:	293ffb36 	bltu	r5,r4,8005684 <__alt_data_end+0xfc005684>
 8005698:	18000526 	beq	r3,zero,80056b0 <__modsi3+0x4c>
 800569c:	1806d07a 	srli	r3,r3,1
 80056a0:	11400136 	bltu	r2,r5,80056a8 <__modsi3+0x44>
 80056a4:	1145c83a 	sub	r2,r2,r5
 80056a8:	280ad07a 	srli	r5,r5,1
 80056ac:	183ffb1e 	bne	r3,zero,800569c <__alt_data_end+0xfc00569c>
 80056b0:	38000126 	beq	r7,zero,80056b8 <__modsi3+0x54>
 80056b4:	0085c83a 	sub	r2,zero,r2
 80056b8:	f800283a 	ret
 80056bc:	014bc83a 	sub	r5,zero,r5
 80056c0:	003fec06 	br	8005674 <__alt_data_end+0xfc005674>
 80056c4:	0109c83a 	sub	r4,zero,r4
 80056c8:	01c00044 	movi	r7,1
 80056cc:	003fe706 	br	800566c <__alt_data_end+0xfc00566c>
 80056d0:	00c00044 	movi	r3,1
 80056d4:	003ff106 	br	800569c <__alt_data_end+0xfc00569c>

080056d8 <__udivsi3>:
 80056d8:	200d883a 	mov	r6,r4
 80056dc:	2900152e 	bgeu	r5,r4,8005734 <__udivsi3+0x5c>
 80056e0:	28001416 	blt	r5,zero,8005734 <__udivsi3+0x5c>
 80056e4:	00800804 	movi	r2,32
 80056e8:	00c00044 	movi	r3,1
 80056ec:	00000206 	br	80056f8 <__udivsi3+0x20>
 80056f0:	10000e26 	beq	r2,zero,800572c <__udivsi3+0x54>
 80056f4:	28000516 	blt	r5,zero,800570c <__udivsi3+0x34>
 80056f8:	294b883a 	add	r5,r5,r5
 80056fc:	10bfffc4 	addi	r2,r2,-1
 8005700:	18c7883a 	add	r3,r3,r3
 8005704:	293ffa36 	bltu	r5,r4,80056f0 <__alt_data_end+0xfc0056f0>
 8005708:	18000826 	beq	r3,zero,800572c <__udivsi3+0x54>
 800570c:	0005883a 	mov	r2,zero
 8005710:	31400236 	bltu	r6,r5,800571c <__udivsi3+0x44>
 8005714:	314dc83a 	sub	r6,r6,r5
 8005718:	10c4b03a 	or	r2,r2,r3
 800571c:	1806d07a 	srli	r3,r3,1
 8005720:	280ad07a 	srli	r5,r5,1
 8005724:	183ffa1e 	bne	r3,zero,8005710 <__alt_data_end+0xfc005710>
 8005728:	f800283a 	ret
 800572c:	0005883a 	mov	r2,zero
 8005730:	f800283a 	ret
 8005734:	00c00044 	movi	r3,1
 8005738:	003ff406 	br	800570c <__alt_data_end+0xfc00570c>

0800573c <__umodsi3>:
 800573c:	2005883a 	mov	r2,r4
 8005740:	2900122e 	bgeu	r5,r4,800578c <__umodsi3+0x50>
 8005744:	28001116 	blt	r5,zero,800578c <__umodsi3+0x50>
 8005748:	01800804 	movi	r6,32
 800574c:	00c00044 	movi	r3,1
 8005750:	00000206 	br	800575c <__umodsi3+0x20>
 8005754:	30000c26 	beq	r6,zero,8005788 <__umodsi3+0x4c>
 8005758:	28000516 	blt	r5,zero,8005770 <__umodsi3+0x34>
 800575c:	294b883a 	add	r5,r5,r5
 8005760:	31bfffc4 	addi	r6,r6,-1
 8005764:	18c7883a 	add	r3,r3,r3
 8005768:	293ffa36 	bltu	r5,r4,8005754 <__alt_data_end+0xfc005754>
 800576c:	18000626 	beq	r3,zero,8005788 <__umodsi3+0x4c>
 8005770:	1806d07a 	srli	r3,r3,1
 8005774:	11400136 	bltu	r2,r5,800577c <__umodsi3+0x40>
 8005778:	1145c83a 	sub	r2,r2,r5
 800577c:	280ad07a 	srli	r5,r5,1
 8005780:	183ffb1e 	bne	r3,zero,8005770 <__alt_data_end+0xfc005770>
 8005784:	f800283a 	ret
 8005788:	f800283a 	ret
 800578c:	00c00044 	movi	r3,1
 8005790:	003ff706 	br	8005770 <__alt_data_end+0xfc005770>

08005794 <__mulsi3>:
 8005794:	0005883a 	mov	r2,zero
 8005798:	20000726 	beq	r4,zero,80057b8 <__mulsi3+0x24>
 800579c:	20c0004c 	andi	r3,r4,1
 80057a0:	2008d07a 	srli	r4,r4,1
 80057a4:	18000126 	beq	r3,zero,80057ac <__mulsi3+0x18>
 80057a8:	1145883a 	add	r2,r2,r5
 80057ac:	294b883a 	add	r5,r5,r5
 80057b0:	203ffa1e 	bne	r4,zero,800579c <__alt_data_end+0xfc00579c>
 80057b4:	f800283a 	ret
 80057b8:	f800283a 	ret

080057bc <__gesf2>:
 80057bc:	2004d5fa 	srli	r2,r4,23
 80057c0:	2806d5fa 	srli	r3,r5,23
 80057c4:	01802034 	movhi	r6,128
 80057c8:	31bfffc4 	addi	r6,r6,-1
 80057cc:	10803fcc 	andi	r2,r2,255
 80057d0:	01c03fc4 	movi	r7,255
 80057d4:	3110703a 	and	r8,r6,r4
 80057d8:	18c03fcc 	andi	r3,r3,255
 80057dc:	314c703a 	and	r6,r6,r5
 80057e0:	2008d7fa 	srli	r4,r4,31
 80057e4:	280ad7fa 	srli	r5,r5,31
 80057e8:	11c01926 	beq	r2,r7,8005850 <__gesf2+0x94>
 80057ec:	01c03fc4 	movi	r7,255
 80057f0:	19c00f26 	beq	r3,r7,8005830 <__gesf2+0x74>
 80057f4:	1000061e 	bne	r2,zero,8005810 <__gesf2+0x54>
 80057f8:	400f003a 	cmpeq	r7,r8,zero
 80057fc:	1800071e 	bne	r3,zero,800581c <__gesf2+0x60>
 8005800:	3000061e 	bne	r6,zero,800581c <__gesf2+0x60>
 8005804:	0005883a 	mov	r2,zero
 8005808:	40000e1e 	bne	r8,zero,8005844 <__gesf2+0x88>
 800580c:	f800283a 	ret
 8005810:	18000a1e 	bne	r3,zero,800583c <__gesf2+0x80>
 8005814:	30000b26 	beq	r6,zero,8005844 <__gesf2+0x88>
 8005818:	000f883a 	mov	r7,zero
 800581c:	29403fcc 	andi	r5,r5,255
 8005820:	38000726 	beq	r7,zero,8005840 <__gesf2+0x84>
 8005824:	28000826 	beq	r5,zero,8005848 <__gesf2+0x8c>
 8005828:	00800044 	movi	r2,1
 800582c:	f800283a 	ret
 8005830:	303ff026 	beq	r6,zero,80057f4 <__alt_data_end+0xfc0057f4>
 8005834:	00bfff84 	movi	r2,-2
 8005838:	f800283a 	ret
 800583c:	29403fcc 	andi	r5,r5,255
 8005840:	21400526 	beq	r4,r5,8005858 <__gesf2+0x9c>
 8005844:	203ff826 	beq	r4,zero,8005828 <__alt_data_end+0xfc005828>
 8005848:	00bfffc4 	movi	r2,-1
 800584c:	f800283a 	ret
 8005850:	403fe626 	beq	r8,zero,80057ec <__alt_data_end+0xfc0057ec>
 8005854:	003ff706 	br	8005834 <__alt_data_end+0xfc005834>
 8005858:	18bffa16 	blt	r3,r2,8005844 <__alt_data_end+0xfc005844>
 800585c:	10c00216 	blt	r2,r3,8005868 <__gesf2+0xac>
 8005860:	323ff836 	bltu	r6,r8,8005844 <__alt_data_end+0xfc005844>
 8005864:	4180022e 	bgeu	r8,r6,8005870 <__gesf2+0xb4>
 8005868:	203fef1e 	bne	r4,zero,8005828 <__alt_data_end+0xfc005828>
 800586c:	003ff606 	br	8005848 <__alt_data_end+0xfc005848>
 8005870:	0005883a 	mov	r2,zero
 8005874:	f800283a 	ret

08005878 <__mulsf3>:
 8005878:	defff504 	addi	sp,sp,-44
 800587c:	dc000115 	stw	r16,4(sp)
 8005880:	2020d5fa 	srli	r16,r4,23
 8005884:	dd400615 	stw	r21,24(sp)
 8005888:	202ad7fa 	srli	r21,r4,31
 800588c:	dc800315 	stw	r18,12(sp)
 8005890:	04802034 	movhi	r18,128
 8005894:	df000915 	stw	fp,36(sp)
 8005898:	dd000515 	stw	r20,20(sp)
 800589c:	94bfffc4 	addi	r18,r18,-1
 80058a0:	dfc00a15 	stw	ra,40(sp)
 80058a4:	ddc00815 	stw	r23,32(sp)
 80058a8:	dd800715 	stw	r22,28(sp)
 80058ac:	dcc00415 	stw	r19,16(sp)
 80058b0:	dc400215 	stw	r17,8(sp)
 80058b4:	84003fcc 	andi	r16,r16,255
 80058b8:	9124703a 	and	r18,r18,r4
 80058bc:	a829883a 	mov	r20,r21
 80058c0:	af003fcc 	andi	fp,r21,255
 80058c4:	80005426 	beq	r16,zero,8005a18 <__mulsf3+0x1a0>
 80058c8:	00803fc4 	movi	r2,255
 80058cc:	80802f26 	beq	r16,r2,800598c <__mulsf3+0x114>
 80058d0:	91002034 	orhi	r4,r18,128
 80058d4:	202490fa 	slli	r18,r4,3
 80058d8:	843fe044 	addi	r16,r16,-127
 80058dc:	0023883a 	mov	r17,zero
 80058e0:	002f883a 	mov	r23,zero
 80058e4:	2804d5fa 	srli	r2,r5,23
 80058e8:	282cd7fa 	srli	r22,r5,31
 80058ec:	01002034 	movhi	r4,128
 80058f0:	213fffc4 	addi	r4,r4,-1
 80058f4:	10803fcc 	andi	r2,r2,255
 80058f8:	2166703a 	and	r19,r4,r5
 80058fc:	b1803fcc 	andi	r6,r22,255
 8005900:	10004c26 	beq	r2,zero,8005a34 <__mulsf3+0x1bc>
 8005904:	00c03fc4 	movi	r3,255
 8005908:	10c04726 	beq	r2,r3,8005a28 <__mulsf3+0x1b0>
 800590c:	99002034 	orhi	r4,r19,128
 8005910:	202690fa 	slli	r19,r4,3
 8005914:	10bfe044 	addi	r2,r2,-127
 8005918:	0007883a 	mov	r3,zero
 800591c:	80a1883a 	add	r16,r16,r2
 8005920:	010003c4 	movi	r4,15
 8005924:	1c44b03a 	or	r2,r3,r17
 8005928:	b56af03a 	xor	r21,r22,r21
 800592c:	81c00044 	addi	r7,r16,1
 8005930:	20806b36 	bltu	r4,r2,8005ae0 <__mulsf3+0x268>
 8005934:	100490ba 	slli	r2,r2,2
 8005938:	01020034 	movhi	r4,2048
 800593c:	21165304 	addi	r4,r4,22860
 8005940:	1105883a 	add	r2,r2,r4
 8005944:	10800017 	ldw	r2,0(r2)
 8005948:	1000683a 	jmp	r2
 800594c:	08005ae0 	cmpeqi	zero,at,363
 8005950:	080059a0 	cmpeqi	zero,at,358
 8005954:	080059a0 	cmpeqi	zero,at,358
 8005958:	0800599c 	xori	zero,at,358
 800595c:	08005ac4 	addi	zero,at,363
 8005960:	08005ac4 	addi	zero,at,363
 8005964:	08005ab0 	cmpltui	zero,at,362
 8005968:	0800599c 	xori	zero,at,358
 800596c:	08005ac4 	addi	zero,at,363
 8005970:	08005ab0 	cmpltui	zero,at,362
 8005974:	08005ac4 	addi	zero,at,363
 8005978:	0800599c 	xori	zero,at,358
 800597c:	08005ad0 	cmplti	zero,at,363
 8005980:	08005ad0 	cmplti	zero,at,363
 8005984:	08005ad0 	cmplti	zero,at,363
 8005988:	08005be0 	cmpeqi	zero,at,367
 800598c:	90003b1e 	bne	r18,zero,8005a7c <__mulsf3+0x204>
 8005990:	04400204 	movi	r17,8
 8005994:	05c00084 	movi	r23,2
 8005998:	003fd206 	br	80058e4 <__alt_data_end+0xfc0058e4>
 800599c:	302b883a 	mov	r21,r6
 80059a0:	00800084 	movi	r2,2
 80059a4:	18802626 	beq	r3,r2,8005a40 <__mulsf3+0x1c8>
 80059a8:	008000c4 	movi	r2,3
 80059ac:	1880b826 	beq	r3,r2,8005c90 <__mulsf3+0x418>
 80059b0:	00800044 	movi	r2,1
 80059b4:	1880af1e 	bne	r3,r2,8005c74 <__mulsf3+0x3fc>
 80059b8:	a829883a 	mov	r20,r21
 80059bc:	0007883a 	mov	r3,zero
 80059c0:	0009883a 	mov	r4,zero
 80059c4:	18803fcc 	andi	r2,r3,255
 80059c8:	100695fa 	slli	r3,r2,23
 80059cc:	a0803fcc 	andi	r2,r20,255
 80059d0:	100a97fa 	slli	r5,r2,31
 80059d4:	00802034 	movhi	r2,128
 80059d8:	10bfffc4 	addi	r2,r2,-1
 80059dc:	2084703a 	and	r2,r4,r2
 80059e0:	10c4b03a 	or	r2,r2,r3
 80059e4:	1144b03a 	or	r2,r2,r5
 80059e8:	dfc00a17 	ldw	ra,40(sp)
 80059ec:	df000917 	ldw	fp,36(sp)
 80059f0:	ddc00817 	ldw	r23,32(sp)
 80059f4:	dd800717 	ldw	r22,28(sp)
 80059f8:	dd400617 	ldw	r21,24(sp)
 80059fc:	dd000517 	ldw	r20,20(sp)
 8005a00:	dcc00417 	ldw	r19,16(sp)
 8005a04:	dc800317 	ldw	r18,12(sp)
 8005a08:	dc400217 	ldw	r17,8(sp)
 8005a0c:	dc000117 	ldw	r16,4(sp)
 8005a10:	dec00b04 	addi	sp,sp,44
 8005a14:	f800283a 	ret
 8005a18:	90000d1e 	bne	r18,zero,8005a50 <__mulsf3+0x1d8>
 8005a1c:	04400104 	movi	r17,4
 8005a20:	05c00044 	movi	r23,1
 8005a24:	003faf06 	br	80058e4 <__alt_data_end+0xfc0058e4>
 8005a28:	9806c03a 	cmpne	r3,r19,zero
 8005a2c:	18c00084 	addi	r3,r3,2
 8005a30:	003fba06 	br	800591c <__alt_data_end+0xfc00591c>
 8005a34:	9800141e 	bne	r19,zero,8005a88 <__mulsf3+0x210>
 8005a38:	00c00044 	movi	r3,1
 8005a3c:	003fb706 	br	800591c <__alt_data_end+0xfc00591c>
 8005a40:	a829883a 	mov	r20,r21
 8005a44:	00ffffc4 	movi	r3,-1
 8005a48:	0009883a 	mov	r4,zero
 8005a4c:	003fdd06 	br	80059c4 <__alt_data_end+0xfc0059c4>
 8005a50:	9009883a 	mov	r4,r18
 8005a54:	d9400015 	stw	r5,0(sp)
 8005a58:	8006cb40 	call	8006cb4 <__clzsi2>
 8005a5c:	10fffec4 	addi	r3,r2,-5
 8005a60:	10801d84 	addi	r2,r2,118
 8005a64:	90e4983a 	sll	r18,r18,r3
 8005a68:	00a1c83a 	sub	r16,zero,r2
 8005a6c:	0023883a 	mov	r17,zero
 8005a70:	002f883a 	mov	r23,zero
 8005a74:	d9400017 	ldw	r5,0(sp)
 8005a78:	003f9a06 	br	80058e4 <__alt_data_end+0xfc0058e4>
 8005a7c:	04400304 	movi	r17,12
 8005a80:	05c000c4 	movi	r23,3
 8005a84:	003f9706 	br	80058e4 <__alt_data_end+0xfc0058e4>
 8005a88:	9809883a 	mov	r4,r19
 8005a8c:	d9800015 	stw	r6,0(sp)
 8005a90:	8006cb40 	call	8006cb4 <__clzsi2>
 8005a94:	10fffec4 	addi	r3,r2,-5
 8005a98:	10801d84 	addi	r2,r2,118
 8005a9c:	98e6983a 	sll	r19,r19,r3
 8005aa0:	0085c83a 	sub	r2,zero,r2
 8005aa4:	0007883a 	mov	r3,zero
 8005aa8:	d9800017 	ldw	r6,0(sp)
 8005aac:	003f9b06 	br	800591c <__alt_data_end+0xfc00591c>
 8005ab0:	01002034 	movhi	r4,128
 8005ab4:	0029883a 	mov	r20,zero
 8005ab8:	213fffc4 	addi	r4,r4,-1
 8005abc:	00ffffc4 	movi	r3,-1
 8005ac0:	003fc006 	br	80059c4 <__alt_data_end+0xfc0059c4>
 8005ac4:	9027883a 	mov	r19,r18
 8005ac8:	b807883a 	mov	r3,r23
 8005acc:	003fb406 	br	80059a0 <__alt_data_end+0xfc0059a0>
 8005ad0:	9027883a 	mov	r19,r18
 8005ad4:	e02b883a 	mov	r21,fp
 8005ad8:	b807883a 	mov	r3,r23
 8005adc:	003fb006 	br	80059a0 <__alt_data_end+0xfc0059a0>
 8005ae0:	9028d43a 	srli	r20,r18,16
 8005ae4:	982cd43a 	srli	r22,r19,16
 8005ae8:	94bfffcc 	andi	r18,r18,65535
 8005aec:	9cffffcc 	andi	r19,r19,65535
 8005af0:	980b883a 	mov	r5,r19
 8005af4:	9009883a 	mov	r4,r18
 8005af8:	d9c00015 	stw	r7,0(sp)
 8005afc:	80057940 	call	8005794 <__mulsi3>
 8005b00:	a00b883a 	mov	r5,r20
 8005b04:	9809883a 	mov	r4,r19
 8005b08:	1023883a 	mov	r17,r2
 8005b0c:	80057940 	call	8005794 <__mulsi3>
 8005b10:	a009883a 	mov	r4,r20
 8005b14:	b00b883a 	mov	r5,r22
 8005b18:	1027883a 	mov	r19,r2
 8005b1c:	80057940 	call	8005794 <__mulsi3>
 8005b20:	b00b883a 	mov	r5,r22
 8005b24:	9009883a 	mov	r4,r18
 8005b28:	1029883a 	mov	r20,r2
 8005b2c:	80057940 	call	8005794 <__mulsi3>
 8005b30:	8806d43a 	srli	r3,r17,16
 8005b34:	14c5883a 	add	r2,r2,r19
 8005b38:	d9c00017 	ldw	r7,0(sp)
 8005b3c:	1885883a 	add	r2,r3,r2
 8005b40:	14c0022e 	bgeu	r2,r19,8005b4c <__mulsf3+0x2d4>
 8005b44:	00c00074 	movhi	r3,1
 8005b48:	a0e9883a 	add	r20,r20,r3
 8005b4c:	1026943a 	slli	r19,r2,16
 8005b50:	8c7fffcc 	andi	r17,r17,65535
 8005b54:	1004d43a 	srli	r2,r2,16
 8005b58:	9c63883a 	add	r17,r19,r17
 8005b5c:	882691ba 	slli	r19,r17,6
 8005b60:	1505883a 	add	r2,r2,r20
 8005b64:	8822d6ba 	srli	r17,r17,26
 8005b68:	100891ba 	slli	r4,r2,6
 8005b6c:	9826c03a 	cmpne	r19,r19,zero
 8005b70:	9c62b03a 	or	r17,r19,r17
 8005b74:	8926b03a 	or	r19,r17,r4
 8005b78:	9882002c 	andhi	r2,r19,2048
 8005b7c:	10000426 	beq	r2,zero,8005b90 <__mulsf3+0x318>
 8005b80:	9804d07a 	srli	r2,r19,1
 8005b84:	9900004c 	andi	r4,r19,1
 8005b88:	3821883a 	mov	r16,r7
 8005b8c:	1126b03a 	or	r19,r2,r4
 8005b90:	80c01fc4 	addi	r3,r16,127
 8005b94:	00c0210e 	bge	zero,r3,8005c1c <__mulsf3+0x3a4>
 8005b98:	988001cc 	andi	r2,r19,7
 8005b9c:	10000426 	beq	r2,zero,8005bb0 <__mulsf3+0x338>
 8005ba0:	988003cc 	andi	r2,r19,15
 8005ba4:	01000104 	movi	r4,4
 8005ba8:	11000126 	beq	r2,r4,8005bb0 <__mulsf3+0x338>
 8005bac:	9927883a 	add	r19,r19,r4
 8005bb0:	9882002c 	andhi	r2,r19,2048
 8005bb4:	10000426 	beq	r2,zero,8005bc8 <__mulsf3+0x350>
 8005bb8:	00be0034 	movhi	r2,63488
 8005bbc:	10bfffc4 	addi	r2,r2,-1
 8005bc0:	80c02004 	addi	r3,r16,128
 8005bc4:	98a6703a 	and	r19,r19,r2
 8005bc8:	00803f84 	movi	r2,254
 8005bcc:	10ff9c16 	blt	r2,r3,8005a40 <__alt_data_end+0xfc005a40>
 8005bd0:	980891ba 	slli	r4,r19,6
 8005bd4:	a829883a 	mov	r20,r21
 8005bd8:	2008d27a 	srli	r4,r4,9
 8005bdc:	003f7906 	br	80059c4 <__alt_data_end+0xfc0059c4>
 8005be0:	9080102c 	andhi	r2,r18,64
 8005be4:	10000826 	beq	r2,zero,8005c08 <__mulsf3+0x390>
 8005be8:	9880102c 	andhi	r2,r19,64
 8005bec:	1000061e 	bne	r2,zero,8005c08 <__mulsf3+0x390>
 8005bf0:	00802034 	movhi	r2,128
 8005bf4:	99001034 	orhi	r4,r19,64
 8005bf8:	10bfffc4 	addi	r2,r2,-1
 8005bfc:	b029883a 	mov	r20,r22
 8005c00:	2088703a 	and	r4,r4,r2
 8005c04:	003fad06 	br	8005abc <__alt_data_end+0xfc005abc>
 8005c08:	00802034 	movhi	r2,128
 8005c0c:	91001034 	orhi	r4,r18,64
 8005c10:	10bfffc4 	addi	r2,r2,-1
 8005c14:	2088703a 	and	r4,r4,r2
 8005c18:	003fa806 	br	8005abc <__alt_data_end+0xfc005abc>
 8005c1c:	00800044 	movi	r2,1
 8005c20:	10c7c83a 	sub	r3,r2,r3
 8005c24:	008006c4 	movi	r2,27
 8005c28:	10ff6316 	blt	r2,r3,80059b8 <__alt_data_end+0xfc0059b8>
 8005c2c:	00800804 	movi	r2,32
 8005c30:	10c5c83a 	sub	r2,r2,r3
 8005c34:	9884983a 	sll	r2,r19,r2
 8005c38:	98c6d83a 	srl	r3,r19,r3
 8005c3c:	1004c03a 	cmpne	r2,r2,zero
 8005c40:	1884b03a 	or	r2,r3,r2
 8005c44:	10c001cc 	andi	r3,r2,7
 8005c48:	18000426 	beq	r3,zero,8005c5c <__mulsf3+0x3e4>
 8005c4c:	10c003cc 	andi	r3,r2,15
 8005c50:	01000104 	movi	r4,4
 8005c54:	19000126 	beq	r3,r4,8005c5c <__mulsf3+0x3e4>
 8005c58:	1105883a 	add	r2,r2,r4
 8005c5c:	10c1002c 	andhi	r3,r2,1024
 8005c60:	18000626 	beq	r3,zero,8005c7c <__mulsf3+0x404>
 8005c64:	a829883a 	mov	r20,r21
 8005c68:	00c00044 	movi	r3,1
 8005c6c:	0009883a 	mov	r4,zero
 8005c70:	003f5406 	br	80059c4 <__alt_data_end+0xfc0059c4>
 8005c74:	3821883a 	mov	r16,r7
 8005c78:	003fc506 	br	8005b90 <__alt_data_end+0xfc005b90>
 8005c7c:	100491ba 	slli	r2,r2,6
 8005c80:	a829883a 	mov	r20,r21
 8005c84:	0007883a 	mov	r3,zero
 8005c88:	1008d27a 	srli	r4,r2,9
 8005c8c:	003f4d06 	br	80059c4 <__alt_data_end+0xfc0059c4>
 8005c90:	00802034 	movhi	r2,128
 8005c94:	99001034 	orhi	r4,r19,64
 8005c98:	10bfffc4 	addi	r2,r2,-1
 8005c9c:	a829883a 	mov	r20,r21
 8005ca0:	2088703a 	and	r4,r4,r2
 8005ca4:	003f8506 	br	8005abc <__alt_data_end+0xfc005abc>

08005ca8 <__subsf3>:
 8005ca8:	defffc04 	addi	sp,sp,-16
 8005cac:	280cd5fa 	srli	r6,r5,23
 8005cb0:	dc000015 	stw	r16,0(sp)
 8005cb4:	01c02034 	movhi	r7,128
 8005cb8:	2020d5fa 	srli	r16,r4,23
 8005cbc:	39ffffc4 	addi	r7,r7,-1
 8005cc0:	3906703a 	and	r3,r7,r4
 8005cc4:	dc400115 	stw	r17,4(sp)
 8005cc8:	394e703a 	and	r7,r7,r5
 8005ccc:	2022d7fa 	srli	r17,r4,31
 8005cd0:	dfc00315 	stw	ra,12(sp)
 8005cd4:	dc800215 	stw	r18,8(sp)
 8005cd8:	31803fcc 	andi	r6,r6,255
 8005cdc:	01003fc4 	movi	r4,255
 8005ce0:	84003fcc 	andi	r16,r16,255
 8005ce4:	180690fa 	slli	r3,r3,3
 8005ce8:	2804d7fa 	srli	r2,r5,31
 8005cec:	380e90fa 	slli	r7,r7,3
 8005cf0:	31006d26 	beq	r6,r4,8005ea8 <__subsf3+0x200>
 8005cf4:	1080005c 	xori	r2,r2,1
 8005cf8:	8189c83a 	sub	r4,r16,r6
 8005cfc:	14404f26 	beq	r2,r17,8005e3c <__subsf3+0x194>
 8005d00:	0100770e 	bge	zero,r4,8005ee0 <__subsf3+0x238>
 8005d04:	30001e1e 	bne	r6,zero,8005d80 <__subsf3+0xd8>
 8005d08:	38006a1e 	bne	r7,zero,8005eb4 <__subsf3+0x20c>
 8005d0c:	188001cc 	andi	r2,r3,7
 8005d10:	10000426 	beq	r2,zero,8005d24 <__subsf3+0x7c>
 8005d14:	188003cc 	andi	r2,r3,15
 8005d18:	01000104 	movi	r4,4
 8005d1c:	11000126 	beq	r2,r4,8005d24 <__subsf3+0x7c>
 8005d20:	1907883a 	add	r3,r3,r4
 8005d24:	1881002c 	andhi	r2,r3,1024
 8005d28:	10003926 	beq	r2,zero,8005e10 <__subsf3+0x168>
 8005d2c:	84000044 	addi	r16,r16,1
 8005d30:	00803fc4 	movi	r2,255
 8005d34:	80807526 	beq	r16,r2,8005f0c <__subsf3+0x264>
 8005d38:	180691ba 	slli	r3,r3,6
 8005d3c:	8880004c 	andi	r2,r17,1
 8005d40:	180ad27a 	srli	r5,r3,9
 8005d44:	84003fcc 	andi	r16,r16,255
 8005d48:	800695fa 	slli	r3,r16,23
 8005d4c:	10803fcc 	andi	r2,r2,255
 8005d50:	01002034 	movhi	r4,128
 8005d54:	213fffc4 	addi	r4,r4,-1
 8005d58:	100497fa 	slli	r2,r2,31
 8005d5c:	2920703a 	and	r16,r5,r4
 8005d60:	80e0b03a 	or	r16,r16,r3
 8005d64:	8084b03a 	or	r2,r16,r2
 8005d68:	dfc00317 	ldw	ra,12(sp)
 8005d6c:	dc800217 	ldw	r18,8(sp)
 8005d70:	dc400117 	ldw	r17,4(sp)
 8005d74:	dc000017 	ldw	r16,0(sp)
 8005d78:	dec00404 	addi	sp,sp,16
 8005d7c:	f800283a 	ret
 8005d80:	00803fc4 	movi	r2,255
 8005d84:	80bfe126 	beq	r16,r2,8005d0c <__alt_data_end+0xfc005d0c>
 8005d88:	39c10034 	orhi	r7,r7,1024
 8005d8c:	008006c4 	movi	r2,27
 8005d90:	11007416 	blt	r2,r4,8005f64 <__subsf3+0x2bc>
 8005d94:	00800804 	movi	r2,32
 8005d98:	1105c83a 	sub	r2,r2,r4
 8005d9c:	3884983a 	sll	r2,r7,r2
 8005da0:	390ed83a 	srl	r7,r7,r4
 8005da4:	1008c03a 	cmpne	r4,r2,zero
 8005da8:	390eb03a 	or	r7,r7,r4
 8005dac:	19c7c83a 	sub	r3,r3,r7
 8005db0:	1881002c 	andhi	r2,r3,1024
 8005db4:	10001426 	beq	r2,zero,8005e08 <__subsf3+0x160>
 8005db8:	04810034 	movhi	r18,1024
 8005dbc:	94bfffc4 	addi	r18,r18,-1
 8005dc0:	1ca4703a 	and	r18,r3,r18
 8005dc4:	9009883a 	mov	r4,r18
 8005dc8:	8006cb40 	call	8006cb4 <__clzsi2>
 8005dcc:	10bffec4 	addi	r2,r2,-5
 8005dd0:	90a4983a 	sll	r18,r18,r2
 8005dd4:	14005116 	blt	r2,r16,8005f1c <__subsf3+0x274>
 8005dd8:	1405c83a 	sub	r2,r2,r16
 8005ddc:	10c00044 	addi	r3,r2,1
 8005de0:	00800804 	movi	r2,32
 8005de4:	10c5c83a 	sub	r2,r2,r3
 8005de8:	9084983a 	sll	r2,r18,r2
 8005dec:	90e4d83a 	srl	r18,r18,r3
 8005df0:	0021883a 	mov	r16,zero
 8005df4:	1006c03a 	cmpne	r3,r2,zero
 8005df8:	90c6b03a 	or	r3,r18,r3
 8005dfc:	003fc306 	br	8005d0c <__alt_data_end+0xfc005d0c>
 8005e00:	2000e026 	beq	r4,zero,8006184 <__subsf3+0x4dc>
 8005e04:	2007883a 	mov	r3,r4
 8005e08:	188001cc 	andi	r2,r3,7
 8005e0c:	103fc11e 	bne	r2,zero,8005d14 <__alt_data_end+0xfc005d14>
 8005e10:	180ad0fa 	srli	r5,r3,3
 8005e14:	00c03fc4 	movi	r3,255
 8005e18:	8880004c 	andi	r2,r17,1
 8005e1c:	80c0031e 	bne	r16,r3,8005e2c <__subsf3+0x184>
 8005e20:	28006d26 	beq	r5,zero,8005fd8 <__subsf3+0x330>
 8005e24:	29401034 	orhi	r5,r5,64
 8005e28:	043fffc4 	movi	r16,-1
 8005e2c:	00c02034 	movhi	r3,128
 8005e30:	18ffffc4 	addi	r3,r3,-1
 8005e34:	28ca703a 	and	r5,r5,r3
 8005e38:	003fc206 	br	8005d44 <__alt_data_end+0xfc005d44>
 8005e3c:	01003c0e 	bge	zero,r4,8005f30 <__subsf3+0x288>
 8005e40:	30002126 	beq	r6,zero,8005ec8 <__subsf3+0x220>
 8005e44:	01403fc4 	movi	r5,255
 8005e48:	817fb026 	beq	r16,r5,8005d0c <__alt_data_end+0xfc005d0c>
 8005e4c:	39c10034 	orhi	r7,r7,1024
 8005e50:	014006c4 	movi	r5,27
 8005e54:	29007416 	blt	r5,r4,8006028 <__subsf3+0x380>
 8005e58:	01400804 	movi	r5,32
 8005e5c:	290bc83a 	sub	r5,r5,r4
 8005e60:	394a983a 	sll	r5,r7,r5
 8005e64:	390ed83a 	srl	r7,r7,r4
 8005e68:	2808c03a 	cmpne	r4,r5,zero
 8005e6c:	390eb03a 	or	r7,r7,r4
 8005e70:	19c7883a 	add	r3,r3,r7
 8005e74:	1901002c 	andhi	r4,r3,1024
 8005e78:	20003826 	beq	r4,zero,8005f5c <__subsf3+0x2b4>
 8005e7c:	84000044 	addi	r16,r16,1
 8005e80:	01003fc4 	movi	r4,255
 8005e84:	81005426 	beq	r16,r4,8005fd8 <__subsf3+0x330>
 8005e88:	1023883a 	mov	r17,r2
 8005e8c:	00bf0034 	movhi	r2,64512
 8005e90:	10bfffc4 	addi	r2,r2,-1
 8005e94:	1900004c 	andi	r4,r3,1
 8005e98:	1886703a 	and	r3,r3,r2
 8005e9c:	1806d07a 	srli	r3,r3,1
 8005ea0:	1906b03a 	or	r3,r3,r4
 8005ea4:	003f9906 	br	8005d0c <__alt_data_end+0xfc005d0c>
 8005ea8:	383f9226 	beq	r7,zero,8005cf4 <__alt_data_end+0xfc005cf4>
 8005eac:	10803fcc 	andi	r2,r2,255
 8005eb0:	003f9106 	br	8005cf8 <__alt_data_end+0xfc005cf8>
 8005eb4:	213fffc4 	addi	r4,r4,-1
 8005eb8:	203fbc26 	beq	r4,zero,8005dac <__alt_data_end+0xfc005dac>
 8005ebc:	00803fc4 	movi	r2,255
 8005ec0:	80bfb21e 	bne	r16,r2,8005d8c <__alt_data_end+0xfc005d8c>
 8005ec4:	003f9106 	br	8005d0c <__alt_data_end+0xfc005d0c>
 8005ec8:	383f9026 	beq	r7,zero,8005d0c <__alt_data_end+0xfc005d0c>
 8005ecc:	213fffc4 	addi	r4,r4,-1
 8005ed0:	203fe726 	beq	r4,zero,8005e70 <__alt_data_end+0xfc005e70>
 8005ed4:	01403fc4 	movi	r5,255
 8005ed8:	817fdd1e 	bne	r16,r5,8005e50 <__alt_data_end+0xfc005e50>
 8005edc:	003f8b06 	br	8005d0c <__alt_data_end+0xfc005d0c>
 8005ee0:	2000221e 	bne	r4,zero,8005f6c <__subsf3+0x2c4>
 8005ee4:	81000044 	addi	r4,r16,1
 8005ee8:	21003fcc 	andi	r4,r4,255
 8005eec:	01400044 	movi	r5,1
 8005ef0:	2900470e 	bge	r5,r4,8006010 <__subsf3+0x368>
 8005ef4:	19e5c83a 	sub	r18,r3,r7
 8005ef8:	9141002c 	andhi	r5,r18,1024
 8005efc:	28002d26 	beq	r5,zero,8005fb4 <__subsf3+0x30c>
 8005f00:	38e5c83a 	sub	r18,r7,r3
 8005f04:	1023883a 	mov	r17,r2
 8005f08:	003fae06 	br	8005dc4 <__alt_data_end+0xfc005dc4>
 8005f0c:	8880004c 	andi	r2,r17,1
 8005f10:	043fffc4 	movi	r16,-1
 8005f14:	000b883a 	mov	r5,zero
 8005f18:	003f8a06 	br	8005d44 <__alt_data_end+0xfc005d44>
 8005f1c:	00ff0034 	movhi	r3,64512
 8005f20:	18ffffc4 	addi	r3,r3,-1
 8005f24:	80a1c83a 	sub	r16,r16,r2
 8005f28:	90c6703a 	and	r3,r18,r3
 8005f2c:	003f7706 	br	8005d0c <__alt_data_end+0xfc005d0c>
 8005f30:	2000431e 	bne	r4,zero,8006040 <__subsf3+0x398>
 8005f34:	81000044 	addi	r4,r16,1
 8005f38:	21803fcc 	andi	r6,r4,255
 8005f3c:	01400044 	movi	r5,1
 8005f40:	2980280e 	bge	r5,r6,8005fe4 <__subsf3+0x33c>
 8005f44:	01403fc4 	movi	r5,255
 8005f48:	21402326 	beq	r4,r5,8005fd8 <__subsf3+0x330>
 8005f4c:	19c7883a 	add	r3,r3,r7
 8005f50:	1806d07a 	srli	r3,r3,1
 8005f54:	2021883a 	mov	r16,r4
 8005f58:	003f6c06 	br	8005d0c <__alt_data_end+0xfc005d0c>
 8005f5c:	1023883a 	mov	r17,r2
 8005f60:	003fa906 	br	8005e08 <__alt_data_end+0xfc005e08>
 8005f64:	01c00044 	movi	r7,1
 8005f68:	003f9006 	br	8005dac <__alt_data_end+0xfc005dac>
 8005f6c:	8000151e 	bne	r16,zero,8005fc4 <__subsf3+0x31c>
 8005f70:	18002f26 	beq	r3,zero,8006030 <__subsf3+0x388>
 8005f74:	0108303a 	nor	r4,zero,r4
 8005f78:	20000a26 	beq	r4,zero,8005fa4 <__subsf3+0x2fc>
 8005f7c:	01403fc4 	movi	r5,255
 8005f80:	31402b26 	beq	r6,r5,8006030 <__subsf3+0x388>
 8005f84:	014006c4 	movi	r5,27
 8005f88:	29006e16 	blt	r5,r4,8006144 <__subsf3+0x49c>
 8005f8c:	01400804 	movi	r5,32
 8005f90:	290bc83a 	sub	r5,r5,r4
 8005f94:	194a983a 	sll	r5,r3,r5
 8005f98:	1908d83a 	srl	r4,r3,r4
 8005f9c:	2806c03a 	cmpne	r3,r5,zero
 8005fa0:	20c6b03a 	or	r3,r4,r3
 8005fa4:	38c7c83a 	sub	r3,r7,r3
 8005fa8:	3021883a 	mov	r16,r6
 8005fac:	1023883a 	mov	r17,r2
 8005fb0:	003f7f06 	br	8005db0 <__alt_data_end+0xfc005db0>
 8005fb4:	903f831e 	bne	r18,zero,8005dc4 <__alt_data_end+0xfc005dc4>
 8005fb8:	0005883a 	mov	r2,zero
 8005fbc:	0021883a 	mov	r16,zero
 8005fc0:	003f9a06 	br	8005e2c <__alt_data_end+0xfc005e2c>
 8005fc4:	01403fc4 	movi	r5,255
 8005fc8:	31401926 	beq	r6,r5,8006030 <__subsf3+0x388>
 8005fcc:	0109c83a 	sub	r4,zero,r4
 8005fd0:	18c10034 	orhi	r3,r3,1024
 8005fd4:	003feb06 	br	8005f84 <__alt_data_end+0xfc005f84>
 8005fd8:	043fffc4 	movi	r16,-1
 8005fdc:	000b883a 	mov	r5,zero
 8005fe0:	003f5806 	br	8005d44 <__alt_data_end+0xfc005d44>
 8005fe4:	8000481e 	bne	r16,zero,8006108 <__subsf3+0x460>
 8005fe8:	18006226 	beq	r3,zero,8006174 <__subsf3+0x4cc>
 8005fec:	383f4726 	beq	r7,zero,8005d0c <__alt_data_end+0xfc005d0c>
 8005ff0:	19c7883a 	add	r3,r3,r7
 8005ff4:	1881002c 	andhi	r2,r3,1024
 8005ff8:	103f8326 	beq	r2,zero,8005e08 <__alt_data_end+0xfc005e08>
 8005ffc:	00bf0034 	movhi	r2,64512
 8006000:	10bfffc4 	addi	r2,r2,-1
 8006004:	2821883a 	mov	r16,r5
 8006008:	1886703a 	and	r3,r3,r2
 800600c:	003f3f06 	br	8005d0c <__alt_data_end+0xfc005d0c>
 8006010:	80001c1e 	bne	r16,zero,8006084 <__subsf3+0x3dc>
 8006014:	1800261e 	bne	r3,zero,80060b0 <__subsf3+0x408>
 8006018:	38004c26 	beq	r7,zero,800614c <__subsf3+0x4a4>
 800601c:	3807883a 	mov	r3,r7
 8006020:	1023883a 	mov	r17,r2
 8006024:	003f3906 	br	8005d0c <__alt_data_end+0xfc005d0c>
 8006028:	01c00044 	movi	r7,1
 800602c:	003f9006 	br	8005e70 <__alt_data_end+0xfc005e70>
 8006030:	3807883a 	mov	r3,r7
 8006034:	3021883a 	mov	r16,r6
 8006038:	1023883a 	mov	r17,r2
 800603c:	003f3306 	br	8005d0c <__alt_data_end+0xfc005d0c>
 8006040:	8000161e 	bne	r16,zero,800609c <__subsf3+0x3f4>
 8006044:	18002d26 	beq	r3,zero,80060fc <__subsf3+0x454>
 8006048:	0108303a 	nor	r4,zero,r4
 800604c:	20000a26 	beq	r4,zero,8006078 <__subsf3+0x3d0>
 8006050:	01403fc4 	movi	r5,255
 8006054:	31402926 	beq	r6,r5,80060fc <__subsf3+0x454>
 8006058:	014006c4 	movi	r5,27
 800605c:	29004716 	blt	r5,r4,800617c <__subsf3+0x4d4>
 8006060:	01400804 	movi	r5,32
 8006064:	290bc83a 	sub	r5,r5,r4
 8006068:	194a983a 	sll	r5,r3,r5
 800606c:	1908d83a 	srl	r4,r3,r4
 8006070:	2806c03a 	cmpne	r3,r5,zero
 8006074:	20c6b03a 	or	r3,r4,r3
 8006078:	19c7883a 	add	r3,r3,r7
 800607c:	3021883a 	mov	r16,r6
 8006080:	003f7c06 	br	8005e74 <__alt_data_end+0xfc005e74>
 8006084:	1800111e 	bne	r3,zero,80060cc <__subsf3+0x424>
 8006088:	38003326 	beq	r7,zero,8006158 <__subsf3+0x4b0>
 800608c:	3807883a 	mov	r3,r7
 8006090:	1023883a 	mov	r17,r2
 8006094:	04003fc4 	movi	r16,255
 8006098:	003f1c06 	br	8005d0c <__alt_data_end+0xfc005d0c>
 800609c:	01403fc4 	movi	r5,255
 80060a0:	31401626 	beq	r6,r5,80060fc <__subsf3+0x454>
 80060a4:	0109c83a 	sub	r4,zero,r4
 80060a8:	18c10034 	orhi	r3,r3,1024
 80060ac:	003fea06 	br	8006058 <__alt_data_end+0xfc006058>
 80060b0:	383f1626 	beq	r7,zero,8005d0c <__alt_data_end+0xfc005d0c>
 80060b4:	19c9c83a 	sub	r4,r3,r7
 80060b8:	2141002c 	andhi	r5,r4,1024
 80060bc:	283f5026 	beq	r5,zero,8005e00 <__alt_data_end+0xfc005e00>
 80060c0:	38c7c83a 	sub	r3,r7,r3
 80060c4:	1023883a 	mov	r17,r2
 80060c8:	003f1006 	br	8005d0c <__alt_data_end+0xfc005d0c>
 80060cc:	38001b26 	beq	r7,zero,800613c <__subsf3+0x494>
 80060d0:	1806d0fa 	srli	r3,r3,3
 80060d4:	1900102c 	andhi	r4,r3,64
 80060d8:	20000526 	beq	r4,zero,80060f0 <__subsf3+0x448>
 80060dc:	380ed0fa 	srli	r7,r7,3
 80060e0:	3900102c 	andhi	r4,r7,64
 80060e4:	2000021e 	bne	r4,zero,80060f0 <__subsf3+0x448>
 80060e8:	3807883a 	mov	r3,r7
 80060ec:	1023883a 	mov	r17,r2
 80060f0:	180690fa 	slli	r3,r3,3
 80060f4:	04003fc4 	movi	r16,255
 80060f8:	003f0406 	br	8005d0c <__alt_data_end+0xfc005d0c>
 80060fc:	3807883a 	mov	r3,r7
 8006100:	3021883a 	mov	r16,r6
 8006104:	003f0106 	br	8005d0c <__alt_data_end+0xfc005d0c>
 8006108:	18001726 	beq	r3,zero,8006168 <__subsf3+0x4c0>
 800610c:	38000b26 	beq	r7,zero,800613c <__subsf3+0x494>
 8006110:	1806d0fa 	srli	r3,r3,3
 8006114:	1900102c 	andhi	r4,r3,64
 8006118:	20000426 	beq	r4,zero,800612c <__subsf3+0x484>
 800611c:	380ed0fa 	srli	r7,r7,3
 8006120:	3900102c 	andhi	r4,r7,64
 8006124:	2000011e 	bne	r4,zero,800612c <__subsf3+0x484>
 8006128:	3807883a 	mov	r3,r7
 800612c:	180690fa 	slli	r3,r3,3
 8006130:	1023883a 	mov	r17,r2
 8006134:	04003fc4 	movi	r16,255
 8006138:	003ef406 	br	8005d0c <__alt_data_end+0xfc005d0c>
 800613c:	04003fc4 	movi	r16,255
 8006140:	003ef206 	br	8005d0c <__alt_data_end+0xfc005d0c>
 8006144:	00c00044 	movi	r3,1
 8006148:	003f9606 	br	8005fa4 <__alt_data_end+0xfc005fa4>
 800614c:	000b883a 	mov	r5,zero
 8006150:	0005883a 	mov	r2,zero
 8006154:	003f3506 	br	8005e2c <__alt_data_end+0xfc005e2c>
 8006158:	01402034 	movhi	r5,128
 800615c:	297fffc4 	addi	r5,r5,-1
 8006160:	0005883a 	mov	r2,zero
 8006164:	003f2f06 	br	8005e24 <__alt_data_end+0xfc005e24>
 8006168:	3807883a 	mov	r3,r7
 800616c:	04003fc4 	movi	r16,255
 8006170:	003ee606 	br	8005d0c <__alt_data_end+0xfc005d0c>
 8006174:	3807883a 	mov	r3,r7
 8006178:	003ee406 	br	8005d0c <__alt_data_end+0xfc005d0c>
 800617c:	00c00044 	movi	r3,1
 8006180:	003fbd06 	br	8006078 <__alt_data_end+0xfc006078>
 8006184:	0005883a 	mov	r2,zero
 8006188:	003f2806 	br	8005e2c <__alt_data_end+0xfc005e2c>

0800618c <__fixsfsi>:
 800618c:	200ad5fa 	srli	r5,r4,23
 8006190:	00c02034 	movhi	r3,128
 8006194:	18ffffc4 	addi	r3,r3,-1
 8006198:	29403fcc 	andi	r5,r5,255
 800619c:	00801f84 	movi	r2,126
 80061a0:	1906703a 	and	r3,r3,r4
 80061a4:	2008d7fa 	srli	r4,r4,31
 80061a8:	11400e0e 	bge	r2,r5,80061e4 <__fixsfsi+0x58>
 80061ac:	00802744 	movi	r2,157
 80061b0:	11400816 	blt	r2,r5,80061d4 <__fixsfsi+0x48>
 80061b4:	00802544 	movi	r2,149
 80061b8:	18c02034 	orhi	r3,r3,128
 80061bc:	11400b0e 	bge	r2,r5,80061ec <__fixsfsi+0x60>
 80061c0:	28bfda84 	addi	r2,r5,-150
 80061c4:	1884983a 	sll	r2,r3,r2
 80061c8:	20000726 	beq	r4,zero,80061e8 <__fixsfsi+0x5c>
 80061cc:	0085c83a 	sub	r2,zero,r2
 80061d0:	f800283a 	ret
 80061d4:	00a00034 	movhi	r2,32768
 80061d8:	10bfffc4 	addi	r2,r2,-1
 80061dc:	2085883a 	add	r2,r4,r2
 80061e0:	f800283a 	ret
 80061e4:	0005883a 	mov	r2,zero
 80061e8:	f800283a 	ret
 80061ec:	00802584 	movi	r2,150
 80061f0:	1145c83a 	sub	r2,r2,r5
 80061f4:	1884d83a 	srl	r2,r3,r2
 80061f8:	003ff306 	br	80061c8 <__alt_data_end+0xfc0061c8>

080061fc <__floatunsisf>:
 80061fc:	defffe04 	addi	sp,sp,-8
 8006200:	dfc00115 	stw	ra,4(sp)
 8006204:	dc000015 	stw	r16,0(sp)
 8006208:	20002c26 	beq	r4,zero,80062bc <__floatunsisf+0xc0>
 800620c:	2021883a 	mov	r16,r4
 8006210:	8006cb40 	call	8006cb4 <__clzsi2>
 8006214:	00c02784 	movi	r3,158
 8006218:	1887c83a 	sub	r3,r3,r2
 800621c:	01002584 	movi	r4,150
 8006220:	20c00f16 	blt	r4,r3,8006260 <__floatunsisf+0x64>
 8006224:	20c9c83a 	sub	r4,r4,r3
 8006228:	8108983a 	sll	r4,r16,r4
 800622c:	00802034 	movhi	r2,128
 8006230:	10bfffc4 	addi	r2,r2,-1
 8006234:	2088703a 	and	r4,r4,r2
 8006238:	18803fcc 	andi	r2,r3,255
 800623c:	100695fa 	slli	r3,r2,23
 8006240:	00802034 	movhi	r2,128
 8006244:	10bfffc4 	addi	r2,r2,-1
 8006248:	2084703a 	and	r2,r4,r2
 800624c:	10c4b03a 	or	r2,r2,r3
 8006250:	dfc00117 	ldw	ra,4(sp)
 8006254:	dc000017 	ldw	r16,0(sp)
 8006258:	dec00204 	addi	sp,sp,8
 800625c:	f800283a 	ret
 8006260:	01002644 	movi	r4,153
 8006264:	20c01816 	blt	r4,r3,80062c8 <__floatunsisf+0xcc>
 8006268:	20c9c83a 	sub	r4,r4,r3
 800626c:	8108983a 	sll	r4,r16,r4
 8006270:	017f0034 	movhi	r5,64512
 8006274:	297fffc4 	addi	r5,r5,-1
 8006278:	218001cc 	andi	r6,r4,7
 800627c:	214a703a 	and	r5,r4,r5
 8006280:	30000426 	beq	r6,zero,8006294 <__floatunsisf+0x98>
 8006284:	210003cc 	andi	r4,r4,15
 8006288:	01800104 	movi	r6,4
 800628c:	21800126 	beq	r4,r6,8006294 <__floatunsisf+0x98>
 8006290:	298b883a 	add	r5,r5,r6
 8006294:	2901002c 	andhi	r4,r5,1024
 8006298:	20000526 	beq	r4,zero,80062b0 <__floatunsisf+0xb4>
 800629c:	00c027c4 	movi	r3,159
 80062a0:	1887c83a 	sub	r3,r3,r2
 80062a4:	00bf0034 	movhi	r2,64512
 80062a8:	10bfffc4 	addi	r2,r2,-1
 80062ac:	288a703a 	and	r5,r5,r2
 80062b0:	280891ba 	slli	r4,r5,6
 80062b4:	2008d27a 	srli	r4,r4,9
 80062b8:	003fdf06 	br	8006238 <__alt_data_end+0xfc006238>
 80062bc:	0007883a 	mov	r3,zero
 80062c0:	0009883a 	mov	r4,zero
 80062c4:	003fdc06 	br	8006238 <__alt_data_end+0xfc006238>
 80062c8:	01402e44 	movi	r5,185
 80062cc:	28cbc83a 	sub	r5,r5,r3
 80062d0:	01000144 	movi	r4,5
 80062d4:	2089c83a 	sub	r4,r4,r2
 80062d8:	814a983a 	sll	r5,r16,r5
 80062dc:	8108d83a 	srl	r4,r16,r4
 80062e0:	2820c03a 	cmpne	r16,r5,zero
 80062e4:	2408b03a 	or	r4,r4,r16
 80062e8:	003fe106 	br	8006270 <__alt_data_end+0xfc006270>

080062ec <__muldf3>:
 80062ec:	deffee04 	addi	sp,sp,-72
 80062f0:	dd000c15 	stw	r20,48(sp)
 80062f4:	2828d53a 	srli	r20,r5,20
 80062f8:	ddc00f15 	stw	r23,60(sp)
 80062fc:	282ed7fa 	srli	r23,r5,31
 8006300:	dc000815 	stw	r16,32(sp)
 8006304:	04000434 	movhi	r16,16
 8006308:	dcc00b15 	stw	r19,44(sp)
 800630c:	843fffc4 	addi	r16,r16,-1
 8006310:	dfc01115 	stw	ra,68(sp)
 8006314:	df001015 	stw	fp,64(sp)
 8006318:	dd800e15 	stw	r22,56(sp)
 800631c:	dd400d15 	stw	r21,52(sp)
 8006320:	dc800a15 	stw	r18,40(sp)
 8006324:	dc400915 	stw	r17,36(sp)
 8006328:	a501ffcc 	andi	r20,r20,2047
 800632c:	2c20703a 	and	r16,r5,r16
 8006330:	b827883a 	mov	r19,r23
 8006334:	ba403fcc 	andi	r9,r23,255
 8006338:	a0006026 	beq	r20,zero,80064bc <__muldf3+0x1d0>
 800633c:	0081ffc4 	movi	r2,2047
 8006340:	202d883a 	mov	r22,r4
 8006344:	a0803626 	beq	r20,r2,8006420 <__muldf3+0x134>
 8006348:	84000434 	orhi	r16,r16,16
 800634c:	200ad77a 	srli	r5,r4,29
 8006350:	800490fa 	slli	r2,r16,3
 8006354:	202c90fa 	slli	r22,r4,3
 8006358:	a53f0044 	addi	r20,r20,-1023
 800635c:	28a0b03a 	or	r16,r5,r2
 8006360:	002b883a 	mov	r21,zero
 8006364:	000b883a 	mov	r5,zero
 8006368:	3804d53a 	srli	r2,r7,20
 800636c:	3838d7fa 	srli	fp,r7,31
 8006370:	04400434 	movhi	r17,16
 8006374:	8c7fffc4 	addi	r17,r17,-1
 8006378:	1081ffcc 	andi	r2,r2,2047
 800637c:	3025883a 	mov	r18,r6
 8006380:	3c62703a 	and	r17,r7,r17
 8006384:	e2803fcc 	andi	r10,fp,255
 8006388:	10006d26 	beq	r2,zero,8006540 <__muldf3+0x254>
 800638c:	00c1ffc4 	movi	r3,2047
 8006390:	10c06526 	beq	r2,r3,8006528 <__muldf3+0x23c>
 8006394:	8c400434 	orhi	r17,r17,16
 8006398:	300ed77a 	srli	r7,r6,29
 800639c:	880690fa 	slli	r3,r17,3
 80063a0:	302490fa 	slli	r18,r6,3
 80063a4:	10bf0044 	addi	r2,r2,-1023
 80063a8:	38e2b03a 	or	r17,r7,r3
 80063ac:	000f883a 	mov	r7,zero
 80063b0:	a087883a 	add	r3,r20,r2
 80063b4:	010003c4 	movi	r4,15
 80063b8:	3d44b03a 	or	r2,r7,r21
 80063bc:	e5ccf03a 	xor	r6,fp,r23
 80063c0:	1a000044 	addi	r8,r3,1
 80063c4:	20809b36 	bltu	r4,r2,8006634 <__muldf3+0x348>
 80063c8:	100490ba 	slli	r2,r2,2
 80063cc:	01020034 	movhi	r4,2048
 80063d0:	2118f804 	addi	r4,r4,25568
 80063d4:	1105883a 	add	r2,r2,r4
 80063d8:	10800017 	ldw	r2,0(r2)
 80063dc:	1000683a 	jmp	r2
 80063e0:	08006634 	orhi	zero,at,408
 80063e4:	08006440 	call	800644 <__alt_mem_onchip_memory2_0+0x800644>
 80063e8:	08006440 	call	800644 <__alt_mem_onchip_memory2_0+0x800644>
 80063ec:	0800643c 	xorhi	zero,at,400
 80063f0:	08006610 	cmplti	zero,at,408
 80063f4:	08006610 	cmplti	zero,at,408
 80063f8:	080065f8 	rdprs	zero,at,407
 80063fc:	0800643c 	xorhi	zero,at,400
 8006400:	08006610 	cmplti	zero,at,408
 8006404:	080065f8 	rdprs	zero,at,407
 8006408:	08006610 	cmplti	zero,at,408
 800640c:	0800643c 	xorhi	zero,at,400
 8006410:	08006620 	cmpeqi	zero,at,408
 8006414:	08006620 	cmpeqi	zero,at,408
 8006418:	08006620 	cmpeqi	zero,at,408
 800641c:	08006980 	call	800698 <__alt_mem_onchip_memory2_0+0x800698>
 8006420:	2404b03a 	or	r2,r4,r16
 8006424:	1000711e 	bne	r2,zero,80065ec <__muldf3+0x300>
 8006428:	05400204 	movi	r21,8
 800642c:	0021883a 	mov	r16,zero
 8006430:	002d883a 	mov	r22,zero
 8006434:	01400084 	movi	r5,2
 8006438:	003fcb06 	br	8006368 <__alt_data_end+0xfc006368>
 800643c:	500d883a 	mov	r6,r10
 8006440:	00800084 	movi	r2,2
 8006444:	38805926 	beq	r7,r2,80065ac <__muldf3+0x2c0>
 8006448:	008000c4 	movi	r2,3
 800644c:	3881bb26 	beq	r7,r2,8006b3c <__muldf3+0x850>
 8006450:	00800044 	movi	r2,1
 8006454:	3881961e 	bne	r7,r2,8006ab0 <__muldf3+0x7c4>
 8006458:	3027883a 	mov	r19,r6
 800645c:	0005883a 	mov	r2,zero
 8006460:	0021883a 	mov	r16,zero
 8006464:	002d883a 	mov	r22,zero
 8006468:	1004953a 	slli	r2,r2,20
 800646c:	98c03fcc 	andi	r3,r19,255
 8006470:	04400434 	movhi	r17,16
 8006474:	8c7fffc4 	addi	r17,r17,-1
 8006478:	180697fa 	slli	r3,r3,31
 800647c:	8460703a 	and	r16,r16,r17
 8006480:	80a0b03a 	or	r16,r16,r2
 8006484:	80c6b03a 	or	r3,r16,r3
 8006488:	b005883a 	mov	r2,r22
 800648c:	dfc01117 	ldw	ra,68(sp)
 8006490:	df001017 	ldw	fp,64(sp)
 8006494:	ddc00f17 	ldw	r23,60(sp)
 8006498:	dd800e17 	ldw	r22,56(sp)
 800649c:	dd400d17 	ldw	r21,52(sp)
 80064a0:	dd000c17 	ldw	r20,48(sp)
 80064a4:	dcc00b17 	ldw	r19,44(sp)
 80064a8:	dc800a17 	ldw	r18,40(sp)
 80064ac:	dc400917 	ldw	r17,36(sp)
 80064b0:	dc000817 	ldw	r16,32(sp)
 80064b4:	dec01204 	addi	sp,sp,72
 80064b8:	f800283a 	ret
 80064bc:	2404b03a 	or	r2,r4,r16
 80064c0:	202b883a 	mov	r21,r4
 80064c4:	10004426 	beq	r2,zero,80065d8 <__muldf3+0x2ec>
 80064c8:	80015126 	beq	r16,zero,8006a10 <__muldf3+0x724>
 80064cc:	8009883a 	mov	r4,r16
 80064d0:	d9800715 	stw	r6,28(sp)
 80064d4:	d9c00215 	stw	r7,8(sp)
 80064d8:	da400415 	stw	r9,16(sp)
 80064dc:	8006cb40 	call	8006cb4 <__clzsi2>
 80064e0:	d9800717 	ldw	r6,28(sp)
 80064e4:	d9c00217 	ldw	r7,8(sp)
 80064e8:	da400417 	ldw	r9,16(sp)
 80064ec:	113ffd44 	addi	r4,r2,-11
 80064f0:	00c00704 	movi	r3,28
 80064f4:	19014216 	blt	r3,r4,8006a00 <__muldf3+0x714>
 80064f8:	00c00744 	movi	r3,29
 80064fc:	15bffe04 	addi	r22,r2,-8
 8006500:	1907c83a 	sub	r3,r3,r4
 8006504:	85a0983a 	sll	r16,r16,r22
 8006508:	a8c6d83a 	srl	r3,r21,r3
 800650c:	adac983a 	sll	r22,r21,r22
 8006510:	1c20b03a 	or	r16,r3,r16
 8006514:	1080fcc4 	addi	r2,r2,1011
 8006518:	00a9c83a 	sub	r20,zero,r2
 800651c:	002b883a 	mov	r21,zero
 8006520:	000b883a 	mov	r5,zero
 8006524:	003f9006 	br	8006368 <__alt_data_end+0xfc006368>
 8006528:	3446b03a 	or	r3,r6,r17
 800652c:	1800281e 	bne	r3,zero,80065d0 <__muldf3+0x2e4>
 8006530:	0023883a 	mov	r17,zero
 8006534:	0025883a 	mov	r18,zero
 8006538:	01c00084 	movi	r7,2
 800653c:	003f9c06 	br	80063b0 <__alt_data_end+0xfc0063b0>
 8006540:	3446b03a 	or	r3,r6,r17
 8006544:	18001e26 	beq	r3,zero,80065c0 <__muldf3+0x2d4>
 8006548:	88012126 	beq	r17,zero,80069d0 <__muldf3+0x6e4>
 800654c:	8809883a 	mov	r4,r17
 8006550:	d9400215 	stw	r5,8(sp)
 8006554:	d9800715 	stw	r6,28(sp)
 8006558:	da400415 	stw	r9,16(sp)
 800655c:	da800315 	stw	r10,12(sp)
 8006560:	8006cb40 	call	8006cb4 <__clzsi2>
 8006564:	d9400217 	ldw	r5,8(sp)
 8006568:	d9800717 	ldw	r6,28(sp)
 800656c:	da400417 	ldw	r9,16(sp)
 8006570:	da800317 	ldw	r10,12(sp)
 8006574:	113ffd44 	addi	r4,r2,-11
 8006578:	00c00704 	movi	r3,28
 800657c:	19011016 	blt	r3,r4,80069c0 <__muldf3+0x6d4>
 8006580:	00c00744 	movi	r3,29
 8006584:	14bffe04 	addi	r18,r2,-8
 8006588:	1907c83a 	sub	r3,r3,r4
 800658c:	8ca2983a 	sll	r17,r17,r18
 8006590:	30c6d83a 	srl	r3,r6,r3
 8006594:	34a4983a 	sll	r18,r6,r18
 8006598:	1c62b03a 	or	r17,r3,r17
 800659c:	1080fcc4 	addi	r2,r2,1011
 80065a0:	0085c83a 	sub	r2,zero,r2
 80065a4:	000f883a 	mov	r7,zero
 80065a8:	003f8106 	br	80063b0 <__alt_data_end+0xfc0063b0>
 80065ac:	3027883a 	mov	r19,r6
 80065b0:	0081ffc4 	movi	r2,2047
 80065b4:	0021883a 	mov	r16,zero
 80065b8:	002d883a 	mov	r22,zero
 80065bc:	003faa06 	br	8006468 <__alt_data_end+0xfc006468>
 80065c0:	0023883a 	mov	r17,zero
 80065c4:	0025883a 	mov	r18,zero
 80065c8:	01c00044 	movi	r7,1
 80065cc:	003f7806 	br	80063b0 <__alt_data_end+0xfc0063b0>
 80065d0:	01c000c4 	movi	r7,3
 80065d4:	003f7606 	br	80063b0 <__alt_data_end+0xfc0063b0>
 80065d8:	05400104 	movi	r21,4
 80065dc:	0021883a 	mov	r16,zero
 80065e0:	002d883a 	mov	r22,zero
 80065e4:	01400044 	movi	r5,1
 80065e8:	003f5f06 	br	8006368 <__alt_data_end+0xfc006368>
 80065ec:	05400304 	movi	r21,12
 80065f0:	014000c4 	movi	r5,3
 80065f4:	003f5c06 	br	8006368 <__alt_data_end+0xfc006368>
 80065f8:	04000434 	movhi	r16,16
 80065fc:	0027883a 	mov	r19,zero
 8006600:	843fffc4 	addi	r16,r16,-1
 8006604:	05bfffc4 	movi	r22,-1
 8006608:	0081ffc4 	movi	r2,2047
 800660c:	003f9606 	br	8006468 <__alt_data_end+0xfc006468>
 8006610:	8023883a 	mov	r17,r16
 8006614:	b025883a 	mov	r18,r22
 8006618:	280f883a 	mov	r7,r5
 800661c:	003f8806 	br	8006440 <__alt_data_end+0xfc006440>
 8006620:	8023883a 	mov	r17,r16
 8006624:	b025883a 	mov	r18,r22
 8006628:	480d883a 	mov	r6,r9
 800662c:	280f883a 	mov	r7,r5
 8006630:	003f8306 	br	8006440 <__alt_data_end+0xfc006440>
 8006634:	b026d43a 	srli	r19,r22,16
 8006638:	902ed43a 	srli	r23,r18,16
 800663c:	b5bfffcc 	andi	r22,r22,65535
 8006640:	94bfffcc 	andi	r18,r18,65535
 8006644:	b00b883a 	mov	r5,r22
 8006648:	9009883a 	mov	r4,r18
 800664c:	d8c00515 	stw	r3,20(sp)
 8006650:	d9800715 	stw	r6,28(sp)
 8006654:	da000615 	stw	r8,24(sp)
 8006658:	80057940 	call	8005794 <__mulsi3>
 800665c:	980b883a 	mov	r5,r19
 8006660:	9009883a 	mov	r4,r18
 8006664:	1029883a 	mov	r20,r2
 8006668:	80057940 	call	8005794 <__mulsi3>
 800666c:	b80b883a 	mov	r5,r23
 8006670:	9809883a 	mov	r4,r19
 8006674:	102b883a 	mov	r21,r2
 8006678:	80057940 	call	8005794 <__mulsi3>
 800667c:	b809883a 	mov	r4,r23
 8006680:	b00b883a 	mov	r5,r22
 8006684:	1039883a 	mov	fp,r2
 8006688:	80057940 	call	8005794 <__mulsi3>
 800668c:	a008d43a 	srli	r4,r20,16
 8006690:	1545883a 	add	r2,r2,r21
 8006694:	d8c00517 	ldw	r3,20(sp)
 8006698:	2085883a 	add	r2,r4,r2
 800669c:	d9800717 	ldw	r6,28(sp)
 80066a0:	da000617 	ldw	r8,24(sp)
 80066a4:	1540022e 	bgeu	r2,r21,80066b0 <__muldf3+0x3c4>
 80066a8:	01000074 	movhi	r4,1
 80066ac:	e139883a 	add	fp,fp,r4
 80066b0:	100e943a 	slli	r7,r2,16
 80066b4:	1004d43a 	srli	r2,r2,16
 80066b8:	882ad43a 	srli	r21,r17,16
 80066bc:	a53fffcc 	andi	r20,r20,65535
 80066c0:	8c7fffcc 	andi	r17,r17,65535
 80066c4:	3d29883a 	add	r20,r7,r20
 80066c8:	b00b883a 	mov	r5,r22
 80066cc:	8809883a 	mov	r4,r17
 80066d0:	d8c00515 	stw	r3,20(sp)
 80066d4:	d9800715 	stw	r6,28(sp)
 80066d8:	da000615 	stw	r8,24(sp)
 80066dc:	dd000115 	stw	r20,4(sp)
 80066e0:	d8800015 	stw	r2,0(sp)
 80066e4:	80057940 	call	8005794 <__mulsi3>
 80066e8:	980b883a 	mov	r5,r19
 80066ec:	8809883a 	mov	r4,r17
 80066f0:	d8800215 	stw	r2,8(sp)
 80066f4:	80057940 	call	8005794 <__mulsi3>
 80066f8:	9809883a 	mov	r4,r19
 80066fc:	a80b883a 	mov	r5,r21
 8006700:	1029883a 	mov	r20,r2
 8006704:	80057940 	call	8005794 <__mulsi3>
 8006708:	b00b883a 	mov	r5,r22
 800670c:	a809883a 	mov	r4,r21
 8006710:	d8800415 	stw	r2,16(sp)
 8006714:	80057940 	call	8005794 <__mulsi3>
 8006718:	d9c00217 	ldw	r7,8(sp)
 800671c:	1505883a 	add	r2,r2,r20
 8006720:	d8c00517 	ldw	r3,20(sp)
 8006724:	3826d43a 	srli	r19,r7,16
 8006728:	d9800717 	ldw	r6,28(sp)
 800672c:	da000617 	ldw	r8,24(sp)
 8006730:	9885883a 	add	r2,r19,r2
 8006734:	da400417 	ldw	r9,16(sp)
 8006738:	1500022e 	bgeu	r2,r20,8006744 <__muldf3+0x458>
 800673c:	01000074 	movhi	r4,1
 8006740:	4913883a 	add	r9,r9,r4
 8006744:	1028d43a 	srli	r20,r2,16
 8006748:	1004943a 	slli	r2,r2,16
 800674c:	802cd43a 	srli	r22,r16,16
 8006750:	843fffcc 	andi	r16,r16,65535
 8006754:	3cffffcc 	andi	r19,r7,65535
 8006758:	9009883a 	mov	r4,r18
 800675c:	800b883a 	mov	r5,r16
 8006760:	a269883a 	add	r20,r20,r9
 8006764:	d8c00515 	stw	r3,20(sp)
 8006768:	d9800715 	stw	r6,28(sp)
 800676c:	da000615 	stw	r8,24(sp)
 8006770:	14e7883a 	add	r19,r2,r19
 8006774:	80057940 	call	8005794 <__mulsi3>
 8006778:	9009883a 	mov	r4,r18
 800677c:	b00b883a 	mov	r5,r22
 8006780:	d8800315 	stw	r2,12(sp)
 8006784:	80057940 	call	8005794 <__mulsi3>
 8006788:	b809883a 	mov	r4,r23
 800678c:	b00b883a 	mov	r5,r22
 8006790:	d8800215 	stw	r2,8(sp)
 8006794:	80057940 	call	8005794 <__mulsi3>
 8006798:	b80b883a 	mov	r5,r23
 800679c:	8009883a 	mov	r4,r16
 80067a0:	d8800415 	stw	r2,16(sp)
 80067a4:	80057940 	call	8005794 <__mulsi3>
 80067a8:	da800317 	ldw	r10,12(sp)
 80067ac:	d9c00217 	ldw	r7,8(sp)
 80067b0:	d9000017 	ldw	r4,0(sp)
 80067b4:	502ed43a 	srli	r23,r10,16
 80067b8:	11c5883a 	add	r2,r2,r7
 80067bc:	24e5883a 	add	r18,r4,r19
 80067c0:	b885883a 	add	r2,r23,r2
 80067c4:	d8c00517 	ldw	r3,20(sp)
 80067c8:	d9800717 	ldw	r6,28(sp)
 80067cc:	da000617 	ldw	r8,24(sp)
 80067d0:	da400417 	ldw	r9,16(sp)
 80067d4:	11c0022e 	bgeu	r2,r7,80067e0 <__muldf3+0x4f4>
 80067d8:	01000074 	movhi	r4,1
 80067dc:	4913883a 	add	r9,r9,r4
 80067e0:	100ed43a 	srli	r7,r2,16
 80067e4:	1004943a 	slli	r2,r2,16
 80067e8:	55ffffcc 	andi	r23,r10,65535
 80067ec:	3a53883a 	add	r9,r7,r9
 80067f0:	8809883a 	mov	r4,r17
 80067f4:	800b883a 	mov	r5,r16
 80067f8:	d8c00515 	stw	r3,20(sp)
 80067fc:	d9800715 	stw	r6,28(sp)
 8006800:	da000615 	stw	r8,24(sp)
 8006804:	da400415 	stw	r9,16(sp)
 8006808:	15ef883a 	add	r23,r2,r23
 800680c:	80057940 	call	8005794 <__mulsi3>
 8006810:	8809883a 	mov	r4,r17
 8006814:	b00b883a 	mov	r5,r22
 8006818:	d8800215 	stw	r2,8(sp)
 800681c:	80057940 	call	8005794 <__mulsi3>
 8006820:	b00b883a 	mov	r5,r22
 8006824:	a809883a 	mov	r4,r21
 8006828:	d8800315 	stw	r2,12(sp)
 800682c:	80057940 	call	8005794 <__mulsi3>
 8006830:	8009883a 	mov	r4,r16
 8006834:	a80b883a 	mov	r5,r21
 8006838:	1023883a 	mov	r17,r2
 800683c:	80057940 	call	8005794 <__mulsi3>
 8006840:	d9c00217 	ldw	r7,8(sp)
 8006844:	da800317 	ldw	r10,12(sp)
 8006848:	d8c00517 	ldw	r3,20(sp)
 800684c:	3808d43a 	srli	r4,r7,16
 8006850:	1285883a 	add	r2,r2,r10
 8006854:	d9800717 	ldw	r6,28(sp)
 8006858:	2085883a 	add	r2,r4,r2
 800685c:	da000617 	ldw	r8,24(sp)
 8006860:	da400417 	ldw	r9,16(sp)
 8006864:	1280022e 	bgeu	r2,r10,8006870 <__muldf3+0x584>
 8006868:	01000074 	movhi	r4,1
 800686c:	8923883a 	add	r17,r17,r4
 8006870:	1008943a 	slli	r4,r2,16
 8006874:	39ffffcc 	andi	r7,r7,65535
 8006878:	e4b9883a 	add	fp,fp,r18
 800687c:	21cf883a 	add	r7,r4,r7
 8006880:	e4e7803a 	cmpltu	r19,fp,r19
 8006884:	3d0f883a 	add	r7,r7,r20
 8006888:	bf39883a 	add	fp,r23,fp
 800688c:	99c9883a 	add	r4,r19,r7
 8006890:	e5ef803a 	cmpltu	r23,fp,r23
 8006894:	490b883a 	add	r5,r9,r4
 8006898:	1004d43a 	srli	r2,r2,16
 800689c:	b965883a 	add	r18,r23,r5
 80068a0:	24c9803a 	cmpltu	r4,r4,r19
 80068a4:	3d29803a 	cmpltu	r20,r7,r20
 80068a8:	a128b03a 	or	r20,r20,r4
 80068ac:	95ef803a 	cmpltu	r23,r18,r23
 80068b0:	2a53803a 	cmpltu	r9,r5,r9
 80068b4:	a0a9883a 	add	r20,r20,r2
 80068b8:	4deeb03a 	or	r23,r9,r23
 80068bc:	a5ef883a 	add	r23,r20,r23
 80068c0:	bc63883a 	add	r17,r23,r17
 80068c4:	e004927a 	slli	r2,fp,9
 80068c8:	d9000117 	ldw	r4,4(sp)
 80068cc:	882e927a 	slli	r23,r17,9
 80068d0:	9022d5fa 	srli	r17,r18,23
 80068d4:	e038d5fa 	srli	fp,fp,23
 80068d8:	1104b03a 	or	r2,r2,r4
 80068dc:	9024927a 	slli	r18,r18,9
 80068e0:	1004c03a 	cmpne	r2,r2,zero
 80068e4:	bc62b03a 	or	r17,r23,r17
 80068e8:	1738b03a 	or	fp,r2,fp
 80068ec:	8880402c 	andhi	r2,r17,256
 80068f0:	e4a4b03a 	or	r18,fp,r18
 80068f4:	10000726 	beq	r2,zero,8006914 <__muldf3+0x628>
 80068f8:	9006d07a 	srli	r3,r18,1
 80068fc:	880497fa 	slli	r2,r17,31
 8006900:	9480004c 	andi	r18,r18,1
 8006904:	8822d07a 	srli	r17,r17,1
 8006908:	1ca4b03a 	or	r18,r3,r18
 800690c:	14a4b03a 	or	r18,r2,r18
 8006910:	4007883a 	mov	r3,r8
 8006914:	1880ffc4 	addi	r2,r3,1023
 8006918:	0080460e 	bge	zero,r2,8006a34 <__muldf3+0x748>
 800691c:	910001cc 	andi	r4,r18,7
 8006920:	20000726 	beq	r4,zero,8006940 <__muldf3+0x654>
 8006924:	910003cc 	andi	r4,r18,15
 8006928:	01400104 	movi	r5,4
 800692c:	21400426 	beq	r4,r5,8006940 <__muldf3+0x654>
 8006930:	9149883a 	add	r4,r18,r5
 8006934:	24a5803a 	cmpltu	r18,r4,r18
 8006938:	8ca3883a 	add	r17,r17,r18
 800693c:	2025883a 	mov	r18,r4
 8006940:	8900402c 	andhi	r4,r17,256
 8006944:	20000426 	beq	r4,zero,8006958 <__muldf3+0x66c>
 8006948:	18810004 	addi	r2,r3,1024
 800694c:	00ffc034 	movhi	r3,65280
 8006950:	18ffffc4 	addi	r3,r3,-1
 8006954:	88e2703a 	and	r17,r17,r3
 8006958:	00c1ff84 	movi	r3,2046
 800695c:	18bf1316 	blt	r3,r2,80065ac <__alt_data_end+0xfc0065ac>
 8006960:	882c977a 	slli	r22,r17,29
 8006964:	9024d0fa 	srli	r18,r18,3
 8006968:	8822927a 	slli	r17,r17,9
 800696c:	1081ffcc 	andi	r2,r2,2047
 8006970:	b4acb03a 	or	r22,r22,r18
 8006974:	8820d33a 	srli	r16,r17,12
 8006978:	3027883a 	mov	r19,r6
 800697c:	003eba06 	br	8006468 <__alt_data_end+0xfc006468>
 8006980:	8080022c 	andhi	r2,r16,8
 8006984:	10000926 	beq	r2,zero,80069ac <__muldf3+0x6c0>
 8006988:	8880022c 	andhi	r2,r17,8
 800698c:	1000071e 	bne	r2,zero,80069ac <__muldf3+0x6c0>
 8006990:	00800434 	movhi	r2,16
 8006994:	8c000234 	orhi	r16,r17,8
 8006998:	10bfffc4 	addi	r2,r2,-1
 800699c:	e027883a 	mov	r19,fp
 80069a0:	80a0703a 	and	r16,r16,r2
 80069a4:	902d883a 	mov	r22,r18
 80069a8:	003f1706 	br	8006608 <__alt_data_end+0xfc006608>
 80069ac:	00800434 	movhi	r2,16
 80069b0:	84000234 	orhi	r16,r16,8
 80069b4:	10bfffc4 	addi	r2,r2,-1
 80069b8:	80a0703a 	and	r16,r16,r2
 80069bc:	003f1206 	br	8006608 <__alt_data_end+0xfc006608>
 80069c0:	147ff604 	addi	r17,r2,-40
 80069c4:	3462983a 	sll	r17,r6,r17
 80069c8:	0025883a 	mov	r18,zero
 80069cc:	003ef306 	br	800659c <__alt_data_end+0xfc00659c>
 80069d0:	3009883a 	mov	r4,r6
 80069d4:	d9400215 	stw	r5,8(sp)
 80069d8:	d9800715 	stw	r6,28(sp)
 80069dc:	da400415 	stw	r9,16(sp)
 80069e0:	da800315 	stw	r10,12(sp)
 80069e4:	8006cb40 	call	8006cb4 <__clzsi2>
 80069e8:	10800804 	addi	r2,r2,32
 80069ec:	da800317 	ldw	r10,12(sp)
 80069f0:	da400417 	ldw	r9,16(sp)
 80069f4:	d9800717 	ldw	r6,28(sp)
 80069f8:	d9400217 	ldw	r5,8(sp)
 80069fc:	003edd06 	br	8006574 <__alt_data_end+0xfc006574>
 8006a00:	143ff604 	addi	r16,r2,-40
 8006a04:	ac20983a 	sll	r16,r21,r16
 8006a08:	002d883a 	mov	r22,zero
 8006a0c:	003ec106 	br	8006514 <__alt_data_end+0xfc006514>
 8006a10:	d9800715 	stw	r6,28(sp)
 8006a14:	d9c00215 	stw	r7,8(sp)
 8006a18:	da400415 	stw	r9,16(sp)
 8006a1c:	8006cb40 	call	8006cb4 <__clzsi2>
 8006a20:	10800804 	addi	r2,r2,32
 8006a24:	da400417 	ldw	r9,16(sp)
 8006a28:	d9c00217 	ldw	r7,8(sp)
 8006a2c:	d9800717 	ldw	r6,28(sp)
 8006a30:	003eae06 	br	80064ec <__alt_data_end+0xfc0064ec>
 8006a34:	00c00044 	movi	r3,1
 8006a38:	1887c83a 	sub	r3,r3,r2
 8006a3c:	01000e04 	movi	r4,56
 8006a40:	20fe8516 	blt	r4,r3,8006458 <__alt_data_end+0xfc006458>
 8006a44:	010007c4 	movi	r4,31
 8006a48:	20c01b16 	blt	r4,r3,8006ab8 <__muldf3+0x7cc>
 8006a4c:	00800804 	movi	r2,32
 8006a50:	10c5c83a 	sub	r2,r2,r3
 8006a54:	888a983a 	sll	r5,r17,r2
 8006a58:	90c8d83a 	srl	r4,r18,r3
 8006a5c:	9084983a 	sll	r2,r18,r2
 8006a60:	88e2d83a 	srl	r17,r17,r3
 8006a64:	2906b03a 	or	r3,r5,r4
 8006a68:	1004c03a 	cmpne	r2,r2,zero
 8006a6c:	1886b03a 	or	r3,r3,r2
 8006a70:	188001cc 	andi	r2,r3,7
 8006a74:	10000726 	beq	r2,zero,8006a94 <__muldf3+0x7a8>
 8006a78:	188003cc 	andi	r2,r3,15
 8006a7c:	01000104 	movi	r4,4
 8006a80:	11000426 	beq	r2,r4,8006a94 <__muldf3+0x7a8>
 8006a84:	1805883a 	mov	r2,r3
 8006a88:	10c00104 	addi	r3,r2,4
 8006a8c:	1885803a 	cmpltu	r2,r3,r2
 8006a90:	88a3883a 	add	r17,r17,r2
 8006a94:	8880202c 	andhi	r2,r17,128
 8006a98:	10001c26 	beq	r2,zero,8006b0c <__muldf3+0x820>
 8006a9c:	3027883a 	mov	r19,r6
 8006aa0:	00800044 	movi	r2,1
 8006aa4:	0021883a 	mov	r16,zero
 8006aa8:	002d883a 	mov	r22,zero
 8006aac:	003e6e06 	br	8006468 <__alt_data_end+0xfc006468>
 8006ab0:	4007883a 	mov	r3,r8
 8006ab4:	003f9706 	br	8006914 <__alt_data_end+0xfc006914>
 8006ab8:	017ff844 	movi	r5,-31
 8006abc:	2885c83a 	sub	r2,r5,r2
 8006ac0:	888ad83a 	srl	r5,r17,r2
 8006ac4:	00800804 	movi	r2,32
 8006ac8:	18801a26 	beq	r3,r2,8006b34 <__muldf3+0x848>
 8006acc:	01001004 	movi	r4,64
 8006ad0:	20c7c83a 	sub	r3,r4,r3
 8006ad4:	88e2983a 	sll	r17,r17,r3
 8006ad8:	8ca4b03a 	or	r18,r17,r18
 8006adc:	9004c03a 	cmpne	r2,r18,zero
 8006ae0:	2884b03a 	or	r2,r5,r2
 8006ae4:	144001cc 	andi	r17,r2,7
 8006ae8:	88000d1e 	bne	r17,zero,8006b20 <__muldf3+0x834>
 8006aec:	0021883a 	mov	r16,zero
 8006af0:	102cd0fa 	srli	r22,r2,3
 8006af4:	3027883a 	mov	r19,r6
 8006af8:	0005883a 	mov	r2,zero
 8006afc:	b46cb03a 	or	r22,r22,r17
 8006b00:	003e5906 	br	8006468 <__alt_data_end+0xfc006468>
 8006b04:	1007883a 	mov	r3,r2
 8006b08:	0023883a 	mov	r17,zero
 8006b0c:	8820927a 	slli	r16,r17,9
 8006b10:	1805883a 	mov	r2,r3
 8006b14:	8822977a 	slli	r17,r17,29
 8006b18:	8020d33a 	srli	r16,r16,12
 8006b1c:	003ff406 	br	8006af0 <__alt_data_end+0xfc006af0>
 8006b20:	10c003cc 	andi	r3,r2,15
 8006b24:	01000104 	movi	r4,4
 8006b28:	193ff626 	beq	r3,r4,8006b04 <__alt_data_end+0xfc006b04>
 8006b2c:	0023883a 	mov	r17,zero
 8006b30:	003fd506 	br	8006a88 <__alt_data_end+0xfc006a88>
 8006b34:	0023883a 	mov	r17,zero
 8006b38:	003fe706 	br	8006ad8 <__alt_data_end+0xfc006ad8>
 8006b3c:	00800434 	movhi	r2,16
 8006b40:	8c000234 	orhi	r16,r17,8
 8006b44:	10bfffc4 	addi	r2,r2,-1
 8006b48:	3027883a 	mov	r19,r6
 8006b4c:	80a0703a 	and	r16,r16,r2
 8006b50:	902d883a 	mov	r22,r18
 8006b54:	003eac06 	br	8006608 <__alt_data_end+0xfc006608>

08006b58 <__fixdfsi>:
 8006b58:	280cd53a 	srli	r6,r5,20
 8006b5c:	00c00434 	movhi	r3,16
 8006b60:	18ffffc4 	addi	r3,r3,-1
 8006b64:	3181ffcc 	andi	r6,r6,2047
 8006b68:	01c0ff84 	movi	r7,1022
 8006b6c:	28c6703a 	and	r3,r5,r3
 8006b70:	280ad7fa 	srli	r5,r5,31
 8006b74:	3980120e 	bge	r7,r6,8006bc0 <__fixdfsi+0x68>
 8006b78:	00810744 	movi	r2,1053
 8006b7c:	11800c16 	blt	r2,r6,8006bb0 <__fixdfsi+0x58>
 8006b80:	00810cc4 	movi	r2,1075
 8006b84:	1185c83a 	sub	r2,r2,r6
 8006b88:	01c007c4 	movi	r7,31
 8006b8c:	18c00434 	orhi	r3,r3,16
 8006b90:	38800d16 	blt	r7,r2,8006bc8 <__fixdfsi+0x70>
 8006b94:	31befb44 	addi	r6,r6,-1043
 8006b98:	2084d83a 	srl	r2,r4,r2
 8006b9c:	1986983a 	sll	r3,r3,r6
 8006ba0:	1884b03a 	or	r2,r3,r2
 8006ba4:	28000726 	beq	r5,zero,8006bc4 <__fixdfsi+0x6c>
 8006ba8:	0085c83a 	sub	r2,zero,r2
 8006bac:	f800283a 	ret
 8006bb0:	00a00034 	movhi	r2,32768
 8006bb4:	10bfffc4 	addi	r2,r2,-1
 8006bb8:	2885883a 	add	r2,r5,r2
 8006bbc:	f800283a 	ret
 8006bc0:	0005883a 	mov	r2,zero
 8006bc4:	f800283a 	ret
 8006bc8:	008104c4 	movi	r2,1043
 8006bcc:	1185c83a 	sub	r2,r2,r6
 8006bd0:	1884d83a 	srl	r2,r3,r2
 8006bd4:	003ff306 	br	8006ba4 <__alt_data_end+0xfc006ba4>

08006bd8 <__floatsidf>:
 8006bd8:	defffd04 	addi	sp,sp,-12
 8006bdc:	dfc00215 	stw	ra,8(sp)
 8006be0:	dc400115 	stw	r17,4(sp)
 8006be4:	dc000015 	stw	r16,0(sp)
 8006be8:	20002b26 	beq	r4,zero,8006c98 <__floatsidf+0xc0>
 8006bec:	2023883a 	mov	r17,r4
 8006bf0:	2020d7fa 	srli	r16,r4,31
 8006bf4:	20002d16 	blt	r4,zero,8006cac <__floatsidf+0xd4>
 8006bf8:	8809883a 	mov	r4,r17
 8006bfc:	8006cb40 	call	8006cb4 <__clzsi2>
 8006c00:	01410784 	movi	r5,1054
 8006c04:	288bc83a 	sub	r5,r5,r2
 8006c08:	01010cc4 	movi	r4,1075
 8006c0c:	2149c83a 	sub	r4,r4,r5
 8006c10:	00c007c4 	movi	r3,31
 8006c14:	1900160e 	bge	r3,r4,8006c70 <__floatsidf+0x98>
 8006c18:	00c104c4 	movi	r3,1043
 8006c1c:	1947c83a 	sub	r3,r3,r5
 8006c20:	88c6983a 	sll	r3,r17,r3
 8006c24:	00800434 	movhi	r2,16
 8006c28:	10bfffc4 	addi	r2,r2,-1
 8006c2c:	1886703a 	and	r3,r3,r2
 8006c30:	2941ffcc 	andi	r5,r5,2047
 8006c34:	800d883a 	mov	r6,r16
 8006c38:	0005883a 	mov	r2,zero
 8006c3c:	280a953a 	slli	r5,r5,20
 8006c40:	31803fcc 	andi	r6,r6,255
 8006c44:	01000434 	movhi	r4,16
 8006c48:	300c97fa 	slli	r6,r6,31
 8006c4c:	213fffc4 	addi	r4,r4,-1
 8006c50:	1906703a 	and	r3,r3,r4
 8006c54:	1946b03a 	or	r3,r3,r5
 8006c58:	1986b03a 	or	r3,r3,r6
 8006c5c:	dfc00217 	ldw	ra,8(sp)
 8006c60:	dc400117 	ldw	r17,4(sp)
 8006c64:	dc000017 	ldw	r16,0(sp)
 8006c68:	dec00304 	addi	sp,sp,12
 8006c6c:	f800283a 	ret
 8006c70:	00c002c4 	movi	r3,11
 8006c74:	1887c83a 	sub	r3,r3,r2
 8006c78:	88c6d83a 	srl	r3,r17,r3
 8006c7c:	8904983a 	sll	r2,r17,r4
 8006c80:	01000434 	movhi	r4,16
 8006c84:	213fffc4 	addi	r4,r4,-1
 8006c88:	2941ffcc 	andi	r5,r5,2047
 8006c8c:	1906703a 	and	r3,r3,r4
 8006c90:	800d883a 	mov	r6,r16
 8006c94:	003fe906 	br	8006c3c <__alt_data_end+0xfc006c3c>
 8006c98:	000d883a 	mov	r6,zero
 8006c9c:	000b883a 	mov	r5,zero
 8006ca0:	0007883a 	mov	r3,zero
 8006ca4:	0005883a 	mov	r2,zero
 8006ca8:	003fe406 	br	8006c3c <__alt_data_end+0xfc006c3c>
 8006cac:	0123c83a 	sub	r17,zero,r4
 8006cb0:	003fd106 	br	8006bf8 <__alt_data_end+0xfc006bf8>

08006cb4 <__clzsi2>:
 8006cb4:	00bfffd4 	movui	r2,65535
 8006cb8:	11000536 	bltu	r2,r4,8006cd0 <__clzsi2+0x1c>
 8006cbc:	00803fc4 	movi	r2,255
 8006cc0:	11000f36 	bltu	r2,r4,8006d00 <__clzsi2+0x4c>
 8006cc4:	00800804 	movi	r2,32
 8006cc8:	0007883a 	mov	r3,zero
 8006ccc:	00000506 	br	8006ce4 <__clzsi2+0x30>
 8006cd0:	00804034 	movhi	r2,256
 8006cd4:	10bfffc4 	addi	r2,r2,-1
 8006cd8:	11000c2e 	bgeu	r2,r4,8006d0c <__clzsi2+0x58>
 8006cdc:	00800204 	movi	r2,8
 8006ce0:	00c00604 	movi	r3,24
 8006ce4:	20c8d83a 	srl	r4,r4,r3
 8006ce8:	00c20074 	movhi	r3,2049
 8006cec:	18ef8604 	addi	r3,r3,-16872
 8006cf0:	1909883a 	add	r4,r3,r4
 8006cf4:	20c00003 	ldbu	r3,0(r4)
 8006cf8:	10c5c83a 	sub	r2,r2,r3
 8006cfc:	f800283a 	ret
 8006d00:	00800604 	movi	r2,24
 8006d04:	00c00204 	movi	r3,8
 8006d08:	003ff606 	br	8006ce4 <__alt_data_end+0xfc006ce4>
 8006d0c:	00800404 	movi	r2,16
 8006d10:	1007883a 	mov	r3,r2
 8006d14:	003ff306 	br	8006ce4 <__alt_data_end+0xfc006ce4>

08006d18 <_printf_r>:
 8006d18:	defffd04 	addi	sp,sp,-12
 8006d1c:	dfc00015 	stw	ra,0(sp)
 8006d20:	d9800115 	stw	r6,4(sp)
 8006d24:	d9c00215 	stw	r7,8(sp)
 8006d28:	20c00217 	ldw	r3,8(r4)
 8006d2c:	01820034 	movhi	r6,2048
 8006d30:	319d0104 	addi	r6,r6,29700
 8006d34:	19800115 	stw	r6,4(r3)
 8006d38:	280d883a 	mov	r6,r5
 8006d3c:	21400217 	ldw	r5,8(r4)
 8006d40:	d9c00104 	addi	r7,sp,4
 8006d44:	8006ebc0 	call	8006ebc <___vfprintf_internal_r>
 8006d48:	dfc00017 	ldw	ra,0(sp)
 8006d4c:	dec00304 	addi	sp,sp,12
 8006d50:	f800283a 	ret

08006d54 <printf>:
 8006d54:	defffc04 	addi	sp,sp,-16
 8006d58:	dfc00015 	stw	ra,0(sp)
 8006d5c:	d9400115 	stw	r5,4(sp)
 8006d60:	d9800215 	stw	r6,8(sp)
 8006d64:	d9c00315 	stw	r7,12(sp)
 8006d68:	00820074 	movhi	r2,2049
 8006d6c:	10bbbb04 	addi	r2,r2,-4372
 8006d70:	10800017 	ldw	r2,0(r2)
 8006d74:	01420034 	movhi	r5,2048
 8006d78:	295d0104 	addi	r5,r5,29700
 8006d7c:	10c00217 	ldw	r3,8(r2)
 8006d80:	d9800104 	addi	r6,sp,4
 8006d84:	19400115 	stw	r5,4(r3)
 8006d88:	200b883a 	mov	r5,r4
 8006d8c:	11000217 	ldw	r4,8(r2)
 8006d90:	80073e80 	call	80073e8 <__vfprintf_internal>
 8006d94:	dfc00017 	ldw	ra,0(sp)
 8006d98:	dec00404 	addi	sp,sp,16
 8006d9c:	f800283a 	ret

08006da0 <_puts_r>:
 8006da0:	defffd04 	addi	sp,sp,-12
 8006da4:	dc000015 	stw	r16,0(sp)
 8006da8:	2021883a 	mov	r16,r4
 8006dac:	2809883a 	mov	r4,r5
 8006db0:	dfc00215 	stw	ra,8(sp)
 8006db4:	dc400115 	stw	r17,4(sp)
 8006db8:	2823883a 	mov	r17,r5
 8006dbc:	8006e340 	call	8006e34 <strlen>
 8006dc0:	81400217 	ldw	r5,8(r16)
 8006dc4:	01020034 	movhi	r4,2048
 8006dc8:	211d0104 	addi	r4,r4,29700
 8006dcc:	29000115 	stw	r4,4(r5)
 8006dd0:	100f883a 	mov	r7,r2
 8006dd4:	880d883a 	mov	r6,r17
 8006dd8:	8009883a 	mov	r4,r16
 8006ddc:	80074040 	call	8007404 <__sfvwrite_small_dev>
 8006de0:	00ffffc4 	movi	r3,-1
 8006de4:	10c00926 	beq	r2,r3,8006e0c <_puts_r+0x6c>
 8006de8:	81400217 	ldw	r5,8(r16)
 8006dec:	01820074 	movhi	r6,2049
 8006df0:	01c00044 	movi	r7,1
 8006df4:	28800117 	ldw	r2,4(r5)
 8006df8:	31afc604 	addi	r6,r6,-16616
 8006dfc:	8009883a 	mov	r4,r16
 8006e00:	103ee83a 	callr	r2
 8006e04:	10bfffe0 	cmpeqi	r2,r2,-1
 8006e08:	0085c83a 	sub	r2,zero,r2
 8006e0c:	dfc00217 	ldw	ra,8(sp)
 8006e10:	dc400117 	ldw	r17,4(sp)
 8006e14:	dc000017 	ldw	r16,0(sp)
 8006e18:	dec00304 	addi	sp,sp,12
 8006e1c:	f800283a 	ret

08006e20 <puts>:
 8006e20:	00820074 	movhi	r2,2049
 8006e24:	10bbbb04 	addi	r2,r2,-4372
 8006e28:	200b883a 	mov	r5,r4
 8006e2c:	11000017 	ldw	r4,0(r2)
 8006e30:	8006da01 	jmpi	8006da0 <_puts_r>

08006e34 <strlen>:
 8006e34:	2005883a 	mov	r2,r4
 8006e38:	10c00007 	ldb	r3,0(r2)
 8006e3c:	18000226 	beq	r3,zero,8006e48 <strlen+0x14>
 8006e40:	10800044 	addi	r2,r2,1
 8006e44:	003ffc06 	br	8006e38 <__alt_data_end+0xfc006e38>
 8006e48:	1105c83a 	sub	r2,r2,r4
 8006e4c:	f800283a 	ret

08006e50 <print_repeat>:
 8006e50:	defffb04 	addi	sp,sp,-20
 8006e54:	dc800315 	stw	r18,12(sp)
 8006e58:	dc400215 	stw	r17,8(sp)
 8006e5c:	dc000115 	stw	r16,4(sp)
 8006e60:	dfc00415 	stw	ra,16(sp)
 8006e64:	2025883a 	mov	r18,r4
 8006e68:	2823883a 	mov	r17,r5
 8006e6c:	d9800005 	stb	r6,0(sp)
 8006e70:	3821883a 	mov	r16,r7
 8006e74:	04000a0e 	bge	zero,r16,8006ea0 <print_repeat+0x50>
 8006e78:	88800117 	ldw	r2,4(r17)
 8006e7c:	01c00044 	movi	r7,1
 8006e80:	d80d883a 	mov	r6,sp
 8006e84:	880b883a 	mov	r5,r17
 8006e88:	9009883a 	mov	r4,r18
 8006e8c:	103ee83a 	callr	r2
 8006e90:	843fffc4 	addi	r16,r16,-1
 8006e94:	103ff726 	beq	r2,zero,8006e74 <__alt_data_end+0xfc006e74>
 8006e98:	00bfffc4 	movi	r2,-1
 8006e9c:	00000106 	br	8006ea4 <print_repeat+0x54>
 8006ea0:	0005883a 	mov	r2,zero
 8006ea4:	dfc00417 	ldw	ra,16(sp)
 8006ea8:	dc800317 	ldw	r18,12(sp)
 8006eac:	dc400217 	ldw	r17,8(sp)
 8006eb0:	dc000117 	ldw	r16,4(sp)
 8006eb4:	dec00504 	addi	sp,sp,20
 8006eb8:	f800283a 	ret

08006ebc <___vfprintf_internal_r>:
 8006ebc:	deffe504 	addi	sp,sp,-108
 8006ec0:	d8c00804 	addi	r3,sp,32
 8006ec4:	ddc01815 	stw	r23,96(sp)
 8006ec8:	dd801715 	stw	r22,92(sp)
 8006ecc:	dd401615 	stw	r21,88(sp)
 8006ed0:	dd001515 	stw	r20,84(sp)
 8006ed4:	dcc01415 	stw	r19,80(sp)
 8006ed8:	dc801315 	stw	r18,76(sp)
 8006edc:	dc401215 	stw	r17,72(sp)
 8006ee0:	dc001115 	stw	r16,68(sp)
 8006ee4:	dfc01a15 	stw	ra,104(sp)
 8006ee8:	df001915 	stw	fp,100(sp)
 8006eec:	2029883a 	mov	r20,r4
 8006ef0:	2823883a 	mov	r17,r5
 8006ef4:	382d883a 	mov	r22,r7
 8006ef8:	d9800f15 	stw	r6,60(sp)
 8006efc:	0021883a 	mov	r16,zero
 8006f00:	d8000e15 	stw	zero,56(sp)
 8006f04:	d8000a15 	stw	zero,40(sp)
 8006f08:	002b883a 	mov	r21,zero
 8006f0c:	0027883a 	mov	r19,zero
 8006f10:	0025883a 	mov	r18,zero
 8006f14:	d8000c15 	stw	zero,48(sp)
 8006f18:	d8000b15 	stw	zero,44(sp)
 8006f1c:	002f883a 	mov	r23,zero
 8006f20:	d8c00915 	stw	r3,36(sp)
 8006f24:	d8c00f17 	ldw	r3,60(sp)
 8006f28:	19000003 	ldbu	r4,0(r3)
 8006f2c:	20803fcc 	andi	r2,r4,255
 8006f30:	1080201c 	xori	r2,r2,128
 8006f34:	10bfe004 	addi	r2,r2,-128
 8006f38:	10011e26 	beq	r2,zero,80073b4 <___vfprintf_internal_r+0x4f8>
 8006f3c:	00c00044 	movi	r3,1
 8006f40:	b8c01426 	beq	r23,r3,8006f94 <___vfprintf_internal_r+0xd8>
 8006f44:	1dc00216 	blt	r3,r23,8006f50 <___vfprintf_internal_r+0x94>
 8006f48:	b8000626 	beq	r23,zero,8006f64 <___vfprintf_internal_r+0xa8>
 8006f4c:	00011506 	br	80073a4 <___vfprintf_internal_r+0x4e8>
 8006f50:	01400084 	movi	r5,2
 8006f54:	b9401d26 	beq	r23,r5,8006fcc <___vfprintf_internal_r+0x110>
 8006f58:	014000c4 	movi	r5,3
 8006f5c:	b9402b26 	beq	r23,r5,800700c <___vfprintf_internal_r+0x150>
 8006f60:	00011006 	br	80073a4 <___vfprintf_internal_r+0x4e8>
 8006f64:	01400944 	movi	r5,37
 8006f68:	1140fc26 	beq	r2,r5,800735c <___vfprintf_internal_r+0x4a0>
 8006f6c:	88800117 	ldw	r2,4(r17)
 8006f70:	d9000005 	stb	r4,0(sp)
 8006f74:	01c00044 	movi	r7,1
 8006f78:	d80d883a 	mov	r6,sp
 8006f7c:	880b883a 	mov	r5,r17
 8006f80:	a009883a 	mov	r4,r20
 8006f84:	103ee83a 	callr	r2
 8006f88:	1000d81e 	bne	r2,zero,80072ec <___vfprintf_internal_r+0x430>
 8006f8c:	84000044 	addi	r16,r16,1
 8006f90:	00010406 	br	80073a4 <___vfprintf_internal_r+0x4e8>
 8006f94:	01400c04 	movi	r5,48
 8006f98:	1140fa26 	beq	r2,r5,8007384 <___vfprintf_internal_r+0x4c8>
 8006f9c:	01400944 	movi	r5,37
 8006fa0:	11400a1e 	bne	r2,r5,8006fcc <___vfprintf_internal_r+0x110>
 8006fa4:	d8800005 	stb	r2,0(sp)
 8006fa8:	88800117 	ldw	r2,4(r17)
 8006fac:	b80f883a 	mov	r7,r23
 8006fb0:	d80d883a 	mov	r6,sp
 8006fb4:	880b883a 	mov	r5,r17
 8006fb8:	a009883a 	mov	r4,r20
 8006fbc:	103ee83a 	callr	r2
 8006fc0:	1000ca1e 	bne	r2,zero,80072ec <___vfprintf_internal_r+0x430>
 8006fc4:	84000044 	addi	r16,r16,1
 8006fc8:	0000f506 	br	80073a0 <___vfprintf_internal_r+0x4e4>
 8006fcc:	25fff404 	addi	r23,r4,-48
 8006fd0:	bdc03fcc 	andi	r23,r23,255
 8006fd4:	00c00244 	movi	r3,9
 8006fd8:	1dc00936 	bltu	r3,r23,8007000 <___vfprintf_internal_r+0x144>
 8006fdc:	00bfffc4 	movi	r2,-1
 8006fe0:	90800426 	beq	r18,r2,8006ff4 <___vfprintf_internal_r+0x138>
 8006fe4:	01400284 	movi	r5,10
 8006fe8:	9009883a 	mov	r4,r18
 8006fec:	80057940 	call	8005794 <__mulsi3>
 8006ff0:	00000106 	br	8006ff8 <___vfprintf_internal_r+0x13c>
 8006ff4:	0005883a 	mov	r2,zero
 8006ff8:	b8a5883a 	add	r18,r23,r2
 8006ffc:	0000e206 	br	8007388 <___vfprintf_internal_r+0x4cc>
 8007000:	01400b84 	movi	r5,46
 8007004:	1140e426 	beq	r2,r5,8007398 <___vfprintf_internal_r+0x4dc>
 8007008:	05c00084 	movi	r23,2
 800700c:	213ff404 	addi	r4,r4,-48
 8007010:	27003fcc 	andi	fp,r4,255
 8007014:	00c00244 	movi	r3,9
 8007018:	1f000936 	bltu	r3,fp,8007040 <___vfprintf_internal_r+0x184>
 800701c:	00bfffc4 	movi	r2,-1
 8007020:	98800426 	beq	r19,r2,8007034 <___vfprintf_internal_r+0x178>
 8007024:	01400284 	movi	r5,10
 8007028:	9809883a 	mov	r4,r19
 800702c:	80057940 	call	8005794 <__mulsi3>
 8007030:	00000106 	br	8007038 <___vfprintf_internal_r+0x17c>
 8007034:	0005883a 	mov	r2,zero
 8007038:	e0a7883a 	add	r19,fp,r2
 800703c:	0000d906 	br	80073a4 <___vfprintf_internal_r+0x4e8>
 8007040:	00c01b04 	movi	r3,108
 8007044:	10c0d226 	beq	r2,r3,8007390 <___vfprintf_internal_r+0x4d4>
 8007048:	013fffc4 	movi	r4,-1
 800704c:	99000226 	beq	r19,r4,8007058 <___vfprintf_internal_r+0x19c>
 8007050:	d8000b15 	stw	zero,44(sp)
 8007054:	00000106 	br	800705c <___vfprintf_internal_r+0x1a0>
 8007058:	04c00044 	movi	r19,1
 800705c:	01001a44 	movi	r4,105
 8007060:	11001626 	beq	r2,r4,80070bc <___vfprintf_internal_r+0x200>
 8007064:	20800916 	blt	r4,r2,800708c <___vfprintf_internal_r+0x1d0>
 8007068:	010018c4 	movi	r4,99
 800706c:	11008826 	beq	r2,r4,8007290 <___vfprintf_internal_r+0x3d4>
 8007070:	01001904 	movi	r4,100
 8007074:	11001126 	beq	r2,r4,80070bc <___vfprintf_internal_r+0x200>
 8007078:	01001604 	movi	r4,88
 800707c:	1100c81e 	bne	r2,r4,80073a0 <___vfprintf_internal_r+0x4e4>
 8007080:	00c00044 	movi	r3,1
 8007084:	d8c00e15 	stw	r3,56(sp)
 8007088:	00001506 	br	80070e0 <___vfprintf_internal_r+0x224>
 800708c:	01001cc4 	movi	r4,115
 8007090:	11009826 	beq	r2,r4,80072f4 <___vfprintf_internal_r+0x438>
 8007094:	20800416 	blt	r4,r2,80070a8 <___vfprintf_internal_r+0x1ec>
 8007098:	01001bc4 	movi	r4,111
 800709c:	1100c01e 	bne	r2,r4,80073a0 <___vfprintf_internal_r+0x4e4>
 80070a0:	05400204 	movi	r21,8
 80070a4:	00000f06 	br	80070e4 <___vfprintf_internal_r+0x228>
 80070a8:	01001d44 	movi	r4,117
 80070ac:	11000d26 	beq	r2,r4,80070e4 <___vfprintf_internal_r+0x228>
 80070b0:	01001e04 	movi	r4,120
 80070b4:	11000a26 	beq	r2,r4,80070e0 <___vfprintf_internal_r+0x224>
 80070b8:	0000b906 	br	80073a0 <___vfprintf_internal_r+0x4e4>
 80070bc:	d8c00a17 	ldw	r3,40(sp)
 80070c0:	b7000104 	addi	fp,r22,4
 80070c4:	18000726 	beq	r3,zero,80070e4 <___vfprintf_internal_r+0x228>
 80070c8:	df000d15 	stw	fp,52(sp)
 80070cc:	b5c00017 	ldw	r23,0(r22)
 80070d0:	b800080e 	bge	r23,zero,80070f4 <___vfprintf_internal_r+0x238>
 80070d4:	05efc83a 	sub	r23,zero,r23
 80070d8:	02400044 	movi	r9,1
 80070dc:	00000606 	br	80070f8 <___vfprintf_internal_r+0x23c>
 80070e0:	05400404 	movi	r21,16
 80070e4:	b0c00104 	addi	r3,r22,4
 80070e8:	d8c00d15 	stw	r3,52(sp)
 80070ec:	b5c00017 	ldw	r23,0(r22)
 80070f0:	d8000a15 	stw	zero,40(sp)
 80070f4:	0013883a 	mov	r9,zero
 80070f8:	d839883a 	mov	fp,sp
 80070fc:	b8001726 	beq	r23,zero,800715c <___vfprintf_internal_r+0x2a0>
 8007100:	a80b883a 	mov	r5,r21
 8007104:	b809883a 	mov	r4,r23
 8007108:	da401015 	stw	r9,64(sp)
 800710c:	80056d80 	call	80056d8 <__udivsi3>
 8007110:	a80b883a 	mov	r5,r21
 8007114:	1009883a 	mov	r4,r2
 8007118:	102d883a 	mov	r22,r2
 800711c:	80057940 	call	8005794 <__mulsi3>
 8007120:	b885c83a 	sub	r2,r23,r2
 8007124:	00c00244 	movi	r3,9
 8007128:	da401017 	ldw	r9,64(sp)
 800712c:	18800216 	blt	r3,r2,8007138 <___vfprintf_internal_r+0x27c>
 8007130:	10800c04 	addi	r2,r2,48
 8007134:	00000506 	br	800714c <___vfprintf_internal_r+0x290>
 8007138:	d8c00e17 	ldw	r3,56(sp)
 800713c:	18000226 	beq	r3,zero,8007148 <___vfprintf_internal_r+0x28c>
 8007140:	10800dc4 	addi	r2,r2,55
 8007144:	00000106 	br	800714c <___vfprintf_internal_r+0x290>
 8007148:	108015c4 	addi	r2,r2,87
 800714c:	e0800005 	stb	r2,0(fp)
 8007150:	b02f883a 	mov	r23,r22
 8007154:	e7000044 	addi	fp,fp,1
 8007158:	003fe806 	br	80070fc <__alt_data_end+0xfc0070fc>
 800715c:	e6efc83a 	sub	r23,fp,sp
 8007160:	9dc5c83a 	sub	r2,r19,r23
 8007164:	0080090e 	bge	zero,r2,800718c <___vfprintf_internal_r+0x2d0>
 8007168:	e085883a 	add	r2,fp,r2
 800716c:	01400c04 	movi	r5,48
 8007170:	d8c00917 	ldw	r3,36(sp)
 8007174:	e009883a 	mov	r4,fp
 8007178:	e0c0032e 	bgeu	fp,r3,8007188 <___vfprintf_internal_r+0x2cc>
 800717c:	e7000044 	addi	fp,fp,1
 8007180:	21400005 	stb	r5,0(r4)
 8007184:	e0bffa1e 	bne	fp,r2,8007170 <__alt_data_end+0xfc007170>
 8007188:	e6efc83a 	sub	r23,fp,sp
 800718c:	d8c00b17 	ldw	r3,44(sp)
 8007190:	4dd1883a 	add	r8,r9,r23
 8007194:	922dc83a 	sub	r22,r18,r8
 8007198:	18001626 	beq	r3,zero,80071f4 <___vfprintf_internal_r+0x338>
 800719c:	48000a26 	beq	r9,zero,80071c8 <___vfprintf_internal_r+0x30c>
 80071a0:	00800b44 	movi	r2,45
 80071a4:	d8800805 	stb	r2,32(sp)
 80071a8:	88800117 	ldw	r2,4(r17)
 80071ac:	01c00044 	movi	r7,1
 80071b0:	d9800804 	addi	r6,sp,32
 80071b4:	880b883a 	mov	r5,r17
 80071b8:	a009883a 	mov	r4,r20
 80071bc:	103ee83a 	callr	r2
 80071c0:	10004a1e 	bne	r2,zero,80072ec <___vfprintf_internal_r+0x430>
 80071c4:	84000044 	addi	r16,r16,1
 80071c8:	0580070e 	bge	zero,r22,80071e8 <___vfprintf_internal_r+0x32c>
 80071cc:	b00f883a 	mov	r7,r22
 80071d0:	01800c04 	movi	r6,48
 80071d4:	880b883a 	mov	r5,r17
 80071d8:	a009883a 	mov	r4,r20
 80071dc:	8006e500 	call	8006e50 <print_repeat>
 80071e0:	1000421e 	bne	r2,zero,80072ec <___vfprintf_internal_r+0x430>
 80071e4:	85a1883a 	add	r16,r16,r22
 80071e8:	e02d883a 	mov	r22,fp
 80071ec:	bf2fc83a 	sub	r23,r23,fp
 80071f0:	00002006 	br	8007274 <___vfprintf_internal_r+0x3b8>
 80071f4:	0580090e 	bge	zero,r22,800721c <___vfprintf_internal_r+0x360>
 80071f8:	b00f883a 	mov	r7,r22
 80071fc:	01800804 	movi	r6,32
 8007200:	880b883a 	mov	r5,r17
 8007204:	a009883a 	mov	r4,r20
 8007208:	da401015 	stw	r9,64(sp)
 800720c:	8006e500 	call	8006e50 <print_repeat>
 8007210:	da401017 	ldw	r9,64(sp)
 8007214:	1000351e 	bne	r2,zero,80072ec <___vfprintf_internal_r+0x430>
 8007218:	85a1883a 	add	r16,r16,r22
 800721c:	483ff226 	beq	r9,zero,80071e8 <__alt_data_end+0xfc0071e8>
 8007220:	00800b44 	movi	r2,45
 8007224:	d8800805 	stb	r2,32(sp)
 8007228:	88800117 	ldw	r2,4(r17)
 800722c:	01c00044 	movi	r7,1
 8007230:	d9800804 	addi	r6,sp,32
 8007234:	880b883a 	mov	r5,r17
 8007238:	a009883a 	mov	r4,r20
 800723c:	103ee83a 	callr	r2
 8007240:	10002a1e 	bne	r2,zero,80072ec <___vfprintf_internal_r+0x430>
 8007244:	84000044 	addi	r16,r16,1
 8007248:	003fe706 	br	80071e8 <__alt_data_end+0xfc0071e8>
 800724c:	b5bfffc4 	addi	r22,r22,-1
 8007250:	b0800003 	ldbu	r2,0(r22)
 8007254:	01c00044 	movi	r7,1
 8007258:	d9800804 	addi	r6,sp,32
 800725c:	d8800805 	stb	r2,32(sp)
 8007260:	88800117 	ldw	r2,4(r17)
 8007264:	880b883a 	mov	r5,r17
 8007268:	a009883a 	mov	r4,r20
 800726c:	103ee83a 	callr	r2
 8007270:	10001e1e 	bne	r2,zero,80072ec <___vfprintf_internal_r+0x430>
 8007274:	8585c83a 	sub	r2,r16,r22
 8007278:	b5c9883a 	add	r4,r22,r23
 800727c:	e085883a 	add	r2,fp,r2
 8007280:	013ff216 	blt	zero,r4,800724c <__alt_data_end+0xfc00724c>
 8007284:	1021883a 	mov	r16,r2
 8007288:	dd800d17 	ldw	r22,52(sp)
 800728c:	00004406 	br	80073a0 <___vfprintf_internal_r+0x4e4>
 8007290:	00800044 	movi	r2,1
 8007294:	1480080e 	bge	r2,r18,80072b8 <___vfprintf_internal_r+0x3fc>
 8007298:	95ffffc4 	addi	r23,r18,-1
 800729c:	b80f883a 	mov	r7,r23
 80072a0:	01800804 	movi	r6,32
 80072a4:	880b883a 	mov	r5,r17
 80072a8:	a009883a 	mov	r4,r20
 80072ac:	8006e500 	call	8006e50 <print_repeat>
 80072b0:	10000e1e 	bne	r2,zero,80072ec <___vfprintf_internal_r+0x430>
 80072b4:	85e1883a 	add	r16,r16,r23
 80072b8:	b0800017 	ldw	r2,0(r22)
 80072bc:	01c00044 	movi	r7,1
 80072c0:	d80d883a 	mov	r6,sp
 80072c4:	d8800005 	stb	r2,0(sp)
 80072c8:	88800117 	ldw	r2,4(r17)
 80072cc:	880b883a 	mov	r5,r17
 80072d0:	a009883a 	mov	r4,r20
 80072d4:	b5c00104 	addi	r23,r22,4
 80072d8:	103ee83a 	callr	r2
 80072dc:	1000031e 	bne	r2,zero,80072ec <___vfprintf_internal_r+0x430>
 80072e0:	84000044 	addi	r16,r16,1
 80072e4:	b82d883a 	mov	r22,r23
 80072e8:	00002d06 	br	80073a0 <___vfprintf_internal_r+0x4e4>
 80072ec:	00bfffc4 	movi	r2,-1
 80072f0:	00003106 	br	80073b8 <___vfprintf_internal_r+0x4fc>
 80072f4:	b5c00017 	ldw	r23,0(r22)
 80072f8:	b7000104 	addi	fp,r22,4
 80072fc:	b809883a 	mov	r4,r23
 8007300:	8006e340 	call	8006e34 <strlen>
 8007304:	9091c83a 	sub	r8,r18,r2
 8007308:	102d883a 	mov	r22,r2
 800730c:	0200090e 	bge	zero,r8,8007334 <___vfprintf_internal_r+0x478>
 8007310:	400f883a 	mov	r7,r8
 8007314:	01800804 	movi	r6,32
 8007318:	880b883a 	mov	r5,r17
 800731c:	a009883a 	mov	r4,r20
 8007320:	da001015 	stw	r8,64(sp)
 8007324:	8006e500 	call	8006e50 <print_repeat>
 8007328:	da001017 	ldw	r8,64(sp)
 800732c:	103fef1e 	bne	r2,zero,80072ec <__alt_data_end+0xfc0072ec>
 8007330:	8221883a 	add	r16,r16,r8
 8007334:	88800117 	ldw	r2,4(r17)
 8007338:	b00f883a 	mov	r7,r22
 800733c:	b80d883a 	mov	r6,r23
 8007340:	880b883a 	mov	r5,r17
 8007344:	a009883a 	mov	r4,r20
 8007348:	103ee83a 	callr	r2
 800734c:	103fe71e 	bne	r2,zero,80072ec <__alt_data_end+0xfc0072ec>
 8007350:	85a1883a 	add	r16,r16,r22
 8007354:	e02d883a 	mov	r22,fp
 8007358:	00001106 	br	80073a0 <___vfprintf_internal_r+0x4e4>
 800735c:	00c00044 	movi	r3,1
 8007360:	04ffffc4 	movi	r19,-1
 8007364:	d8000e15 	stw	zero,56(sp)
 8007368:	d8c00a15 	stw	r3,40(sp)
 800736c:	05400284 	movi	r21,10
 8007370:	9825883a 	mov	r18,r19
 8007374:	d8000c15 	stw	zero,48(sp)
 8007378:	d8000b15 	stw	zero,44(sp)
 800737c:	182f883a 	mov	r23,r3
 8007380:	00000806 	br	80073a4 <___vfprintf_internal_r+0x4e8>
 8007384:	ddc00b15 	stw	r23,44(sp)
 8007388:	05c00084 	movi	r23,2
 800738c:	00000506 	br	80073a4 <___vfprintf_internal_r+0x4e8>
 8007390:	00c00044 	movi	r3,1
 8007394:	d8c00c15 	stw	r3,48(sp)
 8007398:	05c000c4 	movi	r23,3
 800739c:	00000106 	br	80073a4 <___vfprintf_internal_r+0x4e8>
 80073a0:	002f883a 	mov	r23,zero
 80073a4:	d8c00f17 	ldw	r3,60(sp)
 80073a8:	18c00044 	addi	r3,r3,1
 80073ac:	d8c00f15 	stw	r3,60(sp)
 80073b0:	003edc06 	br	8006f24 <__alt_data_end+0xfc006f24>
 80073b4:	8005883a 	mov	r2,r16
 80073b8:	dfc01a17 	ldw	ra,104(sp)
 80073bc:	df001917 	ldw	fp,100(sp)
 80073c0:	ddc01817 	ldw	r23,96(sp)
 80073c4:	dd801717 	ldw	r22,92(sp)
 80073c8:	dd401617 	ldw	r21,88(sp)
 80073cc:	dd001517 	ldw	r20,84(sp)
 80073d0:	dcc01417 	ldw	r19,80(sp)
 80073d4:	dc801317 	ldw	r18,76(sp)
 80073d8:	dc401217 	ldw	r17,72(sp)
 80073dc:	dc001117 	ldw	r16,68(sp)
 80073e0:	dec01b04 	addi	sp,sp,108
 80073e4:	f800283a 	ret

080073e8 <__vfprintf_internal>:
 80073e8:	00820074 	movhi	r2,2049
 80073ec:	10bbbb04 	addi	r2,r2,-4372
 80073f0:	300f883a 	mov	r7,r6
 80073f4:	280d883a 	mov	r6,r5
 80073f8:	200b883a 	mov	r5,r4
 80073fc:	11000017 	ldw	r4,0(r2)
 8007400:	8006ebc1 	jmpi	8006ebc <___vfprintf_internal_r>

08007404 <__sfvwrite_small_dev>:
 8007404:	2880000b 	ldhu	r2,0(r5)
 8007408:	1080020c 	andi	r2,r2,8
 800740c:	10002126 	beq	r2,zero,8007494 <__sfvwrite_small_dev+0x90>
 8007410:	2880008f 	ldh	r2,2(r5)
 8007414:	defffa04 	addi	sp,sp,-24
 8007418:	dc000015 	stw	r16,0(sp)
 800741c:	dfc00515 	stw	ra,20(sp)
 8007420:	dd000415 	stw	r20,16(sp)
 8007424:	dcc00315 	stw	r19,12(sp)
 8007428:	dc800215 	stw	r18,8(sp)
 800742c:	dc400115 	stw	r17,4(sp)
 8007430:	2821883a 	mov	r16,r5
 8007434:	10001216 	blt	r2,zero,8007480 <__sfvwrite_small_dev+0x7c>
 8007438:	2027883a 	mov	r19,r4
 800743c:	3025883a 	mov	r18,r6
 8007440:	3823883a 	mov	r17,r7
 8007444:	05010004 	movi	r20,1024
 8007448:	04400b0e 	bge	zero,r17,8007478 <__sfvwrite_small_dev+0x74>
 800744c:	880f883a 	mov	r7,r17
 8007450:	a440010e 	bge	r20,r17,8007458 <__sfvwrite_small_dev+0x54>
 8007454:	01c10004 	movi	r7,1024
 8007458:	8140008f 	ldh	r5,2(r16)
 800745c:	900d883a 	mov	r6,r18
 8007460:	9809883a 	mov	r4,r19
 8007464:	80074bc0 	call	80074bc <_write_r>
 8007468:	0080050e 	bge	zero,r2,8007480 <__sfvwrite_small_dev+0x7c>
 800746c:	88a3c83a 	sub	r17,r17,r2
 8007470:	90a5883a 	add	r18,r18,r2
 8007474:	003ff406 	br	8007448 <__alt_data_end+0xfc007448>
 8007478:	0005883a 	mov	r2,zero
 800747c:	00000706 	br	800749c <__sfvwrite_small_dev+0x98>
 8007480:	8080000b 	ldhu	r2,0(r16)
 8007484:	10801014 	ori	r2,r2,64
 8007488:	8080000d 	sth	r2,0(r16)
 800748c:	00bfffc4 	movi	r2,-1
 8007490:	00000206 	br	800749c <__sfvwrite_small_dev+0x98>
 8007494:	00bfffc4 	movi	r2,-1
 8007498:	f800283a 	ret
 800749c:	dfc00517 	ldw	ra,20(sp)
 80074a0:	dd000417 	ldw	r20,16(sp)
 80074a4:	dcc00317 	ldw	r19,12(sp)
 80074a8:	dc800217 	ldw	r18,8(sp)
 80074ac:	dc400117 	ldw	r17,4(sp)
 80074b0:	dc000017 	ldw	r16,0(sp)
 80074b4:	dec00604 	addi	sp,sp,24
 80074b8:	f800283a 	ret

080074bc <_write_r>:
 80074bc:	defffd04 	addi	sp,sp,-12
 80074c0:	dc000015 	stw	r16,0(sp)
 80074c4:	04020074 	movhi	r16,2049
 80074c8:	dc400115 	stw	r17,4(sp)
 80074cc:	8407bb04 	addi	r16,r16,7916
 80074d0:	2023883a 	mov	r17,r4
 80074d4:	2809883a 	mov	r4,r5
 80074d8:	300b883a 	mov	r5,r6
 80074dc:	380d883a 	mov	r6,r7
 80074e0:	dfc00215 	stw	ra,8(sp)
 80074e4:	80000015 	stw	zero,0(r16)
 80074e8:	800788c0 	call	800788c <write>
 80074ec:	00ffffc4 	movi	r3,-1
 80074f0:	10c0031e 	bne	r2,r3,8007500 <_write_r+0x44>
 80074f4:	80c00017 	ldw	r3,0(r16)
 80074f8:	18000126 	beq	r3,zero,8007500 <_write_r+0x44>
 80074fc:	88c00015 	stw	r3,0(r17)
 8007500:	dfc00217 	ldw	ra,8(sp)
 8007504:	dc400117 	ldw	r17,4(sp)
 8007508:	dc000017 	ldw	r16,0(sp)
 800750c:	dec00304 	addi	sp,sp,12
 8007510:	f800283a 	ret

08007514 <alt_load_section>:
 8007514:	defffc04 	addi	sp,sp,-16
 8007518:	df000315 	stw	fp,12(sp)
 800751c:	df000304 	addi	fp,sp,12
 8007520:	e13ffd15 	stw	r4,-12(fp)
 8007524:	e17ffe15 	stw	r5,-8(fp)
 8007528:	e1bfff15 	stw	r6,-4(fp)
 800752c:	e0fffe17 	ldw	r3,-8(fp)
 8007530:	e0bffd17 	ldw	r2,-12(fp)
 8007534:	18800c26 	beq	r3,r2,8007568 <alt_load_section+0x54>
 8007538:	00000806 	br	800755c <alt_load_section+0x48>
 800753c:	e0bffe17 	ldw	r2,-8(fp)
 8007540:	10c00104 	addi	r3,r2,4
 8007544:	e0fffe15 	stw	r3,-8(fp)
 8007548:	e0fffd17 	ldw	r3,-12(fp)
 800754c:	19000104 	addi	r4,r3,4
 8007550:	e13ffd15 	stw	r4,-12(fp)
 8007554:	18c00017 	ldw	r3,0(r3)
 8007558:	10c00015 	stw	r3,0(r2)
 800755c:	e0fffe17 	ldw	r3,-8(fp)
 8007560:	e0bfff17 	ldw	r2,-4(fp)
 8007564:	18bff51e 	bne	r3,r2,800753c <__alt_data_end+0xfc00753c>
 8007568:	0001883a 	nop
 800756c:	e037883a 	mov	sp,fp
 8007570:	df000017 	ldw	fp,0(sp)
 8007574:	dec00104 	addi	sp,sp,4
 8007578:	f800283a 	ret

0800757c <alt_load>:
 800757c:	defffe04 	addi	sp,sp,-8
 8007580:	dfc00115 	stw	ra,4(sp)
 8007584:	df000015 	stw	fp,0(sp)
 8007588:	d839883a 	mov	fp,sp
 800758c:	01820074 	movhi	r6,2049
 8007590:	31bbc704 	addi	r6,r6,-4324
 8007594:	01420074 	movhi	r5,2049
 8007598:	296fdf04 	addi	r5,r5,-16516
 800759c:	01020074 	movhi	r4,2049
 80075a0:	213bc704 	addi	r4,r4,-4324
 80075a4:	80075140 	call	8007514 <alt_load_section>
 80075a8:	01820034 	movhi	r6,2048
 80075ac:	31808c04 	addi	r6,r6,560
 80075b0:	01420034 	movhi	r5,2048
 80075b4:	29400804 	addi	r5,r5,32
 80075b8:	01020034 	movhi	r4,2048
 80075bc:	21000804 	addi	r4,r4,32
 80075c0:	80075140 	call	8007514 <alt_load_section>
 80075c4:	01820074 	movhi	r6,2049
 80075c8:	31afdf04 	addi	r6,r6,-16516
 80075cc:	01420074 	movhi	r5,2049
 80075d0:	296e9704 	addi	r5,r5,-17828
 80075d4:	01020074 	movhi	r4,2049
 80075d8:	212e9704 	addi	r4,r4,-17828
 80075dc:	80075140 	call	8007514 <alt_load_section>
 80075e0:	800a7700 	call	800a770 <alt_dcache_flush_all>
 80075e4:	800a9ec0 	call	800a9ec <alt_icache_flush_all>
 80075e8:	0001883a 	nop
 80075ec:	e037883a 	mov	sp,fp
 80075f0:	dfc00117 	ldw	ra,4(sp)
 80075f4:	df000017 	ldw	fp,0(sp)
 80075f8:	dec00204 	addi	sp,sp,8
 80075fc:	f800283a 	ret

08007600 <alt_main>:
 8007600:	defffd04 	addi	sp,sp,-12
 8007604:	dfc00215 	stw	ra,8(sp)
 8007608:	df000115 	stw	fp,4(sp)
 800760c:	df000104 	addi	fp,sp,4
 8007610:	0009883a 	mov	r4,zero
 8007614:	80079c00 	call	80079c0 <alt_irq_init>
 8007618:	0001883a 	nop
 800761c:	80079f80 	call	80079f8 <alt_sys_init>
 8007620:	01820074 	movhi	r6,2049
 8007624:	31afc704 	addi	r6,r6,-16612
 8007628:	01420074 	movhi	r5,2049
 800762c:	296fc704 	addi	r5,r5,-16612
 8007630:	01020074 	movhi	r4,2049
 8007634:	212fc704 	addi	r4,r4,-16612
 8007638:	800ad900 	call	800ad90 <alt_io_redirect>
 800763c:	800a89c0 	call	800a89c <_do_ctors>
 8007640:	01020074 	movhi	r4,2049
 8007644:	212a3f04 	addi	r4,r4,-22276
 8007648:	800b6080 	call	800b608 <atexit>
 800764c:	d0ac0917 	ldw	r2,-20444(gp)
 8007650:	d0ec0a17 	ldw	r3,-20440(gp)
 8007654:	d12c0b17 	ldw	r4,-20436(gp)
 8007658:	200d883a 	mov	r6,r4
 800765c:	180b883a 	mov	r5,r3
 8007660:	1009883a 	mov	r4,r2
 8007664:	80026fc0 	call	80026fc <main>
 8007668:	e0bfff15 	stw	r2,-4(fp)
 800766c:	01000044 	movi	r4,1
 8007670:	800a6980 	call	800a698 <close>
 8007674:	e13fff17 	ldw	r4,-4(fp)
 8007678:	800b61c0 	call	800b61c <exit>

0800767c <alt_alarm_stop>:
 800767c:	defffa04 	addi	sp,sp,-24
 8007680:	df000515 	stw	fp,20(sp)
 8007684:	df000504 	addi	fp,sp,20
 8007688:	e13fff15 	stw	r4,-4(fp)
 800768c:	0005303a 	rdctl	r2,status
 8007690:	e0bffc15 	stw	r2,-16(fp)
 8007694:	e0fffc17 	ldw	r3,-16(fp)
 8007698:	00bfff84 	movi	r2,-2
 800769c:	1884703a 	and	r2,r3,r2
 80076a0:	1001703a 	wrctl	status,r2
 80076a4:	e0bffc17 	ldw	r2,-16(fp)
 80076a8:	e0bffb15 	stw	r2,-20(fp)
 80076ac:	e0bfff17 	ldw	r2,-4(fp)
 80076b0:	e0bffd15 	stw	r2,-12(fp)
 80076b4:	e0bffd17 	ldw	r2,-12(fp)
 80076b8:	10800017 	ldw	r2,0(r2)
 80076bc:	e0fffd17 	ldw	r3,-12(fp)
 80076c0:	18c00117 	ldw	r3,4(r3)
 80076c4:	10c00115 	stw	r3,4(r2)
 80076c8:	e0bffd17 	ldw	r2,-12(fp)
 80076cc:	10800117 	ldw	r2,4(r2)
 80076d0:	e0fffd17 	ldw	r3,-12(fp)
 80076d4:	18c00017 	ldw	r3,0(r3)
 80076d8:	10c00015 	stw	r3,0(r2)
 80076dc:	e0bffd17 	ldw	r2,-12(fp)
 80076e0:	e0fffd17 	ldw	r3,-12(fp)
 80076e4:	10c00115 	stw	r3,4(r2)
 80076e8:	e0bffd17 	ldw	r2,-12(fp)
 80076ec:	e0fffd17 	ldw	r3,-12(fp)
 80076f0:	10c00015 	stw	r3,0(r2)
 80076f4:	e0bffb17 	ldw	r2,-20(fp)
 80076f8:	e0bffe15 	stw	r2,-8(fp)
 80076fc:	e0bffe17 	ldw	r2,-8(fp)
 8007700:	1001703a 	wrctl	status,r2
 8007704:	0001883a 	nop
 8007708:	e037883a 	mov	sp,fp
 800770c:	df000017 	ldw	fp,0(sp)
 8007710:	dec00104 	addi	sp,sp,4
 8007714:	f800283a 	ret

08007718 <alt_tick>:
 8007718:	defffb04 	addi	sp,sp,-20
 800771c:	dfc00415 	stw	ra,16(sp)
 8007720:	df000315 	stw	fp,12(sp)
 8007724:	df000304 	addi	fp,sp,12
 8007728:	d0a00917 	ldw	r2,-32732(gp)
 800772c:	e0bffd15 	stw	r2,-12(fp)
 8007730:	d0ac0d17 	ldw	r2,-20428(gp)
 8007734:	10800044 	addi	r2,r2,1
 8007738:	d0ac0d15 	stw	r2,-20428(gp)
 800773c:	00002e06 	br	80077f8 <alt_tick+0xe0>
 8007740:	e0bffd17 	ldw	r2,-12(fp)
 8007744:	10800017 	ldw	r2,0(r2)
 8007748:	e0bffe15 	stw	r2,-8(fp)
 800774c:	e0bffd17 	ldw	r2,-12(fp)
 8007750:	10800403 	ldbu	r2,16(r2)
 8007754:	10803fcc 	andi	r2,r2,255
 8007758:	10000426 	beq	r2,zero,800776c <alt_tick+0x54>
 800775c:	d0ac0d17 	ldw	r2,-20428(gp)
 8007760:	1000021e 	bne	r2,zero,800776c <alt_tick+0x54>
 8007764:	e0bffd17 	ldw	r2,-12(fp)
 8007768:	10000405 	stb	zero,16(r2)
 800776c:	e0bffd17 	ldw	r2,-12(fp)
 8007770:	10800217 	ldw	r2,8(r2)
 8007774:	d0ec0d17 	ldw	r3,-20428(gp)
 8007778:	18801d36 	bltu	r3,r2,80077f0 <alt_tick+0xd8>
 800777c:	e0bffd17 	ldw	r2,-12(fp)
 8007780:	10800403 	ldbu	r2,16(r2)
 8007784:	10803fcc 	andi	r2,r2,255
 8007788:	1000191e 	bne	r2,zero,80077f0 <alt_tick+0xd8>
 800778c:	e0bffd17 	ldw	r2,-12(fp)
 8007790:	10800317 	ldw	r2,12(r2)
 8007794:	e0fffd17 	ldw	r3,-12(fp)
 8007798:	18c00517 	ldw	r3,20(r3)
 800779c:	1809883a 	mov	r4,r3
 80077a0:	103ee83a 	callr	r2
 80077a4:	e0bfff15 	stw	r2,-4(fp)
 80077a8:	e0bfff17 	ldw	r2,-4(fp)
 80077ac:	1000031e 	bne	r2,zero,80077bc <alt_tick+0xa4>
 80077b0:	e13ffd17 	ldw	r4,-12(fp)
 80077b4:	800767c0 	call	800767c <alt_alarm_stop>
 80077b8:	00000d06 	br	80077f0 <alt_tick+0xd8>
 80077bc:	e0bffd17 	ldw	r2,-12(fp)
 80077c0:	10c00217 	ldw	r3,8(r2)
 80077c4:	e0bfff17 	ldw	r2,-4(fp)
 80077c8:	1887883a 	add	r3,r3,r2
 80077cc:	e0bffd17 	ldw	r2,-12(fp)
 80077d0:	10c00215 	stw	r3,8(r2)
 80077d4:	e0bffd17 	ldw	r2,-12(fp)
 80077d8:	10c00217 	ldw	r3,8(r2)
 80077dc:	d0ac0d17 	ldw	r2,-20428(gp)
 80077e0:	1880032e 	bgeu	r3,r2,80077f0 <alt_tick+0xd8>
 80077e4:	e0bffd17 	ldw	r2,-12(fp)
 80077e8:	00c00044 	movi	r3,1
 80077ec:	10c00405 	stb	r3,16(r2)
 80077f0:	e0bffe17 	ldw	r2,-8(fp)
 80077f4:	e0bffd15 	stw	r2,-12(fp)
 80077f8:	e0fffd17 	ldw	r3,-12(fp)
 80077fc:	d0a00904 	addi	r2,gp,-32732
 8007800:	18bfcf1e 	bne	r3,r2,8007740 <__alt_data_end+0xfc007740>
 8007804:	0001883a 	nop
 8007808:	0001883a 	nop
 800780c:	e037883a 	mov	sp,fp
 8007810:	dfc00117 	ldw	ra,4(sp)
 8007814:	df000017 	ldw	fp,0(sp)
 8007818:	dec00204 	addi	sp,sp,8
 800781c:	f800283a 	ret

08007820 <usleep>:
 8007820:	defffd04 	addi	sp,sp,-12
 8007824:	dfc00215 	stw	ra,8(sp)
 8007828:	df000115 	stw	fp,4(sp)
 800782c:	df000104 	addi	fp,sp,4
 8007830:	e13fff15 	stw	r4,-4(fp)
 8007834:	e13fff17 	ldw	r4,-4(fp)
 8007838:	800a5040 	call	800a504 <alt_busy_sleep>
 800783c:	e037883a 	mov	sp,fp
 8007840:	dfc00117 	ldw	ra,4(sp)
 8007844:	df000017 	ldw	fp,0(sp)
 8007848:	dec00204 	addi	sp,sp,8
 800784c:	f800283a 	ret

08007850 <alt_get_errno>:
 8007850:	defffe04 	addi	sp,sp,-8
 8007854:	dfc00115 	stw	ra,4(sp)
 8007858:	df000015 	stw	fp,0(sp)
 800785c:	d839883a 	mov	fp,sp
 8007860:	d0a01217 	ldw	r2,-32696(gp)
 8007864:	10000326 	beq	r2,zero,8007874 <alt_get_errno+0x24>
 8007868:	d0a01217 	ldw	r2,-32696(gp)
 800786c:	103ee83a 	callr	r2
 8007870:	00000106 	br	8007878 <alt_get_errno+0x28>
 8007874:	d0ac0804 	addi	r2,gp,-20448
 8007878:	e037883a 	mov	sp,fp
 800787c:	dfc00117 	ldw	ra,4(sp)
 8007880:	df000017 	ldw	fp,0(sp)
 8007884:	dec00204 	addi	sp,sp,8
 8007888:	f800283a 	ret

0800788c <write>:
 800788c:	defff904 	addi	sp,sp,-28
 8007890:	dfc00615 	stw	ra,24(sp)
 8007894:	df000515 	stw	fp,20(sp)
 8007898:	df000504 	addi	fp,sp,20
 800789c:	e13ffd15 	stw	r4,-12(fp)
 80078a0:	e17ffe15 	stw	r5,-8(fp)
 80078a4:	e1bfff15 	stw	r6,-4(fp)
 80078a8:	e0bffd17 	ldw	r2,-12(fp)
 80078ac:	10000816 	blt	r2,zero,80078d0 <write+0x44>
 80078b0:	01400304 	movi	r5,12
 80078b4:	e13ffd17 	ldw	r4,-12(fp)
 80078b8:	80057940 	call	8005794 <__mulsi3>
 80078bc:	1007883a 	mov	r3,r2
 80078c0:	00820074 	movhi	r2,2049
 80078c4:	10bb5304 	addi	r2,r2,-4788
 80078c8:	1885883a 	add	r2,r3,r2
 80078cc:	00000106 	br	80078d4 <write+0x48>
 80078d0:	0005883a 	mov	r2,zero
 80078d4:	e0bffb15 	stw	r2,-20(fp)
 80078d8:	e0bffb17 	ldw	r2,-20(fp)
 80078dc:	10002126 	beq	r2,zero,8007964 <write+0xd8>
 80078e0:	e0bffb17 	ldw	r2,-20(fp)
 80078e4:	10800217 	ldw	r2,8(r2)
 80078e8:	108000cc 	andi	r2,r2,3
 80078ec:	10001826 	beq	r2,zero,8007950 <write+0xc4>
 80078f0:	e0bffb17 	ldw	r2,-20(fp)
 80078f4:	10800017 	ldw	r2,0(r2)
 80078f8:	10800617 	ldw	r2,24(r2)
 80078fc:	10001426 	beq	r2,zero,8007950 <write+0xc4>
 8007900:	e0bffb17 	ldw	r2,-20(fp)
 8007904:	10800017 	ldw	r2,0(r2)
 8007908:	10800617 	ldw	r2,24(r2)
 800790c:	e0ffff17 	ldw	r3,-4(fp)
 8007910:	180d883a 	mov	r6,r3
 8007914:	e17ffe17 	ldw	r5,-8(fp)
 8007918:	e13ffb17 	ldw	r4,-20(fp)
 800791c:	103ee83a 	callr	r2
 8007920:	e0bffc15 	stw	r2,-16(fp)
 8007924:	e0bffc17 	ldw	r2,-16(fp)
 8007928:	1000070e 	bge	r2,zero,8007948 <write+0xbc>
 800792c:	80078500 	call	8007850 <alt_get_errno>
 8007930:	1007883a 	mov	r3,r2
 8007934:	e0bffc17 	ldw	r2,-16(fp)
 8007938:	0085c83a 	sub	r2,zero,r2
 800793c:	18800015 	stw	r2,0(r3)
 8007940:	00bfffc4 	movi	r2,-1
 8007944:	00000c06 	br	8007978 <write+0xec>
 8007948:	e0bffc17 	ldw	r2,-16(fp)
 800794c:	00000a06 	br	8007978 <write+0xec>
 8007950:	80078500 	call	8007850 <alt_get_errno>
 8007954:	1007883a 	mov	r3,r2
 8007958:	00800344 	movi	r2,13
 800795c:	18800015 	stw	r2,0(r3)
 8007960:	00000406 	br	8007974 <write+0xe8>
 8007964:	80078500 	call	8007850 <alt_get_errno>
 8007968:	1007883a 	mov	r3,r2
 800796c:	00801444 	movi	r2,81
 8007970:	18800015 	stw	r2,0(r3)
 8007974:	00bfffc4 	movi	r2,-1
 8007978:	e037883a 	mov	sp,fp
 800797c:	dfc00117 	ldw	ra,4(sp)
 8007980:	df000017 	ldw	fp,0(sp)
 8007984:	dec00204 	addi	sp,sp,8
 8007988:	f800283a 	ret

0800798c <alt_dev_reg>:
 800798c:	defffd04 	addi	sp,sp,-12
 8007990:	dfc00215 	stw	ra,8(sp)
 8007994:	df000115 	stw	fp,4(sp)
 8007998:	df000104 	addi	fp,sp,4
 800799c:	e13fff15 	stw	r4,-4(fp)
 80079a0:	d1600f04 	addi	r5,gp,-32708
 80079a4:	e13fff17 	ldw	r4,-4(fp)
 80079a8:	800a7f80 	call	800a7f8 <alt_dev_llist_insert>
 80079ac:	e037883a 	mov	sp,fp
 80079b0:	dfc00117 	ldw	ra,4(sp)
 80079b4:	df000017 	ldw	fp,0(sp)
 80079b8:	dec00204 	addi	sp,sp,8
 80079bc:	f800283a 	ret

080079c0 <alt_irq_init>:
 80079c0:	defffd04 	addi	sp,sp,-12
 80079c4:	dfc00215 	stw	ra,8(sp)
 80079c8:	df000115 	stw	fp,4(sp)
 80079cc:	df000104 	addi	fp,sp,4
 80079d0:	e13fff15 	stw	r4,-4(fp)
 80079d4:	800b37c0 	call	800b37c <altera_nios2_gen2_irq_init>
 80079d8:	00800044 	movi	r2,1
 80079dc:	1001703a 	wrctl	status,r2
 80079e0:	0001883a 	nop
 80079e4:	e037883a 	mov	sp,fp
 80079e8:	dfc00117 	ldw	ra,4(sp)
 80079ec:	df000017 	ldw	fp,0(sp)
 80079f0:	dec00204 	addi	sp,sp,8
 80079f4:	f800283a 	ret

080079f8 <alt_sys_init>:
 80079f8:	defffe04 	addi	sp,sp,-8
 80079fc:	dfc00115 	stw	ra,4(sp)
 8007a00:	df000015 	stw	fp,0(sp)
 8007a04:	d839883a 	mov	fp,sp
 8007a08:	01c0fa04 	movi	r7,1000
 8007a0c:	01800084 	movi	r6,2
 8007a10:	000b883a 	mov	r5,zero
 8007a14:	01001004 	movi	r4,64
 8007a18:	800a35c0 	call	800a35c <alt_avalon_timer_sc_init>
 8007a1c:	01020074 	movhi	r4,2049
 8007a20:	21372304 	addi	r4,r4,-9076
 8007a24:	8007cb80 	call	8007cb8 <alt_avalon_i2c_init>
 8007a28:	01800044 	movi	r6,1
 8007a2c:	000b883a 	mov	r5,zero
 8007a30:	01020074 	movhi	r4,2049
 8007a34:	21373b04 	addi	r4,r4,-8980
 8007a38:	80097e40 	call	80097e4 <altera_avalon_jtag_uart_init>
 8007a3c:	01020074 	movhi	r4,2049
 8007a40:	21373104 	addi	r4,r4,-9020
 8007a44:	800798c0 	call	800798c <alt_dev_reg>
 8007a48:	0001883a 	nop
 8007a4c:	0001883a 	nop
 8007a50:	0001883a 	nop
 8007a54:	e037883a 	mov	sp,fp
 8007a58:	dfc00117 	ldw	ra,4(sp)
 8007a5c:	df000017 	ldw	fp,0(sp)
 8007a60:	dec00204 	addi	sp,sp,8
 8007a64:	f800283a 	ret

08007a68 <optional_irq_callback>:
 8007a68:	defff904 	addi	sp,sp,-28
 8007a6c:	dfc00615 	stw	ra,24(sp)
 8007a70:	df000515 	stw	fp,20(sp)
 8007a74:	df000504 	addi	fp,sp,20
 8007a78:	e13fff15 	stw	r4,-4(fp)
 8007a7c:	008000b4 	movhi	r2,2
 8007a80:	10a1a804 	addi	r2,r2,-31072
 8007a84:	e0bffb15 	stw	r2,-20(fp)
 8007a88:	e0bfff17 	ldw	r2,-4(fp)
 8007a8c:	e0bffc15 	stw	r2,-16(fp)
 8007a90:	e0bffc17 	ldw	r2,-16(fp)
 8007a94:	10800717 	ldw	r2,28(r2)
 8007a98:	e0bffd15 	stw	r2,-12(fp)
 8007a9c:	e0bffd17 	ldw	r2,-12(fp)
 8007aa0:	10800217 	ldw	r2,8(r2)
 8007aa4:	10800098 	cmpnei	r2,r2,2
 8007aa8:	1000251e 	bne	r2,zero,8007b40 <optional_irq_callback+0xd8>
 8007aac:	e0bffd17 	ldw	r2,-12(fp)
 8007ab0:	10c00017 	ldw	r3,0(r2)
 8007ab4:	e0bffd17 	ldw	r2,-12(fp)
 8007ab8:	10800117 	ldw	r2,4(r2)
 8007abc:	e13ffe04 	addi	r4,fp,-8
 8007ac0:	200f883a 	mov	r7,r4
 8007ac4:	100d883a 	mov	r6,r2
 8007ac8:	180b883a 	mov	r5,r3
 8007acc:	e13ffc17 	ldw	r4,-16(fp)
 8007ad0:	80082180 	call	8008218 <alt_avalon_i2c_rx_read_available>
 8007ad4:	e0bffd17 	ldw	r2,-12(fp)
 8007ad8:	10c00117 	ldw	r3,4(r2)
 8007adc:	e0bffe17 	ldw	r2,-8(fp)
 8007ae0:	1887c83a 	sub	r3,r3,r2
 8007ae4:	e0bffd17 	ldw	r2,-12(fp)
 8007ae8:	10c00115 	stw	r3,4(r2)
 8007aec:	e0bffd17 	ldw	r2,-12(fp)
 8007af0:	10c00017 	ldw	r3,0(r2)
 8007af4:	e0bffe17 	ldw	r2,-8(fp)
 8007af8:	1887883a 	add	r3,r3,r2
 8007afc:	e0bffd17 	ldw	r2,-12(fp)
 8007b00:	10c00015 	stw	r3,0(r2)
 8007b04:	e0bffd17 	ldw	r2,-12(fp)
 8007b08:	10800117 	ldw	r2,4(r2)
 8007b0c:	10000c26 	beq	r2,zero,8007b40 <optional_irq_callback+0xd8>
 8007b10:	01400704 	movi	r5,28
 8007b14:	e13ffc17 	ldw	r4,-16(fp)
 8007b18:	80093d00 	call	80093d0 <alt_avalon_i2c_int_clear>
 8007b1c:	01400084 	movi	r5,2
 8007b20:	e13ffc17 	ldw	r4,-16(fp)
 8007b24:	80094740 	call	8009474 <alt_avalon_i2c_int_enable>
 8007b28:	00000e06 	br	8007b64 <optional_irq_callback+0xfc>
 8007b2c:	e0bffb17 	ldw	r2,-20(fp)
 8007b30:	10bfffc4 	addi	r2,r2,-1
 8007b34:	e0bffb15 	stw	r2,-20(fp)
 8007b38:	e0bffb17 	ldw	r2,-20(fp)
 8007b3c:	10000426 	beq	r2,zero,8007b50 <optional_irq_callback+0xe8>
 8007b40:	e13ffc17 	ldw	r4,-16(fp)
 8007b44:	80081d40 	call	80081d4 <alt_avalon_i2c_is_busy>
 8007b48:	103ff81e 	bne	r2,zero,8007b2c <__alt_data_end+0xfc007b2c>
 8007b4c:	00000106 	br	8007b54 <optional_irq_callback+0xec>
 8007b50:	0001883a 	nop
 8007b54:	e13ffc17 	ldw	r4,-16(fp)
 8007b58:	8007e7c0 	call	8007e7c <alt_avalon_i2c_disable>
 8007b5c:	e0bffd17 	ldw	r2,-12(fp)
 8007b60:	10000215 	stw	zero,8(r2)
 8007b64:	e037883a 	mov	sp,fp
 8007b68:	dfc00117 	ldw	ra,4(sp)
 8007b6c:	df000017 	ldw	fp,0(sp)
 8007b70:	dec00204 	addi	sp,sp,8
 8007b74:	f800283a 	ret

08007b78 <alt_avalon_i2c_register_optional_irq_handler>:
 8007b78:	defffc04 	addi	sp,sp,-16
 8007b7c:	dfc00315 	stw	ra,12(sp)
 8007b80:	df000215 	stw	fp,8(sp)
 8007b84:	df000204 	addi	fp,sp,8
 8007b88:	e13ffe15 	stw	r4,-8(fp)
 8007b8c:	e17fff15 	stw	r5,-4(fp)
 8007b90:	e0bfff17 	ldw	r2,-4(fp)
 8007b94:	10000215 	stw	zero,8(r2)
 8007b98:	e1ffff17 	ldw	r7,-4(fp)
 8007b9c:	000d883a 	mov	r6,zero
 8007ba0:	01420034 	movhi	r5,2048
 8007ba4:	295e9a04 	addi	r5,r5,31336
 8007ba8:	e13ffe17 	ldw	r4,-8(fp)
 8007bac:	8007c640 	call	8007c64 <alt_avalon_i2c_register_callback>
 8007bb0:	0001883a 	nop
 8007bb4:	e037883a 	mov	sp,fp
 8007bb8:	dfc00117 	ldw	ra,4(sp)
 8007bbc:	df000017 	ldw	fp,0(sp)
 8007bc0:	dec00204 	addi	sp,sp,8
 8007bc4:	f800283a 	ret

08007bc8 <alt_avalon_i2c_irq>:
 8007bc8:	defff904 	addi	sp,sp,-28
 8007bcc:	dfc00615 	stw	ra,24(sp)
 8007bd0:	df000515 	stw	fp,20(sp)
 8007bd4:	df000504 	addi	fp,sp,20
 8007bd8:	e13fff15 	stw	r4,-4(fp)
 8007bdc:	e0bfff17 	ldw	r2,-4(fp)
 8007be0:	e0bffb15 	stw	r2,-20(fp)
 8007be4:	014007c4 	movi	r5,31
 8007be8:	e13ffb17 	ldw	r4,-20(fp)
 8007bec:	800940c0 	call	800940c <alt_avalon_i2c_int_disable>
 8007bf0:	01400704 	movi	r5,28
 8007bf4:	e13ffb17 	ldw	r4,-20(fp)
 8007bf8:	80093d00 	call	80093d0 <alt_avalon_i2c_int_clear>
 8007bfc:	e0bffb17 	ldw	r2,-20(fp)
 8007c00:	10800617 	ldw	r2,24(r2)
 8007c04:	10001126 	beq	r2,zero,8007c4c <alt_avalon_i2c_irq+0x84>
 8007c08:	0005303a 	rdctl	r2,status
 8007c0c:	e0bffd15 	stw	r2,-12(fp)
 8007c10:	e0fffd17 	ldw	r3,-12(fp)
 8007c14:	00bfff84 	movi	r2,-2
 8007c18:	1884703a 	and	r2,r3,r2
 8007c1c:	1001703a 	wrctl	status,r2
 8007c20:	e0bffd17 	ldw	r2,-12(fp)
 8007c24:	e0bffc15 	stw	r2,-16(fp)
 8007c28:	e0bffb17 	ldw	r2,-20(fp)
 8007c2c:	10800617 	ldw	r2,24(r2)
 8007c30:	e13ffb17 	ldw	r4,-20(fp)
 8007c34:	103ee83a 	callr	r2
 8007c38:	e0bffc17 	ldw	r2,-16(fp)
 8007c3c:	e0bffe15 	stw	r2,-8(fp)
 8007c40:	e0bffe17 	ldw	r2,-8(fp)
 8007c44:	1001703a 	wrctl	status,r2
 8007c48:	0001883a 	nop
 8007c4c:	0001883a 	nop
 8007c50:	e037883a 	mov	sp,fp
 8007c54:	dfc00117 	ldw	ra,4(sp)
 8007c58:	df000017 	ldw	fp,0(sp)
 8007c5c:	dec00204 	addi	sp,sp,8
 8007c60:	f800283a 	ret

08007c64 <alt_avalon_i2c_register_callback>:
 8007c64:	defffb04 	addi	sp,sp,-20
 8007c68:	df000415 	stw	fp,16(sp)
 8007c6c:	df000404 	addi	fp,sp,16
 8007c70:	e13ffc15 	stw	r4,-16(fp)
 8007c74:	e17ffd15 	stw	r5,-12(fp)
 8007c78:	e1bffe15 	stw	r6,-8(fp)
 8007c7c:	e1ffff15 	stw	r7,-4(fp)
 8007c80:	e0bffc17 	ldw	r2,-16(fp)
 8007c84:	e0fffd17 	ldw	r3,-12(fp)
 8007c88:	10c00615 	stw	r3,24(r2)
 8007c8c:	e0bffc17 	ldw	r2,-16(fp)
 8007c90:	e0ffff17 	ldw	r3,-4(fp)
 8007c94:	10c00715 	stw	r3,28(r2)
 8007c98:	e0bffc17 	ldw	r2,-16(fp)
 8007c9c:	e0fffe17 	ldw	r3,-8(fp)
 8007ca0:	10c00815 	stw	r3,32(r2)
 8007ca4:	0001883a 	nop
 8007ca8:	e037883a 	mov	sp,fp
 8007cac:	df000017 	ldw	fp,0(sp)
 8007cb0:	dec00104 	addi	sp,sp,4
 8007cb4:	f800283a 	ret

08007cb8 <alt_avalon_i2c_init>:
 8007cb8:	defff704 	addi	sp,sp,-36
 8007cbc:	dfc00815 	stw	ra,32(sp)
 8007cc0:	df000715 	stw	fp,28(sp)
 8007cc4:	df000704 	addi	fp,sp,28
 8007cc8:	e13fff15 	stw	r4,-4(fp)
 8007ccc:	e13fff17 	ldw	r4,-4(fp)
 8007cd0:	8007e7c0 	call	8007e7c <alt_avalon_i2c_disable>
 8007cd4:	014007c4 	movi	r5,31
 8007cd8:	e13fff17 	ldw	r4,-4(fp)
 8007cdc:	800940c0 	call	800940c <alt_avalon_i2c_int_disable>
 8007ce0:	01400704 	movi	r5,28
 8007ce4:	e13fff17 	ldw	r4,-4(fp)
 8007ce8:	80093d00 	call	80093d0 <alt_avalon_i2c_int_clear>
 8007cec:	014000c4 	movi	r5,3
 8007cf0:	e13fff17 	ldw	r4,-4(fp)
 8007cf4:	80096180 	call	8009618 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
 8007cf8:	014000c4 	movi	r5,3
 8007cfc:	e13fff17 	ldw	r4,-4(fp)
 8007d00:	80095680 	call	8009568 <alt_avalon_i2c_rx_fifo_threshold_set>
 8007d04:	e03ffc15 	stw	zero,-16(fp)
 8007d08:	e03ffb15 	stw	zero,-20(fp)
 8007d0c:	e0bffb04 	addi	r2,fp,-20
 8007d10:	018000b4 	movhi	r6,2
 8007d14:	31a1a804 	addi	r6,r6,-31072
 8007d18:	100b883a 	mov	r5,r2
 8007d1c:	e13fff17 	ldw	r4,-4(fp)
 8007d20:	80080d80 	call	80080d8 <alt_avalon_i2c_master_config_speed_set>
 8007d24:	e0bffb04 	addi	r2,fp,-20
 8007d28:	100b883a 	mov	r5,r2
 8007d2c:	e13fff17 	ldw	r4,-4(fp)
 8007d30:	8007f780 	call	8007f78 <alt_avalon_i2c_master_config_set>
 8007d34:	d1600b04 	addi	r5,gp,-32724
 8007d38:	e13fff17 	ldw	r4,-4(fp)
 8007d3c:	800a7f80 	call	800a7f8 <alt_dev_llist_insert>
 8007d40:	0005883a 	mov	r2,zero
 8007d44:	e0bffa15 	stw	r2,-24(fp)
 8007d48:	e0bffa17 	ldw	r2,-24(fp)
 8007d4c:	10000c1e 	bne	r2,zero,8007d80 <alt_avalon_i2c_init+0xc8>
 8007d50:	e0bfff17 	ldw	r2,-4(fp)
 8007d54:	10c00417 	ldw	r3,16(r2)
 8007d58:	e0bfff17 	ldw	r2,-4(fp)
 8007d5c:	10800517 	ldw	r2,20(r2)
 8007d60:	d8000015 	stw	zero,0(sp)
 8007d64:	e1ffff17 	ldw	r7,-4(fp)
 8007d68:	01820034 	movhi	r6,2048
 8007d6c:	319ef204 	addi	r6,r6,31688
 8007d70:	100b883a 	mov	r5,r2
 8007d74:	1809883a 	mov	r4,r3
 8007d78:	800aa0c0 	call	800aa0c <alt_ic_isr_register>
 8007d7c:	00000406 	br	8007d90 <alt_avalon_i2c_init+0xd8>
 8007d80:	01020074 	movhi	r4,2049
 8007d84:	212fd404 	addi	r4,r4,-16560
 8007d88:	800b0900 	call	800b090 <alt_printf>
 8007d8c:	0001883a 	nop
 8007d90:	e037883a 	mov	sp,fp
 8007d94:	dfc00117 	ldw	ra,4(sp)
 8007d98:	df000017 	ldw	fp,0(sp)
 8007d9c:	dec00204 	addi	sp,sp,8
 8007da0:	f800283a 	ret

08007da4 <alt_avalon_i2c_open>:
 8007da4:	defffc04 	addi	sp,sp,-16
 8007da8:	dfc00315 	stw	ra,12(sp)
 8007dac:	df000215 	stw	fp,8(sp)
 8007db0:	df000204 	addi	fp,sp,8
 8007db4:	e13fff15 	stw	r4,-4(fp)
 8007db8:	e03ffe15 	stw	zero,-8(fp)
 8007dbc:	d1600b04 	addi	r5,gp,-32724
 8007dc0:	e13fff17 	ldw	r4,-4(fp)
 8007dc4:	800a95c0 	call	800a95c <alt_find_dev>
 8007dc8:	e0bffe15 	stw	r2,-8(fp)
 8007dcc:	e0bffe17 	ldw	r2,-8(fp)
 8007dd0:	e037883a 	mov	sp,fp
 8007dd4:	dfc00117 	ldw	ra,4(sp)
 8007dd8:	df000017 	ldw	fp,0(sp)
 8007ddc:	dec00204 	addi	sp,sp,8
 8007de0:	f800283a 	ret

08007de4 <alt_avalon_i2c_enable>:
 8007de4:	defffc04 	addi	sp,sp,-16
 8007de8:	df000315 	stw	fp,12(sp)
 8007dec:	df000304 	addi	fp,sp,12
 8007df0:	e13fff15 	stw	r4,-4(fp)
 8007df4:	e0bfff17 	ldw	r2,-4(fp)
 8007df8:	10800717 	ldw	r2,28(r2)
 8007dfc:	e0bffd15 	stw	r2,-12(fp)
 8007e00:	e0bfff17 	ldw	r2,-4(fp)
 8007e04:	10800317 	ldw	r2,12(r2)
 8007e08:	10800204 	addi	r2,r2,8
 8007e0c:	10800037 	ldwio	r2,0(r2)
 8007e10:	1080004c 	andi	r2,r2,1
 8007e14:	e0bffe15 	stw	r2,-8(fp)
 8007e18:	e0bffe17 	ldw	r2,-8(fp)
 8007e1c:	10000226 	beq	r2,zero,8007e28 <alt_avalon_i2c_enable+0x44>
 8007e20:	00bffe44 	movi	r2,-7
 8007e24:	00001106 	br	8007e6c <alt_avalon_i2c_enable+0x88>
 8007e28:	e0bfff17 	ldw	r2,-4(fp)
 8007e2c:	10c00617 	ldw	r3,24(r2)
 8007e30:	00820034 	movhi	r2,2048
 8007e34:	109e9a04 	addi	r2,r2,31336
 8007e38:	1880021e 	bne	r3,r2,8007e44 <alt_avalon_i2c_enable+0x60>
 8007e3c:	e0bffd17 	ldw	r2,-12(fp)
 8007e40:	10000215 	stw	zero,8(r2)
 8007e44:	e0bfff17 	ldw	r2,-4(fp)
 8007e48:	10800317 	ldw	r2,12(r2)
 8007e4c:	10800204 	addi	r2,r2,8
 8007e50:	e0ffff17 	ldw	r3,-4(fp)
 8007e54:	18c00317 	ldw	r3,12(r3)
 8007e58:	18c00204 	addi	r3,r3,8
 8007e5c:	18c00037 	ldwio	r3,0(r3)
 8007e60:	18c00054 	ori	r3,r3,1
 8007e64:	10c00035 	stwio	r3,0(r2)
 8007e68:	0005883a 	mov	r2,zero
 8007e6c:	e037883a 	mov	sp,fp
 8007e70:	df000017 	ldw	fp,0(sp)
 8007e74:	dec00104 	addi	sp,sp,4
 8007e78:	f800283a 	ret

08007e7c <alt_avalon_i2c_disable>:
 8007e7c:	defffe04 	addi	sp,sp,-8
 8007e80:	df000115 	stw	fp,4(sp)
 8007e84:	df000104 	addi	fp,sp,4
 8007e88:	e13fff15 	stw	r4,-4(fp)
 8007e8c:	e0bfff17 	ldw	r2,-4(fp)
 8007e90:	10800317 	ldw	r2,12(r2)
 8007e94:	10800204 	addi	r2,r2,8
 8007e98:	e0ffff17 	ldw	r3,-4(fp)
 8007e9c:	18c00317 	ldw	r3,12(r3)
 8007ea0:	18c00204 	addi	r3,r3,8
 8007ea4:	19000037 	ldwio	r4,0(r3)
 8007ea8:	00ffff84 	movi	r3,-2
 8007eac:	20c6703a 	and	r3,r4,r3
 8007eb0:	10c00035 	stwio	r3,0(r2)
 8007eb4:	0001883a 	nop
 8007eb8:	e037883a 	mov	sp,fp
 8007ebc:	df000017 	ldw	fp,0(sp)
 8007ec0:	dec00104 	addi	sp,sp,4
 8007ec4:	f800283a 	ret

08007ec8 <alt_avalon_i2c_master_config_get>:
 8007ec8:	defffd04 	addi	sp,sp,-12
 8007ecc:	df000215 	stw	fp,8(sp)
 8007ed0:	df000204 	addi	fp,sp,8
 8007ed4:	e13ffe15 	stw	r4,-8(fp)
 8007ed8:	e17fff15 	stw	r5,-4(fp)
 8007edc:	e0bffe17 	ldw	r2,-8(fp)
 8007ee0:	10c00d17 	ldw	r3,52(r2)
 8007ee4:	e0bfff17 	ldw	r2,-4(fp)
 8007ee8:	10c00015 	stw	r3,0(r2)
 8007eec:	e0bffe17 	ldw	r2,-8(fp)
 8007ef0:	10800317 	ldw	r2,12(r2)
 8007ef4:	10800204 	addi	r2,r2,8
 8007ef8:	10800037 	ldwio	r2,0(r2)
 8007efc:	1080008c 	andi	r2,r2,2
 8007f00:	1005d07a 	srai	r2,r2,1
 8007f04:	1007883a 	mov	r3,r2
 8007f08:	e0bfff17 	ldw	r2,-4(fp)
 8007f0c:	10c00115 	stw	r3,4(r2)
 8007f10:	e0bffe17 	ldw	r2,-8(fp)
 8007f14:	10800317 	ldw	r2,12(r2)
 8007f18:	10800904 	addi	r2,r2,36
 8007f1c:	10800037 	ldwio	r2,0(r2)
 8007f20:	1007883a 	mov	r3,r2
 8007f24:	e0bfff17 	ldw	r2,-4(fp)
 8007f28:	10c0020d 	sth	r3,8(r2)
 8007f2c:	e0bffe17 	ldw	r2,-8(fp)
 8007f30:	10800317 	ldw	r2,12(r2)
 8007f34:	10800804 	addi	r2,r2,32
 8007f38:	10800037 	ldwio	r2,0(r2)
 8007f3c:	1007883a 	mov	r3,r2
 8007f40:	e0bfff17 	ldw	r2,-4(fp)
 8007f44:	10c0028d 	sth	r3,10(r2)
 8007f48:	e0bffe17 	ldw	r2,-8(fp)
 8007f4c:	10800317 	ldw	r2,12(r2)
 8007f50:	10800a04 	addi	r2,r2,40
 8007f54:	10800037 	ldwio	r2,0(r2)
 8007f58:	1007883a 	mov	r3,r2
 8007f5c:	e0bfff17 	ldw	r2,-4(fp)
 8007f60:	10c0030d 	sth	r3,12(r2)
 8007f64:	0001883a 	nop
 8007f68:	e037883a 	mov	sp,fp
 8007f6c:	df000017 	ldw	fp,0(sp)
 8007f70:	dec00104 	addi	sp,sp,4
 8007f74:	f800283a 	ret

08007f78 <alt_avalon_i2c_master_config_set>:
 8007f78:	defffd04 	addi	sp,sp,-12
 8007f7c:	df000215 	stw	fp,8(sp)
 8007f80:	df000204 	addi	fp,sp,8
 8007f84:	e13ffe15 	stw	r4,-8(fp)
 8007f88:	e17fff15 	stw	r5,-4(fp)
 8007f8c:	e0bfff17 	ldw	r2,-4(fp)
 8007f90:	10c00017 	ldw	r3,0(r2)
 8007f94:	e0bffe17 	ldw	r2,-8(fp)
 8007f98:	10c00d15 	stw	r3,52(r2)
 8007f9c:	e0bffe17 	ldw	r2,-8(fp)
 8007fa0:	10800317 	ldw	r2,12(r2)
 8007fa4:	10c00204 	addi	r3,r2,8
 8007fa8:	e0bffe17 	ldw	r2,-8(fp)
 8007fac:	10800317 	ldw	r2,12(r2)
 8007fb0:	10800204 	addi	r2,r2,8
 8007fb4:	10800037 	ldwio	r2,0(r2)
 8007fb8:	1009883a 	mov	r4,r2
 8007fbc:	00bfff44 	movi	r2,-3
 8007fc0:	2088703a 	and	r4,r4,r2
 8007fc4:	e0bfff17 	ldw	r2,-4(fp)
 8007fc8:	10800117 	ldw	r2,4(r2)
 8007fcc:	1085883a 	add	r2,r2,r2
 8007fd0:	1080008c 	andi	r2,r2,2
 8007fd4:	2084b03a 	or	r2,r4,r2
 8007fd8:	18800035 	stwio	r2,0(r3)
 8007fdc:	e0bffe17 	ldw	r2,-8(fp)
 8007fe0:	10800317 	ldw	r2,12(r2)
 8007fe4:	10800904 	addi	r2,r2,36
 8007fe8:	e0ffff17 	ldw	r3,-4(fp)
 8007fec:	18c0020b 	ldhu	r3,8(r3)
 8007ff0:	18ffffcc 	andi	r3,r3,65535
 8007ff4:	10c00035 	stwio	r3,0(r2)
 8007ff8:	e0bffe17 	ldw	r2,-8(fp)
 8007ffc:	10800317 	ldw	r2,12(r2)
 8008000:	10800804 	addi	r2,r2,32
 8008004:	e0ffff17 	ldw	r3,-4(fp)
 8008008:	18c0028b 	ldhu	r3,10(r3)
 800800c:	18ffffcc 	andi	r3,r3,65535
 8008010:	10c00035 	stwio	r3,0(r2)
 8008014:	e0bffe17 	ldw	r2,-8(fp)
 8008018:	10800317 	ldw	r2,12(r2)
 800801c:	10800a04 	addi	r2,r2,40
 8008020:	e0ffff17 	ldw	r3,-4(fp)
 8008024:	18c0030b 	ldhu	r3,12(r3)
 8008028:	18ffffcc 	andi	r3,r3,65535
 800802c:	10c00035 	stwio	r3,0(r2)
 8008030:	0001883a 	nop
 8008034:	e037883a 	mov	sp,fp
 8008038:	df000017 	ldw	fp,0(sp)
 800803c:	dec00104 	addi	sp,sp,4
 8008040:	f800283a 	ret

08008044 <alt_avalon_i2c_master_config_speed_get>:
 8008044:	defffb04 	addi	sp,sp,-20
 8008048:	dfc00415 	stw	ra,16(sp)
 800804c:	df000315 	stw	fp,12(sp)
 8008050:	df000304 	addi	fp,sp,12
 8008054:	e13ffd15 	stw	r4,-12(fp)
 8008058:	e17ffe15 	stw	r5,-8(fp)
 800805c:	e1bfff15 	stw	r6,-4(fp)
 8008060:	e0bffe17 	ldw	r2,-8(fp)
 8008064:	1080028b 	ldhu	r2,10(r2)
 8008068:	10bfffcc 	andi	r2,r2,65535
 800806c:	10000426 	beq	r2,zero,8008080 <alt_avalon_i2c_master_config_speed_get+0x3c>
 8008070:	e0bffe17 	ldw	r2,-8(fp)
 8008074:	1080020b 	ldhu	r2,8(r2)
 8008078:	10bfffcc 	andi	r2,r2,65535
 800807c:	1000021e 	bne	r2,zero,8008088 <alt_avalon_i2c_master_config_speed_get+0x44>
 8008080:	00bfff44 	movi	r2,-3
 8008084:	00000f06 	br	80080c4 <alt_avalon_i2c_master_config_speed_get+0x80>
 8008088:	e0bffd17 	ldw	r2,-12(fp)
 800808c:	11000c17 	ldw	r4,48(r2)
 8008090:	e0bffe17 	ldw	r2,-8(fp)
 8008094:	1080028b 	ldhu	r2,10(r2)
 8008098:	10ffffcc 	andi	r3,r2,65535
 800809c:	e0bffe17 	ldw	r2,-8(fp)
 80080a0:	1080020b 	ldhu	r2,8(r2)
 80080a4:	10bfffcc 	andi	r2,r2,65535
 80080a8:	1885883a 	add	r2,r3,r2
 80080ac:	100b883a 	mov	r5,r2
 80080b0:	80056d80 	call	80056d8 <__udivsi3>
 80080b4:	1007883a 	mov	r3,r2
 80080b8:	e0bfff17 	ldw	r2,-4(fp)
 80080bc:	10c00015 	stw	r3,0(r2)
 80080c0:	0005883a 	mov	r2,zero
 80080c4:	e037883a 	mov	sp,fp
 80080c8:	dfc00117 	ldw	ra,4(sp)
 80080cc:	df000017 	ldw	fp,0(sp)
 80080d0:	dec00204 	addi	sp,sp,8
 80080d4:	f800283a 	ret

080080d8 <alt_avalon_i2c_master_config_speed_set>:
 80080d8:	defff904 	addi	sp,sp,-28
 80080dc:	dfc00615 	stw	ra,24(sp)
 80080e0:	df000515 	stw	fp,20(sp)
 80080e4:	df000504 	addi	fp,sp,20
 80080e8:	e13ffd15 	stw	r4,-12(fp)
 80080ec:	e17ffe15 	stw	r5,-8(fp)
 80080f0:	e1bfff15 	stw	r6,-4(fp)
 80080f4:	e0ffff17 	ldw	r3,-4(fp)
 80080f8:	008001b4 	movhi	r2,6
 80080fc:	1086a004 	addi	r2,r2,6784
 8008100:	10c00436 	bltu	r2,r3,8008114 <alt_avalon_i2c_master_config_speed_set+0x3c>
 8008104:	e0bfff17 	ldw	r2,-4(fp)
 8008108:	10000226 	beq	r2,zero,8008114 <alt_avalon_i2c_master_config_speed_set+0x3c>
 800810c:	e0bfff17 	ldw	r2,-4(fp)
 8008110:	1000021e 	bne	r2,zero,800811c <alt_avalon_i2c_master_config_speed_set+0x44>
 8008114:	00bfff04 	movi	r2,-4
 8008118:	00002906 	br	80081c0 <alt_avalon_i2c_master_config_speed_set+0xe8>
 800811c:	e0bffd17 	ldw	r2,-12(fp)
 8008120:	10c00c17 	ldw	r3,48(r2)
 8008124:	e0bfff17 	ldw	r2,-4(fp)
 8008128:	1085883a 	add	r2,r2,r2
 800812c:	100b883a 	mov	r5,r2
 8008130:	1809883a 	mov	r4,r3
 8008134:	80056d80 	call	80056d8 <__udivsi3>
 8008138:	e0bffb15 	stw	r2,-20(fp)
 800813c:	e0bffb17 	ldw	r2,-20(fp)
 8008140:	10800f04 	addi	r2,r2,60
 8008144:	e0bffc15 	stw	r2,-16(fp)
 8008148:	e0bffb17 	ldw	r2,-20(fp)
 800814c:	10bff104 	addi	r2,r2,-60
 8008150:	e0bffb15 	stw	r2,-20(fp)
 8008154:	e0ffff17 	ldw	r3,-4(fp)
 8008158:	008000b4 	movhi	r2,2
 800815c:	10a1a804 	addi	r2,r2,-31072
 8008160:	10c0042e 	bgeu	r2,r3,8008174 <alt_avalon_i2c_master_config_speed_set+0x9c>
 8008164:	e0bffe17 	ldw	r2,-8(fp)
 8008168:	00c00044 	movi	r3,1
 800816c:	10c00115 	stw	r3,4(r2)
 8008170:	00000206 	br	800817c <alt_avalon_i2c_master_config_speed_set+0xa4>
 8008174:	e0bffe17 	ldw	r2,-8(fp)
 8008178:	10000115 	stw	zero,4(r2)
 800817c:	e0bffb17 	ldw	r2,-20(fp)
 8008180:	1007883a 	mov	r3,r2
 8008184:	e0bffe17 	ldw	r2,-8(fp)
 8008188:	10c0028d 	sth	r3,10(r2)
 800818c:	e0bffc17 	ldw	r2,-16(fp)
 8008190:	1007883a 	mov	r3,r2
 8008194:	e0bffe17 	ldw	r2,-8(fp)
 8008198:	10c0020d 	sth	r3,8(r2)
 800819c:	e0bffb17 	ldw	r2,-20(fp)
 80081a0:	1007883a 	mov	r3,r2
 80081a4:	e0bffb17 	ldw	r2,-20(fp)
 80081a8:	1004d07a 	srli	r2,r2,1
 80081ac:	1885c83a 	sub	r2,r3,r2
 80081b0:	1007883a 	mov	r3,r2
 80081b4:	e0bffe17 	ldw	r2,-8(fp)
 80081b8:	10c0030d 	sth	r3,12(r2)
 80081bc:	0005883a 	mov	r2,zero
 80081c0:	e037883a 	mov	sp,fp
 80081c4:	dfc00117 	ldw	ra,4(sp)
 80081c8:	df000017 	ldw	fp,0(sp)
 80081cc:	dec00204 	addi	sp,sp,8
 80081d0:	f800283a 	ret

080081d4 <alt_avalon_i2c_is_busy>:
 80081d4:	defffe04 	addi	sp,sp,-8
 80081d8:	df000115 	stw	fp,4(sp)
 80081dc:	df000104 	addi	fp,sp,4
 80081e0:	e13fff15 	stw	r4,-4(fp)
 80081e4:	e0bfff17 	ldw	r2,-4(fp)
 80081e8:	10800317 	ldw	r2,12(r2)
 80081ec:	10800504 	addi	r2,r2,20
 80081f0:	10800037 	ldwio	r2,0(r2)
 80081f4:	1080004c 	andi	r2,r2,1
 80081f8:	10000226 	beq	r2,zero,8008204 <alt_avalon_i2c_is_busy+0x30>
 80081fc:	00800044 	movi	r2,1
 8008200:	00000106 	br	8008208 <alt_avalon_i2c_is_busy+0x34>
 8008204:	0005883a 	mov	r2,zero
 8008208:	e037883a 	mov	sp,fp
 800820c:	df000017 	ldw	fp,0(sp)
 8008210:	dec00104 	addi	sp,sp,4
 8008214:	f800283a 	ret

08008218 <alt_avalon_i2c_rx_read_available>:
 8008218:	defffb04 	addi	sp,sp,-20
 800821c:	df000415 	stw	fp,16(sp)
 8008220:	df000404 	addi	fp,sp,16
 8008224:	e13ffc15 	stw	r4,-16(fp)
 8008228:	e17ffd15 	stw	r5,-12(fp)
 800822c:	e1bffe15 	stw	r6,-8(fp)
 8008230:	e1ffff15 	stw	r7,-4(fp)
 8008234:	e0bfff17 	ldw	r2,-4(fp)
 8008238:	10000015 	stw	zero,0(r2)
 800823c:	00001406 	br	8008290 <alt_avalon_i2c_rx_read_available+0x78>
 8008240:	e0bfff17 	ldw	r2,-4(fp)
 8008244:	10800017 	ldw	r2,0(r2)
 8008248:	e0fffd17 	ldw	r3,-12(fp)
 800824c:	1885883a 	add	r2,r3,r2
 8008250:	e0fffc17 	ldw	r3,-16(fp)
 8008254:	18c00317 	ldw	r3,12(r3)
 8008258:	18c00104 	addi	r3,r3,4
 800825c:	18c00037 	ldwio	r3,0(r3)
 8008260:	10c00005 	stb	r3,0(r2)
 8008264:	e0bfff17 	ldw	r2,-4(fp)
 8008268:	10800017 	ldw	r2,0(r2)
 800826c:	10c00044 	addi	r3,r2,1
 8008270:	e0bfff17 	ldw	r2,-4(fp)
 8008274:	10c00015 	stw	r3,0(r2)
 8008278:	e0bfff17 	ldw	r2,-4(fp)
 800827c:	10c00017 	ldw	r3,0(r2)
 8008280:	e0bffe17 	ldw	r2,-8(fp)
 8008284:	1880021e 	bne	r3,r2,8008290 <alt_avalon_i2c_rx_read_available+0x78>
 8008288:	e0bffe17 	ldw	r2,-8(fp)
 800828c:	1000061e 	bne	r2,zero,80082a8 <alt_avalon_i2c_rx_read_available+0x90>
 8008290:	e0bffc17 	ldw	r2,-16(fp)
 8008294:	10800317 	ldw	r2,12(r2)
 8008298:	10800704 	addi	r2,r2,28
 800829c:	10800037 	ldwio	r2,0(r2)
 80082a0:	103fe71e 	bne	r2,zero,8008240 <__alt_data_end+0xfc008240>
 80082a4:	00000106 	br	80082ac <alt_avalon_i2c_rx_read_available+0x94>
 80082a8:	0001883a 	nop
 80082ac:	0001883a 	nop
 80082b0:	e037883a 	mov	sp,fp
 80082b4:	df000017 	ldw	fp,0(sp)
 80082b8:	dec00104 	addi	sp,sp,4
 80082bc:	f800283a 	ret

080082c0 <alt_avalon_i2c_rx_read>:
 80082c0:	defffa04 	addi	sp,sp,-24
 80082c4:	dfc00515 	stw	ra,20(sp)
 80082c8:	df000415 	stw	fp,16(sp)
 80082cc:	df000404 	addi	fp,sp,16
 80082d0:	e13ffe15 	stw	r4,-8(fp)
 80082d4:	e17fff15 	stw	r5,-4(fp)
 80082d8:	e03ffc15 	stw	zero,-16(fp)
 80082dc:	008000b4 	movhi	r2,2
 80082e0:	10a1a804 	addi	r2,r2,-31072
 80082e4:	e0bffd15 	stw	r2,-12(fp)
 80082e8:	00000d06 	br	8008320 <alt_avalon_i2c_rx_read+0x60>
 80082ec:	e0bffd17 	ldw	r2,-12(fp)
 80082f0:	108002a8 	cmpgeui	r2,r2,10
 80082f4:	1000021e 	bne	r2,zero,8008300 <alt_avalon_i2c_rx_read+0x40>
 80082f8:	0109c404 	movi	r4,10000
 80082fc:	800a5040 	call	800a504 <alt_busy_sleep>
 8008300:	e0bffd17 	ldw	r2,-12(fp)
 8008304:	10bfffc4 	addi	r2,r2,-1
 8008308:	e0bffd15 	stw	r2,-12(fp)
 800830c:	e0bffd17 	ldw	r2,-12(fp)
 8008310:	1000031e 	bne	r2,zero,8008320 <alt_avalon_i2c_rx_read+0x60>
 8008314:	00bfff84 	movi	r2,-2
 8008318:	e0bffc15 	stw	r2,-16(fp)
 800831c:	00000506 	br	8008334 <alt_avalon_i2c_rx_read+0x74>
 8008320:	e0bffe17 	ldw	r2,-8(fp)
 8008324:	10800317 	ldw	r2,12(r2)
 8008328:	10800704 	addi	r2,r2,28
 800832c:	10800037 	ldwio	r2,0(r2)
 8008330:	103fee26 	beq	r2,zero,80082ec <__alt_data_end+0xfc0082ec>
 8008334:	e0bffe17 	ldw	r2,-8(fp)
 8008338:	10800317 	ldw	r2,12(r2)
 800833c:	10800104 	addi	r2,r2,4
 8008340:	10800037 	ldwio	r2,0(r2)
 8008344:	1007883a 	mov	r3,r2
 8008348:	e0bfff17 	ldw	r2,-4(fp)
 800834c:	10c00005 	stb	r3,0(r2)
 8008350:	e0bffc17 	ldw	r2,-16(fp)
 8008354:	e037883a 	mov	sp,fp
 8008358:	dfc00117 	ldw	ra,4(sp)
 800835c:	df000017 	ldw	fp,0(sp)
 8008360:	dec00204 	addi	sp,sp,8
 8008364:	f800283a 	ret

08008368 <alt_avalon_i2c_cmd_write>:
 8008368:	defff804 	addi	sp,sp,-32
 800836c:	dfc00715 	stw	ra,28(sp)
 8008370:	df000615 	stw	fp,24(sp)
 8008374:	df000604 	addi	fp,sp,24
 8008378:	e13ffc15 	stw	r4,-16(fp)
 800837c:	2809883a 	mov	r4,r5
 8008380:	3007883a 	mov	r3,r6
 8008384:	3805883a 	mov	r2,r7
 8008388:	e13ffd05 	stb	r4,-12(fp)
 800838c:	e0fffe05 	stb	r3,-8(fp)
 8008390:	e0bfff05 	stb	r2,-4(fp)
 8008394:	0089c404 	movi	r2,10000
 8008398:	e0bffa15 	stw	r2,-24(fp)
 800839c:	e03ffb15 	stw	zero,-20(fp)
 80083a0:	00000c06 	br	80083d4 <alt_avalon_i2c_cmd_write+0x6c>
 80083a4:	e0bffa17 	ldw	r2,-24(fp)
 80083a8:	108002a8 	cmpgeui	r2,r2,10
 80083ac:	1000021e 	bne	r2,zero,80083b8 <alt_avalon_i2c_cmd_write+0x50>
 80083b0:	0109c404 	movi	r4,10000
 80083b4:	800a5040 	call	800a504 <alt_busy_sleep>
 80083b8:	e0bffa17 	ldw	r2,-24(fp)
 80083bc:	10bfffc4 	addi	r2,r2,-1
 80083c0:	e0bffa15 	stw	r2,-24(fp)
 80083c4:	e0bffa17 	ldw	r2,-24(fp)
 80083c8:	1000021e 	bne	r2,zero,80083d4 <alt_avalon_i2c_cmd_write+0x6c>
 80083cc:	00bfff84 	movi	r2,-2
 80083d0:	00001906 	br	8008438 <alt_avalon_i2c_cmd_write+0xd0>
 80083d4:	e0bffc17 	ldw	r2,-16(fp)
 80083d8:	10800317 	ldw	r2,12(r2)
 80083dc:	10800404 	addi	r2,r2,16
 80083e0:	10800037 	ldwio	r2,0(r2)
 80083e4:	1080004c 	andi	r2,r2,1
 80083e8:	103fee26 	beq	r2,zero,80083a4 <__alt_data_end+0xfc0083a4>
 80083ec:	e0bffc17 	ldw	r2,-16(fp)
 80083f0:	10800317 	ldw	r2,12(r2)
 80083f4:	e13ffd03 	ldbu	r4,-12(fp)
 80083f8:	e0fffe03 	ldbu	r3,-8(fp)
 80083fc:	1806927a 	slli	r3,r3,9
 8008400:	20c8b03a 	or	r4,r4,r3
 8008404:	e0ffff03 	ldbu	r3,-4(fp)
 8008408:	1806923a 	slli	r3,r3,8
 800840c:	20c6b03a 	or	r3,r4,r3
 8008410:	10c00035 	stwio	r3,0(r2)
 8008414:	e0bffb04 	addi	r2,fp,-20
 8008418:	100b883a 	mov	r5,r2
 800841c:	e13ffc17 	ldw	r4,-16(fp)
 8008420:	80085a80 	call	80085a8 <alt_avalon_i2c_check_nack>
 8008424:	e0bffb04 	addi	r2,fp,-20
 8008428:	100b883a 	mov	r5,r2
 800842c:	e13ffc17 	ldw	r4,-16(fp)
 8008430:	80085f40 	call	80085f4 <alt_avalon_i2c_check_arblost>
 8008434:	e0bffb17 	ldw	r2,-20(fp)
 8008438:	e037883a 	mov	sp,fp
 800843c:	dfc00117 	ldw	ra,4(sp)
 8008440:	df000017 	ldw	fp,0(sp)
 8008444:	dec00204 	addi	sp,sp,8
 8008448:	f800283a 	ret

0800844c <alt_avalon_i2c_send_address>:
 800844c:	defffa04 	addi	sp,sp,-24
 8008450:	dfc00515 	stw	ra,20(sp)
 8008454:	df000415 	stw	fp,16(sp)
 8008458:	df000404 	addi	fp,sp,16
 800845c:	e13ffd15 	stw	r4,-12(fp)
 8008460:	e17ffe15 	stw	r5,-8(fp)
 8008464:	3005883a 	mov	r2,r6
 8008468:	e0bfff05 	stb	r2,-4(fp)
 800846c:	e0bffd17 	ldw	r2,-12(fp)
 8008470:	10800d17 	ldw	r2,52(r2)
 8008474:	10800058 	cmpnei	r2,r2,1
 8008478:	10001c1e 	bne	r2,zero,80084ec <alt_avalon_i2c_send_address+0xa0>
 800847c:	e0bffd17 	ldw	r2,-12(fp)
 8008480:	10800917 	ldw	r2,36(r2)
 8008484:	109e0014 	ori	r2,r2,30720
 8008488:	1004d1fa 	srli	r2,r2,7
 800848c:	1007883a 	mov	r3,r2
 8008490:	00bfff84 	movi	r2,-2
 8008494:	1884703a 	and	r2,r3,r2
 8008498:	1007883a 	mov	r3,r2
 800849c:	e0bffe17 	ldw	r2,-8(fp)
 80084a0:	1884b03a 	or	r2,r3,r2
 80084a4:	10803fcc 	andi	r2,r2,255
 80084a8:	e0ffff03 	ldbu	r3,-4(fp)
 80084ac:	000f883a 	mov	r7,zero
 80084b0:	180d883a 	mov	r6,r3
 80084b4:	100b883a 	mov	r5,r2
 80084b8:	e13ffd17 	ldw	r4,-12(fp)
 80084bc:	80083680 	call	8008368 <alt_avalon_i2c_cmd_write>
 80084c0:	e0bffc15 	stw	r2,-16(fp)
 80084c4:	e0bffd17 	ldw	r2,-12(fp)
 80084c8:	10800917 	ldw	r2,36(r2)
 80084cc:	10803fcc 	andi	r2,r2,255
 80084d0:	000f883a 	mov	r7,zero
 80084d4:	000d883a 	mov	r6,zero
 80084d8:	100b883a 	mov	r5,r2
 80084dc:	e13ffd17 	ldw	r4,-12(fp)
 80084e0:	80083680 	call	8008368 <alt_avalon_i2c_cmd_write>
 80084e4:	e0bffc15 	stw	r2,-16(fp)
 80084e8:	00000e06 	br	8008524 <alt_avalon_i2c_send_address+0xd8>
 80084ec:	e0bffd17 	ldw	r2,-12(fp)
 80084f0:	10800917 	ldw	r2,36(r2)
 80084f4:	1085883a 	add	r2,r2,r2
 80084f8:	1007883a 	mov	r3,r2
 80084fc:	e0bffe17 	ldw	r2,-8(fp)
 8008500:	1884b03a 	or	r2,r3,r2
 8008504:	10803fcc 	andi	r2,r2,255
 8008508:	e0ffff03 	ldbu	r3,-4(fp)
 800850c:	000f883a 	mov	r7,zero
 8008510:	180d883a 	mov	r6,r3
 8008514:	100b883a 	mov	r5,r2
 8008518:	e13ffd17 	ldw	r4,-12(fp)
 800851c:	80083680 	call	8008368 <alt_avalon_i2c_cmd_write>
 8008520:	e0bffc15 	stw	r2,-16(fp)
 8008524:	e0bffc17 	ldw	r2,-16(fp)
 8008528:	e037883a 	mov	sp,fp
 800852c:	dfc00117 	ldw	ra,4(sp)
 8008530:	df000017 	ldw	fp,0(sp)
 8008534:	dec00204 	addi	sp,sp,8
 8008538:	f800283a 	ret

0800853c <alt_avalon_i2c_master_target_get>:
 800853c:	defffd04 	addi	sp,sp,-12
 8008540:	df000215 	stw	fp,8(sp)
 8008544:	df000204 	addi	fp,sp,8
 8008548:	e13ffe15 	stw	r4,-8(fp)
 800854c:	e17fff15 	stw	r5,-4(fp)
 8008550:	e0bffe17 	ldw	r2,-8(fp)
 8008554:	10c00917 	ldw	r3,36(r2)
 8008558:	e0bfff17 	ldw	r2,-4(fp)
 800855c:	10c00015 	stw	r3,0(r2)
 8008560:	0001883a 	nop
 8008564:	e037883a 	mov	sp,fp
 8008568:	df000017 	ldw	fp,0(sp)
 800856c:	dec00104 	addi	sp,sp,4
 8008570:	f800283a 	ret

08008574 <alt_avalon_i2c_master_target_set>:
 8008574:	defffd04 	addi	sp,sp,-12
 8008578:	df000215 	stw	fp,8(sp)
 800857c:	df000204 	addi	fp,sp,8
 8008580:	e13ffe15 	stw	r4,-8(fp)
 8008584:	e17fff15 	stw	r5,-4(fp)
 8008588:	e0bffe17 	ldw	r2,-8(fp)
 800858c:	e0ffff17 	ldw	r3,-4(fp)
 8008590:	10c00915 	stw	r3,36(r2)
 8008594:	0001883a 	nop
 8008598:	e037883a 	mov	sp,fp
 800859c:	df000017 	ldw	fp,0(sp)
 80085a0:	dec00104 	addi	sp,sp,4
 80085a4:	f800283a 	ret

080085a8 <alt_avalon_i2c_check_nack>:
 80085a8:	defffd04 	addi	sp,sp,-12
 80085ac:	df000215 	stw	fp,8(sp)
 80085b0:	df000204 	addi	fp,sp,8
 80085b4:	e13ffe15 	stw	r4,-8(fp)
 80085b8:	e17fff15 	stw	r5,-4(fp)
 80085bc:	e0bffe17 	ldw	r2,-8(fp)
 80085c0:	10800317 	ldw	r2,12(r2)
 80085c4:	10800404 	addi	r2,r2,16
 80085c8:	10800037 	ldwio	r2,0(r2)
 80085cc:	1080010c 	andi	r2,r2,4
 80085d0:	10000326 	beq	r2,zero,80085e0 <alt_avalon_i2c_check_nack+0x38>
 80085d4:	e0bfff17 	ldw	r2,-4(fp)
 80085d8:	00fffec4 	movi	r3,-5
 80085dc:	10c00015 	stw	r3,0(r2)
 80085e0:	0001883a 	nop
 80085e4:	e037883a 	mov	sp,fp
 80085e8:	df000017 	ldw	fp,0(sp)
 80085ec:	dec00104 	addi	sp,sp,4
 80085f0:	f800283a 	ret

080085f4 <alt_avalon_i2c_check_arblost>:
 80085f4:	defffd04 	addi	sp,sp,-12
 80085f8:	df000215 	stw	fp,8(sp)
 80085fc:	df000204 	addi	fp,sp,8
 8008600:	e13ffe15 	stw	r4,-8(fp)
 8008604:	e17fff15 	stw	r5,-4(fp)
 8008608:	e0bffe17 	ldw	r2,-8(fp)
 800860c:	10800317 	ldw	r2,12(r2)
 8008610:	10800404 	addi	r2,r2,16
 8008614:	10800037 	ldwio	r2,0(r2)
 8008618:	1080020c 	andi	r2,r2,8
 800861c:	10000326 	beq	r2,zero,800862c <alt_avalon_i2c_check_arblost+0x38>
 8008620:	e0bfff17 	ldw	r2,-4(fp)
 8008624:	00fffe84 	movi	r3,-6
 8008628:	10c00015 	stw	r3,0(r2)
 800862c:	0001883a 	nop
 8008630:	e037883a 	mov	sp,fp
 8008634:	df000017 	ldw	fp,0(sp)
 8008638:	dec00104 	addi	sp,sp,4
 800863c:	f800283a 	ret

08008640 <alt_avalon_i2c_interrupt_transaction_status>:
 8008640:	defff804 	addi	sp,sp,-32
 8008644:	dfc00715 	stw	ra,28(sp)
 8008648:	df000615 	stw	fp,24(sp)
 800864c:	df000604 	addi	fp,sp,24
 8008650:	e13fff15 	stw	r4,-4(fp)
 8008654:	e03ffc15 	stw	zero,-16(fp)
 8008658:	e0bfff17 	ldw	r2,-4(fp)
 800865c:	10800717 	ldw	r2,28(r2)
 8008660:	e0bffb15 	stw	r2,-20(fp)
 8008664:	e0bffb17 	ldw	r2,-20(fp)
 8008668:	10800117 	ldw	r2,4(r2)
 800866c:	10800044 	addi	r2,r2,1
 8008670:	0149c404 	movi	r5,10000
 8008674:	1009883a 	mov	r4,r2
 8008678:	80057940 	call	8005794 <__mulsi3>
 800867c:	e0bffa15 	stw	r2,-24(fp)
 8008680:	e0bffd04 	addi	r2,fp,-12
 8008684:	100b883a 	mov	r5,r2
 8008688:	e13fff17 	ldw	r4,-4(fp)
 800868c:	80094d80 	call	80094d8 <alt_avalon_i2c_enabled_ints_get>
 8008690:	e0bffd17 	ldw	r2,-12(fp)
 8008694:	100b883a 	mov	r5,r2
 8008698:	e13fff17 	ldw	r4,-4(fp)
 800869c:	800940c0 	call	800940c <alt_avalon_i2c_int_disable>
 80086a0:	e0bffc04 	addi	r2,fp,-16
 80086a4:	100b883a 	mov	r5,r2
 80086a8:	e13fff17 	ldw	r4,-4(fp)
 80086ac:	80085a80 	call	80085a8 <alt_avalon_i2c_check_nack>
 80086b0:	e0bffc17 	ldw	r2,-16(fp)
 80086b4:	10002226 	beq	r2,zero,8008740 <alt_avalon_i2c_interrupt_transaction_status+0x100>
 80086b8:	e0bffb17 	ldw	r2,-20(fp)
 80086bc:	10800217 	ldw	r2,8(r2)
 80086c0:	10001d26 	beq	r2,zero,8008738 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
 80086c4:	00000d06 	br	80086fc <alt_avalon_i2c_interrupt_transaction_status+0xbc>
 80086c8:	e0bffa17 	ldw	r2,-24(fp)
 80086cc:	108002a8 	cmpgeui	r2,r2,10
 80086d0:	1000021e 	bne	r2,zero,80086dc <alt_avalon_i2c_interrupt_transaction_status+0x9c>
 80086d4:	0109c404 	movi	r4,10000
 80086d8:	800a5040 	call	800a504 <alt_busy_sleep>
 80086dc:	e0bffa17 	ldw	r2,-24(fp)
 80086e0:	10bfffc4 	addi	r2,r2,-1
 80086e4:	e0bffa15 	stw	r2,-24(fp)
 80086e8:	e0bffa17 	ldw	r2,-24(fp)
 80086ec:	1000031e 	bne	r2,zero,80086fc <alt_avalon_i2c_interrupt_transaction_status+0xbc>
 80086f0:	00bfff84 	movi	r2,-2
 80086f4:	e0bffc15 	stw	r2,-16(fp)
 80086f8:	00000306 	br	8008708 <alt_avalon_i2c_interrupt_transaction_status+0xc8>
 80086fc:	e13fff17 	ldw	r4,-4(fp)
 8008700:	80081d40 	call	80081d4 <alt_avalon_i2c_is_busy>
 8008704:	103ff01e 	bne	r2,zero,80086c8 <__alt_data_end+0xfc0086c8>
 8008708:	e0bffb17 	ldw	r2,-20(fp)
 800870c:	10800017 	ldw	r2,0(r2)
 8008710:	e0fffe04 	addi	r3,fp,-8
 8008714:	180f883a 	mov	r7,r3
 8008718:	000d883a 	mov	r6,zero
 800871c:	100b883a 	mov	r5,r2
 8008720:	e13fff17 	ldw	r4,-4(fp)
 8008724:	80082180 	call	8008218 <alt_avalon_i2c_rx_read_available>
 8008728:	e13fff17 	ldw	r4,-4(fp)
 800872c:	8007e7c0 	call	8007e7c <alt_avalon_i2c_disable>
 8008730:	e0bffb17 	ldw	r2,-20(fp)
 8008734:	10000215 	stw	zero,8(r2)
 8008738:	e0bffc17 	ldw	r2,-16(fp)
 800873c:	00000a06 	br	8008768 <alt_avalon_i2c_interrupt_transaction_status+0x128>
 8008740:	e0bffb17 	ldw	r2,-20(fp)
 8008744:	10800217 	ldw	r2,8(r2)
 8008748:	10000626 	beq	r2,zero,8008764 <alt_avalon_i2c_interrupt_transaction_status+0x124>
 800874c:	e0bffd17 	ldw	r2,-12(fp)
 8008750:	100b883a 	mov	r5,r2
 8008754:	e13fff17 	ldw	r4,-4(fp)
 8008758:	80094740 	call	8009474 <alt_avalon_i2c_int_enable>
 800875c:	00bffe44 	movi	r2,-7
 8008760:	00000106 	br	8008768 <alt_avalon_i2c_interrupt_transaction_status+0x128>
 8008764:	0005883a 	mov	r2,zero
 8008768:	e037883a 	mov	sp,fp
 800876c:	dfc00117 	ldw	ra,4(sp)
 8008770:	df000017 	ldw	fp,0(sp)
 8008774:	dec00204 	addi	sp,sp,8
 8008778:	f800283a 	ret

0800877c <alt_avalon_i2c_master_tx>:
 800877c:	defff704 	addi	sp,sp,-36
 8008780:	dfc00815 	stw	ra,32(sp)
 8008784:	df000715 	stw	fp,28(sp)
 8008788:	df000704 	addi	fp,sp,28
 800878c:	e13ffc15 	stw	r4,-16(fp)
 8008790:	e17ffd15 	stw	r5,-12(fp)
 8008794:	e1bffe15 	stw	r6,-8(fp)
 8008798:	3805883a 	mov	r2,r7
 800879c:	e0bfff05 	stb	r2,-4(fp)
 80087a0:	0089c404 	movi	r2,10000
 80087a4:	e0bffb15 	stw	r2,-20(fp)
 80087a8:	00002206 	br	8008834 <alt_avalon_i2c_master_tx+0xb8>
 80087ac:	e0bffb17 	ldw	r2,-20(fp)
 80087b0:	108002a8 	cmpgeui	r2,r2,10
 80087b4:	1000021e 	bne	r2,zero,80087c0 <alt_avalon_i2c_master_tx+0x44>
 80087b8:	0109c404 	movi	r4,10000
 80087bc:	800a5040 	call	800a504 <alt_busy_sleep>
 80087c0:	e0bfff03 	ldbu	r2,-4(fp)
 80087c4:	10000926 	beq	r2,zero,80087ec <alt_avalon_i2c_master_tx+0x70>
 80087c8:	00800044 	movi	r2,1
 80087cc:	d8800015 	stw	r2,0(sp)
 80087d0:	000f883a 	mov	r7,zero
 80087d4:	e1bffe17 	ldw	r6,-8(fp)
 80087d8:	e17ffd17 	ldw	r5,-12(fp)
 80087dc:	e13ffc17 	ldw	r4,-16(fp)
 80087e0:	8008d280 	call	8008d28 <alt_avalon_i2c_master_transmit_using_interrupts>
 80087e4:	e0bffa15 	stw	r2,-24(fp)
 80087e8:	00000806 	br	800880c <alt_avalon_i2c_master_tx+0x90>
 80087ec:	00800044 	movi	r2,1
 80087f0:	d8800015 	stw	r2,0(sp)
 80087f4:	000f883a 	mov	r7,zero
 80087f8:	e1bffe17 	ldw	r6,-8(fp)
 80087fc:	e17ffd17 	ldw	r5,-12(fp)
 8008800:	e13ffc17 	ldw	r4,-16(fp)
 8008804:	8008b680 	call	8008b68 <alt_avalon_i2c_master_transmit>
 8008808:	e0bffa15 	stw	r2,-24(fp)
 800880c:	e0bffa17 	ldw	r2,-24(fp)
 8008810:	10bffea0 	cmpeqi	r2,r2,-6
 8008814:	1000061e 	bne	r2,zero,8008830 <alt_avalon_i2c_master_tx+0xb4>
 8008818:	e0bffa17 	ldw	r2,-24(fp)
 800881c:	10bffee0 	cmpeqi	r2,r2,-5
 8008820:	1000031e 	bne	r2,zero,8008830 <alt_avalon_i2c_master_tx+0xb4>
 8008824:	e0bffa17 	ldw	r2,-24(fp)
 8008828:	10bffe58 	cmpnei	r2,r2,-7
 800882c:	1000061e 	bne	r2,zero,8008848 <alt_avalon_i2c_master_tx+0xcc>
 8008830:	0001883a 	nop
 8008834:	e0bffb17 	ldw	r2,-20(fp)
 8008838:	10ffffc4 	addi	r3,r2,-1
 800883c:	e0fffb15 	stw	r3,-20(fp)
 8008840:	103fda1e 	bne	r2,zero,80087ac <__alt_data_end+0xfc0087ac>
 8008844:	00000106 	br	800884c <alt_avalon_i2c_master_tx+0xd0>
 8008848:	0001883a 	nop
 800884c:	e0bffa17 	ldw	r2,-24(fp)
 8008850:	e037883a 	mov	sp,fp
 8008854:	dfc00117 	ldw	ra,4(sp)
 8008858:	df000017 	ldw	fp,0(sp)
 800885c:	dec00204 	addi	sp,sp,8
 8008860:	f800283a 	ret

08008864 <alt_avalon_i2c_master_rx>:
 8008864:	defff704 	addi	sp,sp,-36
 8008868:	dfc00815 	stw	ra,32(sp)
 800886c:	df000715 	stw	fp,28(sp)
 8008870:	df000704 	addi	fp,sp,28
 8008874:	e13ffc15 	stw	r4,-16(fp)
 8008878:	e17ffd15 	stw	r5,-12(fp)
 800887c:	e1bffe15 	stw	r6,-8(fp)
 8008880:	3805883a 	mov	r2,r7
 8008884:	e0bfff05 	stb	r2,-4(fp)
 8008888:	0089c404 	movi	r2,10000
 800888c:	e0bffb15 	stw	r2,-20(fp)
 8008890:	e0bfff03 	ldbu	r2,-4(fp)
 8008894:	10003426 	beq	r2,zero,8008968 <alt_avalon_i2c_master_rx+0x104>
 8008898:	00001706 	br	80088f8 <alt_avalon_i2c_master_rx+0x94>
 800889c:	e0bffb17 	ldw	r2,-20(fp)
 80088a0:	108002a8 	cmpgeui	r2,r2,10
 80088a4:	1000021e 	bne	r2,zero,80088b0 <alt_avalon_i2c_master_rx+0x4c>
 80088a8:	0109c404 	movi	r4,10000
 80088ac:	800a5040 	call	800a504 <alt_busy_sleep>
 80088b0:	00800044 	movi	r2,1
 80088b4:	d8800015 	stw	r2,0(sp)
 80088b8:	000f883a 	mov	r7,zero
 80088bc:	e1bffe17 	ldw	r6,-8(fp)
 80088c0:	e17ffd17 	ldw	r5,-12(fp)
 80088c4:	e13ffc17 	ldw	r4,-16(fp)
 80088c8:	80091440 	call	8009144 <alt_avalon_i2c_master_receive_using_interrupts>
 80088cc:	e0bffa15 	stw	r2,-24(fp)
 80088d0:	e0bffa17 	ldw	r2,-24(fp)
 80088d4:	10bffea0 	cmpeqi	r2,r2,-6
 80088d8:	1000061e 	bne	r2,zero,80088f4 <alt_avalon_i2c_master_rx+0x90>
 80088dc:	e0bffa17 	ldw	r2,-24(fp)
 80088e0:	10bffee0 	cmpeqi	r2,r2,-5
 80088e4:	1000031e 	bne	r2,zero,80088f4 <alt_avalon_i2c_master_rx+0x90>
 80088e8:	e0bffa17 	ldw	r2,-24(fp)
 80088ec:	10bffe58 	cmpnei	r2,r2,-7
 80088f0:	1000221e 	bne	r2,zero,800897c <alt_avalon_i2c_master_rx+0x118>
 80088f4:	0001883a 	nop
 80088f8:	e0bffb17 	ldw	r2,-20(fp)
 80088fc:	10ffffc4 	addi	r3,r2,-1
 8008900:	e0fffb15 	stw	r3,-20(fp)
 8008904:	103fe51e 	bne	r2,zero,800889c <__alt_data_end+0xfc00889c>
 8008908:	00001f06 	br	8008988 <alt_avalon_i2c_master_rx+0x124>
 800890c:	e0bffb17 	ldw	r2,-20(fp)
 8008910:	108002a8 	cmpgeui	r2,r2,10
 8008914:	1000021e 	bne	r2,zero,8008920 <alt_avalon_i2c_master_rx+0xbc>
 8008918:	0109c404 	movi	r4,10000
 800891c:	800a5040 	call	800a504 <alt_busy_sleep>
 8008920:	00800044 	movi	r2,1
 8008924:	d8800015 	stw	r2,0(sp)
 8008928:	000f883a 	mov	r7,zero
 800892c:	e1bffe17 	ldw	r6,-8(fp)
 8008930:	e17ffd17 	ldw	r5,-12(fp)
 8008934:	e13ffc17 	ldw	r4,-16(fp)
 8008938:	8008f340 	call	8008f34 <alt_avalon_i2c_master_receive>
 800893c:	e0bffa15 	stw	r2,-24(fp)
 8008940:	e0bffa17 	ldw	r2,-24(fp)
 8008944:	10bffea0 	cmpeqi	r2,r2,-6
 8008948:	1000061e 	bne	r2,zero,8008964 <alt_avalon_i2c_master_rx+0x100>
 800894c:	e0bffa17 	ldw	r2,-24(fp)
 8008950:	10bffee0 	cmpeqi	r2,r2,-5
 8008954:	1000031e 	bne	r2,zero,8008964 <alt_avalon_i2c_master_rx+0x100>
 8008958:	e0bffa17 	ldw	r2,-24(fp)
 800895c:	10bffe58 	cmpnei	r2,r2,-7
 8008960:	1000081e 	bne	r2,zero,8008984 <alt_avalon_i2c_master_rx+0x120>
 8008964:	0001883a 	nop
 8008968:	e0bffb17 	ldw	r2,-20(fp)
 800896c:	10ffffc4 	addi	r3,r2,-1
 8008970:	e0fffb15 	stw	r3,-20(fp)
 8008974:	103fe51e 	bne	r2,zero,800890c <__alt_data_end+0xfc00890c>
 8008978:	00000306 	br	8008988 <alt_avalon_i2c_master_rx+0x124>
 800897c:	0001883a 	nop
 8008980:	00000106 	br	8008988 <alt_avalon_i2c_master_rx+0x124>
 8008984:	0001883a 	nop
 8008988:	e0bffa17 	ldw	r2,-24(fp)
 800898c:	e037883a 	mov	sp,fp
 8008990:	dfc00117 	ldw	ra,4(sp)
 8008994:	df000017 	ldw	fp,0(sp)
 8008998:	dec00204 	addi	sp,sp,8
 800899c:	f800283a 	ret

080089a0 <alt_avalon_i2c_master_tx_rx>:
 80089a0:	defff604 	addi	sp,sp,-40
 80089a4:	dfc00915 	stw	ra,36(sp)
 80089a8:	df000815 	stw	fp,32(sp)
 80089ac:	df000804 	addi	fp,sp,32
 80089b0:	e13ffb15 	stw	r4,-20(fp)
 80089b4:	e17ffc15 	stw	r5,-16(fp)
 80089b8:	e1bffd15 	stw	r6,-12(fp)
 80089bc:	e1fffe15 	stw	r7,-8(fp)
 80089c0:	e0800317 	ldw	r2,12(fp)
 80089c4:	e0bfff05 	stb	r2,-4(fp)
 80089c8:	0089c404 	movi	r2,10000
 80089cc:	e0bffa15 	stw	r2,-24(fp)
 80089d0:	e0bfff03 	ldbu	r2,-4(fp)
 80089d4:	10005626 	beq	r2,zero,8008b30 <alt_avalon_i2c_master_tx_rx+0x190>
 80089d8:	00002806 	br	8008a7c <alt_avalon_i2c_master_tx_rx+0xdc>
 80089dc:	e0bffa17 	ldw	r2,-24(fp)
 80089e0:	108002a8 	cmpgeui	r2,r2,10
 80089e4:	1000021e 	bne	r2,zero,80089f0 <alt_avalon_i2c_master_tx_rx+0x50>
 80089e8:	0109c404 	movi	r4,10000
 80089ec:	800a5040 	call	800a504 <alt_busy_sleep>
 80089f0:	d8000015 	stw	zero,0(sp)
 80089f4:	000f883a 	mov	r7,zero
 80089f8:	e1bffd17 	ldw	r6,-12(fp)
 80089fc:	e17ffc17 	ldw	r5,-16(fp)
 8008a00:	e13ffb17 	ldw	r4,-20(fp)
 8008a04:	8008d280 	call	8008d28 <alt_avalon_i2c_master_transmit_using_interrupts>
 8008a08:	e0bff915 	stw	r2,-28(fp)
 8008a0c:	e0bff917 	ldw	r2,-28(fp)
 8008a10:	10bffea0 	cmpeqi	r2,r2,-6
 8008a14:	1000191e 	bne	r2,zero,8008a7c <alt_avalon_i2c_master_tx_rx+0xdc>
 8008a18:	e0bff917 	ldw	r2,-28(fp)
 8008a1c:	10bffee0 	cmpeqi	r2,r2,-5
 8008a20:	1000161e 	bne	r2,zero,8008a7c <alt_avalon_i2c_master_tx_rx+0xdc>
 8008a24:	e0bff917 	ldw	r2,-28(fp)
 8008a28:	10bffe58 	cmpnei	r2,r2,-7
 8008a2c:	1000011e 	bne	r2,zero,8008a34 <alt_avalon_i2c_master_tx_rx+0x94>
 8008a30:	00001206 	br	8008a7c <alt_avalon_i2c_master_tx_rx+0xdc>
 8008a34:	00800044 	movi	r2,1
 8008a38:	d8800015 	stw	r2,0(sp)
 8008a3c:	01c00044 	movi	r7,1
 8008a40:	e1800217 	ldw	r6,8(fp)
 8008a44:	e17ffe17 	ldw	r5,-8(fp)
 8008a48:	e13ffb17 	ldw	r4,-20(fp)
 8008a4c:	80091440 	call	8009144 <alt_avalon_i2c_master_receive_using_interrupts>
 8008a50:	e0bff915 	stw	r2,-28(fp)
 8008a54:	e0bff917 	ldw	r2,-28(fp)
 8008a58:	10bffea0 	cmpeqi	r2,r2,-6
 8008a5c:	1000061e 	bne	r2,zero,8008a78 <alt_avalon_i2c_master_tx_rx+0xd8>
 8008a60:	e0bff917 	ldw	r2,-28(fp)
 8008a64:	10bffee0 	cmpeqi	r2,r2,-5
 8008a68:	1000031e 	bne	r2,zero,8008a78 <alt_avalon_i2c_master_tx_rx+0xd8>
 8008a6c:	e0bff917 	ldw	r2,-28(fp)
 8008a70:	10bffe58 	cmpnei	r2,r2,-7
 8008a74:	1000331e 	bne	r2,zero,8008b44 <alt_avalon_i2c_master_tx_rx+0x1a4>
 8008a78:	0001883a 	nop
 8008a7c:	e0bffa17 	ldw	r2,-24(fp)
 8008a80:	10ffffc4 	addi	r3,r2,-1
 8008a84:	e0fffa15 	stw	r3,-24(fp)
 8008a88:	103fd41e 	bne	r2,zero,80089dc <__alt_data_end+0xfc0089dc>
 8008a8c:	00003006 	br	8008b50 <alt_avalon_i2c_master_tx_rx+0x1b0>
 8008a90:	e0bffa17 	ldw	r2,-24(fp)
 8008a94:	108002a8 	cmpgeui	r2,r2,10
 8008a98:	1000021e 	bne	r2,zero,8008aa4 <alt_avalon_i2c_master_tx_rx+0x104>
 8008a9c:	0109c404 	movi	r4,10000
 8008aa0:	800a5040 	call	800a504 <alt_busy_sleep>
 8008aa4:	d8000015 	stw	zero,0(sp)
 8008aa8:	000f883a 	mov	r7,zero
 8008aac:	e1bffd17 	ldw	r6,-12(fp)
 8008ab0:	e17ffc17 	ldw	r5,-16(fp)
 8008ab4:	e13ffb17 	ldw	r4,-20(fp)
 8008ab8:	8008b680 	call	8008b68 <alt_avalon_i2c_master_transmit>
 8008abc:	e0bff915 	stw	r2,-28(fp)
 8008ac0:	e0bff917 	ldw	r2,-28(fp)
 8008ac4:	10bffea0 	cmpeqi	r2,r2,-6
 8008ac8:	1000191e 	bne	r2,zero,8008b30 <alt_avalon_i2c_master_tx_rx+0x190>
 8008acc:	e0bff917 	ldw	r2,-28(fp)
 8008ad0:	10bffee0 	cmpeqi	r2,r2,-5
 8008ad4:	1000161e 	bne	r2,zero,8008b30 <alt_avalon_i2c_master_tx_rx+0x190>
 8008ad8:	e0bff917 	ldw	r2,-28(fp)
 8008adc:	10bffe58 	cmpnei	r2,r2,-7
 8008ae0:	1000011e 	bne	r2,zero,8008ae8 <alt_avalon_i2c_master_tx_rx+0x148>
 8008ae4:	00001206 	br	8008b30 <alt_avalon_i2c_master_tx_rx+0x190>
 8008ae8:	00800044 	movi	r2,1
 8008aec:	d8800015 	stw	r2,0(sp)
 8008af0:	01c00044 	movi	r7,1
 8008af4:	e1800217 	ldw	r6,8(fp)
 8008af8:	e17ffe17 	ldw	r5,-8(fp)
 8008afc:	e13ffb17 	ldw	r4,-20(fp)
 8008b00:	8008f340 	call	8008f34 <alt_avalon_i2c_master_receive>
 8008b04:	e0bff915 	stw	r2,-28(fp)
 8008b08:	e0bff917 	ldw	r2,-28(fp)
 8008b0c:	10bffea0 	cmpeqi	r2,r2,-6
 8008b10:	1000061e 	bne	r2,zero,8008b2c <alt_avalon_i2c_master_tx_rx+0x18c>
 8008b14:	e0bff917 	ldw	r2,-28(fp)
 8008b18:	10bffee0 	cmpeqi	r2,r2,-5
 8008b1c:	1000031e 	bne	r2,zero,8008b2c <alt_avalon_i2c_master_tx_rx+0x18c>
 8008b20:	e0bff917 	ldw	r2,-28(fp)
 8008b24:	10bffe58 	cmpnei	r2,r2,-7
 8008b28:	1000081e 	bne	r2,zero,8008b4c <alt_avalon_i2c_master_tx_rx+0x1ac>
 8008b2c:	0001883a 	nop
 8008b30:	e0bffa17 	ldw	r2,-24(fp)
 8008b34:	10ffffc4 	addi	r3,r2,-1
 8008b38:	e0fffa15 	stw	r3,-24(fp)
 8008b3c:	103fd41e 	bne	r2,zero,8008a90 <__alt_data_end+0xfc008a90>
 8008b40:	00000306 	br	8008b50 <alt_avalon_i2c_master_tx_rx+0x1b0>
 8008b44:	0001883a 	nop
 8008b48:	00000106 	br	8008b50 <alt_avalon_i2c_master_tx_rx+0x1b0>
 8008b4c:	0001883a 	nop
 8008b50:	e0bff917 	ldw	r2,-28(fp)
 8008b54:	e037883a 	mov	sp,fp
 8008b58:	dfc00117 	ldw	ra,4(sp)
 8008b5c:	df000017 	ldw	fp,0(sp)
 8008b60:	dec00204 	addi	sp,sp,8
 8008b64:	f800283a 	ret

08008b68 <alt_avalon_i2c_master_transmit>:
 8008b68:	defff704 	addi	sp,sp,-36
 8008b6c:	dfc00815 	stw	ra,32(sp)
 8008b70:	df000715 	stw	fp,28(sp)
 8008b74:	df000704 	addi	fp,sp,28
 8008b78:	e13ffb15 	stw	r4,-20(fp)
 8008b7c:	e17ffc15 	stw	r5,-16(fp)
 8008b80:	e1bffd15 	stw	r6,-12(fp)
 8008b84:	3807883a 	mov	r3,r7
 8008b88:	e0800217 	ldw	r2,8(fp)
 8008b8c:	e0fffe05 	stb	r3,-8(fp)
 8008b90:	e0bfff05 	stb	r2,-4(fp)
 8008b94:	e03ffa15 	stw	zero,-24(fp)
 8008b98:	0149c404 	movi	r5,10000
 8008b9c:	e13ffd17 	ldw	r4,-12(fp)
 8008ba0:	80057940 	call	8005794 <__mulsi3>
 8008ba4:	e0bff915 	stw	r2,-28(fp)
 8008ba8:	e0bffd17 	ldw	r2,-12(fp)
 8008bac:	1000021e 	bne	r2,zero,8008bb8 <alt_avalon_i2c_master_transmit+0x50>
 8008bb0:	0005883a 	mov	r2,zero
 8008bb4:	00005706 	br	8008d14 <alt_avalon_i2c_master_transmit+0x1ac>
 8008bb8:	e0bffe03 	ldbu	r2,-8(fp)
 8008bbc:	10000a1e 	bne	r2,zero,8008be8 <alt_avalon_i2c_master_transmit+0x80>
 8008bc0:	e13ffb17 	ldw	r4,-20(fp)
 8008bc4:	8007de40 	call	8007de4 <alt_avalon_i2c_enable>
 8008bc8:	e0bffa15 	stw	r2,-24(fp)
 8008bcc:	e0bffa17 	ldw	r2,-24(fp)
 8008bd0:	10000226 	beq	r2,zero,8008bdc <alt_avalon_i2c_master_transmit+0x74>
 8008bd4:	e0bffa17 	ldw	r2,-24(fp)
 8008bd8:	00004e06 	br	8008d14 <alt_avalon_i2c_master_transmit+0x1ac>
 8008bdc:	01400704 	movi	r5,28
 8008be0:	e13ffb17 	ldw	r4,-20(fp)
 8008be4:	80093d00 	call	80093d0 <alt_avalon_i2c_int_clear>
 8008be8:	e0bffe03 	ldbu	r2,-8(fp)
 8008bec:	100d883a 	mov	r6,r2
 8008bf0:	000b883a 	mov	r5,zero
 8008bf4:	e13ffb17 	ldw	r4,-20(fp)
 8008bf8:	800844c0 	call	800844c <alt_avalon_i2c_send_address>
 8008bfc:	e0bffa15 	stw	r2,-24(fp)
 8008c00:	e0bffa17 	ldw	r2,-24(fp)
 8008c04:	1000271e 	bne	r2,zero,8008ca4 <alt_avalon_i2c_master_transmit+0x13c>
 8008c08:	00000f06 	br	8008c48 <alt_avalon_i2c_master_transmit+0xe0>
 8008c0c:	e0bffc17 	ldw	r2,-16(fp)
 8008c10:	10800003 	ldbu	r2,0(r2)
 8008c14:	10803fcc 	andi	r2,r2,255
 8008c18:	000f883a 	mov	r7,zero
 8008c1c:	000d883a 	mov	r6,zero
 8008c20:	100b883a 	mov	r5,r2
 8008c24:	e13ffb17 	ldw	r4,-20(fp)
 8008c28:	80083680 	call	8008368 <alt_avalon_i2c_cmd_write>
 8008c2c:	e0bffa15 	stw	r2,-24(fp)
 8008c30:	e0bffc17 	ldw	r2,-16(fp)
 8008c34:	10800044 	addi	r2,r2,1
 8008c38:	e0bffc15 	stw	r2,-16(fp)
 8008c3c:	e0bffd17 	ldw	r2,-12(fp)
 8008c40:	10bfffc4 	addi	r2,r2,-1
 8008c44:	e0bffd15 	stw	r2,-12(fp)
 8008c48:	e0bffd17 	ldw	r2,-12(fp)
 8008c4c:	108000b0 	cmpltui	r2,r2,2
 8008c50:	1000021e 	bne	r2,zero,8008c5c <alt_avalon_i2c_master_transmit+0xf4>
 8008c54:	e0bffa17 	ldw	r2,-24(fp)
 8008c58:	103fec26 	beq	r2,zero,8008c0c <__alt_data_end+0xfc008c0c>
 8008c5c:	e0bffa17 	ldw	r2,-24(fp)
 8008c60:	1000101e 	bne	r2,zero,8008ca4 <alt_avalon_i2c_master_transmit+0x13c>
 8008c64:	e0bffc17 	ldw	r2,-16(fp)
 8008c68:	10800003 	ldbu	r2,0(r2)
 8008c6c:	10803fcc 	andi	r2,r2,255
 8008c70:	e0ffff03 	ldbu	r3,-4(fp)
 8008c74:	180f883a 	mov	r7,r3
 8008c78:	000d883a 	mov	r6,zero
 8008c7c:	100b883a 	mov	r5,r2
 8008c80:	e13ffb17 	ldw	r4,-20(fp)
 8008c84:	80083680 	call	8008368 <alt_avalon_i2c_cmd_write>
 8008c88:	e0bffa15 	stw	r2,-24(fp)
 8008c8c:	e0bffc17 	ldw	r2,-16(fp)
 8008c90:	10800044 	addi	r2,r2,1
 8008c94:	e0bffc15 	stw	r2,-16(fp)
 8008c98:	e0bffd17 	ldw	r2,-12(fp)
 8008c9c:	10bfffc4 	addi	r2,r2,-1
 8008ca0:	e0bffd15 	stw	r2,-12(fp)
 8008ca4:	e0bfff03 	ldbu	r2,-4(fp)
 8008ca8:	1000101e 	bne	r2,zero,8008cec <alt_avalon_i2c_master_transmit+0x184>
 8008cac:	e0bffa17 	ldw	r2,-24(fp)
 8008cb0:	10001726 	beq	r2,zero,8008d10 <alt_avalon_i2c_master_transmit+0x1a8>
 8008cb4:	00000d06 	br	8008cec <alt_avalon_i2c_master_transmit+0x184>
 8008cb8:	e0bff917 	ldw	r2,-28(fp)
 8008cbc:	108002a8 	cmpgeui	r2,r2,10
 8008cc0:	1000021e 	bne	r2,zero,8008ccc <alt_avalon_i2c_master_transmit+0x164>
 8008cc4:	0109c404 	movi	r4,10000
 8008cc8:	800a5040 	call	800a504 <alt_busy_sleep>
 8008ccc:	e0bff917 	ldw	r2,-28(fp)
 8008cd0:	10bfffc4 	addi	r2,r2,-1
 8008cd4:	e0bff915 	stw	r2,-28(fp)
 8008cd8:	e0bff917 	ldw	r2,-28(fp)
 8008cdc:	1000031e 	bne	r2,zero,8008cec <alt_avalon_i2c_master_transmit+0x184>
 8008ce0:	00bfff84 	movi	r2,-2
 8008ce4:	e0bffa15 	stw	r2,-24(fp)
 8008ce8:	00000306 	br	8008cf8 <alt_avalon_i2c_master_transmit+0x190>
 8008cec:	e13ffb17 	ldw	r4,-20(fp)
 8008cf0:	80081d40 	call	80081d4 <alt_avalon_i2c_is_busy>
 8008cf4:	103ff01e 	bne	r2,zero,8008cb8 <__alt_data_end+0xfc008cb8>
 8008cf8:	e0bffa04 	addi	r2,fp,-24
 8008cfc:	100b883a 	mov	r5,r2
 8008d00:	e13ffb17 	ldw	r4,-20(fp)
 8008d04:	80085a80 	call	80085a8 <alt_avalon_i2c_check_nack>
 8008d08:	e13ffb17 	ldw	r4,-20(fp)
 8008d0c:	8007e7c0 	call	8007e7c <alt_avalon_i2c_disable>
 8008d10:	e0bffa17 	ldw	r2,-24(fp)
 8008d14:	e037883a 	mov	sp,fp
 8008d18:	dfc00117 	ldw	ra,4(sp)
 8008d1c:	df000017 	ldw	fp,0(sp)
 8008d20:	dec00204 	addi	sp,sp,8
 8008d24:	f800283a 	ret

08008d28 <alt_avalon_i2c_master_transmit_using_interrupts>:
 8008d28:	defff604 	addi	sp,sp,-40
 8008d2c:	dfc00915 	stw	ra,36(sp)
 8008d30:	df000815 	stw	fp,32(sp)
 8008d34:	df000804 	addi	fp,sp,32
 8008d38:	e13ffb15 	stw	r4,-20(fp)
 8008d3c:	e17ffc15 	stw	r5,-16(fp)
 8008d40:	e1bffd15 	stw	r6,-12(fp)
 8008d44:	3807883a 	mov	r3,r7
 8008d48:	e0800217 	ldw	r2,8(fp)
 8008d4c:	e0fffe05 	stb	r3,-8(fp)
 8008d50:	e0bfff05 	stb	r2,-4(fp)
 8008d54:	e03ff815 	stw	zero,-32(fp)
 8008d58:	0149c404 	movi	r5,10000
 8008d5c:	e13ffd17 	ldw	r4,-12(fp)
 8008d60:	80057940 	call	8005794 <__mulsi3>
 8008d64:	e0bff915 	stw	r2,-28(fp)
 8008d68:	e0bffb17 	ldw	r2,-20(fp)
 8008d6c:	10800717 	ldw	r2,28(r2)
 8008d70:	e0bffa15 	stw	r2,-24(fp)
 8008d74:	e0bffd17 	ldw	r2,-12(fp)
 8008d78:	1000021e 	bne	r2,zero,8008d84 <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
 8008d7c:	0005883a 	mov	r2,zero
 8008d80:	00006706 	br	8008f20 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
 8008d84:	e0bffb17 	ldw	r2,-20(fp)
 8008d88:	10c00617 	ldw	r3,24(r2)
 8008d8c:	00820034 	movhi	r2,2048
 8008d90:	109e9a04 	addi	r2,r2,31336
 8008d94:	18800226 	beq	r3,r2,8008da0 <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
 8008d98:	00bfff44 	movi	r2,-3
 8008d9c:	00006006 	br	8008f20 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
 8008da0:	e0bffe03 	ldbu	r2,-8(fp)
 8008da4:	10000a1e 	bne	r2,zero,8008dd0 <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
 8008da8:	e13ffb17 	ldw	r4,-20(fp)
 8008dac:	8007de40 	call	8007de4 <alt_avalon_i2c_enable>
 8008db0:	e0bff815 	stw	r2,-32(fp)
 8008db4:	e0bff817 	ldw	r2,-32(fp)
 8008db8:	10000226 	beq	r2,zero,8008dc4 <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
 8008dbc:	e0bff817 	ldw	r2,-32(fp)
 8008dc0:	00005706 	br	8008f20 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
 8008dc4:	01400704 	movi	r5,28
 8008dc8:	e13ffb17 	ldw	r4,-20(fp)
 8008dcc:	80093d00 	call	80093d0 <alt_avalon_i2c_int_clear>
 8008dd0:	e0bffe03 	ldbu	r2,-8(fp)
 8008dd4:	100d883a 	mov	r6,r2
 8008dd8:	000b883a 	mov	r5,zero
 8008ddc:	e13ffb17 	ldw	r4,-20(fp)
 8008de0:	800844c0 	call	800844c <alt_avalon_i2c_send_address>
 8008de4:	e0bff815 	stw	r2,-32(fp)
 8008de8:	e0bff817 	ldw	r2,-32(fp)
 8008dec:	1000271e 	bne	r2,zero,8008e8c <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
 8008df0:	00000f06 	br	8008e30 <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
 8008df4:	e0bffc17 	ldw	r2,-16(fp)
 8008df8:	10800003 	ldbu	r2,0(r2)
 8008dfc:	10803fcc 	andi	r2,r2,255
 8008e00:	000f883a 	mov	r7,zero
 8008e04:	000d883a 	mov	r6,zero
 8008e08:	100b883a 	mov	r5,r2
 8008e0c:	e13ffb17 	ldw	r4,-20(fp)
 8008e10:	80083680 	call	8008368 <alt_avalon_i2c_cmd_write>
 8008e14:	e0bff815 	stw	r2,-32(fp)
 8008e18:	e0bffc17 	ldw	r2,-16(fp)
 8008e1c:	10800044 	addi	r2,r2,1
 8008e20:	e0bffc15 	stw	r2,-16(fp)
 8008e24:	e0bffd17 	ldw	r2,-12(fp)
 8008e28:	10bfffc4 	addi	r2,r2,-1
 8008e2c:	e0bffd15 	stw	r2,-12(fp)
 8008e30:	e0bffd17 	ldw	r2,-12(fp)
 8008e34:	108000b0 	cmpltui	r2,r2,2
 8008e38:	1000021e 	bne	r2,zero,8008e44 <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
 8008e3c:	e0bff817 	ldw	r2,-32(fp)
 8008e40:	103fec26 	beq	r2,zero,8008df4 <__alt_data_end+0xfc008df4>
 8008e44:	e0bff817 	ldw	r2,-32(fp)
 8008e48:	1000101e 	bne	r2,zero,8008e8c <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
 8008e4c:	e0bffc17 	ldw	r2,-16(fp)
 8008e50:	10800003 	ldbu	r2,0(r2)
 8008e54:	10803fcc 	andi	r2,r2,255
 8008e58:	e0ffff03 	ldbu	r3,-4(fp)
 8008e5c:	180f883a 	mov	r7,r3
 8008e60:	000d883a 	mov	r6,zero
 8008e64:	100b883a 	mov	r5,r2
 8008e68:	e13ffb17 	ldw	r4,-20(fp)
 8008e6c:	80083680 	call	8008368 <alt_avalon_i2c_cmd_write>
 8008e70:	e0bff815 	stw	r2,-32(fp)
 8008e74:	e0bffc17 	ldw	r2,-16(fp)
 8008e78:	10800044 	addi	r2,r2,1
 8008e7c:	e0bffc15 	stw	r2,-16(fp)
 8008e80:	e0bffd17 	ldw	r2,-12(fp)
 8008e84:	10bfffc4 	addi	r2,r2,-1
 8008e88:	e0bffd15 	stw	r2,-12(fp)
 8008e8c:	e0bff817 	ldw	r2,-32(fp)
 8008e90:	10001426 	beq	r2,zero,8008ee4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
 8008e94:	00000d06 	br	8008ecc <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
 8008e98:	e0bff917 	ldw	r2,-28(fp)
 8008e9c:	108002a8 	cmpgeui	r2,r2,10
 8008ea0:	1000021e 	bne	r2,zero,8008eac <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
 8008ea4:	0109c404 	movi	r4,10000
 8008ea8:	800a5040 	call	800a504 <alt_busy_sleep>
 8008eac:	e0bff917 	ldw	r2,-28(fp)
 8008eb0:	10bfffc4 	addi	r2,r2,-1
 8008eb4:	e0bff915 	stw	r2,-28(fp)
 8008eb8:	e0bff917 	ldw	r2,-28(fp)
 8008ebc:	1000031e 	bne	r2,zero,8008ecc <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
 8008ec0:	00bfff84 	movi	r2,-2
 8008ec4:	e0bff815 	stw	r2,-32(fp)
 8008ec8:	00000306 	br	8008ed8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
 8008ecc:	e13ffb17 	ldw	r4,-20(fp)
 8008ed0:	80081d40 	call	80081d4 <alt_avalon_i2c_is_busy>
 8008ed4:	103ff01e 	bne	r2,zero,8008e98 <__alt_data_end+0xfc008e98>
 8008ed8:	e13ffb17 	ldw	r4,-20(fp)
 8008edc:	8007e7c0 	call	8007e7c <alt_avalon_i2c_disable>
 8008ee0:	00000e06 	br	8008f1c <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
 8008ee4:	e0bfff03 	ldbu	r2,-4(fp)
 8008ee8:	10000c26 	beq	r2,zero,8008f1c <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
 8008eec:	01400704 	movi	r5,28
 8008ef0:	e13ffb17 	ldw	r4,-20(fp)
 8008ef4:	80093d00 	call	80093d0 <alt_avalon_i2c_int_clear>
 8008ef8:	000b883a 	mov	r5,zero
 8008efc:	e13ffb17 	ldw	r4,-20(fp)
 8008f00:	80096180 	call	8009618 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
 8008f04:	e0bffa17 	ldw	r2,-24(fp)
 8008f08:	00c00044 	movi	r3,1
 8008f0c:	10c00215 	stw	r3,8(r2)
 8008f10:	01400044 	movi	r5,1
 8008f14:	e13ffb17 	ldw	r4,-20(fp)
 8008f18:	80094740 	call	8009474 <alt_avalon_i2c_int_enable>
 8008f1c:	e0bff817 	ldw	r2,-32(fp)
 8008f20:	e037883a 	mov	sp,fp
 8008f24:	dfc00117 	ldw	ra,4(sp)
 8008f28:	df000017 	ldw	fp,0(sp)
 8008f2c:	dec00204 	addi	sp,sp,8
 8008f30:	f800283a 	ret

08008f34 <alt_avalon_i2c_master_receive>:
 8008f34:	defff404 	addi	sp,sp,-48
 8008f38:	dfc00b15 	stw	ra,44(sp)
 8008f3c:	df000a15 	stw	fp,40(sp)
 8008f40:	df000a04 	addi	fp,sp,40
 8008f44:	e13ffb15 	stw	r4,-20(fp)
 8008f48:	e17ffc15 	stw	r5,-16(fp)
 8008f4c:	e1bffd15 	stw	r6,-12(fp)
 8008f50:	3807883a 	mov	r3,r7
 8008f54:	e0800217 	ldw	r2,8(fp)
 8008f58:	e0fffe05 	stb	r3,-8(fp)
 8008f5c:	e0bfff05 	stb	r2,-4(fp)
 8008f60:	e03ff915 	stw	zero,-28(fp)
 8008f64:	e03ff715 	stw	zero,-36(fp)
 8008f68:	e03ff815 	stw	zero,-32(fp)
 8008f6c:	e0bffd17 	ldw	r2,-12(fp)
 8008f70:	1000021e 	bne	r2,zero,8008f7c <alt_avalon_i2c_master_receive+0x48>
 8008f74:	0005883a 	mov	r2,zero
 8008f78:	00006d06 	br	8009130 <alt_avalon_i2c_master_receive+0x1fc>
 8008f7c:	e0bffe03 	ldbu	r2,-8(fp)
 8008f80:	10000a1e 	bne	r2,zero,8008fac <alt_avalon_i2c_master_receive+0x78>
 8008f84:	e13ffb17 	ldw	r4,-20(fp)
 8008f88:	8007de40 	call	8007de4 <alt_avalon_i2c_enable>
 8008f8c:	e0bff915 	stw	r2,-28(fp)
 8008f90:	e0bff917 	ldw	r2,-28(fp)
 8008f94:	10000226 	beq	r2,zero,8008fa0 <alt_avalon_i2c_master_receive+0x6c>
 8008f98:	e0bff917 	ldw	r2,-28(fp)
 8008f9c:	00006406 	br	8009130 <alt_avalon_i2c_master_receive+0x1fc>
 8008fa0:	01400704 	movi	r5,28
 8008fa4:	e13ffb17 	ldw	r4,-20(fp)
 8008fa8:	80093d00 	call	80093d0 <alt_avalon_i2c_int_clear>
 8008fac:	e0bffe03 	ldbu	r2,-8(fp)
 8008fb0:	100d883a 	mov	r6,r2
 8008fb4:	01400044 	movi	r5,1
 8008fb8:	e13ffb17 	ldw	r4,-20(fp)
 8008fbc:	800844c0 	call	800844c <alt_avalon_i2c_send_address>
 8008fc0:	e0bff915 	stw	r2,-28(fp)
 8008fc4:	e0bff917 	ldw	r2,-28(fp)
 8008fc8:	1000341e 	bne	r2,zero,800909c <alt_avalon_i2c_master_receive+0x168>
 8008fcc:	00001906 	br	8009034 <alt_avalon_i2c_master_receive+0x100>
 8008fd0:	000f883a 	mov	r7,zero
 8008fd4:	000d883a 	mov	r6,zero
 8008fd8:	000b883a 	mov	r5,zero
 8008fdc:	e13ffb17 	ldw	r4,-20(fp)
 8008fe0:	80083680 	call	8008368 <alt_avalon_i2c_cmd_write>
 8008fe4:	e0bff915 	stw	r2,-28(fp)
 8008fe8:	e0bff817 	ldw	r2,-32(fp)
 8008fec:	10800044 	addi	r2,r2,1
 8008ff0:	e0bff815 	stw	r2,-32(fp)
 8008ff4:	e0bff917 	ldw	r2,-28(fp)
 8008ff8:	10000e1e 	bne	r2,zero,8009034 <alt_avalon_i2c_master_receive+0x100>
 8008ffc:	e0bffa04 	addi	r2,fp,-24
 8009000:	100f883a 	mov	r7,r2
 8009004:	000d883a 	mov	r6,zero
 8009008:	e17ffc17 	ldw	r5,-16(fp)
 800900c:	e13ffb17 	ldw	r4,-20(fp)
 8009010:	80082180 	call	8008218 <alt_avalon_i2c_rx_read_available>
 8009014:	e0bffa17 	ldw	r2,-24(fp)
 8009018:	e0fffc17 	ldw	r3,-16(fp)
 800901c:	1885883a 	add	r2,r3,r2
 8009020:	e0bffc15 	stw	r2,-16(fp)
 8009024:	e0bffa17 	ldw	r2,-24(fp)
 8009028:	e0fff717 	ldw	r3,-36(fp)
 800902c:	1885883a 	add	r2,r3,r2
 8009030:	e0bff715 	stw	r2,-36(fp)
 8009034:	e0bffd17 	ldw	r2,-12(fp)
 8009038:	10bfffc4 	addi	r2,r2,-1
 800903c:	e0fff817 	ldw	r3,-32(fp)
 8009040:	1880022e 	bgeu	r3,r2,800904c <alt_avalon_i2c_master_receive+0x118>
 8009044:	e0bff917 	ldw	r2,-28(fp)
 8009048:	103fe126 	beq	r2,zero,8008fd0 <__alt_data_end+0xfc008fd0>
 800904c:	e0bff917 	ldw	r2,-28(fp)
 8009050:	1000121e 	bne	r2,zero,800909c <alt_avalon_i2c_master_receive+0x168>
 8009054:	e0bfff03 	ldbu	r2,-4(fp)
 8009058:	100f883a 	mov	r7,r2
 800905c:	000d883a 	mov	r6,zero
 8009060:	000b883a 	mov	r5,zero
 8009064:	e13ffb17 	ldw	r4,-20(fp)
 8009068:	80083680 	call	8008368 <alt_avalon_i2c_cmd_write>
 800906c:	e0bff915 	stw	r2,-28(fp)
 8009070:	00000a06 	br	800909c <alt_avalon_i2c_master_receive+0x168>
 8009074:	e17ffc17 	ldw	r5,-16(fp)
 8009078:	e13ffb17 	ldw	r4,-20(fp)
 800907c:	80082c00 	call	80082c0 <alt_avalon_i2c_rx_read>
 8009080:	e0bff915 	stw	r2,-28(fp)
 8009084:	e0bffc17 	ldw	r2,-16(fp)
 8009088:	10800044 	addi	r2,r2,1
 800908c:	e0bffc15 	stw	r2,-16(fp)
 8009090:	e0bff717 	ldw	r2,-36(fp)
 8009094:	10800044 	addi	r2,r2,1
 8009098:	e0bff715 	stw	r2,-36(fp)
 800909c:	e0fff717 	ldw	r3,-36(fp)
 80090a0:	e0bffd17 	ldw	r2,-12(fp)
 80090a4:	1880022e 	bgeu	r3,r2,80090b0 <alt_avalon_i2c_master_receive+0x17c>
 80090a8:	e0bff917 	ldw	r2,-28(fp)
 80090ac:	103ff126 	beq	r2,zero,8009074 <__alt_data_end+0xfc009074>
 80090b0:	e0bfff03 	ldbu	r2,-4(fp)
 80090b4:	1000021e 	bne	r2,zero,80090c0 <alt_avalon_i2c_master_receive+0x18c>
 80090b8:	e0bff917 	ldw	r2,-28(fp)
 80090bc:	10001b26 	beq	r2,zero,800912c <alt_avalon_i2c_master_receive+0x1f8>
 80090c0:	0149c404 	movi	r5,10000
 80090c4:	e13ffd17 	ldw	r4,-12(fp)
 80090c8:	80057940 	call	8005794 <__mulsi3>
 80090cc:	e0bff615 	stw	r2,-40(fp)
 80090d0:	00000d06 	br	8009108 <alt_avalon_i2c_master_receive+0x1d4>
 80090d4:	e0bff617 	ldw	r2,-40(fp)
 80090d8:	108002a8 	cmpgeui	r2,r2,10
 80090dc:	1000021e 	bne	r2,zero,80090e8 <alt_avalon_i2c_master_receive+0x1b4>
 80090e0:	0109c404 	movi	r4,10000
 80090e4:	800a5040 	call	800a504 <alt_busy_sleep>
 80090e8:	e0bff617 	ldw	r2,-40(fp)
 80090ec:	10bfffc4 	addi	r2,r2,-1
 80090f0:	e0bff615 	stw	r2,-40(fp)
 80090f4:	e0bff617 	ldw	r2,-40(fp)
 80090f8:	1000031e 	bne	r2,zero,8009108 <alt_avalon_i2c_master_receive+0x1d4>
 80090fc:	00bfff84 	movi	r2,-2
 8009100:	e0bff915 	stw	r2,-28(fp)
 8009104:	00000306 	br	8009114 <alt_avalon_i2c_master_receive+0x1e0>
 8009108:	e13ffb17 	ldw	r4,-20(fp)
 800910c:	80081d40 	call	80081d4 <alt_avalon_i2c_is_busy>
 8009110:	103ff01e 	bne	r2,zero,80090d4 <__alt_data_end+0xfc0090d4>
 8009114:	e0bff904 	addi	r2,fp,-28
 8009118:	100b883a 	mov	r5,r2
 800911c:	e13ffb17 	ldw	r4,-20(fp)
 8009120:	80085a80 	call	80085a8 <alt_avalon_i2c_check_nack>
 8009124:	e13ffb17 	ldw	r4,-20(fp)
 8009128:	8007e7c0 	call	8007e7c <alt_avalon_i2c_disable>
 800912c:	e0bff917 	ldw	r2,-28(fp)
 8009130:	e037883a 	mov	sp,fp
 8009134:	dfc00117 	ldw	ra,4(sp)
 8009138:	df000017 	ldw	fp,0(sp)
 800913c:	dec00204 	addi	sp,sp,8
 8009140:	f800283a 	ret

08009144 <alt_avalon_i2c_master_receive_using_interrupts>:
 8009144:	defff504 	addi	sp,sp,-44
 8009148:	dfc00a15 	stw	ra,40(sp)
 800914c:	df000915 	stw	fp,36(sp)
 8009150:	df000904 	addi	fp,sp,36
 8009154:	e13ffb15 	stw	r4,-20(fp)
 8009158:	e17ffc15 	stw	r5,-16(fp)
 800915c:	e1bffd15 	stw	r6,-12(fp)
 8009160:	3807883a 	mov	r3,r7
 8009164:	e0800217 	ldw	r2,8(fp)
 8009168:	e0fffe05 	stb	r3,-8(fp)
 800916c:	e0bfff05 	stb	r2,-4(fp)
 8009170:	e03ff715 	stw	zero,-36(fp)
 8009174:	e0bffb17 	ldw	r2,-20(fp)
 8009178:	10800717 	ldw	r2,28(r2)
 800917c:	e0bffa15 	stw	r2,-24(fp)
 8009180:	e03ff915 	stw	zero,-28(fp)
 8009184:	e0bffd17 	ldw	r2,-12(fp)
 8009188:	1000021e 	bne	r2,zero,8009194 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
 800918c:	0005883a 	mov	r2,zero
 8009190:	00006306 	br	8009320 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
 8009194:	e0bffb17 	ldw	r2,-20(fp)
 8009198:	10c00617 	ldw	r3,24(r2)
 800919c:	00820034 	movhi	r2,2048
 80091a0:	109e9a04 	addi	r2,r2,31336
 80091a4:	18800226 	beq	r3,r2,80091b0 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
 80091a8:	00bfff44 	movi	r2,-3
 80091ac:	00005c06 	br	8009320 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
 80091b0:	e0bffe03 	ldbu	r2,-8(fp)
 80091b4:	10000a1e 	bne	r2,zero,80091e0 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
 80091b8:	e13ffb17 	ldw	r4,-20(fp)
 80091bc:	8007de40 	call	8007de4 <alt_avalon_i2c_enable>
 80091c0:	e0bff715 	stw	r2,-36(fp)
 80091c4:	e0bff717 	ldw	r2,-36(fp)
 80091c8:	10000226 	beq	r2,zero,80091d4 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
 80091cc:	e0bff717 	ldw	r2,-36(fp)
 80091d0:	00005306 	br	8009320 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
 80091d4:	01400704 	movi	r5,28
 80091d8:	e13ffb17 	ldw	r4,-20(fp)
 80091dc:	80093d00 	call	80093d0 <alt_avalon_i2c_int_clear>
 80091e0:	e0bffe03 	ldbu	r2,-8(fp)
 80091e4:	100d883a 	mov	r6,r2
 80091e8:	01400044 	movi	r5,1
 80091ec:	e13ffb17 	ldw	r4,-20(fp)
 80091f0:	800844c0 	call	800844c <alt_avalon_i2c_send_address>
 80091f4:	e0bff715 	stw	r2,-36(fp)
 80091f8:	e0bff717 	ldw	r2,-36(fp)
 80091fc:	1000191e 	bne	r2,zero,8009264 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
 8009200:	00000906 	br	8009228 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
 8009204:	000f883a 	mov	r7,zero
 8009208:	000d883a 	mov	r6,zero
 800920c:	000b883a 	mov	r5,zero
 8009210:	e13ffb17 	ldw	r4,-20(fp)
 8009214:	80083680 	call	8008368 <alt_avalon_i2c_cmd_write>
 8009218:	e0bff715 	stw	r2,-36(fp)
 800921c:	e0bff917 	ldw	r2,-28(fp)
 8009220:	10800044 	addi	r2,r2,1
 8009224:	e0bff915 	stw	r2,-28(fp)
 8009228:	e0bffd17 	ldw	r2,-12(fp)
 800922c:	10bfffc4 	addi	r2,r2,-1
 8009230:	e0fff917 	ldw	r3,-28(fp)
 8009234:	1880022e 	bgeu	r3,r2,8009240 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
 8009238:	e0bff717 	ldw	r2,-36(fp)
 800923c:	103ff126 	beq	r2,zero,8009204 <__alt_data_end+0xfc009204>
 8009240:	e0bff717 	ldw	r2,-36(fp)
 8009244:	1000071e 	bne	r2,zero,8009264 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
 8009248:	e0bfff03 	ldbu	r2,-4(fp)
 800924c:	100f883a 	mov	r7,r2
 8009250:	000d883a 	mov	r6,zero
 8009254:	000b883a 	mov	r5,zero
 8009258:	e13ffb17 	ldw	r4,-20(fp)
 800925c:	80083680 	call	8008368 <alt_avalon_i2c_cmd_write>
 8009260:	e0bff715 	stw	r2,-36(fp)
 8009264:	e0bff717 	ldw	r2,-36(fp)
 8009268:	10001826 	beq	r2,zero,80092cc <alt_avalon_i2c_master_receive_using_interrupts+0x188>
 800926c:	0149c404 	movi	r5,10000
 8009270:	e13ffd17 	ldw	r4,-12(fp)
 8009274:	80057940 	call	8005794 <__mulsi3>
 8009278:	e0bff815 	stw	r2,-32(fp)
 800927c:	00000d06 	br	80092b4 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
 8009280:	e0bff817 	ldw	r2,-32(fp)
 8009284:	108002a8 	cmpgeui	r2,r2,10
 8009288:	1000021e 	bne	r2,zero,8009294 <alt_avalon_i2c_master_receive_using_interrupts+0x150>
 800928c:	0109c404 	movi	r4,10000
 8009290:	800a5040 	call	800a504 <alt_busy_sleep>
 8009294:	e0bff817 	ldw	r2,-32(fp)
 8009298:	10bfffc4 	addi	r2,r2,-1
 800929c:	e0bff815 	stw	r2,-32(fp)
 80092a0:	e0bff817 	ldw	r2,-32(fp)
 80092a4:	1000031e 	bne	r2,zero,80092b4 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
 80092a8:	00bfff84 	movi	r2,-2
 80092ac:	e0bff715 	stw	r2,-36(fp)
 80092b0:	00000306 	br	80092c0 <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
 80092b4:	e13ffb17 	ldw	r4,-20(fp)
 80092b8:	80081d40 	call	80081d4 <alt_avalon_i2c_is_busy>
 80092bc:	103ff01e 	bne	r2,zero,8009280 <__alt_data_end+0xfc009280>
 80092c0:	e13ffb17 	ldw	r4,-20(fp)
 80092c4:	8007e7c0 	call	8007e7c <alt_avalon_i2c_disable>
 80092c8:	00001406 	br	800931c <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
 80092cc:	e0bfff03 	ldbu	r2,-4(fp)
 80092d0:	10001226 	beq	r2,zero,800931c <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
 80092d4:	01400704 	movi	r5,28
 80092d8:	e13ffb17 	ldw	r4,-20(fp)
 80092dc:	80093d00 	call	80093d0 <alt_avalon_i2c_int_clear>
 80092e0:	000b883a 	mov	r5,zero
 80092e4:	e13ffb17 	ldw	r4,-20(fp)
 80092e8:	80095680 	call	8009568 <alt_avalon_i2c_rx_fifo_threshold_set>
 80092ec:	e0bffa17 	ldw	r2,-24(fp)
 80092f0:	00c00084 	movi	r3,2
 80092f4:	10c00215 	stw	r3,8(r2)
 80092f8:	e0bffa17 	ldw	r2,-24(fp)
 80092fc:	e0fffc17 	ldw	r3,-16(fp)
 8009300:	10c00015 	stw	r3,0(r2)
 8009304:	e0bffa17 	ldw	r2,-24(fp)
 8009308:	e0fffd17 	ldw	r3,-12(fp)
 800930c:	10c00115 	stw	r3,4(r2)
 8009310:	01400084 	movi	r5,2
 8009314:	e13ffb17 	ldw	r4,-20(fp)
 8009318:	80094740 	call	8009474 <alt_avalon_i2c_int_enable>
 800931c:	e0bff717 	ldw	r2,-36(fp)
 8009320:	e037883a 	mov	sp,fp
 8009324:	dfc00117 	ldw	ra,4(sp)
 8009328:	df000017 	ldw	fp,0(sp)
 800932c:	dec00204 	addi	sp,sp,8
 8009330:	f800283a 	ret

08009334 <alt_avalon_i2c_int_status_get>:
 8009334:	defffd04 	addi	sp,sp,-12
 8009338:	df000215 	stw	fp,8(sp)
 800933c:	df000204 	addi	fp,sp,8
 8009340:	e13ffe15 	stw	r4,-8(fp)
 8009344:	e17fff15 	stw	r5,-4(fp)
 8009348:	e0bffe17 	ldw	r2,-8(fp)
 800934c:	10800317 	ldw	r2,12(r2)
 8009350:	10800404 	addi	r2,r2,16
 8009354:	10c00037 	ldwio	r3,0(r2)
 8009358:	e0bffe17 	ldw	r2,-8(fp)
 800935c:	10800317 	ldw	r2,12(r2)
 8009360:	10800304 	addi	r2,r2,12
 8009364:	10800037 	ldwio	r2,0(r2)
 8009368:	1884703a 	and	r2,r3,r2
 800936c:	1007883a 	mov	r3,r2
 8009370:	e0bfff17 	ldw	r2,-4(fp)
 8009374:	10c00015 	stw	r3,0(r2)
 8009378:	0001883a 	nop
 800937c:	e037883a 	mov	sp,fp
 8009380:	df000017 	ldw	fp,0(sp)
 8009384:	dec00104 	addi	sp,sp,4
 8009388:	f800283a 	ret

0800938c <alt_avalon_i2c_int_raw_status_get>:
 800938c:	defffd04 	addi	sp,sp,-12
 8009390:	df000215 	stw	fp,8(sp)
 8009394:	df000204 	addi	fp,sp,8
 8009398:	e13ffe15 	stw	r4,-8(fp)
 800939c:	e17fff15 	stw	r5,-4(fp)
 80093a0:	e0bffe17 	ldw	r2,-8(fp)
 80093a4:	10800317 	ldw	r2,12(r2)
 80093a8:	10800404 	addi	r2,r2,16
 80093ac:	10800037 	ldwio	r2,0(r2)
 80093b0:	1007883a 	mov	r3,r2
 80093b4:	e0bfff17 	ldw	r2,-4(fp)
 80093b8:	10c00015 	stw	r3,0(r2)
 80093bc:	0001883a 	nop
 80093c0:	e037883a 	mov	sp,fp
 80093c4:	df000017 	ldw	fp,0(sp)
 80093c8:	dec00104 	addi	sp,sp,4
 80093cc:	f800283a 	ret

080093d0 <alt_avalon_i2c_int_clear>:
 80093d0:	defffd04 	addi	sp,sp,-12
 80093d4:	df000215 	stw	fp,8(sp)
 80093d8:	df000204 	addi	fp,sp,8
 80093dc:	e13ffe15 	stw	r4,-8(fp)
 80093e0:	e17fff15 	stw	r5,-4(fp)
 80093e4:	e0bffe17 	ldw	r2,-8(fp)
 80093e8:	10800317 	ldw	r2,12(r2)
 80093ec:	10800404 	addi	r2,r2,16
 80093f0:	e0ffff17 	ldw	r3,-4(fp)
 80093f4:	10c00035 	stwio	r3,0(r2)
 80093f8:	0001883a 	nop
 80093fc:	e037883a 	mov	sp,fp
 8009400:	df000017 	ldw	fp,0(sp)
 8009404:	dec00104 	addi	sp,sp,4
 8009408:	f800283a 	ret

0800940c <alt_avalon_i2c_int_disable>:
 800940c:	defffb04 	addi	sp,sp,-20
 8009410:	dfc00415 	stw	ra,16(sp)
 8009414:	df000315 	stw	fp,12(sp)
 8009418:	df000304 	addi	fp,sp,12
 800941c:	e13ffe15 	stw	r4,-8(fp)
 8009420:	e17fff15 	stw	r5,-4(fp)
 8009424:	e17ffd04 	addi	r5,fp,-12
 8009428:	e13ffe17 	ldw	r4,-8(fp)
 800942c:	80094d80 	call	80094d8 <alt_avalon_i2c_enabled_ints_get>
 8009430:	e0bfff17 	ldw	r2,-4(fp)
 8009434:	0086303a 	nor	r3,zero,r2
 8009438:	e0bffd17 	ldw	r2,-12(fp)
 800943c:	1884703a 	and	r2,r3,r2
 8009440:	e0bffd15 	stw	r2,-12(fp)
 8009444:	e0bffe17 	ldw	r2,-8(fp)
 8009448:	10800317 	ldw	r2,12(r2)
 800944c:	10800304 	addi	r2,r2,12
 8009450:	e0fffd17 	ldw	r3,-12(fp)
 8009454:	18c007cc 	andi	r3,r3,31
 8009458:	10c00035 	stwio	r3,0(r2)
 800945c:	0001883a 	nop
 8009460:	e037883a 	mov	sp,fp
 8009464:	dfc00117 	ldw	ra,4(sp)
 8009468:	df000017 	ldw	fp,0(sp)
 800946c:	dec00204 	addi	sp,sp,8
 8009470:	f800283a 	ret

08009474 <alt_avalon_i2c_int_enable>:
 8009474:	defffb04 	addi	sp,sp,-20
 8009478:	dfc00415 	stw	ra,16(sp)
 800947c:	df000315 	stw	fp,12(sp)
 8009480:	df000304 	addi	fp,sp,12
 8009484:	e13ffe15 	stw	r4,-8(fp)
 8009488:	e17fff15 	stw	r5,-4(fp)
 800948c:	e17ffd04 	addi	r5,fp,-12
 8009490:	e13ffe17 	ldw	r4,-8(fp)
 8009494:	80094d80 	call	80094d8 <alt_avalon_i2c_enabled_ints_get>
 8009498:	e0fffd17 	ldw	r3,-12(fp)
 800949c:	e0bfff17 	ldw	r2,-4(fp)
 80094a0:	1884b03a 	or	r2,r3,r2
 80094a4:	e0bffd15 	stw	r2,-12(fp)
 80094a8:	e0bffe17 	ldw	r2,-8(fp)
 80094ac:	10800317 	ldw	r2,12(r2)
 80094b0:	10800304 	addi	r2,r2,12
 80094b4:	e0fffd17 	ldw	r3,-12(fp)
 80094b8:	18c007cc 	andi	r3,r3,31
 80094bc:	10c00035 	stwio	r3,0(r2)
 80094c0:	0001883a 	nop
 80094c4:	e037883a 	mov	sp,fp
 80094c8:	dfc00117 	ldw	ra,4(sp)
 80094cc:	df000017 	ldw	fp,0(sp)
 80094d0:	dec00204 	addi	sp,sp,8
 80094d4:	f800283a 	ret

080094d8 <alt_avalon_i2c_enabled_ints_get>:
 80094d8:	defffd04 	addi	sp,sp,-12
 80094dc:	df000215 	stw	fp,8(sp)
 80094e0:	df000204 	addi	fp,sp,8
 80094e4:	e13ffe15 	stw	r4,-8(fp)
 80094e8:	e17fff15 	stw	r5,-4(fp)
 80094ec:	e0bffe17 	ldw	r2,-8(fp)
 80094f0:	10800317 	ldw	r2,12(r2)
 80094f4:	10800304 	addi	r2,r2,12
 80094f8:	10800037 	ldwio	r2,0(r2)
 80094fc:	10c007cc 	andi	r3,r2,31
 8009500:	e0bfff17 	ldw	r2,-4(fp)
 8009504:	10c00015 	stw	r3,0(r2)
 8009508:	0001883a 	nop
 800950c:	e037883a 	mov	sp,fp
 8009510:	df000017 	ldw	fp,0(sp)
 8009514:	dec00104 	addi	sp,sp,4
 8009518:	f800283a 	ret

0800951c <alt_avalon_i2c_rx_fifo_threshold_get>:
 800951c:	defffd04 	addi	sp,sp,-12
 8009520:	df000215 	stw	fp,8(sp)
 8009524:	df000204 	addi	fp,sp,8
 8009528:	e13ffe15 	stw	r4,-8(fp)
 800952c:	e17fff15 	stw	r5,-4(fp)
 8009530:	e0bffe17 	ldw	r2,-8(fp)
 8009534:	10800317 	ldw	r2,12(r2)
 8009538:	10800204 	addi	r2,r2,8
 800953c:	10800037 	ldwio	r2,0(r2)
 8009540:	10800c0c 	andi	r2,r2,48
 8009544:	1005d13a 	srai	r2,r2,4
 8009548:	1007883a 	mov	r3,r2
 800954c:	e0bfff17 	ldw	r2,-4(fp)
 8009550:	10c00015 	stw	r3,0(r2)
 8009554:	0001883a 	nop
 8009558:	e037883a 	mov	sp,fp
 800955c:	df000017 	ldw	fp,0(sp)
 8009560:	dec00104 	addi	sp,sp,4
 8009564:	f800283a 	ret

08009568 <alt_avalon_i2c_rx_fifo_threshold_set>:
 8009568:	defffd04 	addi	sp,sp,-12
 800956c:	df000215 	stw	fp,8(sp)
 8009570:	df000204 	addi	fp,sp,8
 8009574:	e13ffe15 	stw	r4,-8(fp)
 8009578:	e17fff15 	stw	r5,-4(fp)
 800957c:	e0bffe17 	ldw	r2,-8(fp)
 8009580:	10800317 	ldw	r2,12(r2)
 8009584:	10800204 	addi	r2,r2,8
 8009588:	e0fffe17 	ldw	r3,-8(fp)
 800958c:	18c00317 	ldw	r3,12(r3)
 8009590:	18c00204 	addi	r3,r3,8
 8009594:	18c00037 	ldwio	r3,0(r3)
 8009598:	1809883a 	mov	r4,r3
 800959c:	00fff3c4 	movi	r3,-49
 80095a0:	20c8703a 	and	r4,r4,r3
 80095a4:	e0ffff17 	ldw	r3,-4(fp)
 80095a8:	1806913a 	slli	r3,r3,4
 80095ac:	18c00c0c 	andi	r3,r3,48
 80095b0:	20c6b03a 	or	r3,r4,r3
 80095b4:	10c00035 	stwio	r3,0(r2)
 80095b8:	0001883a 	nop
 80095bc:	e037883a 	mov	sp,fp
 80095c0:	df000017 	ldw	fp,0(sp)
 80095c4:	dec00104 	addi	sp,sp,4
 80095c8:	f800283a 	ret

080095cc <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:
 80095cc:	defffd04 	addi	sp,sp,-12
 80095d0:	df000215 	stw	fp,8(sp)
 80095d4:	df000204 	addi	fp,sp,8
 80095d8:	e13ffe15 	stw	r4,-8(fp)
 80095dc:	e17fff15 	stw	r5,-4(fp)
 80095e0:	e0bffe17 	ldw	r2,-8(fp)
 80095e4:	10800317 	ldw	r2,12(r2)
 80095e8:	10800204 	addi	r2,r2,8
 80095ec:	10800037 	ldwio	r2,0(r2)
 80095f0:	1080030c 	andi	r2,r2,12
 80095f4:	1005d0ba 	srai	r2,r2,2
 80095f8:	1007883a 	mov	r3,r2
 80095fc:	e0bfff17 	ldw	r2,-4(fp)
 8009600:	10c00015 	stw	r3,0(r2)
 8009604:	0001883a 	nop
 8009608:	e037883a 	mov	sp,fp
 800960c:	df000017 	ldw	fp,0(sp)
 8009610:	dec00104 	addi	sp,sp,4
 8009614:	f800283a 	ret

08009618 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:
 8009618:	defffd04 	addi	sp,sp,-12
 800961c:	df000215 	stw	fp,8(sp)
 8009620:	df000204 	addi	fp,sp,8
 8009624:	e13ffe15 	stw	r4,-8(fp)
 8009628:	e17fff15 	stw	r5,-4(fp)
 800962c:	e0bffe17 	ldw	r2,-8(fp)
 8009630:	10800317 	ldw	r2,12(r2)
 8009634:	10c00204 	addi	r3,r2,8
 8009638:	e0bffe17 	ldw	r2,-8(fp)
 800963c:	10800317 	ldw	r2,12(r2)
 8009640:	10800204 	addi	r2,r2,8
 8009644:	10800037 	ldwio	r2,0(r2)
 8009648:	1009883a 	mov	r4,r2
 800964c:	00bffcc4 	movi	r2,-13
 8009650:	2088703a 	and	r4,r4,r2
 8009654:	e0bfff17 	ldw	r2,-4(fp)
 8009658:	1085883a 	add	r2,r2,r2
 800965c:	1085883a 	add	r2,r2,r2
 8009660:	1080030c 	andi	r2,r2,12
 8009664:	2084b03a 	or	r2,r4,r2
 8009668:	18800035 	stwio	r2,0(r3)
 800966c:	0001883a 	nop
 8009670:	e037883a 	mov	sp,fp
 8009674:	df000017 	ldw	fp,0(sp)
 8009678:	dec00104 	addi	sp,sp,4
 800967c:	f800283a 	ret

08009680 <altera_avalon_jtag_uart_read_fd>:
 8009680:	defffa04 	addi	sp,sp,-24
 8009684:	dfc00515 	stw	ra,20(sp)
 8009688:	df000415 	stw	fp,16(sp)
 800968c:	df000404 	addi	fp,sp,16
 8009690:	e13ffd15 	stw	r4,-12(fp)
 8009694:	e17ffe15 	stw	r5,-8(fp)
 8009698:	e1bfff15 	stw	r6,-4(fp)
 800969c:	e0bffd17 	ldw	r2,-12(fp)
 80096a0:	10800017 	ldw	r2,0(r2)
 80096a4:	e0bffc15 	stw	r2,-16(fp)
 80096a8:	e0bffc17 	ldw	r2,-16(fp)
 80096ac:	10c00a04 	addi	r3,r2,40
 80096b0:	e0bffd17 	ldw	r2,-12(fp)
 80096b4:	10800217 	ldw	r2,8(r2)
 80096b8:	100f883a 	mov	r7,r2
 80096bc:	e1bfff17 	ldw	r6,-4(fp)
 80096c0:	e17ffe17 	ldw	r5,-8(fp)
 80096c4:	1809883a 	mov	r4,r3
 80096c8:	8009ca80 	call	8009ca8 <altera_avalon_jtag_uart_read>
 80096cc:	e037883a 	mov	sp,fp
 80096d0:	dfc00117 	ldw	ra,4(sp)
 80096d4:	df000017 	ldw	fp,0(sp)
 80096d8:	dec00204 	addi	sp,sp,8
 80096dc:	f800283a 	ret

080096e0 <altera_avalon_jtag_uart_write_fd>:
 80096e0:	defffa04 	addi	sp,sp,-24
 80096e4:	dfc00515 	stw	ra,20(sp)
 80096e8:	df000415 	stw	fp,16(sp)
 80096ec:	df000404 	addi	fp,sp,16
 80096f0:	e13ffd15 	stw	r4,-12(fp)
 80096f4:	e17ffe15 	stw	r5,-8(fp)
 80096f8:	e1bfff15 	stw	r6,-4(fp)
 80096fc:	e0bffd17 	ldw	r2,-12(fp)
 8009700:	10800017 	ldw	r2,0(r2)
 8009704:	e0bffc15 	stw	r2,-16(fp)
 8009708:	e0bffc17 	ldw	r2,-16(fp)
 800970c:	10c00a04 	addi	r3,r2,40
 8009710:	e0bffd17 	ldw	r2,-12(fp)
 8009714:	10800217 	ldw	r2,8(r2)
 8009718:	100f883a 	mov	r7,r2
 800971c:	e1bfff17 	ldw	r6,-4(fp)
 8009720:	e17ffe17 	ldw	r5,-8(fp)
 8009724:	1809883a 	mov	r4,r3
 8009728:	8009ec40 	call	8009ec4 <altera_avalon_jtag_uart_write>
 800972c:	e037883a 	mov	sp,fp
 8009730:	dfc00117 	ldw	ra,4(sp)
 8009734:	df000017 	ldw	fp,0(sp)
 8009738:	dec00204 	addi	sp,sp,8
 800973c:	f800283a 	ret

08009740 <altera_avalon_jtag_uart_close_fd>:
 8009740:	defffc04 	addi	sp,sp,-16
 8009744:	dfc00315 	stw	ra,12(sp)
 8009748:	df000215 	stw	fp,8(sp)
 800974c:	df000204 	addi	fp,sp,8
 8009750:	e13fff15 	stw	r4,-4(fp)
 8009754:	e0bfff17 	ldw	r2,-4(fp)
 8009758:	10800017 	ldw	r2,0(r2)
 800975c:	e0bffe15 	stw	r2,-8(fp)
 8009760:	e0bffe17 	ldw	r2,-8(fp)
 8009764:	10c00a04 	addi	r3,r2,40
 8009768:	e0bfff17 	ldw	r2,-4(fp)
 800976c:	10800217 	ldw	r2,8(r2)
 8009770:	100b883a 	mov	r5,r2
 8009774:	1809883a 	mov	r4,r3
 8009778:	8009b500 	call	8009b50 <altera_avalon_jtag_uart_close>
 800977c:	e037883a 	mov	sp,fp
 8009780:	dfc00117 	ldw	ra,4(sp)
 8009784:	df000017 	ldw	fp,0(sp)
 8009788:	dec00204 	addi	sp,sp,8
 800978c:	f800283a 	ret

08009790 <altera_avalon_jtag_uart_ioctl_fd>:
 8009790:	defffa04 	addi	sp,sp,-24
 8009794:	dfc00515 	stw	ra,20(sp)
 8009798:	df000415 	stw	fp,16(sp)
 800979c:	df000404 	addi	fp,sp,16
 80097a0:	e13ffd15 	stw	r4,-12(fp)
 80097a4:	e17ffe15 	stw	r5,-8(fp)
 80097a8:	e1bfff15 	stw	r6,-4(fp)
 80097ac:	e0bffd17 	ldw	r2,-12(fp)
 80097b0:	10800017 	ldw	r2,0(r2)
 80097b4:	e0bffc15 	stw	r2,-16(fp)
 80097b8:	e0bffc17 	ldw	r2,-16(fp)
 80097bc:	10800a04 	addi	r2,r2,40
 80097c0:	e1bfff17 	ldw	r6,-4(fp)
 80097c4:	e17ffe17 	ldw	r5,-8(fp)
 80097c8:	1009883a 	mov	r4,r2
 80097cc:	8009bb80 	call	8009bb8 <altera_avalon_jtag_uart_ioctl>
 80097d0:	e037883a 	mov	sp,fp
 80097d4:	dfc00117 	ldw	ra,4(sp)
 80097d8:	df000017 	ldw	fp,0(sp)
 80097dc:	dec00204 	addi	sp,sp,8
 80097e0:	f800283a 	ret

080097e4 <altera_avalon_jtag_uart_init>:
 80097e4:	defffa04 	addi	sp,sp,-24
 80097e8:	dfc00515 	stw	ra,20(sp)
 80097ec:	df000415 	stw	fp,16(sp)
 80097f0:	df000404 	addi	fp,sp,16
 80097f4:	e13ffd15 	stw	r4,-12(fp)
 80097f8:	e17ffe15 	stw	r5,-8(fp)
 80097fc:	e1bfff15 	stw	r6,-4(fp)
 8009800:	e0bffd17 	ldw	r2,-12(fp)
 8009804:	00c00044 	movi	r3,1
 8009808:	10c00815 	stw	r3,32(r2)
 800980c:	e0bffd17 	ldw	r2,-12(fp)
 8009810:	10800017 	ldw	r2,0(r2)
 8009814:	10800104 	addi	r2,r2,4
 8009818:	1007883a 	mov	r3,r2
 800981c:	e0bffd17 	ldw	r2,-12(fp)
 8009820:	10800817 	ldw	r2,32(r2)
 8009824:	18800035 	stwio	r2,0(r3)
 8009828:	e0bffe17 	ldw	r2,-8(fp)
 800982c:	e0ffff17 	ldw	r3,-4(fp)
 8009830:	d8000015 	stw	zero,0(sp)
 8009834:	e1fffd17 	ldw	r7,-12(fp)
 8009838:	01820074 	movhi	r6,2049
 800983c:	31a62904 	addi	r6,r6,-26460
 8009840:	180b883a 	mov	r5,r3
 8009844:	1009883a 	mov	r4,r2
 8009848:	800aa0c0 	call	800aa0c <alt_ic_isr_register>
 800984c:	e0bffd17 	ldw	r2,-12(fp)
 8009850:	10000915 	stw	zero,36(r2)
 8009854:	e0bffd17 	ldw	r2,-12(fp)
 8009858:	10800204 	addi	r2,r2,8
 800985c:	d0ec0c17 	ldw	r3,-20432(gp)
 8009860:	e1fffd17 	ldw	r7,-12(fp)
 8009864:	01820074 	movhi	r6,2049
 8009868:	31a6ac04 	addi	r6,r6,-25936
 800986c:	180b883a 	mov	r5,r3
 8009870:	1009883a 	mov	r4,r2
 8009874:	800a3d80 	call	800a3d8 <alt_alarm_start>
 8009878:	1000040e 	bge	r2,zero,800988c <altera_avalon_jtag_uart_init+0xa8>
 800987c:	e0fffd17 	ldw	r3,-12(fp)
 8009880:	00a00034 	movhi	r2,32768
 8009884:	10bfffc4 	addi	r2,r2,-1
 8009888:	18800115 	stw	r2,4(r3)
 800988c:	0001883a 	nop
 8009890:	e037883a 	mov	sp,fp
 8009894:	dfc00117 	ldw	ra,4(sp)
 8009898:	df000017 	ldw	fp,0(sp)
 800989c:	dec00204 	addi	sp,sp,8
 80098a0:	f800283a 	ret

080098a4 <altera_avalon_jtag_uart_irq>:
 80098a4:	defff804 	addi	sp,sp,-32
 80098a8:	df000715 	stw	fp,28(sp)
 80098ac:	df000704 	addi	fp,sp,28
 80098b0:	e13fff15 	stw	r4,-4(fp)
 80098b4:	e0bfff17 	ldw	r2,-4(fp)
 80098b8:	e0bffb15 	stw	r2,-20(fp)
 80098bc:	e0bffb17 	ldw	r2,-20(fp)
 80098c0:	10800017 	ldw	r2,0(r2)
 80098c4:	e0bffc15 	stw	r2,-16(fp)
 80098c8:	e0bffc17 	ldw	r2,-16(fp)
 80098cc:	10800104 	addi	r2,r2,4
 80098d0:	10800037 	ldwio	r2,0(r2)
 80098d4:	e0bffd15 	stw	r2,-12(fp)
 80098d8:	e0bffd17 	ldw	r2,-12(fp)
 80098dc:	1080c00c 	andi	r2,r2,768
 80098e0:	10006d26 	beq	r2,zero,8009a98 <altera_avalon_jtag_uart_irq+0x1f4>
 80098e4:	e0bffd17 	ldw	r2,-12(fp)
 80098e8:	1080400c 	andi	r2,r2,256
 80098ec:	10003526 	beq	r2,zero,80099c4 <altera_avalon_jtag_uart_irq+0x120>
 80098f0:	00800074 	movhi	r2,1
 80098f4:	e0bff915 	stw	r2,-28(fp)
 80098f8:	e0bffb17 	ldw	r2,-20(fp)
 80098fc:	10800a17 	ldw	r2,40(r2)
 8009900:	10800044 	addi	r2,r2,1
 8009904:	1081ffcc 	andi	r2,r2,2047
 8009908:	e0bffe15 	stw	r2,-8(fp)
 800990c:	e0bffb17 	ldw	r2,-20(fp)
 8009910:	10c00b17 	ldw	r3,44(r2)
 8009914:	e0bffe17 	ldw	r2,-8(fp)
 8009918:	18801526 	beq	r3,r2,8009970 <altera_avalon_jtag_uart_irq+0xcc>
 800991c:	e0bffc17 	ldw	r2,-16(fp)
 8009920:	10800037 	ldwio	r2,0(r2)
 8009924:	e0bff915 	stw	r2,-28(fp)
 8009928:	e0bff917 	ldw	r2,-28(fp)
 800992c:	10a0000c 	andi	r2,r2,32768
 8009930:	10001126 	beq	r2,zero,8009978 <altera_avalon_jtag_uart_irq+0xd4>
 8009934:	e0bffb17 	ldw	r2,-20(fp)
 8009938:	10800a17 	ldw	r2,40(r2)
 800993c:	e0fff917 	ldw	r3,-28(fp)
 8009940:	1809883a 	mov	r4,r3
 8009944:	e0fffb17 	ldw	r3,-20(fp)
 8009948:	1885883a 	add	r2,r3,r2
 800994c:	10800e04 	addi	r2,r2,56
 8009950:	11000005 	stb	r4,0(r2)
 8009954:	e0bffb17 	ldw	r2,-20(fp)
 8009958:	10800a17 	ldw	r2,40(r2)
 800995c:	10800044 	addi	r2,r2,1
 8009960:	10c1ffcc 	andi	r3,r2,2047
 8009964:	e0bffb17 	ldw	r2,-20(fp)
 8009968:	10c00a15 	stw	r3,40(r2)
 800996c:	003fe206 	br	80098f8 <__alt_data_end+0xfc0098f8>
 8009970:	0001883a 	nop
 8009974:	00000106 	br	800997c <altera_avalon_jtag_uart_irq+0xd8>
 8009978:	0001883a 	nop
 800997c:	e0bff917 	ldw	r2,-28(fp)
 8009980:	10bfffec 	andhi	r2,r2,65535
 8009984:	10000f26 	beq	r2,zero,80099c4 <altera_avalon_jtag_uart_irq+0x120>
 8009988:	e0bffb17 	ldw	r2,-20(fp)
 800998c:	10c00817 	ldw	r3,32(r2)
 8009990:	00bfff84 	movi	r2,-2
 8009994:	1886703a 	and	r3,r3,r2
 8009998:	e0bffb17 	ldw	r2,-20(fp)
 800999c:	10c00815 	stw	r3,32(r2)
 80099a0:	e0bffc17 	ldw	r2,-16(fp)
 80099a4:	10800104 	addi	r2,r2,4
 80099a8:	1007883a 	mov	r3,r2
 80099ac:	e0bffb17 	ldw	r2,-20(fp)
 80099b0:	10800817 	ldw	r2,32(r2)
 80099b4:	18800035 	stwio	r2,0(r3)
 80099b8:	e0bffc17 	ldw	r2,-16(fp)
 80099bc:	10800104 	addi	r2,r2,4
 80099c0:	10800037 	ldwio	r2,0(r2)
 80099c4:	e0bffd17 	ldw	r2,-12(fp)
 80099c8:	1080800c 	andi	r2,r2,512
 80099cc:	103fbe26 	beq	r2,zero,80098c8 <__alt_data_end+0xfc0098c8>
 80099d0:	e0bffd17 	ldw	r2,-12(fp)
 80099d4:	1004d43a 	srli	r2,r2,16
 80099d8:	e0bffa15 	stw	r2,-24(fp)
 80099dc:	00001406 	br	8009a30 <altera_avalon_jtag_uart_irq+0x18c>
 80099e0:	e0bffc17 	ldw	r2,-16(fp)
 80099e4:	e0fffb17 	ldw	r3,-20(fp)
 80099e8:	18c00d17 	ldw	r3,52(r3)
 80099ec:	e13ffb17 	ldw	r4,-20(fp)
 80099f0:	20c7883a 	add	r3,r4,r3
 80099f4:	18c20e04 	addi	r3,r3,2104
 80099f8:	18c00003 	ldbu	r3,0(r3)
 80099fc:	18c03fcc 	andi	r3,r3,255
 8009a00:	18c0201c 	xori	r3,r3,128
 8009a04:	18ffe004 	addi	r3,r3,-128
 8009a08:	10c00035 	stwio	r3,0(r2)
 8009a0c:	e0bffb17 	ldw	r2,-20(fp)
 8009a10:	10800d17 	ldw	r2,52(r2)
 8009a14:	10800044 	addi	r2,r2,1
 8009a18:	10c1ffcc 	andi	r3,r2,2047
 8009a1c:	e0bffb17 	ldw	r2,-20(fp)
 8009a20:	10c00d15 	stw	r3,52(r2)
 8009a24:	e0bffa17 	ldw	r2,-24(fp)
 8009a28:	10bfffc4 	addi	r2,r2,-1
 8009a2c:	e0bffa15 	stw	r2,-24(fp)
 8009a30:	e0bffa17 	ldw	r2,-24(fp)
 8009a34:	10000526 	beq	r2,zero,8009a4c <altera_avalon_jtag_uart_irq+0x1a8>
 8009a38:	e0bffb17 	ldw	r2,-20(fp)
 8009a3c:	10c00d17 	ldw	r3,52(r2)
 8009a40:	e0bffb17 	ldw	r2,-20(fp)
 8009a44:	10800c17 	ldw	r2,48(r2)
 8009a48:	18bfe51e 	bne	r3,r2,80099e0 <__alt_data_end+0xfc0099e0>
 8009a4c:	e0bffa17 	ldw	r2,-24(fp)
 8009a50:	103f9d26 	beq	r2,zero,80098c8 <__alt_data_end+0xfc0098c8>
 8009a54:	e0bffb17 	ldw	r2,-20(fp)
 8009a58:	10c00817 	ldw	r3,32(r2)
 8009a5c:	00bfff44 	movi	r2,-3
 8009a60:	1886703a 	and	r3,r3,r2
 8009a64:	e0bffb17 	ldw	r2,-20(fp)
 8009a68:	10c00815 	stw	r3,32(r2)
 8009a6c:	e0bffb17 	ldw	r2,-20(fp)
 8009a70:	10800017 	ldw	r2,0(r2)
 8009a74:	10800104 	addi	r2,r2,4
 8009a78:	1007883a 	mov	r3,r2
 8009a7c:	e0bffb17 	ldw	r2,-20(fp)
 8009a80:	10800817 	ldw	r2,32(r2)
 8009a84:	18800035 	stwio	r2,0(r3)
 8009a88:	e0bffc17 	ldw	r2,-16(fp)
 8009a8c:	10800104 	addi	r2,r2,4
 8009a90:	10800037 	ldwio	r2,0(r2)
 8009a94:	003f8c06 	br	80098c8 <__alt_data_end+0xfc0098c8>
 8009a98:	0001883a 	nop
 8009a9c:	0001883a 	nop
 8009aa0:	e037883a 	mov	sp,fp
 8009aa4:	df000017 	ldw	fp,0(sp)
 8009aa8:	dec00104 	addi	sp,sp,4
 8009aac:	f800283a 	ret

08009ab0 <altera_avalon_jtag_uart_timeout>:
 8009ab0:	defff804 	addi	sp,sp,-32
 8009ab4:	df000715 	stw	fp,28(sp)
 8009ab8:	df000704 	addi	fp,sp,28
 8009abc:	e13ffb15 	stw	r4,-20(fp)
 8009ac0:	e0bffb17 	ldw	r2,-20(fp)
 8009ac4:	e0bff915 	stw	r2,-28(fp)
 8009ac8:	e0bff917 	ldw	r2,-28(fp)
 8009acc:	10800017 	ldw	r2,0(r2)
 8009ad0:	10800104 	addi	r2,r2,4
 8009ad4:	10800037 	ldwio	r2,0(r2)
 8009ad8:	e0bffa15 	stw	r2,-24(fp)
 8009adc:	e0bffa17 	ldw	r2,-24(fp)
 8009ae0:	1081000c 	andi	r2,r2,1024
 8009ae4:	10000b26 	beq	r2,zero,8009b14 <altera_avalon_jtag_uart_timeout+0x64>
 8009ae8:	e0bff917 	ldw	r2,-28(fp)
 8009aec:	10800017 	ldw	r2,0(r2)
 8009af0:	10800104 	addi	r2,r2,4
 8009af4:	1007883a 	mov	r3,r2
 8009af8:	e0bff917 	ldw	r2,-28(fp)
 8009afc:	10800817 	ldw	r2,32(r2)
 8009b00:	10810014 	ori	r2,r2,1024
 8009b04:	18800035 	stwio	r2,0(r3)
 8009b08:	e0bff917 	ldw	r2,-28(fp)
 8009b0c:	10000915 	stw	zero,36(r2)
 8009b10:	00000a06 	br	8009b3c <altera_avalon_jtag_uart_timeout+0x8c>
 8009b14:	e0bff917 	ldw	r2,-28(fp)
 8009b18:	10c00917 	ldw	r3,36(r2)
 8009b1c:	00a00034 	movhi	r2,32768
 8009b20:	10bfff04 	addi	r2,r2,-4
 8009b24:	10c00536 	bltu	r2,r3,8009b3c <altera_avalon_jtag_uart_timeout+0x8c>
 8009b28:	e0bff917 	ldw	r2,-28(fp)
 8009b2c:	10800917 	ldw	r2,36(r2)
 8009b30:	10c00044 	addi	r3,r2,1
 8009b34:	e0bff917 	ldw	r2,-28(fp)
 8009b38:	10c00915 	stw	r3,36(r2)
 8009b3c:	d0ac0c17 	ldw	r2,-20432(gp)
 8009b40:	e037883a 	mov	sp,fp
 8009b44:	df000017 	ldw	fp,0(sp)
 8009b48:	dec00104 	addi	sp,sp,4
 8009b4c:	f800283a 	ret

08009b50 <altera_avalon_jtag_uart_close>:
 8009b50:	defffd04 	addi	sp,sp,-12
 8009b54:	df000215 	stw	fp,8(sp)
 8009b58:	df000204 	addi	fp,sp,8
 8009b5c:	e13ffe15 	stw	r4,-8(fp)
 8009b60:	e17fff15 	stw	r5,-4(fp)
 8009b64:	00000506 	br	8009b7c <altera_avalon_jtag_uart_close+0x2c>
 8009b68:	e0bfff17 	ldw	r2,-4(fp)
 8009b6c:	1090000c 	andi	r2,r2,16384
 8009b70:	10000226 	beq	r2,zero,8009b7c <altera_avalon_jtag_uart_close+0x2c>
 8009b74:	00bffd44 	movi	r2,-11
 8009b78:	00000b06 	br	8009ba8 <altera_avalon_jtag_uart_close+0x58>
 8009b7c:	e0bffe17 	ldw	r2,-8(fp)
 8009b80:	10c00d17 	ldw	r3,52(r2)
 8009b84:	e0bffe17 	ldw	r2,-8(fp)
 8009b88:	10800c17 	ldw	r2,48(r2)
 8009b8c:	18800526 	beq	r3,r2,8009ba4 <altera_avalon_jtag_uart_close+0x54>
 8009b90:	e0bffe17 	ldw	r2,-8(fp)
 8009b94:	10c00917 	ldw	r3,36(r2)
 8009b98:	e0bffe17 	ldw	r2,-8(fp)
 8009b9c:	10800117 	ldw	r2,4(r2)
 8009ba0:	18bff136 	bltu	r3,r2,8009b68 <__alt_data_end+0xfc009b68>
 8009ba4:	0005883a 	mov	r2,zero
 8009ba8:	e037883a 	mov	sp,fp
 8009bac:	df000017 	ldw	fp,0(sp)
 8009bb0:	dec00104 	addi	sp,sp,4
 8009bb4:	f800283a 	ret

08009bb8 <altera_avalon_jtag_uart_ioctl>:
 8009bb8:	defffa04 	addi	sp,sp,-24
 8009bbc:	df000515 	stw	fp,20(sp)
 8009bc0:	df000504 	addi	fp,sp,20
 8009bc4:	e13ffd15 	stw	r4,-12(fp)
 8009bc8:	e17ffe15 	stw	r5,-8(fp)
 8009bcc:	e1bfff15 	stw	r6,-4(fp)
 8009bd0:	00bff9c4 	movi	r2,-25
 8009bd4:	e0bffb15 	stw	r2,-20(fp)
 8009bd8:	e0bffe17 	ldw	r2,-8(fp)
 8009bdc:	10da8060 	cmpeqi	r3,r2,27137
 8009be0:	1800031e 	bne	r3,zero,8009bf0 <altera_avalon_jtag_uart_ioctl+0x38>
 8009be4:	109a80a0 	cmpeqi	r2,r2,27138
 8009be8:	1000181e 	bne	r2,zero,8009c4c <altera_avalon_jtag_uart_ioctl+0x94>
 8009bec:	00002906 	br	8009c94 <altera_avalon_jtag_uart_ioctl+0xdc>
 8009bf0:	e0bffd17 	ldw	r2,-12(fp)
 8009bf4:	10c00117 	ldw	r3,4(r2)
 8009bf8:	00a00034 	movhi	r2,32768
 8009bfc:	10bfffc4 	addi	r2,r2,-1
 8009c00:	18802126 	beq	r3,r2,8009c88 <altera_avalon_jtag_uart_ioctl+0xd0>
 8009c04:	e0bfff17 	ldw	r2,-4(fp)
 8009c08:	10800017 	ldw	r2,0(r2)
 8009c0c:	e0bffc15 	stw	r2,-16(fp)
 8009c10:	e0bffc17 	ldw	r2,-16(fp)
 8009c14:	10800090 	cmplti	r2,r2,2
 8009c18:	1000061e 	bne	r2,zero,8009c34 <altera_avalon_jtag_uart_ioctl+0x7c>
 8009c1c:	e0fffc17 	ldw	r3,-16(fp)
 8009c20:	00a00034 	movhi	r2,32768
 8009c24:	10bfffc4 	addi	r2,r2,-1
 8009c28:	18800226 	beq	r3,r2,8009c34 <altera_avalon_jtag_uart_ioctl+0x7c>
 8009c2c:	e0bffc17 	ldw	r2,-16(fp)
 8009c30:	00000206 	br	8009c3c <altera_avalon_jtag_uart_ioctl+0x84>
 8009c34:	00a00034 	movhi	r2,32768
 8009c38:	10bfff84 	addi	r2,r2,-2
 8009c3c:	e0fffd17 	ldw	r3,-12(fp)
 8009c40:	18800115 	stw	r2,4(r3)
 8009c44:	e03ffb15 	stw	zero,-20(fp)
 8009c48:	00000f06 	br	8009c88 <altera_avalon_jtag_uart_ioctl+0xd0>
 8009c4c:	e0bffd17 	ldw	r2,-12(fp)
 8009c50:	10c00117 	ldw	r3,4(r2)
 8009c54:	00a00034 	movhi	r2,32768
 8009c58:	10bfffc4 	addi	r2,r2,-1
 8009c5c:	18800c26 	beq	r3,r2,8009c90 <altera_avalon_jtag_uart_ioctl+0xd8>
 8009c60:	e0bffd17 	ldw	r2,-12(fp)
 8009c64:	10c00917 	ldw	r3,36(r2)
 8009c68:	e0bffd17 	ldw	r2,-12(fp)
 8009c6c:	10800117 	ldw	r2,4(r2)
 8009c70:	1885803a 	cmpltu	r2,r3,r2
 8009c74:	10c03fcc 	andi	r3,r2,255
 8009c78:	e0bfff17 	ldw	r2,-4(fp)
 8009c7c:	10c00015 	stw	r3,0(r2)
 8009c80:	e03ffb15 	stw	zero,-20(fp)
 8009c84:	00000206 	br	8009c90 <altera_avalon_jtag_uart_ioctl+0xd8>
 8009c88:	0001883a 	nop
 8009c8c:	00000106 	br	8009c94 <altera_avalon_jtag_uart_ioctl+0xdc>
 8009c90:	0001883a 	nop
 8009c94:	e0bffb17 	ldw	r2,-20(fp)
 8009c98:	e037883a 	mov	sp,fp
 8009c9c:	df000017 	ldw	fp,0(sp)
 8009ca0:	dec00104 	addi	sp,sp,4
 8009ca4:	f800283a 	ret

08009ca8 <altera_avalon_jtag_uart_read>:
 8009ca8:	defff304 	addi	sp,sp,-52
 8009cac:	dfc00c15 	stw	ra,48(sp)
 8009cb0:	df000b15 	stw	fp,44(sp)
 8009cb4:	df000b04 	addi	fp,sp,44
 8009cb8:	e13ffc15 	stw	r4,-16(fp)
 8009cbc:	e17ffd15 	stw	r5,-12(fp)
 8009cc0:	e1bffe15 	stw	r6,-8(fp)
 8009cc4:	e1ffff15 	stw	r7,-4(fp)
 8009cc8:	e0bffd17 	ldw	r2,-12(fp)
 8009ccc:	e0bff515 	stw	r2,-44(fp)
 8009cd0:	00004706 	br	8009df0 <altera_avalon_jtag_uart_read+0x148>
 8009cd4:	e0bffc17 	ldw	r2,-16(fp)
 8009cd8:	10800a17 	ldw	r2,40(r2)
 8009cdc:	e0bff715 	stw	r2,-36(fp)
 8009ce0:	e0bffc17 	ldw	r2,-16(fp)
 8009ce4:	10800b17 	ldw	r2,44(r2)
 8009ce8:	e0bff815 	stw	r2,-32(fp)
 8009cec:	e0fff717 	ldw	r3,-36(fp)
 8009cf0:	e0bff817 	ldw	r2,-32(fp)
 8009cf4:	18800536 	bltu	r3,r2,8009d0c <altera_avalon_jtag_uart_read+0x64>
 8009cf8:	e0fff717 	ldw	r3,-36(fp)
 8009cfc:	e0bff817 	ldw	r2,-32(fp)
 8009d00:	1885c83a 	sub	r2,r3,r2
 8009d04:	e0bff615 	stw	r2,-40(fp)
 8009d08:	00000406 	br	8009d1c <altera_avalon_jtag_uart_read+0x74>
 8009d0c:	00c20004 	movi	r3,2048
 8009d10:	e0bff817 	ldw	r2,-32(fp)
 8009d14:	1885c83a 	sub	r2,r3,r2
 8009d18:	e0bff615 	stw	r2,-40(fp)
 8009d1c:	e0bff617 	ldw	r2,-40(fp)
 8009d20:	10001e26 	beq	r2,zero,8009d9c <altera_avalon_jtag_uart_read+0xf4>
 8009d24:	e0fffe17 	ldw	r3,-8(fp)
 8009d28:	e0bff617 	ldw	r2,-40(fp)
 8009d2c:	1880022e 	bgeu	r3,r2,8009d38 <altera_avalon_jtag_uart_read+0x90>
 8009d30:	e0bffe17 	ldw	r2,-8(fp)
 8009d34:	e0bff615 	stw	r2,-40(fp)
 8009d38:	e0bffc17 	ldw	r2,-16(fp)
 8009d3c:	10c00e04 	addi	r3,r2,56
 8009d40:	e0bff817 	ldw	r2,-32(fp)
 8009d44:	1885883a 	add	r2,r3,r2
 8009d48:	e1bff617 	ldw	r6,-40(fp)
 8009d4c:	100b883a 	mov	r5,r2
 8009d50:	e13ff517 	ldw	r4,-44(fp)
 8009d54:	800b66c0 	call	800b66c <memcpy>
 8009d58:	e0fff517 	ldw	r3,-44(fp)
 8009d5c:	e0bff617 	ldw	r2,-40(fp)
 8009d60:	1885883a 	add	r2,r3,r2
 8009d64:	e0bff515 	stw	r2,-44(fp)
 8009d68:	e0fffe17 	ldw	r3,-8(fp)
 8009d6c:	e0bff617 	ldw	r2,-40(fp)
 8009d70:	1885c83a 	sub	r2,r3,r2
 8009d74:	e0bffe15 	stw	r2,-8(fp)
 8009d78:	e0fff817 	ldw	r3,-32(fp)
 8009d7c:	e0bff617 	ldw	r2,-40(fp)
 8009d80:	1885883a 	add	r2,r3,r2
 8009d84:	10c1ffcc 	andi	r3,r2,2047
 8009d88:	e0bffc17 	ldw	r2,-16(fp)
 8009d8c:	10c00b15 	stw	r3,44(r2)
 8009d90:	e0bffe17 	ldw	r2,-8(fp)
 8009d94:	00bfcf16 	blt	zero,r2,8009cd4 <__alt_data_end+0xfc009cd4>
 8009d98:	00000106 	br	8009da0 <altera_avalon_jtag_uart_read+0xf8>
 8009d9c:	0001883a 	nop
 8009da0:	e0fff517 	ldw	r3,-44(fp)
 8009da4:	e0bffd17 	ldw	r2,-12(fp)
 8009da8:	1880141e 	bne	r3,r2,8009dfc <altera_avalon_jtag_uart_read+0x154>
 8009dac:	e0bfff17 	ldw	r2,-4(fp)
 8009db0:	1090000c 	andi	r2,r2,16384
 8009db4:	1000131e 	bne	r2,zero,8009e04 <altera_avalon_jtag_uart_read+0x15c>
 8009db8:	0001883a 	nop
 8009dbc:	e0bffc17 	ldw	r2,-16(fp)
 8009dc0:	10c00a17 	ldw	r3,40(r2)
 8009dc4:	e0bff717 	ldw	r2,-36(fp)
 8009dc8:	1880051e 	bne	r3,r2,8009de0 <altera_avalon_jtag_uart_read+0x138>
 8009dcc:	e0bffc17 	ldw	r2,-16(fp)
 8009dd0:	10c00917 	ldw	r3,36(r2)
 8009dd4:	e0bffc17 	ldw	r2,-16(fp)
 8009dd8:	10800117 	ldw	r2,4(r2)
 8009ddc:	18bff736 	bltu	r3,r2,8009dbc <__alt_data_end+0xfc009dbc>
 8009de0:	e0bffc17 	ldw	r2,-16(fp)
 8009de4:	10c00a17 	ldw	r3,40(r2)
 8009de8:	e0bff717 	ldw	r2,-36(fp)
 8009dec:	18800726 	beq	r3,r2,8009e0c <altera_avalon_jtag_uart_read+0x164>
 8009df0:	e0bffe17 	ldw	r2,-8(fp)
 8009df4:	00bfb716 	blt	zero,r2,8009cd4 <__alt_data_end+0xfc009cd4>
 8009df8:	00000506 	br	8009e10 <altera_avalon_jtag_uart_read+0x168>
 8009dfc:	0001883a 	nop
 8009e00:	00000306 	br	8009e10 <altera_avalon_jtag_uart_read+0x168>
 8009e04:	0001883a 	nop
 8009e08:	00000106 	br	8009e10 <altera_avalon_jtag_uart_read+0x168>
 8009e0c:	0001883a 	nop
 8009e10:	e0fff517 	ldw	r3,-44(fp)
 8009e14:	e0bffd17 	ldw	r2,-12(fp)
 8009e18:	18801826 	beq	r3,r2,8009e7c <altera_avalon_jtag_uart_read+0x1d4>
 8009e1c:	0005303a 	rdctl	r2,status
 8009e20:	e0bffb15 	stw	r2,-20(fp)
 8009e24:	e0fffb17 	ldw	r3,-20(fp)
 8009e28:	00bfff84 	movi	r2,-2
 8009e2c:	1884703a 	and	r2,r3,r2
 8009e30:	1001703a 	wrctl	status,r2
 8009e34:	e0bffb17 	ldw	r2,-20(fp)
 8009e38:	e0bffa15 	stw	r2,-24(fp)
 8009e3c:	e0bffc17 	ldw	r2,-16(fp)
 8009e40:	10800817 	ldw	r2,32(r2)
 8009e44:	10c00054 	ori	r3,r2,1
 8009e48:	e0bffc17 	ldw	r2,-16(fp)
 8009e4c:	10c00815 	stw	r3,32(r2)
 8009e50:	e0bffc17 	ldw	r2,-16(fp)
 8009e54:	10800017 	ldw	r2,0(r2)
 8009e58:	10800104 	addi	r2,r2,4
 8009e5c:	1007883a 	mov	r3,r2
 8009e60:	e0bffc17 	ldw	r2,-16(fp)
 8009e64:	10800817 	ldw	r2,32(r2)
 8009e68:	18800035 	stwio	r2,0(r3)
 8009e6c:	e0bffa17 	ldw	r2,-24(fp)
 8009e70:	e0bff915 	stw	r2,-28(fp)
 8009e74:	e0bff917 	ldw	r2,-28(fp)
 8009e78:	1001703a 	wrctl	status,r2
 8009e7c:	e0fff517 	ldw	r3,-44(fp)
 8009e80:	e0bffd17 	ldw	r2,-12(fp)
 8009e84:	18800426 	beq	r3,r2,8009e98 <altera_avalon_jtag_uart_read+0x1f0>
 8009e88:	e0fff517 	ldw	r3,-44(fp)
 8009e8c:	e0bffd17 	ldw	r2,-12(fp)
 8009e90:	1885c83a 	sub	r2,r3,r2
 8009e94:	00000606 	br	8009eb0 <altera_avalon_jtag_uart_read+0x208>
 8009e98:	e0bfff17 	ldw	r2,-4(fp)
 8009e9c:	1090000c 	andi	r2,r2,16384
 8009ea0:	10000226 	beq	r2,zero,8009eac <altera_avalon_jtag_uart_read+0x204>
 8009ea4:	00bffd44 	movi	r2,-11
 8009ea8:	00000106 	br	8009eb0 <altera_avalon_jtag_uart_read+0x208>
 8009eac:	00bffec4 	movi	r2,-5
 8009eb0:	e037883a 	mov	sp,fp
 8009eb4:	dfc00117 	ldw	ra,4(sp)
 8009eb8:	df000017 	ldw	fp,0(sp)
 8009ebc:	dec00204 	addi	sp,sp,8
 8009ec0:	f800283a 	ret

08009ec4 <altera_avalon_jtag_uart_write>:
 8009ec4:	defff304 	addi	sp,sp,-52
 8009ec8:	dfc00c15 	stw	ra,48(sp)
 8009ecc:	df000b15 	stw	fp,44(sp)
 8009ed0:	df000b04 	addi	fp,sp,44
 8009ed4:	e13ffc15 	stw	r4,-16(fp)
 8009ed8:	e17ffd15 	stw	r5,-12(fp)
 8009edc:	e1bffe15 	stw	r6,-8(fp)
 8009ee0:	e1ffff15 	stw	r7,-4(fp)
 8009ee4:	e03ff515 	stw	zero,-44(fp)
 8009ee8:	e0bffd17 	ldw	r2,-12(fp)
 8009eec:	e0bff715 	stw	r2,-36(fp)
 8009ef0:	00003706 	br	8009fd0 <altera_avalon_jtag_uart_write+0x10c>
 8009ef4:	e0bffc17 	ldw	r2,-16(fp)
 8009ef8:	10800c17 	ldw	r2,48(r2)
 8009efc:	e0bff915 	stw	r2,-28(fp)
 8009f00:	e0bffc17 	ldw	r2,-16(fp)
 8009f04:	10800d17 	ldw	r2,52(r2)
 8009f08:	e0bff515 	stw	r2,-44(fp)
 8009f0c:	e0fff917 	ldw	r3,-28(fp)
 8009f10:	e0bff517 	ldw	r2,-44(fp)
 8009f14:	1880062e 	bgeu	r3,r2,8009f30 <altera_avalon_jtag_uart_write+0x6c>
 8009f18:	e0fff517 	ldw	r3,-44(fp)
 8009f1c:	e0bff917 	ldw	r2,-28(fp)
 8009f20:	1885c83a 	sub	r2,r3,r2
 8009f24:	10bfffc4 	addi	r2,r2,-1
 8009f28:	e0bff615 	stw	r2,-40(fp)
 8009f2c:	00000b06 	br	8009f5c <altera_avalon_jtag_uart_write+0x98>
 8009f30:	e0bff517 	ldw	r2,-44(fp)
 8009f34:	10000526 	beq	r2,zero,8009f4c <altera_avalon_jtag_uart_write+0x88>
 8009f38:	00c20004 	movi	r3,2048
 8009f3c:	e0bff917 	ldw	r2,-28(fp)
 8009f40:	1885c83a 	sub	r2,r3,r2
 8009f44:	e0bff615 	stw	r2,-40(fp)
 8009f48:	00000406 	br	8009f5c <altera_avalon_jtag_uart_write+0x98>
 8009f4c:	00c1ffc4 	movi	r3,2047
 8009f50:	e0bff917 	ldw	r2,-28(fp)
 8009f54:	1885c83a 	sub	r2,r3,r2
 8009f58:	e0bff615 	stw	r2,-40(fp)
 8009f5c:	e0bff617 	ldw	r2,-40(fp)
 8009f60:	10001e26 	beq	r2,zero,8009fdc <altera_avalon_jtag_uart_write+0x118>
 8009f64:	e0fffe17 	ldw	r3,-8(fp)
 8009f68:	e0bff617 	ldw	r2,-40(fp)
 8009f6c:	1880022e 	bgeu	r3,r2,8009f78 <altera_avalon_jtag_uart_write+0xb4>
 8009f70:	e0bffe17 	ldw	r2,-8(fp)
 8009f74:	e0bff615 	stw	r2,-40(fp)
 8009f78:	e0bffc17 	ldw	r2,-16(fp)
 8009f7c:	10c20e04 	addi	r3,r2,2104
 8009f80:	e0bff917 	ldw	r2,-28(fp)
 8009f84:	1885883a 	add	r2,r3,r2
 8009f88:	e1bff617 	ldw	r6,-40(fp)
 8009f8c:	e17ffd17 	ldw	r5,-12(fp)
 8009f90:	1009883a 	mov	r4,r2
 8009f94:	800b66c0 	call	800b66c <memcpy>
 8009f98:	e0fffd17 	ldw	r3,-12(fp)
 8009f9c:	e0bff617 	ldw	r2,-40(fp)
 8009fa0:	1885883a 	add	r2,r3,r2
 8009fa4:	e0bffd15 	stw	r2,-12(fp)
 8009fa8:	e0fffe17 	ldw	r3,-8(fp)
 8009fac:	e0bff617 	ldw	r2,-40(fp)
 8009fb0:	1885c83a 	sub	r2,r3,r2
 8009fb4:	e0bffe15 	stw	r2,-8(fp)
 8009fb8:	e0fff917 	ldw	r3,-28(fp)
 8009fbc:	e0bff617 	ldw	r2,-40(fp)
 8009fc0:	1885883a 	add	r2,r3,r2
 8009fc4:	10c1ffcc 	andi	r3,r2,2047
 8009fc8:	e0bffc17 	ldw	r2,-16(fp)
 8009fcc:	10c00c15 	stw	r3,48(r2)
 8009fd0:	e0bffe17 	ldw	r2,-8(fp)
 8009fd4:	00bfc716 	blt	zero,r2,8009ef4 <__alt_data_end+0xfc009ef4>
 8009fd8:	00000106 	br	8009fe0 <altera_avalon_jtag_uart_write+0x11c>
 8009fdc:	0001883a 	nop
 8009fe0:	0005303a 	rdctl	r2,status
 8009fe4:	e0bffb15 	stw	r2,-20(fp)
 8009fe8:	e0fffb17 	ldw	r3,-20(fp)
 8009fec:	00bfff84 	movi	r2,-2
 8009ff0:	1884703a 	and	r2,r3,r2
 8009ff4:	1001703a 	wrctl	status,r2
 8009ff8:	e0bffb17 	ldw	r2,-20(fp)
 8009ffc:	e0bffa15 	stw	r2,-24(fp)
 800a000:	e0bffc17 	ldw	r2,-16(fp)
 800a004:	10800817 	ldw	r2,32(r2)
 800a008:	10c00094 	ori	r3,r2,2
 800a00c:	e0bffc17 	ldw	r2,-16(fp)
 800a010:	10c00815 	stw	r3,32(r2)
 800a014:	e0bffc17 	ldw	r2,-16(fp)
 800a018:	10800017 	ldw	r2,0(r2)
 800a01c:	10800104 	addi	r2,r2,4
 800a020:	1007883a 	mov	r3,r2
 800a024:	e0bffc17 	ldw	r2,-16(fp)
 800a028:	10800817 	ldw	r2,32(r2)
 800a02c:	18800035 	stwio	r2,0(r3)
 800a030:	e0bffa17 	ldw	r2,-24(fp)
 800a034:	e0bff815 	stw	r2,-32(fp)
 800a038:	e0bff817 	ldw	r2,-32(fp)
 800a03c:	1001703a 	wrctl	status,r2
 800a040:	e0bffe17 	ldw	r2,-8(fp)
 800a044:	0080100e 	bge	zero,r2,800a088 <altera_avalon_jtag_uart_write+0x1c4>
 800a048:	e0bfff17 	ldw	r2,-4(fp)
 800a04c:	1090000c 	andi	r2,r2,16384
 800a050:	1000101e 	bne	r2,zero,800a094 <altera_avalon_jtag_uart_write+0x1d0>
 800a054:	0001883a 	nop
 800a058:	e0bffc17 	ldw	r2,-16(fp)
 800a05c:	10c00d17 	ldw	r3,52(r2)
 800a060:	e0bff517 	ldw	r2,-44(fp)
 800a064:	1880051e 	bne	r3,r2,800a07c <altera_avalon_jtag_uart_write+0x1b8>
 800a068:	e0bffc17 	ldw	r2,-16(fp)
 800a06c:	10c00917 	ldw	r3,36(r2)
 800a070:	e0bffc17 	ldw	r2,-16(fp)
 800a074:	10800117 	ldw	r2,4(r2)
 800a078:	18bff736 	bltu	r3,r2,800a058 <__alt_data_end+0xfc00a058>
 800a07c:	e0bffc17 	ldw	r2,-16(fp)
 800a080:	10800917 	ldw	r2,36(r2)
 800a084:	1000051e 	bne	r2,zero,800a09c <altera_avalon_jtag_uart_write+0x1d8>
 800a088:	e0bffe17 	ldw	r2,-8(fp)
 800a08c:	00bfd016 	blt	zero,r2,8009fd0 <__alt_data_end+0xfc009fd0>
 800a090:	00000306 	br	800a0a0 <altera_avalon_jtag_uart_write+0x1dc>
 800a094:	0001883a 	nop
 800a098:	00000106 	br	800a0a0 <altera_avalon_jtag_uart_write+0x1dc>
 800a09c:	0001883a 	nop
 800a0a0:	e0fffd17 	ldw	r3,-12(fp)
 800a0a4:	e0bff717 	ldw	r2,-36(fp)
 800a0a8:	18800426 	beq	r3,r2,800a0bc <altera_avalon_jtag_uart_write+0x1f8>
 800a0ac:	e0fffd17 	ldw	r3,-12(fp)
 800a0b0:	e0bff717 	ldw	r2,-36(fp)
 800a0b4:	1885c83a 	sub	r2,r3,r2
 800a0b8:	00000606 	br	800a0d4 <altera_avalon_jtag_uart_write+0x210>
 800a0bc:	e0bfff17 	ldw	r2,-4(fp)
 800a0c0:	1090000c 	andi	r2,r2,16384
 800a0c4:	10000226 	beq	r2,zero,800a0d0 <altera_avalon_jtag_uart_write+0x20c>
 800a0c8:	00bffd44 	movi	r2,-11
 800a0cc:	00000106 	br	800a0d4 <altera_avalon_jtag_uart_write+0x210>
 800a0d0:	00bffec4 	movi	r2,-5
 800a0d4:	e037883a 	mov	sp,fp
 800a0d8:	dfc00117 	ldw	ra,4(sp)
 800a0dc:	df000017 	ldw	fp,0(sp)
 800a0e0:	dec00204 	addi	sp,sp,8
 800a0e4:	f800283a 	ret

0800a0e8 <alt_avalon_spi_command>:
 800a0e8:	defff404 	addi	sp,sp,-48
 800a0ec:	df000b15 	stw	fp,44(sp)
 800a0f0:	df000b04 	addi	fp,sp,44
 800a0f4:	e13ffc15 	stw	r4,-16(fp)
 800a0f8:	e17ffd15 	stw	r5,-12(fp)
 800a0fc:	e1bffe15 	stw	r6,-8(fp)
 800a100:	e1ffff15 	stw	r7,-4(fp)
 800a104:	e0ffff17 	ldw	r3,-4(fp)
 800a108:	e0bffe17 	ldw	r2,-8(fp)
 800a10c:	1885883a 	add	r2,r3,r2
 800a110:	e0bff815 	stw	r2,-32(fp)
 800a114:	e0c00217 	ldw	r3,8(fp)
 800a118:	e0800117 	ldw	r2,4(fp)
 800a11c:	1885883a 	add	r2,r3,r2
 800a120:	e0bff915 	stw	r2,-28(fp)
 800a124:	e0800117 	ldw	r2,4(fp)
 800a128:	e0bff515 	stw	r2,-44(fp)
 800a12c:	e0bffe17 	ldw	r2,-8(fp)
 800a130:	e0bff615 	stw	r2,-40(fp)
 800a134:	00800044 	movi	r2,1
 800a138:	e0bff715 	stw	r2,-36(fp)
 800a13c:	e0bffc17 	ldw	r2,-16(fp)
 800a140:	10800504 	addi	r2,r2,20
 800a144:	1009883a 	mov	r4,r2
 800a148:	00c00044 	movi	r3,1
 800a14c:	e0bffd17 	ldw	r2,-12(fp)
 800a150:	1884983a 	sll	r2,r3,r2
 800a154:	20800035 	stwio	r2,0(r4)
 800a158:	e0800317 	ldw	r2,12(fp)
 800a15c:	1080008c 	andi	r2,r2,2
 800a160:	1000051e 	bne	r2,zero,800a178 <alt_avalon_spi_command+0x90>
 800a164:	e0bffc17 	ldw	r2,-16(fp)
 800a168:	10800304 	addi	r2,r2,12
 800a16c:	1007883a 	mov	r3,r2
 800a170:	00810004 	movi	r2,1024
 800a174:	18800035 	stwio	r2,0(r3)
 800a178:	e0bffc17 	ldw	r2,-16(fp)
 800a17c:	10800037 	ldwio	r2,0(r2)
 800a180:	e0bffc17 	ldw	r2,-16(fp)
 800a184:	10800204 	addi	r2,r2,8
 800a188:	10800037 	ldwio	r2,0(r2)
 800a18c:	e0bffa15 	stw	r2,-24(fp)
 800a190:	e0bffa17 	ldw	r2,-24(fp)
 800a194:	1080100c 	andi	r2,r2,64
 800a198:	10000226 	beq	r2,zero,800a1a4 <alt_avalon_spi_command+0xbc>
 800a19c:	e0bff717 	ldw	r2,-36(fp)
 800a1a0:	1000031e 	bne	r2,zero,800a1b0 <alt_avalon_spi_command+0xc8>
 800a1a4:	e0bffa17 	ldw	r2,-24(fp)
 800a1a8:	1080200c 	andi	r2,r2,128
 800a1ac:	103ff426 	beq	r2,zero,800a180 <__alt_data_end+0xfc00a180>
 800a1b0:	e0bffa17 	ldw	r2,-24(fp)
 800a1b4:	1080100c 	andi	r2,r2,64
 800a1b8:	10001e26 	beq	r2,zero,800a234 <alt_avalon_spi_command+0x14c>
 800a1bc:	e0bff717 	ldw	r2,-36(fp)
 800a1c0:	00801c0e 	bge	zero,r2,800a234 <alt_avalon_spi_command+0x14c>
 800a1c4:	e0bff717 	ldw	r2,-36(fp)
 800a1c8:	10bfffc4 	addi	r2,r2,-1
 800a1cc:	e0bff715 	stw	r2,-36(fp)
 800a1d0:	e0ffff17 	ldw	r3,-4(fp)
 800a1d4:	e0bff817 	ldw	r2,-32(fp)
 800a1d8:	18800a2e 	bgeu	r3,r2,800a204 <alt_avalon_spi_command+0x11c>
 800a1dc:	e0bffc17 	ldw	r2,-16(fp)
 800a1e0:	10800104 	addi	r2,r2,4
 800a1e4:	1009883a 	mov	r4,r2
 800a1e8:	e0bfff17 	ldw	r2,-4(fp)
 800a1ec:	10c00044 	addi	r3,r2,1
 800a1f0:	e0ffff15 	stw	r3,-4(fp)
 800a1f4:	10800003 	ldbu	r2,0(r2)
 800a1f8:	10803fcc 	andi	r2,r2,255
 800a1fc:	20800035 	stwio	r2,0(r4)
 800a200:	00000c06 	br	800a234 <alt_avalon_spi_command+0x14c>
 800a204:	e0bff517 	ldw	r2,-44(fp)
 800a208:	10000826 	beq	r2,zero,800a22c <alt_avalon_spi_command+0x144>
 800a20c:	e0bff517 	ldw	r2,-44(fp)
 800a210:	10bfffc4 	addi	r2,r2,-1
 800a214:	e0bff515 	stw	r2,-44(fp)
 800a218:	e0bffc17 	ldw	r2,-16(fp)
 800a21c:	10800104 	addi	r2,r2,4
 800a220:	0007883a 	mov	r3,zero
 800a224:	10c00035 	stwio	r3,0(r2)
 800a228:	00000206 	br	800a234 <alt_avalon_spi_command+0x14c>
 800a22c:	00bf0004 	movi	r2,-1024
 800a230:	e0bff715 	stw	r2,-36(fp)
 800a234:	e0bffa17 	ldw	r2,-24(fp)
 800a238:	1080200c 	andi	r2,r2,128
 800a23c:	103fd026 	beq	r2,zero,800a180 <__alt_data_end+0xfc00a180>
 800a240:	e0bffc17 	ldw	r2,-16(fp)
 800a244:	10800037 	ldwio	r2,0(r2)
 800a248:	e0bffb15 	stw	r2,-20(fp)
 800a24c:	e0bff617 	ldw	r2,-40(fp)
 800a250:	10000426 	beq	r2,zero,800a264 <alt_avalon_spi_command+0x17c>
 800a254:	e0bff617 	ldw	r2,-40(fp)
 800a258:	10bfffc4 	addi	r2,r2,-1
 800a25c:	e0bff615 	stw	r2,-40(fp)
 800a260:	00000506 	br	800a278 <alt_avalon_spi_command+0x190>
 800a264:	e0800217 	ldw	r2,8(fp)
 800a268:	10c00044 	addi	r3,r2,1
 800a26c:	e0c00215 	stw	r3,8(fp)
 800a270:	e0fffb17 	ldw	r3,-20(fp)
 800a274:	10c00005 	stb	r3,0(r2)
 800a278:	e0bff717 	ldw	r2,-36(fp)
 800a27c:	10800044 	addi	r2,r2,1
 800a280:	e0bff715 	stw	r2,-36(fp)
 800a284:	e0bff617 	ldw	r2,-40(fp)
 800a288:	103fbd1e 	bne	r2,zero,800a180 <__alt_data_end+0xfc00a180>
 800a28c:	e0c00217 	ldw	r3,8(fp)
 800a290:	e0bff917 	ldw	r2,-28(fp)
 800a294:	18bfba1e 	bne	r3,r2,800a180 <__alt_data_end+0xfc00a180>
 800a298:	e0bffc17 	ldw	r2,-16(fp)
 800a29c:	10800204 	addi	r2,r2,8
 800a2a0:	10800037 	ldwio	r2,0(r2)
 800a2a4:	e0bffa15 	stw	r2,-24(fp)
 800a2a8:	e0bffa17 	ldw	r2,-24(fp)
 800a2ac:	1080080c 	andi	r2,r2,32
 800a2b0:	103ff926 	beq	r2,zero,800a298 <__alt_data_end+0xfc00a298>
 800a2b4:	e0800317 	ldw	r2,12(fp)
 800a2b8:	1080004c 	andi	r2,r2,1
 800a2bc:	1000041e 	bne	r2,zero,800a2d0 <alt_avalon_spi_command+0x1e8>
 800a2c0:	e0bffc17 	ldw	r2,-16(fp)
 800a2c4:	10800304 	addi	r2,r2,12
 800a2c8:	0007883a 	mov	r3,zero
 800a2cc:	10c00035 	stwio	r3,0(r2)
 800a2d0:	e0800117 	ldw	r2,4(fp)
 800a2d4:	e037883a 	mov	sp,fp
 800a2d8:	df000017 	ldw	fp,0(sp)
 800a2dc:	dec00104 	addi	sp,sp,4
 800a2e0:	f800283a 	ret

0800a2e4 <alt_avalon_timer_sc_irq>:
 800a2e4:	defffa04 	addi	sp,sp,-24
 800a2e8:	dfc00515 	stw	ra,20(sp)
 800a2ec:	df000415 	stw	fp,16(sp)
 800a2f0:	df000404 	addi	fp,sp,16
 800a2f4:	e13fff15 	stw	r4,-4(fp)
 800a2f8:	0007883a 	mov	r3,zero
 800a2fc:	e0bfff17 	ldw	r2,-4(fp)
 800a300:	10c00035 	stwio	r3,0(r2)
 800a304:	e0bfff17 	ldw	r2,-4(fp)
 800a308:	10800104 	addi	r2,r2,4
 800a30c:	10800037 	ldwio	r2,0(r2)
 800a310:	0005303a 	rdctl	r2,status
 800a314:	e0bffd15 	stw	r2,-12(fp)
 800a318:	e0fffd17 	ldw	r3,-12(fp)
 800a31c:	00bfff84 	movi	r2,-2
 800a320:	1884703a 	and	r2,r3,r2
 800a324:	1001703a 	wrctl	status,r2
 800a328:	e0bffd17 	ldw	r2,-12(fp)
 800a32c:	e0bffc15 	stw	r2,-16(fp)
 800a330:	80077180 	call	8007718 <alt_tick>
 800a334:	e0bffc17 	ldw	r2,-16(fp)
 800a338:	e0bffe15 	stw	r2,-8(fp)
 800a33c:	e0bffe17 	ldw	r2,-8(fp)
 800a340:	1001703a 	wrctl	status,r2
 800a344:	0001883a 	nop
 800a348:	e037883a 	mov	sp,fp
 800a34c:	dfc00117 	ldw	ra,4(sp)
 800a350:	df000017 	ldw	fp,0(sp)
 800a354:	dec00204 	addi	sp,sp,8
 800a358:	f800283a 	ret

0800a35c <alt_avalon_timer_sc_init>:
 800a35c:	defff804 	addi	sp,sp,-32
 800a360:	dfc00715 	stw	ra,28(sp)
 800a364:	df000615 	stw	fp,24(sp)
 800a368:	df000604 	addi	fp,sp,24
 800a36c:	e13ffc15 	stw	r4,-16(fp)
 800a370:	e17ffd15 	stw	r5,-12(fp)
 800a374:	e1bffe15 	stw	r6,-8(fp)
 800a378:	e1ffff15 	stw	r7,-4(fp)
 800a37c:	e0bfff17 	ldw	r2,-4(fp)
 800a380:	e0bffb15 	stw	r2,-20(fp)
 800a384:	d0ac0c17 	ldw	r2,-20432(gp)
 800a388:	1000021e 	bne	r2,zero,800a394 <alt_avalon_timer_sc_init+0x38>
 800a38c:	e0bffb17 	ldw	r2,-20(fp)
 800a390:	d0ac0c15 	stw	r2,-20432(gp)
 800a394:	e0bffc17 	ldw	r2,-16(fp)
 800a398:	10800104 	addi	r2,r2,4
 800a39c:	00c001c4 	movi	r3,7
 800a3a0:	10c00035 	stwio	r3,0(r2)
 800a3a4:	d8000015 	stw	zero,0(sp)
 800a3a8:	e1fffc17 	ldw	r7,-16(fp)
 800a3ac:	01820074 	movhi	r6,2049
 800a3b0:	31a8b904 	addi	r6,r6,-23836
 800a3b4:	e17ffe17 	ldw	r5,-8(fp)
 800a3b8:	e13ffd17 	ldw	r4,-12(fp)
 800a3bc:	800aa0c0 	call	800aa0c <alt_ic_isr_register>
 800a3c0:	0001883a 	nop
 800a3c4:	e037883a 	mov	sp,fp
 800a3c8:	dfc00117 	ldw	ra,4(sp)
 800a3cc:	df000017 	ldw	fp,0(sp)
 800a3d0:	dec00204 	addi	sp,sp,8
 800a3d4:	f800283a 	ret

0800a3d8 <alt_alarm_start>:
 800a3d8:	defff504 	addi	sp,sp,-44
 800a3dc:	df000a15 	stw	fp,40(sp)
 800a3e0:	df000a04 	addi	fp,sp,40
 800a3e4:	e13ffc15 	stw	r4,-16(fp)
 800a3e8:	e17ffd15 	stw	r5,-12(fp)
 800a3ec:	e1bffe15 	stw	r6,-8(fp)
 800a3f0:	e1ffff15 	stw	r7,-4(fp)
 800a3f4:	e03ff615 	stw	zero,-40(fp)
 800a3f8:	d0ac0c17 	ldw	r2,-20432(gp)
 800a3fc:	10003c26 	beq	r2,zero,800a4f0 <alt_alarm_start+0x118>
 800a400:	e0bffc17 	ldw	r2,-16(fp)
 800a404:	10003826 	beq	r2,zero,800a4e8 <alt_alarm_start+0x110>
 800a408:	e0bffc17 	ldw	r2,-16(fp)
 800a40c:	e0fffe17 	ldw	r3,-8(fp)
 800a410:	10c00315 	stw	r3,12(r2)
 800a414:	e0bffc17 	ldw	r2,-16(fp)
 800a418:	e0ffff17 	ldw	r3,-4(fp)
 800a41c:	10c00515 	stw	r3,20(r2)
 800a420:	0005303a 	rdctl	r2,status
 800a424:	e0bff915 	stw	r2,-28(fp)
 800a428:	e0fff917 	ldw	r3,-28(fp)
 800a42c:	00bfff84 	movi	r2,-2
 800a430:	1884703a 	and	r2,r3,r2
 800a434:	1001703a 	wrctl	status,r2
 800a438:	e0bff917 	ldw	r2,-28(fp)
 800a43c:	e0bff815 	stw	r2,-32(fp)
 800a440:	d0ac0d17 	ldw	r2,-20428(gp)
 800a444:	e0bff615 	stw	r2,-40(fp)
 800a448:	e0fffd17 	ldw	r3,-12(fp)
 800a44c:	e0bff617 	ldw	r2,-40(fp)
 800a450:	1885883a 	add	r2,r3,r2
 800a454:	10c00044 	addi	r3,r2,1
 800a458:	e0bffc17 	ldw	r2,-16(fp)
 800a45c:	10c00215 	stw	r3,8(r2)
 800a460:	e0bffc17 	ldw	r2,-16(fp)
 800a464:	10c00217 	ldw	r3,8(r2)
 800a468:	e0bff617 	ldw	r2,-40(fp)
 800a46c:	1880042e 	bgeu	r3,r2,800a480 <alt_alarm_start+0xa8>
 800a470:	e0bffc17 	ldw	r2,-16(fp)
 800a474:	00c00044 	movi	r3,1
 800a478:	10c00405 	stb	r3,16(r2)
 800a47c:	00000206 	br	800a488 <alt_alarm_start+0xb0>
 800a480:	e0bffc17 	ldw	r2,-16(fp)
 800a484:	10000405 	stb	zero,16(r2)
 800a488:	e0bffc17 	ldw	r2,-16(fp)
 800a48c:	d0e00904 	addi	r3,gp,-32732
 800a490:	e0fffa15 	stw	r3,-24(fp)
 800a494:	e0bffb15 	stw	r2,-20(fp)
 800a498:	e0bffb17 	ldw	r2,-20(fp)
 800a49c:	e0fffa17 	ldw	r3,-24(fp)
 800a4a0:	10c00115 	stw	r3,4(r2)
 800a4a4:	e0bffa17 	ldw	r2,-24(fp)
 800a4a8:	10c00017 	ldw	r3,0(r2)
 800a4ac:	e0bffb17 	ldw	r2,-20(fp)
 800a4b0:	10c00015 	stw	r3,0(r2)
 800a4b4:	e0bffa17 	ldw	r2,-24(fp)
 800a4b8:	10800017 	ldw	r2,0(r2)
 800a4bc:	e0fffb17 	ldw	r3,-20(fp)
 800a4c0:	10c00115 	stw	r3,4(r2)
 800a4c4:	e0bffa17 	ldw	r2,-24(fp)
 800a4c8:	e0fffb17 	ldw	r3,-20(fp)
 800a4cc:	10c00015 	stw	r3,0(r2)
 800a4d0:	e0bff817 	ldw	r2,-32(fp)
 800a4d4:	e0bff715 	stw	r2,-36(fp)
 800a4d8:	e0bff717 	ldw	r2,-36(fp)
 800a4dc:	1001703a 	wrctl	status,r2
 800a4e0:	0005883a 	mov	r2,zero
 800a4e4:	00000306 	br	800a4f4 <alt_alarm_start+0x11c>
 800a4e8:	00bffa84 	movi	r2,-22
 800a4ec:	00000106 	br	800a4f4 <alt_alarm_start+0x11c>
 800a4f0:	00bfde84 	movi	r2,-134
 800a4f4:	e037883a 	mov	sp,fp
 800a4f8:	df000017 	ldw	fp,0(sp)
 800a4fc:	dec00104 	addi	sp,sp,4
 800a500:	f800283a 	ret

0800a504 <alt_busy_sleep>:
 800a504:	defffa04 	addi	sp,sp,-24
 800a508:	dfc00515 	stw	ra,20(sp)
 800a50c:	df000415 	stw	fp,16(sp)
 800a510:	df000404 	addi	fp,sp,16
 800a514:	e13fff15 	stw	r4,-4(fp)
 800a518:	00800244 	movi	r2,9
 800a51c:	e0bffd15 	stw	r2,-12(fp)
 800a520:	014003f4 	movhi	r5,15
 800a524:	29509004 	addi	r5,r5,16960
 800a528:	e13ffd17 	ldw	r4,-12(fp)
 800a52c:	80057940 	call	8005794 <__mulsi3>
 800a530:	100b883a 	mov	r5,r2
 800a534:	01017db4 	movhi	r4,1526
 800a538:	21384004 	addi	r4,r4,-7936
 800a53c:	80056d80 	call	80056d8 <__udivsi3>
 800a540:	100b883a 	mov	r5,r2
 800a544:	01200034 	movhi	r4,32768
 800a548:	213fffc4 	addi	r4,r4,-1
 800a54c:	80056d80 	call	80056d8 <__udivsi3>
 800a550:	100b883a 	mov	r5,r2
 800a554:	e13fff17 	ldw	r4,-4(fp)
 800a558:	80056d80 	call	80056d8 <__udivsi3>
 800a55c:	e0bffe15 	stw	r2,-8(fp)
 800a560:	e0bffe17 	ldw	r2,-8(fp)
 800a564:	10002a26 	beq	r2,zero,800a610 <alt_busy_sleep+0x10c>
 800a568:	e03ffc15 	stw	zero,-16(fp)
 800a56c:	00001706 	br	800a5cc <alt_busy_sleep+0xc8>
 800a570:	00a00034 	movhi	r2,32768
 800a574:	10bfffc4 	addi	r2,r2,-1
 800a578:	10bfffc4 	addi	r2,r2,-1
 800a57c:	103ffe1e 	bne	r2,zero,800a578 <__alt_data_end+0xfc00a578>
 800a580:	014003f4 	movhi	r5,15
 800a584:	29509004 	addi	r5,r5,16960
 800a588:	e13ffd17 	ldw	r4,-12(fp)
 800a58c:	80057940 	call	8005794 <__mulsi3>
 800a590:	100b883a 	mov	r5,r2
 800a594:	01017db4 	movhi	r4,1526
 800a598:	21384004 	addi	r4,r4,-7936
 800a59c:	80056d80 	call	80056d8 <__udivsi3>
 800a5a0:	100b883a 	mov	r5,r2
 800a5a4:	01200034 	movhi	r4,32768
 800a5a8:	213fffc4 	addi	r4,r4,-1
 800a5ac:	80056d80 	call	80056d8 <__udivsi3>
 800a5b0:	1007883a 	mov	r3,r2
 800a5b4:	e0bfff17 	ldw	r2,-4(fp)
 800a5b8:	10c5c83a 	sub	r2,r2,r3
 800a5bc:	e0bfff15 	stw	r2,-4(fp)
 800a5c0:	e0bffc17 	ldw	r2,-16(fp)
 800a5c4:	10800044 	addi	r2,r2,1
 800a5c8:	e0bffc15 	stw	r2,-16(fp)
 800a5cc:	e0fffc17 	ldw	r3,-16(fp)
 800a5d0:	e0bffe17 	ldw	r2,-8(fp)
 800a5d4:	18bfe616 	blt	r3,r2,800a570 <__alt_data_end+0xfc00a570>
 800a5d8:	014003f4 	movhi	r5,15
 800a5dc:	29509004 	addi	r5,r5,16960
 800a5e0:	e13ffd17 	ldw	r4,-12(fp)
 800a5e4:	80057940 	call	8005794 <__mulsi3>
 800a5e8:	100b883a 	mov	r5,r2
 800a5ec:	01017db4 	movhi	r4,1526
 800a5f0:	21384004 	addi	r4,r4,-7936
 800a5f4:	80056d80 	call	80056d8 <__udivsi3>
 800a5f8:	e17fff17 	ldw	r5,-4(fp)
 800a5fc:	1009883a 	mov	r4,r2
 800a600:	80057940 	call	8005794 <__mulsi3>
 800a604:	10bfffc4 	addi	r2,r2,-1
 800a608:	103ffe1e 	bne	r2,zero,800a604 <__alt_data_end+0xfc00a604>
 800a60c:	00000d06 	br	800a644 <alt_busy_sleep+0x140>
 800a610:	014003f4 	movhi	r5,15
 800a614:	29509004 	addi	r5,r5,16960
 800a618:	e13ffd17 	ldw	r4,-12(fp)
 800a61c:	80057940 	call	8005794 <__mulsi3>
 800a620:	100b883a 	mov	r5,r2
 800a624:	01017db4 	movhi	r4,1526
 800a628:	21384004 	addi	r4,r4,-7936
 800a62c:	80056d80 	call	80056d8 <__udivsi3>
 800a630:	e17fff17 	ldw	r5,-4(fp)
 800a634:	1009883a 	mov	r4,r2
 800a638:	80057940 	call	8005794 <__mulsi3>
 800a63c:	10bfffc4 	addi	r2,r2,-1
 800a640:	00bffe16 	blt	zero,r2,800a63c <__alt_data_end+0xfc00a63c>
 800a644:	0005883a 	mov	r2,zero
 800a648:	e037883a 	mov	sp,fp
 800a64c:	dfc00117 	ldw	ra,4(sp)
 800a650:	df000017 	ldw	fp,0(sp)
 800a654:	dec00204 	addi	sp,sp,8
 800a658:	f800283a 	ret

0800a65c <alt_get_errno>:
 800a65c:	defffe04 	addi	sp,sp,-8
 800a660:	dfc00115 	stw	ra,4(sp)
 800a664:	df000015 	stw	fp,0(sp)
 800a668:	d839883a 	mov	fp,sp
 800a66c:	d0a01217 	ldw	r2,-32696(gp)
 800a670:	10000326 	beq	r2,zero,800a680 <alt_get_errno+0x24>
 800a674:	d0a01217 	ldw	r2,-32696(gp)
 800a678:	103ee83a 	callr	r2
 800a67c:	00000106 	br	800a684 <alt_get_errno+0x28>
 800a680:	d0ac0804 	addi	r2,gp,-20448
 800a684:	e037883a 	mov	sp,fp
 800a688:	dfc00117 	ldw	ra,4(sp)
 800a68c:	df000017 	ldw	fp,0(sp)
 800a690:	dec00204 	addi	sp,sp,8
 800a694:	f800283a 	ret

0800a698 <close>:
 800a698:	defffb04 	addi	sp,sp,-20
 800a69c:	dfc00415 	stw	ra,16(sp)
 800a6a0:	df000315 	stw	fp,12(sp)
 800a6a4:	df000304 	addi	fp,sp,12
 800a6a8:	e13fff15 	stw	r4,-4(fp)
 800a6ac:	e0bfff17 	ldw	r2,-4(fp)
 800a6b0:	10000816 	blt	r2,zero,800a6d4 <close+0x3c>
 800a6b4:	01400304 	movi	r5,12
 800a6b8:	e13fff17 	ldw	r4,-4(fp)
 800a6bc:	80057940 	call	8005794 <__mulsi3>
 800a6c0:	1007883a 	mov	r3,r2
 800a6c4:	00820074 	movhi	r2,2049
 800a6c8:	10bb5304 	addi	r2,r2,-4788
 800a6cc:	1885883a 	add	r2,r3,r2
 800a6d0:	00000106 	br	800a6d8 <close+0x40>
 800a6d4:	0005883a 	mov	r2,zero
 800a6d8:	e0bffd15 	stw	r2,-12(fp)
 800a6dc:	e0bffd17 	ldw	r2,-12(fp)
 800a6e0:	10001926 	beq	r2,zero,800a748 <close+0xb0>
 800a6e4:	e0bffd17 	ldw	r2,-12(fp)
 800a6e8:	10800017 	ldw	r2,0(r2)
 800a6ec:	10800417 	ldw	r2,16(r2)
 800a6f0:	10000626 	beq	r2,zero,800a70c <close+0x74>
 800a6f4:	e0bffd17 	ldw	r2,-12(fp)
 800a6f8:	10800017 	ldw	r2,0(r2)
 800a6fc:	10800417 	ldw	r2,16(r2)
 800a700:	e13ffd17 	ldw	r4,-12(fp)
 800a704:	103ee83a 	callr	r2
 800a708:	00000106 	br	800a710 <close+0x78>
 800a70c:	0005883a 	mov	r2,zero
 800a710:	e0bffe15 	stw	r2,-8(fp)
 800a714:	e13fff17 	ldw	r4,-4(fp)
 800a718:	800b2f80 	call	800b2f8 <alt_release_fd>
 800a71c:	e0bffe17 	ldw	r2,-8(fp)
 800a720:	1000070e 	bge	r2,zero,800a740 <close+0xa8>
 800a724:	800a65c0 	call	800a65c <alt_get_errno>
 800a728:	1007883a 	mov	r3,r2
 800a72c:	e0bffe17 	ldw	r2,-8(fp)
 800a730:	0085c83a 	sub	r2,zero,r2
 800a734:	18800015 	stw	r2,0(r3)
 800a738:	00bfffc4 	movi	r2,-1
 800a73c:	00000706 	br	800a75c <close+0xc4>
 800a740:	0005883a 	mov	r2,zero
 800a744:	00000506 	br	800a75c <close+0xc4>
 800a748:	800a65c0 	call	800a65c <alt_get_errno>
 800a74c:	1007883a 	mov	r3,r2
 800a750:	00801444 	movi	r2,81
 800a754:	18800015 	stw	r2,0(r3)
 800a758:	00bfffc4 	movi	r2,-1
 800a75c:	e037883a 	mov	sp,fp
 800a760:	dfc00117 	ldw	ra,4(sp)
 800a764:	df000017 	ldw	fp,0(sp)
 800a768:	dec00204 	addi	sp,sp,8
 800a76c:	f800283a 	ret

0800a770 <alt_dcache_flush_all>:
 800a770:	deffff04 	addi	sp,sp,-4
 800a774:	df000015 	stw	fp,0(sp)
 800a778:	d839883a 	mov	fp,sp
 800a77c:	0001883a 	nop
 800a780:	e037883a 	mov	sp,fp
 800a784:	df000017 	ldw	fp,0(sp)
 800a788:	dec00104 	addi	sp,sp,4
 800a78c:	f800283a 	ret

0800a790 <alt_dev_null_write>:
 800a790:	defffc04 	addi	sp,sp,-16
 800a794:	df000315 	stw	fp,12(sp)
 800a798:	df000304 	addi	fp,sp,12
 800a79c:	e13ffd15 	stw	r4,-12(fp)
 800a7a0:	e17ffe15 	stw	r5,-8(fp)
 800a7a4:	e1bfff15 	stw	r6,-4(fp)
 800a7a8:	e0bfff17 	ldw	r2,-4(fp)
 800a7ac:	e037883a 	mov	sp,fp
 800a7b0:	df000017 	ldw	fp,0(sp)
 800a7b4:	dec00104 	addi	sp,sp,4
 800a7b8:	f800283a 	ret

0800a7bc <alt_get_errno>:
 800a7bc:	defffe04 	addi	sp,sp,-8
 800a7c0:	dfc00115 	stw	ra,4(sp)
 800a7c4:	df000015 	stw	fp,0(sp)
 800a7c8:	d839883a 	mov	fp,sp
 800a7cc:	d0a01217 	ldw	r2,-32696(gp)
 800a7d0:	10000326 	beq	r2,zero,800a7e0 <alt_get_errno+0x24>
 800a7d4:	d0a01217 	ldw	r2,-32696(gp)
 800a7d8:	103ee83a 	callr	r2
 800a7dc:	00000106 	br	800a7e4 <alt_get_errno+0x28>
 800a7e0:	d0ac0804 	addi	r2,gp,-20448
 800a7e4:	e037883a 	mov	sp,fp
 800a7e8:	dfc00117 	ldw	ra,4(sp)
 800a7ec:	df000017 	ldw	fp,0(sp)
 800a7f0:	dec00204 	addi	sp,sp,8
 800a7f4:	f800283a 	ret

0800a7f8 <alt_dev_llist_insert>:
 800a7f8:	defffa04 	addi	sp,sp,-24
 800a7fc:	dfc00515 	stw	ra,20(sp)
 800a800:	df000415 	stw	fp,16(sp)
 800a804:	df000404 	addi	fp,sp,16
 800a808:	e13ffe15 	stw	r4,-8(fp)
 800a80c:	e17fff15 	stw	r5,-4(fp)
 800a810:	e0bffe17 	ldw	r2,-8(fp)
 800a814:	10000326 	beq	r2,zero,800a824 <alt_dev_llist_insert+0x2c>
 800a818:	e0bffe17 	ldw	r2,-8(fp)
 800a81c:	10800217 	ldw	r2,8(r2)
 800a820:	1000061e 	bne	r2,zero,800a83c <alt_dev_llist_insert+0x44>
 800a824:	800a7bc0 	call	800a7bc <alt_get_errno>
 800a828:	1007883a 	mov	r3,r2
 800a82c:	00800584 	movi	r2,22
 800a830:	18800015 	stw	r2,0(r3)
 800a834:	00bffa84 	movi	r2,-22
 800a838:	00001306 	br	800a888 <alt_dev_llist_insert+0x90>
 800a83c:	e0bffe17 	ldw	r2,-8(fp)
 800a840:	e0ffff17 	ldw	r3,-4(fp)
 800a844:	e0fffc15 	stw	r3,-16(fp)
 800a848:	e0bffd15 	stw	r2,-12(fp)
 800a84c:	e0bffd17 	ldw	r2,-12(fp)
 800a850:	e0fffc17 	ldw	r3,-16(fp)
 800a854:	10c00115 	stw	r3,4(r2)
 800a858:	e0bffc17 	ldw	r2,-16(fp)
 800a85c:	10c00017 	ldw	r3,0(r2)
 800a860:	e0bffd17 	ldw	r2,-12(fp)
 800a864:	10c00015 	stw	r3,0(r2)
 800a868:	e0bffc17 	ldw	r2,-16(fp)
 800a86c:	10800017 	ldw	r2,0(r2)
 800a870:	e0fffd17 	ldw	r3,-12(fp)
 800a874:	10c00115 	stw	r3,4(r2)
 800a878:	e0bffc17 	ldw	r2,-16(fp)
 800a87c:	e0fffd17 	ldw	r3,-12(fp)
 800a880:	10c00015 	stw	r3,0(r2)
 800a884:	0005883a 	mov	r2,zero
 800a888:	e037883a 	mov	sp,fp
 800a88c:	dfc00117 	ldw	ra,4(sp)
 800a890:	df000017 	ldw	fp,0(sp)
 800a894:	dec00204 	addi	sp,sp,8
 800a898:	f800283a 	ret

0800a89c <_do_ctors>:
 800a89c:	defffd04 	addi	sp,sp,-12
 800a8a0:	dfc00215 	stw	ra,8(sp)
 800a8a4:	df000115 	stw	fp,4(sp)
 800a8a8:	df000104 	addi	fp,sp,4
 800a8ac:	00820074 	movhi	r2,2049
 800a8b0:	10ae9604 	addi	r2,r2,-17832
 800a8b4:	e0bfff15 	stw	r2,-4(fp)
 800a8b8:	00000606 	br	800a8d4 <_do_ctors+0x38>
 800a8bc:	e0bfff17 	ldw	r2,-4(fp)
 800a8c0:	10800017 	ldw	r2,0(r2)
 800a8c4:	103ee83a 	callr	r2
 800a8c8:	e0bfff17 	ldw	r2,-4(fp)
 800a8cc:	10bfff04 	addi	r2,r2,-4
 800a8d0:	e0bfff15 	stw	r2,-4(fp)
 800a8d4:	e0ffff17 	ldw	r3,-4(fp)
 800a8d8:	00820074 	movhi	r2,2049
 800a8dc:	10ae9704 	addi	r2,r2,-17828
 800a8e0:	18bff62e 	bgeu	r3,r2,800a8bc <__alt_data_end+0xfc00a8bc>
 800a8e4:	0001883a 	nop
 800a8e8:	e037883a 	mov	sp,fp
 800a8ec:	dfc00117 	ldw	ra,4(sp)
 800a8f0:	df000017 	ldw	fp,0(sp)
 800a8f4:	dec00204 	addi	sp,sp,8
 800a8f8:	f800283a 	ret

0800a8fc <_do_dtors>:
 800a8fc:	defffd04 	addi	sp,sp,-12
 800a900:	dfc00215 	stw	ra,8(sp)
 800a904:	df000115 	stw	fp,4(sp)
 800a908:	df000104 	addi	fp,sp,4
 800a90c:	00820074 	movhi	r2,2049
 800a910:	10ae9604 	addi	r2,r2,-17832
 800a914:	e0bfff15 	stw	r2,-4(fp)
 800a918:	00000606 	br	800a934 <_do_dtors+0x38>
 800a91c:	e0bfff17 	ldw	r2,-4(fp)
 800a920:	10800017 	ldw	r2,0(r2)
 800a924:	103ee83a 	callr	r2
 800a928:	e0bfff17 	ldw	r2,-4(fp)
 800a92c:	10bfff04 	addi	r2,r2,-4
 800a930:	e0bfff15 	stw	r2,-4(fp)
 800a934:	e0ffff17 	ldw	r3,-4(fp)
 800a938:	00820074 	movhi	r2,2049
 800a93c:	10ae9704 	addi	r2,r2,-17828
 800a940:	18bff62e 	bgeu	r3,r2,800a91c <__alt_data_end+0xfc00a91c>
 800a944:	0001883a 	nop
 800a948:	e037883a 	mov	sp,fp
 800a94c:	dfc00117 	ldw	ra,4(sp)
 800a950:	df000017 	ldw	fp,0(sp)
 800a954:	dec00204 	addi	sp,sp,8
 800a958:	f800283a 	ret

0800a95c <alt_find_dev>:
 800a95c:	defffa04 	addi	sp,sp,-24
 800a960:	dfc00515 	stw	ra,20(sp)
 800a964:	df000415 	stw	fp,16(sp)
 800a968:	df000404 	addi	fp,sp,16
 800a96c:	e13ffe15 	stw	r4,-8(fp)
 800a970:	e17fff15 	stw	r5,-4(fp)
 800a974:	e0bfff17 	ldw	r2,-4(fp)
 800a978:	10800017 	ldw	r2,0(r2)
 800a97c:	e0bffc15 	stw	r2,-16(fp)
 800a980:	e13ffe17 	ldw	r4,-8(fp)
 800a984:	8006e340 	call	8006e34 <strlen>
 800a988:	10800044 	addi	r2,r2,1
 800a98c:	e0bffd15 	stw	r2,-12(fp)
 800a990:	00000d06 	br	800a9c8 <alt_find_dev+0x6c>
 800a994:	e0bffc17 	ldw	r2,-16(fp)
 800a998:	10800217 	ldw	r2,8(r2)
 800a99c:	e0fffd17 	ldw	r3,-12(fp)
 800a9a0:	180d883a 	mov	r6,r3
 800a9a4:	e17ffe17 	ldw	r5,-8(fp)
 800a9a8:	1009883a 	mov	r4,r2
 800a9ac:	800b63c0 	call	800b63c <memcmp>
 800a9b0:	1000021e 	bne	r2,zero,800a9bc <alt_find_dev+0x60>
 800a9b4:	e0bffc17 	ldw	r2,-16(fp)
 800a9b8:	00000706 	br	800a9d8 <alt_find_dev+0x7c>
 800a9bc:	e0bffc17 	ldw	r2,-16(fp)
 800a9c0:	10800017 	ldw	r2,0(r2)
 800a9c4:	e0bffc15 	stw	r2,-16(fp)
 800a9c8:	e0fffc17 	ldw	r3,-16(fp)
 800a9cc:	e0bfff17 	ldw	r2,-4(fp)
 800a9d0:	18bff01e 	bne	r3,r2,800a994 <__alt_data_end+0xfc00a994>
 800a9d4:	0005883a 	mov	r2,zero
 800a9d8:	e037883a 	mov	sp,fp
 800a9dc:	dfc00117 	ldw	ra,4(sp)
 800a9e0:	df000017 	ldw	fp,0(sp)
 800a9e4:	dec00204 	addi	sp,sp,8
 800a9e8:	f800283a 	ret

0800a9ec <alt_icache_flush_all>:
 800a9ec:	deffff04 	addi	sp,sp,-4
 800a9f0:	df000015 	stw	fp,0(sp)
 800a9f4:	d839883a 	mov	fp,sp
 800a9f8:	0001883a 	nop
 800a9fc:	e037883a 	mov	sp,fp
 800aa00:	df000017 	ldw	fp,0(sp)
 800aa04:	dec00104 	addi	sp,sp,4
 800aa08:	f800283a 	ret

0800aa0c <alt_ic_isr_register>:
 800aa0c:	defff904 	addi	sp,sp,-28
 800aa10:	dfc00615 	stw	ra,24(sp)
 800aa14:	df000515 	stw	fp,20(sp)
 800aa18:	df000504 	addi	fp,sp,20
 800aa1c:	e13ffc15 	stw	r4,-16(fp)
 800aa20:	e17ffd15 	stw	r5,-12(fp)
 800aa24:	e1bffe15 	stw	r6,-8(fp)
 800aa28:	e1ffff15 	stw	r7,-4(fp)
 800aa2c:	e0800217 	ldw	r2,8(fp)
 800aa30:	d8800015 	stw	r2,0(sp)
 800aa34:	e1ffff17 	ldw	r7,-4(fp)
 800aa38:	e1bffe17 	ldw	r6,-8(fp)
 800aa3c:	e17ffd17 	ldw	r5,-12(fp)
 800aa40:	e13ffc17 	ldw	r4,-16(fp)
 800aa44:	800abbc0 	call	800abbc <alt_iic_isr_register>
 800aa48:	e037883a 	mov	sp,fp
 800aa4c:	dfc00117 	ldw	ra,4(sp)
 800aa50:	df000017 	ldw	fp,0(sp)
 800aa54:	dec00204 	addi	sp,sp,8
 800aa58:	f800283a 	ret

0800aa5c <alt_ic_irq_enable>:
 800aa5c:	defff904 	addi	sp,sp,-28
 800aa60:	df000615 	stw	fp,24(sp)
 800aa64:	df000604 	addi	fp,sp,24
 800aa68:	e13ffe15 	stw	r4,-8(fp)
 800aa6c:	e17fff15 	stw	r5,-4(fp)
 800aa70:	e0bfff17 	ldw	r2,-4(fp)
 800aa74:	e0bffa15 	stw	r2,-24(fp)
 800aa78:	0005303a 	rdctl	r2,status
 800aa7c:	e0bffb15 	stw	r2,-20(fp)
 800aa80:	e0fffb17 	ldw	r3,-20(fp)
 800aa84:	00bfff84 	movi	r2,-2
 800aa88:	1884703a 	and	r2,r3,r2
 800aa8c:	1001703a 	wrctl	status,r2
 800aa90:	e0bffb17 	ldw	r2,-20(fp)
 800aa94:	e0bffc15 	stw	r2,-16(fp)
 800aa98:	00c00044 	movi	r3,1
 800aa9c:	e0bffa17 	ldw	r2,-24(fp)
 800aaa0:	1884983a 	sll	r2,r3,r2
 800aaa4:	1007883a 	mov	r3,r2
 800aaa8:	d0ac0e17 	ldw	r2,-20424(gp)
 800aaac:	1884b03a 	or	r2,r3,r2
 800aab0:	d0ac0e15 	stw	r2,-20424(gp)
 800aab4:	d0ac0e17 	ldw	r2,-20424(gp)
 800aab8:	100170fa 	wrctl	ienable,r2
 800aabc:	e0bffc17 	ldw	r2,-16(fp)
 800aac0:	e0bffd15 	stw	r2,-12(fp)
 800aac4:	e0bffd17 	ldw	r2,-12(fp)
 800aac8:	1001703a 	wrctl	status,r2
 800aacc:	0005883a 	mov	r2,zero
 800aad0:	0001883a 	nop
 800aad4:	e037883a 	mov	sp,fp
 800aad8:	df000017 	ldw	fp,0(sp)
 800aadc:	dec00104 	addi	sp,sp,4
 800aae0:	f800283a 	ret

0800aae4 <alt_ic_irq_disable>:
 800aae4:	defff904 	addi	sp,sp,-28
 800aae8:	df000615 	stw	fp,24(sp)
 800aaec:	df000604 	addi	fp,sp,24
 800aaf0:	e13ffe15 	stw	r4,-8(fp)
 800aaf4:	e17fff15 	stw	r5,-4(fp)
 800aaf8:	e0bfff17 	ldw	r2,-4(fp)
 800aafc:	e0bffa15 	stw	r2,-24(fp)
 800ab00:	0005303a 	rdctl	r2,status
 800ab04:	e0bffb15 	stw	r2,-20(fp)
 800ab08:	e0fffb17 	ldw	r3,-20(fp)
 800ab0c:	00bfff84 	movi	r2,-2
 800ab10:	1884703a 	and	r2,r3,r2
 800ab14:	1001703a 	wrctl	status,r2
 800ab18:	e0bffb17 	ldw	r2,-20(fp)
 800ab1c:	e0bffc15 	stw	r2,-16(fp)
 800ab20:	00c00044 	movi	r3,1
 800ab24:	e0bffa17 	ldw	r2,-24(fp)
 800ab28:	1884983a 	sll	r2,r3,r2
 800ab2c:	0084303a 	nor	r2,zero,r2
 800ab30:	1007883a 	mov	r3,r2
 800ab34:	d0ac0e17 	ldw	r2,-20424(gp)
 800ab38:	1884703a 	and	r2,r3,r2
 800ab3c:	d0ac0e15 	stw	r2,-20424(gp)
 800ab40:	d0ac0e17 	ldw	r2,-20424(gp)
 800ab44:	100170fa 	wrctl	ienable,r2
 800ab48:	e0bffc17 	ldw	r2,-16(fp)
 800ab4c:	e0bffd15 	stw	r2,-12(fp)
 800ab50:	e0bffd17 	ldw	r2,-12(fp)
 800ab54:	1001703a 	wrctl	status,r2
 800ab58:	0005883a 	mov	r2,zero
 800ab5c:	0001883a 	nop
 800ab60:	e037883a 	mov	sp,fp
 800ab64:	df000017 	ldw	fp,0(sp)
 800ab68:	dec00104 	addi	sp,sp,4
 800ab6c:	f800283a 	ret

0800ab70 <alt_ic_irq_enabled>:
 800ab70:	defffc04 	addi	sp,sp,-16
 800ab74:	df000315 	stw	fp,12(sp)
 800ab78:	df000304 	addi	fp,sp,12
 800ab7c:	e13ffe15 	stw	r4,-8(fp)
 800ab80:	e17fff15 	stw	r5,-4(fp)
 800ab84:	000530fa 	rdctl	r2,ienable
 800ab88:	e0bffd15 	stw	r2,-12(fp)
 800ab8c:	00c00044 	movi	r3,1
 800ab90:	e0bfff17 	ldw	r2,-4(fp)
 800ab94:	1884983a 	sll	r2,r3,r2
 800ab98:	1007883a 	mov	r3,r2
 800ab9c:	e0bffd17 	ldw	r2,-12(fp)
 800aba0:	1884703a 	and	r2,r3,r2
 800aba4:	1004c03a 	cmpne	r2,r2,zero
 800aba8:	10803fcc 	andi	r2,r2,255
 800abac:	e037883a 	mov	sp,fp
 800abb0:	df000017 	ldw	fp,0(sp)
 800abb4:	dec00104 	addi	sp,sp,4
 800abb8:	f800283a 	ret

0800abbc <alt_iic_isr_register>:
 800abbc:	defff504 	addi	sp,sp,-44
 800abc0:	dfc00a15 	stw	ra,40(sp)
 800abc4:	df000915 	stw	fp,36(sp)
 800abc8:	df000904 	addi	fp,sp,36
 800abcc:	e13ffc15 	stw	r4,-16(fp)
 800abd0:	e17ffd15 	stw	r5,-12(fp)
 800abd4:	e1bffe15 	stw	r6,-8(fp)
 800abd8:	e1ffff15 	stw	r7,-4(fp)
 800abdc:	00bffa84 	movi	r2,-22
 800abe0:	e0bff715 	stw	r2,-36(fp)
 800abe4:	e0bffd17 	ldw	r2,-12(fp)
 800abe8:	e0bff815 	stw	r2,-32(fp)
 800abec:	e0bff817 	ldw	r2,-32(fp)
 800abf0:	10800808 	cmpgei	r2,r2,32
 800abf4:	1000271e 	bne	r2,zero,800ac94 <alt_iic_isr_register+0xd8>
 800abf8:	0005303a 	rdctl	r2,status
 800abfc:	e0bffb15 	stw	r2,-20(fp)
 800ac00:	e0fffb17 	ldw	r3,-20(fp)
 800ac04:	00bfff84 	movi	r2,-2
 800ac08:	1884703a 	and	r2,r3,r2
 800ac0c:	1001703a 	wrctl	status,r2
 800ac10:	e0bffb17 	ldw	r2,-20(fp)
 800ac14:	e0bffa15 	stw	r2,-24(fp)
 800ac18:	008200b4 	movhi	r2,2050
 800ac1c:	10a02d04 	addi	r2,r2,-32588
 800ac20:	e0fff817 	ldw	r3,-32(fp)
 800ac24:	180690fa 	slli	r3,r3,3
 800ac28:	10c5883a 	add	r2,r2,r3
 800ac2c:	e0fffe17 	ldw	r3,-8(fp)
 800ac30:	10c00015 	stw	r3,0(r2)
 800ac34:	008200b4 	movhi	r2,2050
 800ac38:	10a02d04 	addi	r2,r2,-32588
 800ac3c:	e0fff817 	ldw	r3,-32(fp)
 800ac40:	180690fa 	slli	r3,r3,3
 800ac44:	10c5883a 	add	r2,r2,r3
 800ac48:	10800104 	addi	r2,r2,4
 800ac4c:	e0ffff17 	ldw	r3,-4(fp)
 800ac50:	10c00015 	stw	r3,0(r2)
 800ac54:	e0bffe17 	ldw	r2,-8(fp)
 800ac58:	10000526 	beq	r2,zero,800ac70 <alt_iic_isr_register+0xb4>
 800ac5c:	e0bff817 	ldw	r2,-32(fp)
 800ac60:	100b883a 	mov	r5,r2
 800ac64:	e13ffc17 	ldw	r4,-16(fp)
 800ac68:	800aa5c0 	call	800aa5c <alt_ic_irq_enable>
 800ac6c:	00000406 	br	800ac80 <alt_iic_isr_register+0xc4>
 800ac70:	e0bff817 	ldw	r2,-32(fp)
 800ac74:	100b883a 	mov	r5,r2
 800ac78:	e13ffc17 	ldw	r4,-16(fp)
 800ac7c:	800aae40 	call	800aae4 <alt_ic_irq_disable>
 800ac80:	e0bff715 	stw	r2,-36(fp)
 800ac84:	e0bffa17 	ldw	r2,-24(fp)
 800ac88:	e0bff915 	stw	r2,-28(fp)
 800ac8c:	e0bff917 	ldw	r2,-28(fp)
 800ac90:	1001703a 	wrctl	status,r2
 800ac94:	e0bff717 	ldw	r2,-36(fp)
 800ac98:	e037883a 	mov	sp,fp
 800ac9c:	dfc00117 	ldw	ra,4(sp)
 800aca0:	df000017 	ldw	fp,0(sp)
 800aca4:	dec00204 	addi	sp,sp,8
 800aca8:	f800283a 	ret

0800acac <alt_open_fd>:
 800acac:	defff804 	addi	sp,sp,-32
 800acb0:	dfc00715 	stw	ra,28(sp)
 800acb4:	df000615 	stw	fp,24(sp)
 800acb8:	dc000515 	stw	r16,20(sp)
 800acbc:	df000604 	addi	fp,sp,24
 800acc0:	e13ffb15 	stw	r4,-20(fp)
 800acc4:	e17ffc15 	stw	r5,-16(fp)
 800acc8:	e1bffd15 	stw	r6,-12(fp)
 800accc:	e1fffe15 	stw	r7,-8(fp)
 800acd0:	e1bffe17 	ldw	r6,-8(fp)
 800acd4:	e17ffd17 	ldw	r5,-12(fp)
 800acd8:	e13ffc17 	ldw	r4,-16(fp)
 800acdc:	800af340 	call	800af34 <open>
 800ace0:	e0bffa15 	stw	r2,-24(fp)
 800ace4:	e0bffa17 	ldw	r2,-24(fp)
 800ace8:	10002216 	blt	r2,zero,800ad74 <alt_open_fd+0xc8>
 800acec:	04020074 	movhi	r16,2049
 800acf0:	843b5304 	addi	r16,r16,-4788
 800acf4:	e0bffa17 	ldw	r2,-24(fp)
 800acf8:	01400304 	movi	r5,12
 800acfc:	1009883a 	mov	r4,r2
 800ad00:	80057940 	call	8005794 <__mulsi3>
 800ad04:	8085883a 	add	r2,r16,r2
 800ad08:	10c00017 	ldw	r3,0(r2)
 800ad0c:	e0bffb17 	ldw	r2,-20(fp)
 800ad10:	10c00015 	stw	r3,0(r2)
 800ad14:	04020074 	movhi	r16,2049
 800ad18:	843b5304 	addi	r16,r16,-4788
 800ad1c:	e0bffa17 	ldw	r2,-24(fp)
 800ad20:	01400304 	movi	r5,12
 800ad24:	1009883a 	mov	r4,r2
 800ad28:	80057940 	call	8005794 <__mulsi3>
 800ad2c:	8085883a 	add	r2,r16,r2
 800ad30:	10800104 	addi	r2,r2,4
 800ad34:	10c00017 	ldw	r3,0(r2)
 800ad38:	e0bffb17 	ldw	r2,-20(fp)
 800ad3c:	10c00115 	stw	r3,4(r2)
 800ad40:	04020074 	movhi	r16,2049
 800ad44:	843b5304 	addi	r16,r16,-4788
 800ad48:	e0bffa17 	ldw	r2,-24(fp)
 800ad4c:	01400304 	movi	r5,12
 800ad50:	1009883a 	mov	r4,r2
 800ad54:	80057940 	call	8005794 <__mulsi3>
 800ad58:	8085883a 	add	r2,r16,r2
 800ad5c:	10800204 	addi	r2,r2,8
 800ad60:	10c00017 	ldw	r3,0(r2)
 800ad64:	e0bffb17 	ldw	r2,-20(fp)
 800ad68:	10c00215 	stw	r3,8(r2)
 800ad6c:	e13ffa17 	ldw	r4,-24(fp)
 800ad70:	800b2f80 	call	800b2f8 <alt_release_fd>
 800ad74:	0001883a 	nop
 800ad78:	e6ffff04 	addi	sp,fp,-4
 800ad7c:	dfc00217 	ldw	ra,8(sp)
 800ad80:	df000117 	ldw	fp,4(sp)
 800ad84:	dc000017 	ldw	r16,0(sp)
 800ad88:	dec00304 	addi	sp,sp,12
 800ad8c:	f800283a 	ret

0800ad90 <alt_io_redirect>:
 800ad90:	defffb04 	addi	sp,sp,-20
 800ad94:	dfc00415 	stw	ra,16(sp)
 800ad98:	df000315 	stw	fp,12(sp)
 800ad9c:	df000304 	addi	fp,sp,12
 800ada0:	e13ffd15 	stw	r4,-12(fp)
 800ada4:	e17ffe15 	stw	r5,-8(fp)
 800ada8:	e1bfff15 	stw	r6,-4(fp)
 800adac:	01c07fc4 	movi	r7,511
 800adb0:	01800044 	movi	r6,1
 800adb4:	e17ffd17 	ldw	r5,-12(fp)
 800adb8:	01020074 	movhi	r4,2049
 800adbc:	213b5604 	addi	r4,r4,-4776
 800adc0:	800acac0 	call	800acac <alt_open_fd>
 800adc4:	01c07fc4 	movi	r7,511
 800adc8:	000d883a 	mov	r6,zero
 800adcc:	e17ffe17 	ldw	r5,-8(fp)
 800add0:	01020074 	movhi	r4,2049
 800add4:	213b5304 	addi	r4,r4,-4788
 800add8:	800acac0 	call	800acac <alt_open_fd>
 800addc:	01c07fc4 	movi	r7,511
 800ade0:	01800044 	movi	r6,1
 800ade4:	e17fff17 	ldw	r5,-4(fp)
 800ade8:	01020074 	movhi	r4,2049
 800adec:	213b5904 	addi	r4,r4,-4764
 800adf0:	800acac0 	call	800acac <alt_open_fd>
 800adf4:	0001883a 	nop
 800adf8:	e037883a 	mov	sp,fp
 800adfc:	dfc00117 	ldw	ra,4(sp)
 800ae00:	df000017 	ldw	fp,0(sp)
 800ae04:	dec00204 	addi	sp,sp,8
 800ae08:	f800283a 	ret

0800ae0c <alt_get_errno>:
 800ae0c:	defffe04 	addi	sp,sp,-8
 800ae10:	dfc00115 	stw	ra,4(sp)
 800ae14:	df000015 	stw	fp,0(sp)
 800ae18:	d839883a 	mov	fp,sp
 800ae1c:	d0a01217 	ldw	r2,-32696(gp)
 800ae20:	10000326 	beq	r2,zero,800ae30 <alt_get_errno+0x24>
 800ae24:	d0a01217 	ldw	r2,-32696(gp)
 800ae28:	103ee83a 	callr	r2
 800ae2c:	00000106 	br	800ae34 <alt_get_errno+0x28>
 800ae30:	d0ac0804 	addi	r2,gp,-20448
 800ae34:	e037883a 	mov	sp,fp
 800ae38:	dfc00117 	ldw	ra,4(sp)
 800ae3c:	df000017 	ldw	fp,0(sp)
 800ae40:	dec00204 	addi	sp,sp,8
 800ae44:	f800283a 	ret

0800ae48 <alt_file_locked>:
 800ae48:	defffb04 	addi	sp,sp,-20
 800ae4c:	dfc00415 	stw	ra,16(sp)
 800ae50:	df000315 	stw	fp,12(sp)
 800ae54:	dc000215 	stw	r16,8(sp)
 800ae58:	df000304 	addi	fp,sp,12
 800ae5c:	e13ffe15 	stw	r4,-8(fp)
 800ae60:	e0bffe17 	ldw	r2,-8(fp)
 800ae64:	10800217 	ldw	r2,8(r2)
 800ae68:	10d00034 	orhi	r3,r2,16384
 800ae6c:	e0bffe17 	ldw	r2,-8(fp)
 800ae70:	10c00215 	stw	r3,8(r2)
 800ae74:	e03ffd15 	stw	zero,-12(fp)
 800ae78:	00002306 	br	800af08 <alt_file_locked+0xc0>
 800ae7c:	04020074 	movhi	r16,2049
 800ae80:	843b5304 	addi	r16,r16,-4788
 800ae84:	e0bffd17 	ldw	r2,-12(fp)
 800ae88:	01400304 	movi	r5,12
 800ae8c:	1009883a 	mov	r4,r2
 800ae90:	80057940 	call	8005794 <__mulsi3>
 800ae94:	8085883a 	add	r2,r16,r2
 800ae98:	10c00017 	ldw	r3,0(r2)
 800ae9c:	e0bffe17 	ldw	r2,-8(fp)
 800aea0:	10800017 	ldw	r2,0(r2)
 800aea4:	1880151e 	bne	r3,r2,800aefc <alt_file_locked+0xb4>
 800aea8:	04020074 	movhi	r16,2049
 800aeac:	843b5304 	addi	r16,r16,-4788
 800aeb0:	e0bffd17 	ldw	r2,-12(fp)
 800aeb4:	01400304 	movi	r5,12
 800aeb8:	1009883a 	mov	r4,r2
 800aebc:	80057940 	call	8005794 <__mulsi3>
 800aec0:	8085883a 	add	r2,r16,r2
 800aec4:	10800204 	addi	r2,r2,8
 800aec8:	10800017 	ldw	r2,0(r2)
 800aecc:	10000b0e 	bge	r2,zero,800aefc <alt_file_locked+0xb4>
 800aed0:	01400304 	movi	r5,12
 800aed4:	e13ffd17 	ldw	r4,-12(fp)
 800aed8:	80057940 	call	8005794 <__mulsi3>
 800aedc:	1007883a 	mov	r3,r2
 800aee0:	00820074 	movhi	r2,2049
 800aee4:	10bb5304 	addi	r2,r2,-4788
 800aee8:	1887883a 	add	r3,r3,r2
 800aeec:	e0bffe17 	ldw	r2,-8(fp)
 800aef0:	18800226 	beq	r3,r2,800aefc <alt_file_locked+0xb4>
 800aef4:	00bffcc4 	movi	r2,-13
 800aef8:	00000806 	br	800af1c <alt_file_locked+0xd4>
 800aefc:	e0bffd17 	ldw	r2,-12(fp)
 800af00:	10800044 	addi	r2,r2,1
 800af04:	e0bffd15 	stw	r2,-12(fp)
 800af08:	d0a01117 	ldw	r2,-32700(gp)
 800af0c:	1007883a 	mov	r3,r2
 800af10:	e0bffd17 	ldw	r2,-12(fp)
 800af14:	18bfd92e 	bgeu	r3,r2,800ae7c <__alt_data_end+0xfc00ae7c>
 800af18:	0005883a 	mov	r2,zero
 800af1c:	e6ffff04 	addi	sp,fp,-4
 800af20:	dfc00217 	ldw	ra,8(sp)
 800af24:	df000117 	ldw	fp,4(sp)
 800af28:	dc000017 	ldw	r16,0(sp)
 800af2c:	dec00304 	addi	sp,sp,12
 800af30:	f800283a 	ret

0800af34 <open>:
 800af34:	defff604 	addi	sp,sp,-40
 800af38:	dfc00915 	stw	ra,36(sp)
 800af3c:	df000815 	stw	fp,32(sp)
 800af40:	df000804 	addi	fp,sp,32
 800af44:	e13ffd15 	stw	r4,-12(fp)
 800af48:	e17ffe15 	stw	r5,-8(fp)
 800af4c:	e1bfff15 	stw	r6,-4(fp)
 800af50:	00bfffc4 	movi	r2,-1
 800af54:	e0bff915 	stw	r2,-28(fp)
 800af58:	00bffb44 	movi	r2,-19
 800af5c:	e0bffa15 	stw	r2,-24(fp)
 800af60:	e03ffb15 	stw	zero,-20(fp)
 800af64:	d1600f04 	addi	r5,gp,-32708
 800af68:	e13ffd17 	ldw	r4,-12(fp)
 800af6c:	800a95c0 	call	800a95c <alt_find_dev>
 800af70:	e0bff815 	stw	r2,-32(fp)
 800af74:	e0bff817 	ldw	r2,-32(fp)
 800af78:	1000051e 	bne	r2,zero,800af90 <open+0x5c>
 800af7c:	e13ffd17 	ldw	r4,-12(fp)
 800af80:	800b3a00 	call	800b3a0 <alt_find_file>
 800af84:	e0bff815 	stw	r2,-32(fp)
 800af88:	00800044 	movi	r2,1
 800af8c:	e0bffb15 	stw	r2,-20(fp)
 800af90:	e0bff817 	ldw	r2,-32(fp)
 800af94:	10002b26 	beq	r2,zero,800b044 <open+0x110>
 800af98:	e13ff817 	ldw	r4,-32(fp)
 800af9c:	800b4a80 	call	800b4a8 <alt_get_fd>
 800afa0:	e0bff915 	stw	r2,-28(fp)
 800afa4:	e0bff917 	ldw	r2,-28(fp)
 800afa8:	1000030e 	bge	r2,zero,800afb8 <open+0x84>
 800afac:	e0bff917 	ldw	r2,-28(fp)
 800afb0:	e0bffa15 	stw	r2,-24(fp)
 800afb4:	00002506 	br	800b04c <open+0x118>
 800afb8:	01400304 	movi	r5,12
 800afbc:	e13ff917 	ldw	r4,-28(fp)
 800afc0:	80057940 	call	8005794 <__mulsi3>
 800afc4:	1007883a 	mov	r3,r2
 800afc8:	00820074 	movhi	r2,2049
 800afcc:	10bb5304 	addi	r2,r2,-4788
 800afd0:	1885883a 	add	r2,r3,r2
 800afd4:	e0bffc15 	stw	r2,-16(fp)
 800afd8:	e0fffe17 	ldw	r3,-8(fp)
 800afdc:	00900034 	movhi	r2,16384
 800afe0:	10bfffc4 	addi	r2,r2,-1
 800afe4:	1886703a 	and	r3,r3,r2
 800afe8:	e0bffc17 	ldw	r2,-16(fp)
 800afec:	10c00215 	stw	r3,8(r2)
 800aff0:	e0bffb17 	ldw	r2,-20(fp)
 800aff4:	1000051e 	bne	r2,zero,800b00c <open+0xd8>
 800aff8:	e13ffc17 	ldw	r4,-16(fp)
 800affc:	800ae480 	call	800ae48 <alt_file_locked>
 800b000:	e0bffa15 	stw	r2,-24(fp)
 800b004:	e0bffa17 	ldw	r2,-24(fp)
 800b008:	10001016 	blt	r2,zero,800b04c <open+0x118>
 800b00c:	e0bff817 	ldw	r2,-32(fp)
 800b010:	10800317 	ldw	r2,12(r2)
 800b014:	10000826 	beq	r2,zero,800b038 <open+0x104>
 800b018:	e0bff817 	ldw	r2,-32(fp)
 800b01c:	10800317 	ldw	r2,12(r2)
 800b020:	e1ffff17 	ldw	r7,-4(fp)
 800b024:	e1bffe17 	ldw	r6,-8(fp)
 800b028:	e17ffd17 	ldw	r5,-12(fp)
 800b02c:	e13ffc17 	ldw	r4,-16(fp)
 800b030:	103ee83a 	callr	r2
 800b034:	00000106 	br	800b03c <open+0x108>
 800b038:	0005883a 	mov	r2,zero
 800b03c:	e0bffa15 	stw	r2,-24(fp)
 800b040:	00000206 	br	800b04c <open+0x118>
 800b044:	00bffb44 	movi	r2,-19
 800b048:	e0bffa15 	stw	r2,-24(fp)
 800b04c:	e0bffa17 	ldw	r2,-24(fp)
 800b050:	1000090e 	bge	r2,zero,800b078 <open+0x144>
 800b054:	e13ff917 	ldw	r4,-28(fp)
 800b058:	800b2f80 	call	800b2f8 <alt_release_fd>
 800b05c:	800ae0c0 	call	800ae0c <alt_get_errno>
 800b060:	1007883a 	mov	r3,r2
 800b064:	e0bffa17 	ldw	r2,-24(fp)
 800b068:	0085c83a 	sub	r2,zero,r2
 800b06c:	18800015 	stw	r2,0(r3)
 800b070:	00bfffc4 	movi	r2,-1
 800b074:	00000106 	br	800b07c <open+0x148>
 800b078:	e0bff917 	ldw	r2,-28(fp)
 800b07c:	e037883a 	mov	sp,fp
 800b080:	dfc00117 	ldw	ra,4(sp)
 800b084:	df000017 	ldw	fp,0(sp)
 800b088:	dec00204 	addi	sp,sp,8
 800b08c:	f800283a 	ret

0800b090 <alt_printf>:
 800b090:	defff204 	addi	sp,sp,-56
 800b094:	dfc00a15 	stw	ra,40(sp)
 800b098:	df000915 	stw	fp,36(sp)
 800b09c:	df000904 	addi	fp,sp,36
 800b0a0:	e13fff15 	stw	r4,-4(fp)
 800b0a4:	e1400215 	stw	r5,8(fp)
 800b0a8:	e1800315 	stw	r6,12(fp)
 800b0ac:	e1c00415 	stw	r7,16(fp)
 800b0b0:	e0800204 	addi	r2,fp,8
 800b0b4:	e0bffe15 	stw	r2,-8(fp)
 800b0b8:	e0bfff17 	ldw	r2,-4(fp)
 800b0bc:	e0bff715 	stw	r2,-36(fp)
 800b0c0:	00006f06 	br	800b280 <alt_printf+0x1f0>
 800b0c4:	e0bff807 	ldb	r2,-32(fp)
 800b0c8:	10800960 	cmpeqi	r2,r2,37
 800b0cc:	1000041e 	bne	r2,zero,800b0e0 <alt_printf+0x50>
 800b0d0:	e0bff807 	ldb	r2,-32(fp)
 800b0d4:	1009883a 	mov	r4,r2
 800b0d8:	800b2bc0 	call	800b2bc <alt_putchar>
 800b0dc:	00006806 	br	800b280 <alt_printf+0x1f0>
 800b0e0:	e0bff717 	ldw	r2,-36(fp)
 800b0e4:	10c00044 	addi	r3,r2,1
 800b0e8:	e0fff715 	stw	r3,-36(fp)
 800b0ec:	10800003 	ldbu	r2,0(r2)
 800b0f0:	e0bff805 	stb	r2,-32(fp)
 800b0f4:	e0bff807 	ldb	r2,-32(fp)
 800b0f8:	10006926 	beq	r2,zero,800b2a0 <alt_printf+0x210>
 800b0fc:	e0bff807 	ldb	r2,-32(fp)
 800b100:	10800958 	cmpnei	r2,r2,37
 800b104:	1000041e 	bne	r2,zero,800b118 <alt_printf+0x88>
 800b108:	e0bff807 	ldb	r2,-32(fp)
 800b10c:	1009883a 	mov	r4,r2
 800b110:	800b2bc0 	call	800b2bc <alt_putchar>
 800b114:	00005a06 	br	800b280 <alt_printf+0x1f0>
 800b118:	e0bff807 	ldb	r2,-32(fp)
 800b11c:	108018d8 	cmpnei	r2,r2,99
 800b120:	1000081e 	bne	r2,zero,800b144 <alt_printf+0xb4>
 800b124:	e0bffe17 	ldw	r2,-8(fp)
 800b128:	10c00104 	addi	r3,r2,4
 800b12c:	e0fffe15 	stw	r3,-8(fp)
 800b130:	10800017 	ldw	r2,0(r2)
 800b134:	e0bffd15 	stw	r2,-12(fp)
 800b138:	e13ffd17 	ldw	r4,-12(fp)
 800b13c:	800b2bc0 	call	800b2bc <alt_putchar>
 800b140:	00004f06 	br	800b280 <alt_printf+0x1f0>
 800b144:	e0bff807 	ldb	r2,-32(fp)
 800b148:	10801e18 	cmpnei	r2,r2,120
 800b14c:	1000341e 	bne	r2,zero,800b220 <alt_printf+0x190>
 800b150:	e0bffe17 	ldw	r2,-8(fp)
 800b154:	10c00104 	addi	r3,r2,4
 800b158:	e0fffe15 	stw	r3,-8(fp)
 800b15c:	10800017 	ldw	r2,0(r2)
 800b160:	e0bffb15 	stw	r2,-20(fp)
 800b164:	e0bffb17 	ldw	r2,-20(fp)
 800b168:	1000031e 	bne	r2,zero,800b178 <alt_printf+0xe8>
 800b16c:	01000c04 	movi	r4,48
 800b170:	800b2bc0 	call	800b2bc <alt_putchar>
 800b174:	00004206 	br	800b280 <alt_printf+0x1f0>
 800b178:	00800704 	movi	r2,28
 800b17c:	e0bff915 	stw	r2,-28(fp)
 800b180:	00000306 	br	800b190 <alt_printf+0x100>
 800b184:	e0bff917 	ldw	r2,-28(fp)
 800b188:	10bfff04 	addi	r2,r2,-4
 800b18c:	e0bff915 	stw	r2,-28(fp)
 800b190:	00c003c4 	movi	r3,15
 800b194:	e0bff917 	ldw	r2,-28(fp)
 800b198:	1884983a 	sll	r2,r3,r2
 800b19c:	1007883a 	mov	r3,r2
 800b1a0:	e0bffb17 	ldw	r2,-20(fp)
 800b1a4:	1884703a 	and	r2,r3,r2
 800b1a8:	103ff626 	beq	r2,zero,800b184 <__alt_data_end+0xfc00b184>
 800b1ac:	00001906 	br	800b214 <alt_printf+0x184>
 800b1b0:	00c003c4 	movi	r3,15
 800b1b4:	e0bff917 	ldw	r2,-28(fp)
 800b1b8:	1884983a 	sll	r2,r3,r2
 800b1bc:	1007883a 	mov	r3,r2
 800b1c0:	e0bffb17 	ldw	r2,-20(fp)
 800b1c4:	1886703a 	and	r3,r3,r2
 800b1c8:	e0bff917 	ldw	r2,-28(fp)
 800b1cc:	1884d83a 	srl	r2,r3,r2
 800b1d0:	e0bffc15 	stw	r2,-16(fp)
 800b1d4:	e0bffc17 	ldw	r2,-16(fp)
 800b1d8:	108002a8 	cmpgeui	r2,r2,10
 800b1dc:	1000041e 	bne	r2,zero,800b1f0 <alt_printf+0x160>
 800b1e0:	e0bffc17 	ldw	r2,-16(fp)
 800b1e4:	10800c04 	addi	r2,r2,48
 800b1e8:	e0bff805 	stb	r2,-32(fp)
 800b1ec:	00000306 	br	800b1fc <alt_printf+0x16c>
 800b1f0:	e0bffc17 	ldw	r2,-16(fp)
 800b1f4:	108015c4 	addi	r2,r2,87
 800b1f8:	e0bff805 	stb	r2,-32(fp)
 800b1fc:	e0bff807 	ldb	r2,-32(fp)
 800b200:	1009883a 	mov	r4,r2
 800b204:	800b2bc0 	call	800b2bc <alt_putchar>
 800b208:	e0bff917 	ldw	r2,-28(fp)
 800b20c:	10bfff04 	addi	r2,r2,-4
 800b210:	e0bff915 	stw	r2,-28(fp)
 800b214:	e0bff917 	ldw	r2,-28(fp)
 800b218:	103fe50e 	bge	r2,zero,800b1b0 <__alt_data_end+0xfc00b1b0>
 800b21c:	00001806 	br	800b280 <alt_printf+0x1f0>
 800b220:	e0bff807 	ldb	r2,-32(fp)
 800b224:	10801cd8 	cmpnei	r2,r2,115
 800b228:	1000151e 	bne	r2,zero,800b280 <alt_printf+0x1f0>
 800b22c:	e0bffe17 	ldw	r2,-8(fp)
 800b230:	10c00104 	addi	r3,r2,4
 800b234:	e0fffe15 	stw	r3,-8(fp)
 800b238:	10800017 	ldw	r2,0(r2)
 800b23c:	e0bffa15 	stw	r2,-24(fp)
 800b240:	00000906 	br	800b268 <alt_printf+0x1d8>
 800b244:	e0bffa17 	ldw	r2,-24(fp)
 800b248:	10c00044 	addi	r3,r2,1
 800b24c:	e0fffa15 	stw	r3,-24(fp)
 800b250:	10800003 	ldbu	r2,0(r2)
 800b254:	10803fcc 	andi	r2,r2,255
 800b258:	1080201c 	xori	r2,r2,128
 800b25c:	10bfe004 	addi	r2,r2,-128
 800b260:	1009883a 	mov	r4,r2
 800b264:	800b2bc0 	call	800b2bc <alt_putchar>
 800b268:	e0bffa17 	ldw	r2,-24(fp)
 800b26c:	10800003 	ldbu	r2,0(r2)
 800b270:	10803fcc 	andi	r2,r2,255
 800b274:	1080201c 	xori	r2,r2,128
 800b278:	10bfe004 	addi	r2,r2,-128
 800b27c:	103ff11e 	bne	r2,zero,800b244 <__alt_data_end+0xfc00b244>
 800b280:	e0bff717 	ldw	r2,-36(fp)
 800b284:	10c00044 	addi	r3,r2,1
 800b288:	e0fff715 	stw	r3,-36(fp)
 800b28c:	10800003 	ldbu	r2,0(r2)
 800b290:	e0bff805 	stb	r2,-32(fp)
 800b294:	e0bff807 	ldb	r2,-32(fp)
 800b298:	103f8a1e 	bne	r2,zero,800b0c4 <__alt_data_end+0xfc00b0c4>
 800b29c:	00000106 	br	800b2a4 <alt_printf+0x214>
 800b2a0:	0001883a 	nop
 800b2a4:	0001883a 	nop
 800b2a8:	e037883a 	mov	sp,fp
 800b2ac:	dfc00117 	ldw	ra,4(sp)
 800b2b0:	df000017 	ldw	fp,0(sp)
 800b2b4:	dec00504 	addi	sp,sp,20
 800b2b8:	f800283a 	ret

0800b2bc <alt_putchar>:
 800b2bc:	defffd04 	addi	sp,sp,-12
 800b2c0:	dfc00215 	stw	ra,8(sp)
 800b2c4:	df000115 	stw	fp,4(sp)
 800b2c8:	df000104 	addi	fp,sp,4
 800b2cc:	e13fff15 	stw	r4,-4(fp)
 800b2d0:	d0a00817 	ldw	r2,-32736(gp)
 800b2d4:	10800217 	ldw	r2,8(r2)
 800b2d8:	100b883a 	mov	r5,r2
 800b2dc:	e13fff17 	ldw	r4,-4(fp)
 800b2e0:	800b6940 	call	800b694 <putc>
 800b2e4:	e037883a 	mov	sp,fp
 800b2e8:	dfc00117 	ldw	ra,4(sp)
 800b2ec:	df000017 	ldw	fp,0(sp)
 800b2f0:	dec00204 	addi	sp,sp,8
 800b2f4:	f800283a 	ret

0800b2f8 <alt_release_fd>:
 800b2f8:	defffc04 	addi	sp,sp,-16
 800b2fc:	dfc00315 	stw	ra,12(sp)
 800b300:	df000215 	stw	fp,8(sp)
 800b304:	dc000115 	stw	r16,4(sp)
 800b308:	df000204 	addi	fp,sp,8
 800b30c:	e13ffe15 	stw	r4,-8(fp)
 800b310:	e0bffe17 	ldw	r2,-8(fp)
 800b314:	108000d0 	cmplti	r2,r2,3
 800b318:	1000111e 	bne	r2,zero,800b360 <alt_release_fd+0x68>
 800b31c:	04020074 	movhi	r16,2049
 800b320:	843b5304 	addi	r16,r16,-4788
 800b324:	e0bffe17 	ldw	r2,-8(fp)
 800b328:	01400304 	movi	r5,12
 800b32c:	1009883a 	mov	r4,r2
 800b330:	80057940 	call	8005794 <__mulsi3>
 800b334:	8085883a 	add	r2,r16,r2
 800b338:	10800204 	addi	r2,r2,8
 800b33c:	10000015 	stw	zero,0(r2)
 800b340:	04020074 	movhi	r16,2049
 800b344:	843b5304 	addi	r16,r16,-4788
 800b348:	e0bffe17 	ldw	r2,-8(fp)
 800b34c:	01400304 	movi	r5,12
 800b350:	1009883a 	mov	r4,r2
 800b354:	80057940 	call	8005794 <__mulsi3>
 800b358:	8085883a 	add	r2,r16,r2
 800b35c:	10000015 	stw	zero,0(r2)
 800b360:	0001883a 	nop
 800b364:	e6ffff04 	addi	sp,fp,-4
 800b368:	dfc00217 	ldw	ra,8(sp)
 800b36c:	df000117 	ldw	fp,4(sp)
 800b370:	dc000017 	ldw	r16,0(sp)
 800b374:	dec00304 	addi	sp,sp,12
 800b378:	f800283a 	ret

0800b37c <altera_nios2_gen2_irq_init>:
 800b37c:	deffff04 	addi	sp,sp,-4
 800b380:	df000015 	stw	fp,0(sp)
 800b384:	d839883a 	mov	fp,sp
 800b388:	000170fa 	wrctl	ienable,zero
 800b38c:	0001883a 	nop
 800b390:	e037883a 	mov	sp,fp
 800b394:	df000017 	ldw	fp,0(sp)
 800b398:	dec00104 	addi	sp,sp,4
 800b39c:	f800283a 	ret

0800b3a0 <alt_find_file>:
 800b3a0:	defffb04 	addi	sp,sp,-20
 800b3a4:	dfc00415 	stw	ra,16(sp)
 800b3a8:	df000315 	stw	fp,12(sp)
 800b3ac:	df000304 	addi	fp,sp,12
 800b3b0:	e13fff15 	stw	r4,-4(fp)
 800b3b4:	d0a00d17 	ldw	r2,-32716(gp)
 800b3b8:	e0bffd15 	stw	r2,-12(fp)
 800b3bc:	00003106 	br	800b484 <alt_find_file+0xe4>
 800b3c0:	e0bffd17 	ldw	r2,-12(fp)
 800b3c4:	10800217 	ldw	r2,8(r2)
 800b3c8:	1009883a 	mov	r4,r2
 800b3cc:	8006e340 	call	8006e34 <strlen>
 800b3d0:	e0bffe15 	stw	r2,-8(fp)
 800b3d4:	e0bffd17 	ldw	r2,-12(fp)
 800b3d8:	10c00217 	ldw	r3,8(r2)
 800b3dc:	e0bffe17 	ldw	r2,-8(fp)
 800b3e0:	10bfffc4 	addi	r2,r2,-1
 800b3e4:	1885883a 	add	r2,r3,r2
 800b3e8:	10800003 	ldbu	r2,0(r2)
 800b3ec:	10803fcc 	andi	r2,r2,255
 800b3f0:	1080201c 	xori	r2,r2,128
 800b3f4:	10bfe004 	addi	r2,r2,-128
 800b3f8:	10800bd8 	cmpnei	r2,r2,47
 800b3fc:	1000031e 	bne	r2,zero,800b40c <alt_find_file+0x6c>
 800b400:	e0bffe17 	ldw	r2,-8(fp)
 800b404:	10bfffc4 	addi	r2,r2,-1
 800b408:	e0bffe15 	stw	r2,-8(fp)
 800b40c:	e0bffe17 	ldw	r2,-8(fp)
 800b410:	e0ffff17 	ldw	r3,-4(fp)
 800b414:	1885883a 	add	r2,r3,r2
 800b418:	10800003 	ldbu	r2,0(r2)
 800b41c:	10803fcc 	andi	r2,r2,255
 800b420:	1080201c 	xori	r2,r2,128
 800b424:	10bfe004 	addi	r2,r2,-128
 800b428:	10800be0 	cmpeqi	r2,r2,47
 800b42c:	1000081e 	bne	r2,zero,800b450 <alt_find_file+0xb0>
 800b430:	e0bffe17 	ldw	r2,-8(fp)
 800b434:	e0ffff17 	ldw	r3,-4(fp)
 800b438:	1885883a 	add	r2,r3,r2
 800b43c:	10800003 	ldbu	r2,0(r2)
 800b440:	10803fcc 	andi	r2,r2,255
 800b444:	1080201c 	xori	r2,r2,128
 800b448:	10bfe004 	addi	r2,r2,-128
 800b44c:	10000a1e 	bne	r2,zero,800b478 <alt_find_file+0xd8>
 800b450:	e0bffd17 	ldw	r2,-12(fp)
 800b454:	10800217 	ldw	r2,8(r2)
 800b458:	e0fffe17 	ldw	r3,-8(fp)
 800b45c:	180d883a 	mov	r6,r3
 800b460:	e17fff17 	ldw	r5,-4(fp)
 800b464:	1009883a 	mov	r4,r2
 800b468:	800b63c0 	call	800b63c <memcmp>
 800b46c:	1000021e 	bne	r2,zero,800b478 <alt_find_file+0xd8>
 800b470:	e0bffd17 	ldw	r2,-12(fp)
 800b474:	00000706 	br	800b494 <alt_find_file+0xf4>
 800b478:	e0bffd17 	ldw	r2,-12(fp)
 800b47c:	10800017 	ldw	r2,0(r2)
 800b480:	e0bffd15 	stw	r2,-12(fp)
 800b484:	e0fffd17 	ldw	r3,-12(fp)
 800b488:	d0a00d04 	addi	r2,gp,-32716
 800b48c:	18bfcc1e 	bne	r3,r2,800b3c0 <__alt_data_end+0xfc00b3c0>
 800b490:	0005883a 	mov	r2,zero
 800b494:	e037883a 	mov	sp,fp
 800b498:	dfc00117 	ldw	ra,4(sp)
 800b49c:	df000017 	ldw	fp,0(sp)
 800b4a0:	dec00204 	addi	sp,sp,8
 800b4a4:	f800283a 	ret

0800b4a8 <alt_get_fd>:
 800b4a8:	defffa04 	addi	sp,sp,-24
 800b4ac:	dfc00515 	stw	ra,20(sp)
 800b4b0:	df000415 	stw	fp,16(sp)
 800b4b4:	dc000315 	stw	r16,12(sp)
 800b4b8:	df000404 	addi	fp,sp,16
 800b4bc:	e13ffe15 	stw	r4,-8(fp)
 800b4c0:	00bffa04 	movi	r2,-24
 800b4c4:	e0bffd15 	stw	r2,-12(fp)
 800b4c8:	e03ffc15 	stw	zero,-16(fp)
 800b4cc:	00001d06 	br	800b544 <alt_get_fd+0x9c>
 800b4d0:	04020074 	movhi	r16,2049
 800b4d4:	843b5304 	addi	r16,r16,-4788
 800b4d8:	e0bffc17 	ldw	r2,-16(fp)
 800b4dc:	01400304 	movi	r5,12
 800b4e0:	1009883a 	mov	r4,r2
 800b4e4:	80057940 	call	8005794 <__mulsi3>
 800b4e8:	8085883a 	add	r2,r16,r2
 800b4ec:	10800017 	ldw	r2,0(r2)
 800b4f0:	1000111e 	bne	r2,zero,800b538 <alt_get_fd+0x90>
 800b4f4:	04020074 	movhi	r16,2049
 800b4f8:	843b5304 	addi	r16,r16,-4788
 800b4fc:	e0bffc17 	ldw	r2,-16(fp)
 800b500:	01400304 	movi	r5,12
 800b504:	1009883a 	mov	r4,r2
 800b508:	80057940 	call	8005794 <__mulsi3>
 800b50c:	8085883a 	add	r2,r16,r2
 800b510:	e0fffe17 	ldw	r3,-8(fp)
 800b514:	10c00015 	stw	r3,0(r2)
 800b518:	d0e01117 	ldw	r3,-32700(gp)
 800b51c:	e0bffc17 	ldw	r2,-16(fp)
 800b520:	1880020e 	bge	r3,r2,800b52c <alt_get_fd+0x84>
 800b524:	e0bffc17 	ldw	r2,-16(fp)
 800b528:	d0a01115 	stw	r2,-32700(gp)
 800b52c:	e0bffc17 	ldw	r2,-16(fp)
 800b530:	e0bffd15 	stw	r2,-12(fp)
 800b534:	00000606 	br	800b550 <alt_get_fd+0xa8>
 800b538:	e0bffc17 	ldw	r2,-16(fp)
 800b53c:	10800044 	addi	r2,r2,1
 800b540:	e0bffc15 	stw	r2,-16(fp)
 800b544:	e0bffc17 	ldw	r2,-16(fp)
 800b548:	10800810 	cmplti	r2,r2,32
 800b54c:	103fe01e 	bne	r2,zero,800b4d0 <__alt_data_end+0xfc00b4d0>
 800b550:	e0bffd17 	ldw	r2,-12(fp)
 800b554:	e6ffff04 	addi	sp,fp,-4
 800b558:	dfc00217 	ldw	ra,8(sp)
 800b55c:	df000117 	ldw	fp,4(sp)
 800b560:	dc000017 	ldw	r16,0(sp)
 800b564:	dec00304 	addi	sp,sp,12
 800b568:	f800283a 	ret

0800b56c <alt_exception_cause_generated_bad_addr>:
 800b56c:	defffe04 	addi	sp,sp,-8
 800b570:	df000115 	stw	fp,4(sp)
 800b574:	df000104 	addi	fp,sp,4
 800b578:	e13fff15 	stw	r4,-4(fp)
 800b57c:	e0bfff17 	ldw	r2,-4(fp)
 800b580:	10bffe84 	addi	r2,r2,-6
 800b584:	10c00428 	cmpgeui	r3,r2,16
 800b588:	18001a1e 	bne	r3,zero,800b5f4 <alt_exception_cause_generated_bad_addr+0x88>
 800b58c:	100690ba 	slli	r3,r2,2
 800b590:	00820074 	movhi	r2,2049
 800b594:	10ad6904 	addi	r2,r2,-19036
 800b598:	1885883a 	add	r2,r3,r2
 800b59c:	10800017 	ldw	r2,0(r2)
 800b5a0:	1000683a 	jmp	r2
 800b5a4:	0800b5e4 	muli	zero,at,727
 800b5a8:	0800b5e4 	muli	zero,at,727
 800b5ac:	0800b5f4 	orhi	zero,at,727
 800b5b0:	0800b5f4 	orhi	zero,at,727
 800b5b4:	0800b5f4 	orhi	zero,at,727
 800b5b8:	0800b5e4 	muli	zero,at,727
 800b5bc:	0800b5ec 	andhi	zero,at,727
 800b5c0:	0800b5f4 	orhi	zero,at,727
 800b5c4:	0800b5e4 	muli	zero,at,727
 800b5c8:	0800b5e4 	muli	zero,at,727
 800b5cc:	0800b5f4 	orhi	zero,at,727
 800b5d0:	0800b5e4 	muli	zero,at,727
 800b5d4:	0800b5ec 	andhi	zero,at,727
 800b5d8:	0800b5f4 	orhi	zero,at,727
 800b5dc:	0800b5f4 	orhi	zero,at,727
 800b5e0:	0800b5e4 	muli	zero,at,727
 800b5e4:	00800044 	movi	r2,1
 800b5e8:	00000306 	br	800b5f8 <alt_exception_cause_generated_bad_addr+0x8c>
 800b5ec:	0005883a 	mov	r2,zero
 800b5f0:	00000106 	br	800b5f8 <alt_exception_cause_generated_bad_addr+0x8c>
 800b5f4:	0005883a 	mov	r2,zero
 800b5f8:	e037883a 	mov	sp,fp
 800b5fc:	df000017 	ldw	fp,0(sp)
 800b600:	dec00104 	addi	sp,sp,4
 800b604:	f800283a 	ret

0800b608 <atexit>:
 800b608:	200b883a 	mov	r5,r4
 800b60c:	000f883a 	mov	r7,zero
 800b610:	000d883a 	mov	r6,zero
 800b614:	0009883a 	mov	r4,zero
 800b618:	800b7401 	jmpi	800b740 <__register_exitproc>

0800b61c <exit>:
 800b61c:	defffe04 	addi	sp,sp,-8
 800b620:	000b883a 	mov	r5,zero
 800b624:	dc000015 	stw	r16,0(sp)
 800b628:	dfc00115 	stw	ra,4(sp)
 800b62c:	2021883a 	mov	r16,r4
 800b630:	800b8980 	call	800b898 <__call_exitprocs>
 800b634:	8009883a 	mov	r4,r16
 800b638:	800ba280 	call	800ba28 <_exit>

0800b63c <memcmp>:
 800b63c:	218d883a 	add	r6,r4,r6
 800b640:	21800826 	beq	r4,r6,800b664 <memcmp+0x28>
 800b644:	20800003 	ldbu	r2,0(r4)
 800b648:	28c00003 	ldbu	r3,0(r5)
 800b64c:	10c00226 	beq	r2,r3,800b658 <memcmp+0x1c>
 800b650:	10c5c83a 	sub	r2,r2,r3
 800b654:	f800283a 	ret
 800b658:	21000044 	addi	r4,r4,1
 800b65c:	29400044 	addi	r5,r5,1
 800b660:	003ff706 	br	800b640 <__alt_data_end+0xfc00b640>
 800b664:	0005883a 	mov	r2,zero
 800b668:	f800283a 	ret

0800b66c <memcpy>:
 800b66c:	2005883a 	mov	r2,r4
 800b670:	2007883a 	mov	r3,r4
 800b674:	218d883a 	add	r6,r4,r6
 800b678:	19800526 	beq	r3,r6,800b690 <memcpy+0x24>
 800b67c:	29000003 	ldbu	r4,0(r5)
 800b680:	18c00044 	addi	r3,r3,1
 800b684:	29400044 	addi	r5,r5,1
 800b688:	193fffc5 	stb	r4,-1(r3)
 800b68c:	003ffa06 	br	800b678 <__alt_data_end+0xfc00b678>
 800b690:	f800283a 	ret

0800b694 <putc>:
 800b694:	defffd04 	addi	sp,sp,-12
 800b698:	00820034 	movhi	r2,2048
 800b69c:	dc000115 	stw	r16,4(sp)
 800b6a0:	dfc00215 	stw	ra,8(sp)
 800b6a4:	109d0104 	addi	r2,r2,29700
 800b6a8:	28800115 	stw	r2,4(r5)
 800b6ac:	00820074 	movhi	r2,2049
 800b6b0:	10bbbb04 	addi	r2,r2,-4372
 800b6b4:	d9000005 	stb	r4,0(sp)
 800b6b8:	2021883a 	mov	r16,r4
 800b6bc:	11000017 	ldw	r4,0(r2)
 800b6c0:	01c00044 	movi	r7,1
 800b6c4:	d80d883a 	mov	r6,sp
 800b6c8:	80074040 	call	8007404 <__sfvwrite_small_dev>
 800b6cc:	00ffffc4 	movi	r3,-1
 800b6d0:	10c00126 	beq	r2,r3,800b6d8 <putc+0x44>
 800b6d4:	8005883a 	mov	r2,r16
 800b6d8:	dfc00217 	ldw	ra,8(sp)
 800b6dc:	dc000117 	ldw	r16,4(sp)
 800b6e0:	dec00304 	addi	sp,sp,12
 800b6e4:	f800283a 	ret

0800b6e8 <_putc_r>:
 800b6e8:	defffd04 	addi	sp,sp,-12
 800b6ec:	00820034 	movhi	r2,2048
 800b6f0:	dc000115 	stw	r16,4(sp)
 800b6f4:	dfc00215 	stw	ra,8(sp)
 800b6f8:	109d0104 	addi	r2,r2,29700
 800b6fc:	30800115 	stw	r2,4(r6)
 800b700:	00820074 	movhi	r2,2049
 800b704:	10bbbb04 	addi	r2,r2,-4372
 800b708:	11000017 	ldw	r4,0(r2)
 800b70c:	2821883a 	mov	r16,r5
 800b710:	01c00044 	movi	r7,1
 800b714:	300b883a 	mov	r5,r6
 800b718:	d80d883a 	mov	r6,sp
 800b71c:	dc000005 	stb	r16,0(sp)
 800b720:	80074040 	call	8007404 <__sfvwrite_small_dev>
 800b724:	00ffffc4 	movi	r3,-1
 800b728:	10c00126 	beq	r2,r3,800b730 <_putc_r+0x48>
 800b72c:	8005883a 	mov	r2,r16
 800b730:	dfc00217 	ldw	ra,8(sp)
 800b734:	dc000117 	ldw	r16,4(sp)
 800b738:	dec00304 	addi	sp,sp,12
 800b73c:	f800283a 	ret

0800b740 <__register_exitproc>:
 800b740:	00820074 	movhi	r2,2049
 800b744:	10bbba04 	addi	r2,r2,-4376
 800b748:	10c00017 	ldw	r3,0(r2)
 800b74c:	defff904 	addi	sp,sp,-28
 800b750:	dc000015 	stw	r16,0(sp)
 800b754:	1c000c17 	ldw	r16,48(r3)
 800b758:	dd400515 	stw	r21,20(sp)
 800b75c:	dd000415 	stw	r20,16(sp)
 800b760:	dcc00315 	stw	r19,12(sp)
 800b764:	dc800215 	stw	r18,8(sp)
 800b768:	dc400115 	stw	r17,4(sp)
 800b76c:	dfc00615 	stw	ra,24(sp)
 800b770:	202b883a 	mov	r21,r4
 800b774:	2823883a 	mov	r17,r5
 800b778:	3027883a 	mov	r19,r6
 800b77c:	3825883a 	mov	r18,r7
 800b780:	1029883a 	mov	r20,r2
 800b784:	8000021e 	bne	r16,zero,800b790 <__register_exitproc+0x50>
 800b788:	1c000d04 	addi	r16,r3,52
 800b78c:	1c000c15 	stw	r16,48(r3)
 800b790:	80800117 	ldw	r2,4(r16)
 800b794:	00c007c4 	movi	r3,31
 800b798:	1880110e 	bge	r3,r2,800b7e0 <__register_exitproc+0xa0>
 800b79c:	00800034 	movhi	r2,0
 800b7a0:	10800004 	addi	r2,r2,0
 800b7a4:	1000021e 	bne	r2,zero,800b7b0 <__register_exitproc+0x70>
 800b7a8:	00bfffc4 	movi	r2,-1
 800b7ac:	00003106 	br	800b874 <__register_exitproc+0x134>
 800b7b0:	01002304 	movi	r4,140
 800b7b4:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 800b7b8:	1021883a 	mov	r16,r2
 800b7bc:	103ffa26 	beq	r2,zero,800b7a8 <__alt_data_end+0xfc00b7a8>
 800b7c0:	10000115 	stw	zero,4(r2)
 800b7c4:	a0800017 	ldw	r2,0(r20)
 800b7c8:	10c00c17 	ldw	r3,48(r2)
 800b7cc:	80c00015 	stw	r3,0(r16)
 800b7d0:	14000c15 	stw	r16,48(r2)
 800b7d4:	80002215 	stw	zero,136(r16)
 800b7d8:	a8001d26 	beq	r21,zero,800b850 <__register_exitproc+0x110>
 800b7dc:	00000606 	br	800b7f8 <__register_exitproc+0xb8>
 800b7e0:	a8001b26 	beq	r21,zero,800b850 <__register_exitproc+0x110>
 800b7e4:	80802217 	ldw	r2,136(r16)
 800b7e8:	1000091e 	bne	r2,zero,800b810 <__register_exitproc+0xd0>
 800b7ec:	00800034 	movhi	r2,0
 800b7f0:	10800004 	addi	r2,r2,0
 800b7f4:	103fec26 	beq	r2,zero,800b7a8 <__alt_data_end+0xfc00b7a8>
 800b7f8:	01004204 	movi	r4,264
 800b7fc:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 800b800:	103fe926 	beq	r2,zero,800b7a8 <__alt_data_end+0xfc00b7a8>
 800b804:	10004015 	stw	zero,256(r2)
 800b808:	10004115 	stw	zero,260(r2)
 800b80c:	80802215 	stw	r2,136(r16)
 800b810:	81400117 	ldw	r5,4(r16)
 800b814:	01000044 	movi	r4,1
 800b818:	2947883a 	add	r3,r5,r5
 800b81c:	18c7883a 	add	r3,r3,r3
 800b820:	10c7883a 	add	r3,r2,r3
 800b824:	1cc00015 	stw	r19,0(r3)
 800b828:	2148983a 	sll	r4,r4,r5
 800b82c:	11404017 	ldw	r5,256(r2)
 800b830:	290ab03a 	or	r5,r5,r4
 800b834:	11404015 	stw	r5,256(r2)
 800b838:	1c802015 	stw	r18,128(r3)
 800b83c:	00c00084 	movi	r3,2
 800b840:	a8c0031e 	bne	r21,r3,800b850 <__register_exitproc+0x110>
 800b844:	10c04117 	ldw	r3,260(r2)
 800b848:	1908b03a 	or	r4,r3,r4
 800b84c:	11004115 	stw	r4,260(r2)
 800b850:	80800117 	ldw	r2,4(r16)
 800b854:	10c00044 	addi	r3,r2,1
 800b858:	10800084 	addi	r2,r2,2
 800b85c:	1085883a 	add	r2,r2,r2
 800b860:	1085883a 	add	r2,r2,r2
 800b864:	80c00115 	stw	r3,4(r16)
 800b868:	80a1883a 	add	r16,r16,r2
 800b86c:	84400015 	stw	r17,0(r16)
 800b870:	0005883a 	mov	r2,zero
 800b874:	dfc00617 	ldw	ra,24(sp)
 800b878:	dd400517 	ldw	r21,20(sp)
 800b87c:	dd000417 	ldw	r20,16(sp)
 800b880:	dcc00317 	ldw	r19,12(sp)
 800b884:	dc800217 	ldw	r18,8(sp)
 800b888:	dc400117 	ldw	r17,4(sp)
 800b88c:	dc000017 	ldw	r16,0(sp)
 800b890:	dec00704 	addi	sp,sp,28
 800b894:	f800283a 	ret

0800b898 <__call_exitprocs>:
 800b898:	defff504 	addi	sp,sp,-44
 800b89c:	dd000515 	stw	r20,20(sp)
 800b8a0:	05020074 	movhi	r20,2049
 800b8a4:	dc800315 	stw	r18,12(sp)
 800b8a8:	dfc00a15 	stw	ra,40(sp)
 800b8ac:	df000915 	stw	fp,36(sp)
 800b8b0:	ddc00815 	stw	r23,32(sp)
 800b8b4:	dd800715 	stw	r22,28(sp)
 800b8b8:	dd400615 	stw	r21,24(sp)
 800b8bc:	dcc00415 	stw	r19,16(sp)
 800b8c0:	dc400215 	stw	r17,8(sp)
 800b8c4:	dc000115 	stw	r16,4(sp)
 800b8c8:	d9000015 	stw	r4,0(sp)
 800b8cc:	2825883a 	mov	r18,r5
 800b8d0:	a53bba04 	addi	r20,r20,-4376
 800b8d4:	a4400017 	ldw	r17,0(r20)
 800b8d8:	8cc00c17 	ldw	r19,48(r17)
 800b8dc:	8c400c04 	addi	r17,r17,48
 800b8e0:	98004526 	beq	r19,zero,800b9f8 <__call_exitprocs+0x160>
 800b8e4:	9c000117 	ldw	r16,4(r19)
 800b8e8:	00900034 	movhi	r2,16384
 800b8ec:	10bfffc4 	addi	r2,r2,-1
 800b8f0:	9d402217 	ldw	r21,136(r19)
 800b8f4:	85bfffc4 	addi	r22,r16,-1
 800b8f8:	80a1883a 	add	r16,r16,r2
 800b8fc:	8421883a 	add	r16,r16,r16
 800b900:	8421883a 	add	r16,r16,r16
 800b904:	ac2f883a 	add	r23,r21,r16
 800b908:	84000204 	addi	r16,r16,8
 800b90c:	9c21883a 	add	r16,r19,r16
 800b910:	b0002716 	blt	r22,zero,800b9b0 <__call_exitprocs+0x118>
 800b914:	90000726 	beq	r18,zero,800b934 <__call_exitprocs+0x9c>
 800b918:	a800041e 	bne	r21,zero,800b92c <__call_exitprocs+0x94>
 800b91c:	b5bfffc4 	addi	r22,r22,-1
 800b920:	bdffff04 	addi	r23,r23,-4
 800b924:	843fff04 	addi	r16,r16,-4
 800b928:	003ff906 	br	800b910 <__alt_data_end+0xfc00b910>
 800b92c:	b9002017 	ldw	r4,128(r23)
 800b930:	913ffa1e 	bne	r18,r4,800b91c <__alt_data_end+0xfc00b91c>
 800b934:	99000117 	ldw	r4,4(r19)
 800b938:	82000017 	ldw	r8,0(r16)
 800b93c:	213fffc4 	addi	r4,r4,-1
 800b940:	b100021e 	bne	r22,r4,800b94c <__call_exitprocs+0xb4>
 800b944:	9d800115 	stw	r22,4(r19)
 800b948:	00000106 	br	800b950 <__call_exitprocs+0xb8>
 800b94c:	80000015 	stw	zero,0(r16)
 800b950:	403ff226 	beq	r8,zero,800b91c <__alt_data_end+0xfc00b91c>
 800b954:	9f000117 	ldw	fp,4(r19)
 800b958:	a8000526 	beq	r21,zero,800b970 <__call_exitprocs+0xd8>
 800b95c:	00800044 	movi	r2,1
 800b960:	1592983a 	sll	r9,r2,r22
 800b964:	a9404017 	ldw	r5,256(r21)
 800b968:	494a703a 	and	r5,r9,r5
 800b96c:	2800021e 	bne	r5,zero,800b978 <__call_exitprocs+0xe0>
 800b970:	403ee83a 	callr	r8
 800b974:	00000906 	br	800b99c <__call_exitprocs+0x104>
 800b978:	a9004117 	ldw	r4,260(r21)
 800b97c:	4908703a 	and	r4,r9,r4
 800b980:	2000041e 	bne	r4,zero,800b994 <__call_exitprocs+0xfc>
 800b984:	b9400017 	ldw	r5,0(r23)
 800b988:	d9000017 	ldw	r4,0(sp)
 800b98c:	403ee83a 	callr	r8
 800b990:	00000206 	br	800b99c <__call_exitprocs+0x104>
 800b994:	b9000017 	ldw	r4,0(r23)
 800b998:	403ee83a 	callr	r8
 800b99c:	99000117 	ldw	r4,4(r19)
 800b9a0:	e13fcc1e 	bne	fp,r4,800b8d4 <__alt_data_end+0xfc00b8d4>
 800b9a4:	89000017 	ldw	r4,0(r17)
 800b9a8:	993fdc26 	beq	r19,r4,800b91c <__alt_data_end+0xfc00b91c>
 800b9ac:	003fc906 	br	800b8d4 <__alt_data_end+0xfc00b8d4>
 800b9b0:	00800034 	movhi	r2,0
 800b9b4:	10800004 	addi	r2,r2,0
 800b9b8:	10000f26 	beq	r2,zero,800b9f8 <__call_exitprocs+0x160>
 800b9bc:	99400117 	ldw	r5,4(r19)
 800b9c0:	99000017 	ldw	r4,0(r19)
 800b9c4:	2800091e 	bne	r5,zero,800b9ec <__call_exitprocs+0x154>
 800b9c8:	20000826 	beq	r4,zero,800b9ec <__call_exitprocs+0x154>
 800b9cc:	89000015 	stw	r4,0(r17)
 800b9d0:	a8000226 	beq	r21,zero,800b9dc <__call_exitprocs+0x144>
 800b9d4:	a809883a 	mov	r4,r21
 800b9d8:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 800b9dc:	9809883a 	mov	r4,r19
 800b9e0:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 800b9e4:	8cc00017 	ldw	r19,0(r17)
 800b9e8:	003fbd06 	br	800b8e0 <__alt_data_end+0xfc00b8e0>
 800b9ec:	9823883a 	mov	r17,r19
 800b9f0:	2027883a 	mov	r19,r4
 800b9f4:	003fba06 	br	800b8e0 <__alt_data_end+0xfc00b8e0>
 800b9f8:	dfc00a17 	ldw	ra,40(sp)
 800b9fc:	df000917 	ldw	fp,36(sp)
 800ba00:	ddc00817 	ldw	r23,32(sp)
 800ba04:	dd800717 	ldw	r22,28(sp)
 800ba08:	dd400617 	ldw	r21,24(sp)
 800ba0c:	dd000517 	ldw	r20,20(sp)
 800ba10:	dcc00417 	ldw	r19,16(sp)
 800ba14:	dc800317 	ldw	r18,12(sp)
 800ba18:	dc400217 	ldw	r17,8(sp)
 800ba1c:	dc000117 	ldw	r16,4(sp)
 800ba20:	dec00b04 	addi	sp,sp,44
 800ba24:	f800283a 	ret

0800ba28 <_exit>:
 800ba28:	defffd04 	addi	sp,sp,-12
 800ba2c:	df000215 	stw	fp,8(sp)
 800ba30:	df000204 	addi	fp,sp,8
 800ba34:	e13fff15 	stw	r4,-4(fp)
 800ba38:	0001883a 	nop
 800ba3c:	e0bfff17 	ldw	r2,-4(fp)
 800ba40:	e0bffe15 	stw	r2,-8(fp)
 800ba44:	e0bffe17 	ldw	r2,-8(fp)
 800ba48:	10000226 	beq	r2,zero,800ba54 <_exit+0x2c>
 800ba4c:	002af070 	cmpltui	zero,zero,43969
 800ba50:	00000106 	br	800ba58 <_exit+0x30>
 800ba54:	002af0b0 	cmpltui	zero,zero,43970
 800ba58:	003fff06 	br	800ba58 <__alt_data_end+0xfc00ba58>
