
Final_project.elf:     file format elf32-littlenios2
Final_project.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000230

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x000091d4 memsz 0x000091d4 flags r-x
    LOAD off    0x0000a1f4 vaddr 0x080091f4 paddr 0x0800a590 align 2**12
         filesz 0x0000139c memsz 0x0000139c flags rw-
    LOAD off    0x0000b92c vaddr 0x0800b92c paddr 0x0800b92c align 2**12
         filesz 0x00000000 memsz 0x000002a8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00008a2c  08000230  08000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000598  08008c5c  08008c5c  00009c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000139c  080091f4  0800a590  0000a1f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002a8  0800b92c  0800b92c  0000b92c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  0000b590  2**0
                  CONTENTS
  7 .sdram        00000000  0800bbd4  0800bbd4  0000b590  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000b590  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000980  00000000  00000000  0000b5b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000ed94  00000000  00000000  0000bf38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004f28  00000000  00000000  0001accc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00005600  00000000  00000000  0001fbf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001db4  00000000  00000000  000251f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003a19  00000000  00000000  00026fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00002ebf  00000000  00000000  0002a9c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0002d880  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000618  00000000  00000000  0002d8c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00030ec6  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00030ec9  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00030ed5  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00030ed6  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00030ed7  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00030edb  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00030edf  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00030ee3  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00030eee  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00030ef9  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000009  00000000  00000000  00030f04  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000037  00000000  00000000  00030f0d  2**0
                  CONTENTS, READONLY
 30 .jdi          0000626f  00000000  00000000  00030f44  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00095a72  00000000  00000000  000371b3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000230 l    d  .text	00000000 .text
08008c5c l    d  .rodata	00000000 .rodata
080091f4 l    d  .rwdata	00000000 .rwdata
0800b92c l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
0800bbd4 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../finalproject_bsp//obj/HAL/src/crt0.o
08000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
0800a544 l     O .rwdata	00000004 map_ram_ctrl
0800a548 l     O .rwdata	00000001 addr
00000000 l    df *ABS*	00000000 map_ram.c
0800a54c l     O .rwdata	00000004 map_ram_ctrl
00000000 l    df *ABS*	00000000 sgtl5000.c
00000000 l    df *ABS*	00000000 HID.c
00000000 l    df *ABS*	00000000 MAX3421E.c
00000000 l    df *ABS*	00000000 transfer.c
0800b93c l     O .bss	00000004 usb_delay.2608
0800b940 l     O .bss	00000001 tmp_addr.2609
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08004050 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
08009224 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
080047c0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
08004afc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08004c38 l     F .text	00000034 alt_dev_reg
08009304 l     O .rwdata	00000038 i2c_0
0800933c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
08004d14 l     F .text	00000110 optional_irq_callback
08004e74 l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08006b50 l     F .text	0000020c altera_avalon_jtag_uart_irq
08006d5c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
08007590 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
08007908 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
08007a3c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08007a68 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08007f58 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
080080b8 l     F .text	0000003c alt_get_errno
080080f4 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0800b960 g     O .bss	00000004 alt_instruction_exception_handler
08003f84 g     F .text	0000001c putchar
080048ac g     F .text	0000007c alt_main
0800a550 g     O .rwdata	00000008 ctrl_xfers
08003fa0 g     F .text	00000080 _puts_r
0800bad4 g     O .bss	00000100 alt_irq
080028d8 g     F .text	00000644 USB_Task
0800a590 g       *ABS*	00000000 __flash_rwdata_start
08003f30 g     F .text	0000004c printf
080019f0 g     F .text	00000088 kbdPoll
0800556c g     F .text	000000a8 alt_avalon_i2c_rx_read
0800026c g     F .text	000001f0 GetDriverandReport
08006784 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
080052f0 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
08005fd4 g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
08003d30 g     F .text	00000070 .hidden __fixsfsi
08001b44 g     F .text	00000088 MAXreg_wr
080091f4 g     O .rwdata	00000030 ClientDriverTable
08008628 g     F .text	00000024 altera_nios2_gen2_irq_init
08002f1c g     F .text	0000002c MSDProbe
08000000 g     F .entry	0000000c __reset
080023d8 g     F .text	000000e8 XferCtrlData
08000020 g       *ABS*	00000000 __flash_exceptions_start
0800b964 g     O .bss	00000010 hid_ep
0800b944 g     O .bss	00000004 errno
0800b94c g     O .bss	00000004 alt_argv
08012544 g       *ABS*	00000000 _gp
08004acc g     F .text	00000030 usleep
080067c8 g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
08001d30 g     F .text	00000088 MAXreg_rd
0800384c g     F .text	000004e4 .hidden __subsf3
08005480 g     F .text	00000044 alt_avalon_i2c_is_busy
0800a3c4 g     O .rwdata	00000180 alt_fd_list
08001928 g     F .text	00000040 HID_init
08003f7c g     F .text	00000008 _putchar_r
08005224 g     F .text	000000cc alt_avalon_i2c_master_config_set
08007c08 g     F .text	00000090 alt_find_dev
08008918 g     F .text	00000028 memcpy
0800803c g     F .text	0000007c alt_io_redirect
08008c5c g       *ABS*	00000000 __DTOR_END__
08005e14 g     F .text	000001c0 alt_avalon_i2c_master_transmit
08004020 g     F .text	00000014 puts
08008818 g     F .text	0000009c alt_exception_cause_generated_bad_addr
08006f54 g     F .text	0000021c altera_avalon_jtag_uart_read
08003ef4 g     F .text	0000003c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0800327c g     F .text	00000064 .hidden __udivsi3
08005090 g     F .text	00000098 alt_avalon_i2c_enable
080066b8 g     F .text	00000068 alt_avalon_i2c_int_disable
0800a558 g     O .rwdata	00000001 usb_task_state
08002094 g     F .text	00000094 MAX3421E_init
08000780 g     F .text	00000034 setKeycode
08000fc4 g     F .text	000000b4 SGTL5000_Reg_Rd
0800a584 g     O .rwdata	00000004 alt_max_fd
080061e0 g     F .text	00000210 alt_avalon_i2c_master_receive
08006720 g     F .text	00000064 alt_avalon_i2c_int_enable
0800a55c g     O .rwdata	00000004 _global_impure_ptr
0800bbd4 g       *ABS*	00000000 __bss_end
08007e68 g     F .text	000000f0 alt_iic_isr_register
080049c4 g     F .text	00000108 alt_tick
080065e0 g     F .text	00000058 alt_avalon_i2c_int_status_get
08000f74 g     F .text	00000050 clearMAP
08007e1c g     F .text	0000004c alt_ic_irq_enabled
08004928 g     F .text	0000009c alt_alarm_stop
08004f10 g     F .text	00000054 alt_avalon_i2c_register_callback
0800b95c g     O .bss	00000004 alt_irq_active
08004f64 g     F .text	000000ec alt_avalon_i2c_init
08002fe4 g     F .text	0000002c DummyProbe
080000fc g     F .exceptions	000000d4 alt_irq_handler
0800a39c g     O .rwdata	00000028 alt_dev_null
080007b4 g     F .text	000002fc SGTL5000_init
08001968 g     F .text	00000088 mousePoll
08001ee8 g     F .text	00000024 Vbus_power
08007a1c g     F .text	00000020 alt_dcache_flush_all
0800a590 g       *ABS*	00000000 __ram_rwdata_end
0800a57c g     O .rwdata	00000008 alt_dev_list
08004b38 g     F .text	00000100 write
08004710 g     F .text	00000058 _putc_r
080058a0 g     F .text	0000004c alt_avalon_i2c_check_arblost
08003360 g     F .text	000000bc .hidden __gtsf2
0800667c g     F .text	0000003c alt_avalon_i2c_int_clear
080091f4 g       *ABS*	00000000 __ram_rodata_end
0800b941 g     O .bss	00000001 usb_error
0800a56c g     O .rwdata	00000008 alt_avalon_i2c_list
080032e0 g     F .text	00000058 .hidden __umodsi3
0800bbd4 g       *ABS*	00000000 end
08006a90 g     F .text	000000c0 altera_avalon_jtag_uart_init
080001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
08005050 g     F .text	00000040 alt_avalon_i2c_open
08000f30 g     F .text	00000044 setMAP
08002534 g     F .text	0000017c XferDispatchPkt
08008c5c g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
08005a28 g     F .text	000000e8 alt_avalon_i2c_master_tx
08007608 g     F .text	0000007c alt_avalon_timer_sc_init
08003e90 g     F .text	00000064 .hidden __clzsi2
08007170 g     F .text	00000224 altera_avalon_jtag_uart_write
080040bc g     F .text	0000052c ___vfprintf_internal_r
08002258 g     F .text	00000034 MaxGpxHandler
0800833c g     F .text	0000022c alt_printf
08008a98 g     F .text	00000190 __call_exitprocs
08004e24 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
08000230 g     F .text	0000003c _start
0800b954 g     O .bss	00000004 _alt_tick_rate
08001db8 g     F .text	00000090 MAXbytes_rd
080063f0 g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
08006814 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
08007394 g     F .text	000001fc alt_avalon_spi_command
0800b958 g     O .bss	00000004 _alt_nticks
08004ca4 g     F .text	00000070 alt_sys_init
0800ba8c g     O .bss	00000048 devtable
08008940 g     F .text	00000158 __register_exitproc
08001520 g     F .text	00000408 HIDKProbe
0800b974 g     O .bss	00000018 msd_ep
08005c4c g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
08006dfc g     F .text	00000068 altera_avalon_jtag_uart_close
08002840 g     F .text	00000098 USB_init
08003338 g     F .text	00000028 .hidden __mulsi3
0800b98c g     O .bss	00000100 bigbuf
080091f4 g       *ABS*	00000000 __ram_rwdata_start
08008c5c g       *ABS*	00000000 __ram_rodata_start
0800b938 g     O .bss	00000001 last_usb_task_state
0800b930 g     O .bss	00000008 dev0ep
080004e8 g     F .text	00000048 clearLED
0800692c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08008754 g     F .text	000000c4 alt_get_fd
080077b0 g     F .text	00000158 alt_busy_sleep
08002f48 g     F .text	00000038 MSDEventHandler
080088e8 g     F .text	00000030 memcmp
080054c4 g     F .text	000000a8 alt_avalon_i2c_rx_read_available
080069ec g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0800bbd4 g       *ABS*	00000000 __alt_stack_base
08006a3c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08002fac g     F .text	00000038 CDCEventHandler
08003010 g     F .text	00000038 DummyEventHandler
0800864c g     F .text	00000108 alt_find_file
08007aa4 g     F .text	000000a4 alt_dev_llist_insert
080058ec g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
08005854 g     F .text	0000004c alt_avalon_i2c_check_nack
08004604 g     F .text	000000b8 __sfvwrite_small_dev
0800b92c g       *ABS*	00000000 __bss_start
08001f0c g     F .text	00000188 MAX_busprobe
0800b92c g     O .bss	00000002 hid_device
08000ab0 g     F .text	00000480 main
08002128 g     F .text	00000064 MAX3421E_Task
08005820 g     F .text	00000034 alt_avalon_i2c_master_target_set
0800b950 g     O .bss	00000004 alt_envp
0800698c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
080030a0 g     F .text	00000084 ConvUTF8ToStr
08006638 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
0800a588 g     O .rwdata	00000004 alt_errno
080046bc g     F .text	00000054 putc
08003184 g     F .text	00000084 .hidden __divsi3
080026b0 g     F .text	00000190 XferInTransfer
08000648 g     F .text	00000138 printSignedHex1
08008c5c g       *ABS*	00000000 __CTOR_END__
0800341c g     F .text	00000430 .hidden __mulsf3
08003068 g     F .text	00000038 GetDevtable
08008c5c g       *ABS*	00000000 __flash_rodata_start
08008c5c g       *ABS*	00000000 __DTOR_LIST__
080024c0 g     F .text	00000074 XferCtrlND
08001078 g     F .text	000000a0 SGTL5000_Reg_Wr
08001e48 g     F .text	000000a0 MAX3421E_reset
08004c6c g     F .text	00000038 alt_irq_init
080085a4 g     F .text	00000084 alt_release_fd
08009090 g     O .rodata	00000100 .hidden __clz_tab
080088b4 g     F .text	00000014 atexit
08003360 g     F .text	000000bc .hidden __gesf2
08004768 g     F .text	00000058 _write_r
0800a560 g     O .rwdata	00000004 _impure_ptr
0800b948 g     O .bss	00000004 alt_argc
08007ba8 g     F .text	00000060 _do_dtors
080057e8 g     F .text	00000038 alt_avalon_i2c_master_target_get
080056f8 g     F .text	000000f0 alt_avalon_i2c_send_address
08001bcc g     F .text	00000164 MAXbytes_wr
08000020 g       .exceptions	00000000 alt_irq_entry
0800a574 g     O .rwdata	00000008 alt_fs_list
08002f80 g     F .text	0000002c CDCProbe
08000020 g       *ABS*	00000000 __ram_exceptions_start
080004a4 g     F .text	00000044 setLED
08003048 g     F .text	00000020 GetUsbTaskState
080068c4 g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
08007cb8 g     F .text	00000050 alt_ic_isr_register
08005128 g     F .text	0000004c alt_avalon_i2c_disable
08008c98 g     O .rodata	00000010 devclasses
0800a590 g       *ABS*	00000000 _edata
08001ab0 g     F .text	00000038 HIDKEventHandler
0800bbd4 g       *ABS*	00000000 _end
0800218c g     F .text	000000cc MaxIntHandler
08000230 g       *ABS*	00000000 __ram_exceptions_end
08006e64 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08005174 g     F .text	000000b0 alt_avalon_i2c_master_config_get
08001ae8 g     F .text	00000034 SPI_init
08007d90 g     F .text	0000008c alt_ic_irq_disable
080088c8 g     F .text	00000020 exit
08003da0 g     F .text	000000f0 .hidden __floatunsisf
08003208 g     F .text	00000074 .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08000000 g       *ABS*	00000000 __alt_mem_sdram
08005384 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
08005614 g     F .text	000000e4 alt_avalon_i2c_cmd_write
08003124 g     F .text	00000060 .hidden __fixunssfsi
08001a78 g     F .text	00000038 HIDMEventHandler
08008c28 g     F .text	00000034 _exit
08007684 g     F .text	0000012c alt_alarm_start
08000530 g     F .text	00000118 printSignedHex0
08004034 g     F .text	0000001c strlen
080081e0 g     F .text	0000015c open
08008568 g     F .text	0000003c alt_putchar
08007c98 g     F .text	00000020 alt_icache_flush_all
0800a58c g     O .rwdata	00000004 alt_priority_mask
0800045c g     F .text	00000048 setHERO
08007d08 g     F .text	00000088 alt_ic_irq_enable
080045e8 g     F .text	0000001c __vfprintf_internal
08001118 g     F .text	00000408 HIDMProbe
08001b1c g     F .text	00000028 SPI_wr
0800a564 g     O .rwdata	00000008 alt_alarm_list
08007b48 g     F .text	00000060 _do_ctors
08007944 g     F .text	000000d8 close
08006878 g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
08004828 g     F .text	00000084 alt_load
08005b10 g     F .text	0000013c alt_avalon_i2c_master_rx
0800228c g     F .text	0000014c XferCtrlReq



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08408c14 	ori	at,at,560
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001d00 	call	80001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	00820074 	movhi	r2,2049
 8000140:	10aeb504 	addi	r2,r2,-17708
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	00820074 	movhi	r2,2049
 8000158:	10aeb504 	addi	r2,r2,-17708
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe106 	br	800012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	0001883a 	nop
}
 80001b8:	0001883a 	nop
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

080001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001d0:	defffb04 	addi	sp,sp,-20
 80001d4:	dfc00415 	stw	ra,16(sp)
 80001d8:	df000315 	stw	fp,12(sp)
 80001dc:	df000304 	addi	fp,sp,12
 80001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80001e4:	00bfffc4 	movi	r2,-1
 80001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 80001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80001f0:	d0a50717 	ldw	r2,-27620(gp)
 80001f4:	10000726 	beq	r2,zero,8000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80001f8:	d0a50717 	ldw	r2,-27620(gp)
 80001fc:	e0fffd17 	ldw	r3,-12(fp)
 8000200:	e1bffe17 	ldw	r6,-8(fp)
 8000204:	e17fff17 	ldw	r5,-4(fp)
 8000208:	1809883a 	mov	r4,r3
 800020c:	103ee83a 	callr	r2
 8000210:	00000206 	br	800021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8000218:	0005883a 	mov	r2,zero
}
 800021c:	e037883a 	mov	sp,fp
 8000220:	dfc00117 	ldw	ra,4(sp)
 8000224:	df000017 	ldw	fp,0(sp)
 8000228:	dec00204 	addi	sp,sp,8
 800022c:	f800283a 	ret

Disassembly of section .text:

08000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000230:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000238:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 800023c:	d6895114 	ori	gp,gp,9540
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000240:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
 8000244:	10ae4b14 	ori	r2,r2,47404

    movhi r3, %hi(__bss_end)
 8000248:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
 800024c:	18eef514 	ori	r3,r3,48084

    beq r2, r3, 1f
 8000250:	10c00326 	beq	r2,r3,8000260 <_start+0x30>

0:
    stw zero, (r2)
 8000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800025c:	10fffd36 	bltu	r2,r3,8000254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000260:	80048280 	call	8004828 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000264:	80048ac0 	call	80048ac <alt_main>

08000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000268:	003fff06 	br	8000268 <__alt_data_end+0xfc000268>

0800026c <GetDriverandReport>:

static BYTE addr = 1; // hard-wired USB address
const char *const devclasses[] = {" Uninitialized", " HID Keyboard",
                                  " HID Mouse", " Mass storage"};

BYTE GetDriverandReport() {
 800026c:	defff604 	addi	sp,sp,-40
 8000270:	dfc00915 	stw	ra,36(sp)
 8000274:	df000815 	stw	fp,32(sp)
 8000278:	df000804 	addi	fp,sp,32
  BYTE i;
  BYTE rcode;
  BYTE device = 0xFF;
 800027c:	00bfffc4 	movi	r2,-1
 8000280:	e0bffd45 	stb	r2,-11(fp)
  BYTE tmpbyte;

  DEV_RECORD *tpl_ptr;
  printf("Reached USB_STATE_RUNNING (0x40)\n");
 8000284:	01020074 	movhi	r4,2049
 8000288:	21232a04 	addi	r4,r4,-29528
 800028c:	80040200 	call	8004020 <puts>
  for (i = 1; i < USB_NUMDEVICES; i++) {
 8000290:	00800044 	movi	r2,1
 8000294:	e0bffd05 	stb	r2,-12(fp)
 8000298:	00001f06 	br	8000318 <GetDriverandReport+0xac>
    tpl_ptr = GetDevtable(i);
 800029c:	e0bffd03 	ldbu	r2,-12(fp)
 80002a0:	1009883a 	mov	r4,r2
 80002a4:	80030680 	call	8003068 <GetDevtable>
 80002a8:	e0bffe15 	stw	r2,-8(fp)
    if (tpl_ptr->epinfo != NULL) {
 80002ac:	e0bffe17 	ldw	r2,-8(fp)
 80002b0:	10800017 	ldw	r2,0(r2)
 80002b4:	10001526 	beq	r2,zero,800030c <GetDriverandReport+0xa0>
      printf("Device: %d", i);
 80002b8:	e0bffd03 	ldbu	r2,-12(fp)
 80002bc:	100b883a 	mov	r5,r2
 80002c0:	01020074 	movhi	r4,2049
 80002c4:	21233304 	addi	r4,r4,-29492
 80002c8:	8003f300 	call	8003f30 <printf>
      printf("%s \n", devclasses[tpl_ptr->devclass]);
 80002cc:	e0bffe17 	ldw	r2,-8(fp)
 80002d0:	10800103 	ldbu	r2,4(r2)
 80002d4:	10c03fcc 	andi	r3,r2,255
 80002d8:	00820074 	movhi	r2,2049
 80002dc:	10a32604 	addi	r2,r2,-29544
 80002e0:	18c7883a 	add	r3,r3,r3
 80002e4:	18c7883a 	add	r3,r3,r3
 80002e8:	10c5883a 	add	r2,r2,r3
 80002ec:	10800017 	ldw	r2,0(r2)
 80002f0:	100b883a 	mov	r5,r2
 80002f4:	01020074 	movhi	r4,2049
 80002f8:	21233604 	addi	r4,r4,-29480
 80002fc:	8003f300 	call	8003f30 <printf>
      device = tpl_ptr->devclass;
 8000300:	e0bffe17 	ldw	r2,-8(fp)
 8000304:	10800103 	ldbu	r2,4(r2)
 8000308:	e0bffd45 	stb	r2,-11(fp)
  BYTE device = 0xFF;
  BYTE tmpbyte;

  DEV_RECORD *tpl_ptr;
  printf("Reached USB_STATE_RUNNING (0x40)\n");
  for (i = 1; i < USB_NUMDEVICES; i++) {
 800030c:	e0bffd03 	ldbu	r2,-12(fp)
 8000310:	10800044 	addi	r2,r2,1
 8000314:	e0bffd05 	stb	r2,-12(fp)
 8000318:	e0bffd03 	ldbu	r2,-12(fp)
 800031c:	10800230 	cmpltui	r2,r2,8
 8000320:	103fde1e 	bne	r2,zero,800029c <__alt_data_end+0xfc00029c>
      printf("%s \n", devclasses[tpl_ptr->devclass]);
      device = tpl_ptr->devclass;
    }
  }
  // Query rate and protocol
  rcode = XferGetIdle(addr, 0, hid_device.interface, 0, &tmpbyte);
 8000324:	d0a00103 	ldbu	r2,-32764(gp)
 8000328:	11003fcc 	andi	r4,r2,255
 800032c:	d0a4fa43 	ldbu	r2,-27671(gp)
 8000330:	10803fcc 	andi	r2,r2,255
 8000334:	e0ffff44 	addi	r3,fp,-3
 8000338:	d8c00415 	stw	r3,16(sp)
 800033c:	00c00044 	movi	r3,1
 8000340:	d8c00315 	stw	r3,12(sp)
 8000344:	d8800215 	stw	r2,8(sp)
 8000348:	d8000115 	stw	zero,4(sp)
 800034c:	d8000015 	stw	zero,0(sp)
 8000350:	01c00084 	movi	r7,2
 8000354:	01802844 	movi	r6,161
 8000358:	000b883a 	mov	r5,zero
 800035c:	800228c0 	call	800228c <XferCtrlReq>
 8000360:	e0bfff05 	stb	r2,-4(fp)
  if (rcode) { // error handling
 8000364:	e0bfff03 	ldbu	r2,-4(fp)
 8000368:	10000926 	beq	r2,zero,8000390 <GetDriverandReport+0x124>
    printf("GetIdle Error. Error code: ");
 800036c:	01020074 	movhi	r4,2049
 8000370:	21233804 	addi	r4,r4,-29472
 8000374:	8003f300 	call	8003f30 <printf>
    printf("%x \n", rcode);
 8000378:	e0bfff03 	ldbu	r2,-4(fp)
 800037c:	100b883a 	mov	r5,r2
 8000380:	01020074 	movhi	r4,2049
 8000384:	21233f04 	addi	r4,r4,-29444
 8000388:	8003f300 	call	8003f30 <printf>
 800038c:	00000906 	br	80003b4 <GetDriverandReport+0x148>
  } else {
    printf("Update rate: ");
 8000390:	01020074 	movhi	r4,2049
 8000394:	21234104 	addi	r4,r4,-29436
 8000398:	8003f300 	call	8003f30 <printf>
    printf("%x \n", tmpbyte);
 800039c:	e0bfff43 	ldbu	r2,-3(fp)
 80003a0:	10803fcc 	andi	r2,r2,255
 80003a4:	100b883a 	mov	r5,r2
 80003a8:	01020074 	movhi	r4,2049
 80003ac:	21233f04 	addi	r4,r4,-29444
 80003b0:	8003f300 	call	8003f30 <printf>
  }
  printf("Protocol: ");
 80003b4:	01020074 	movhi	r4,2049
 80003b8:	21234504 	addi	r4,r4,-29420
 80003bc:	8003f300 	call	8003f30 <printf>
  rcode = XferGetProto(addr, 0, hid_device.interface, &tmpbyte);
 80003c0:	d0a00103 	ldbu	r2,-32764(gp)
 80003c4:	11003fcc 	andi	r4,r2,255
 80003c8:	d0a4fa43 	ldbu	r2,-27671(gp)
 80003cc:	10803fcc 	andi	r2,r2,255
 80003d0:	e0ffff44 	addi	r3,fp,-3
 80003d4:	d8c00415 	stw	r3,16(sp)
 80003d8:	00c00044 	movi	r3,1
 80003dc:	d8c00315 	stw	r3,12(sp)
 80003e0:	d8800215 	stw	r2,8(sp)
 80003e4:	d8000115 	stw	zero,4(sp)
 80003e8:	d8000015 	stw	zero,0(sp)
 80003ec:	01c000c4 	movi	r7,3
 80003f0:	01802844 	movi	r6,161
 80003f4:	000b883a 	mov	r5,zero
 80003f8:	800228c0 	call	800228c <XferCtrlReq>
 80003fc:	e0bfff05 	stb	r2,-4(fp)
  if (rcode) { // error handling
 8000400:	e0bfff03 	ldbu	r2,-4(fp)
 8000404:	10000926 	beq	r2,zero,800042c <GetDriverandReport+0x1c0>
    printf("GetProto Error. Error code ");
 8000408:	01020074 	movhi	r4,2049
 800040c:	21234804 	addi	r4,r4,-29408
 8000410:	8003f300 	call	8003f30 <printf>
    printf("%x \n", rcode);
 8000414:	e0bfff03 	ldbu	r2,-4(fp)
 8000418:	100b883a 	mov	r5,r2
 800041c:	01020074 	movhi	r4,2049
 8000420:	21233f04 	addi	r4,r4,-29444
 8000424:	8003f300 	call	8003f30 <printf>
 8000428:	00000606 	br	8000444 <GetDriverandReport+0x1d8>
  } else {
    printf("%d \n", tmpbyte);
 800042c:	e0bfff43 	ldbu	r2,-3(fp)
 8000430:	10803fcc 	andi	r2,r2,255
 8000434:	100b883a 	mov	r5,r2
 8000438:	01020074 	movhi	r4,2049
 800043c:	21234f04 	addi	r4,r4,-29380
 8000440:	8003f300 	call	8003f30 <printf>
  }
  return device;
 8000444:	e0bffd43 	ldbu	r2,-11(fp)
}
 8000448:	e037883a 	mov	sp,fp
 800044c:	dfc00117 	ldw	ra,4(sp)
 8000450:	df000017 	ldw	fp,0(sp)
 8000454:	dec00204 	addi	sp,sp,8
 8000458:	f800283a 	ret

0800045c <setHERO>:

void setHERO(BYTE HERO_X, BYTE HERO_Y) {
 800045c:	defffd04 	addi	sp,sp,-12
 8000460:	df000215 	stw	fp,8(sp)
 8000464:	df000204 	addi	fp,sp,8
 8000468:	2007883a 	mov	r3,r4
 800046c:	2805883a 	mov	r2,r5
 8000470:	e0fffe05 	stb	r3,-8(fp)
 8000474:	e0bfff05 	stb	r2,-4(fp)
  IOWR_ALTERA_AVALON_PIO_DATA(HERO_BASE, (HERO_Y << 8 | HERO_X));
 8000478:	e0bfff03 	ldbu	r2,-4(fp)
 800047c:	1006923a 	slli	r3,r2,8
 8000480:	e0bffe03 	ldbu	r2,-8(fp)
 8000484:	1886b03a 	or	r3,r3,r2
 8000488:	00803004 	movi	r2,192
 800048c:	10c00035 	stwio	r3,0(r2)
}
 8000490:	0001883a 	nop
 8000494:	e037883a 	mov	sp,fp
 8000498:	df000017 	ldw	fp,0(sp)
 800049c:	dec00104 	addi	sp,sp,4
 80004a0:	f800283a 	ret

080004a4 <setLED>:

void setLED(int LED) {
 80004a4:	defffe04 	addi	sp,sp,-8
 80004a8:	df000115 	stw	fp,4(sp)
 80004ac:	df000104 	addi	fp,sp,4
 80004b0:	e13fff15 	stw	r4,-4(fp)
  IOWR_ALTERA_AVALON_PIO_DATA(
 80004b4:	00803804 	movi	r2,224
 80004b8:	10c00037 	ldwio	r3,0(r2)
 80004bc:	01000044 	movi	r4,1
 80004c0:	e0bfff17 	ldw	r2,-4(fp)
 80004c4:	2084983a 	sll	r2,r4,r2
 80004c8:	1886b03a 	or	r3,r3,r2
 80004cc:	00803804 	movi	r2,224
 80004d0:	10c00035 	stwio	r3,0(r2)
      LEDS_PIO_BASE,
      (IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) | (0x001 << LED)));
}
 80004d4:	0001883a 	nop
 80004d8:	e037883a 	mov	sp,fp
 80004dc:	df000017 	ldw	fp,0(sp)
 80004e0:	dec00104 	addi	sp,sp,4
 80004e4:	f800283a 	ret

080004e8 <clearLED>:

void clearLED(int LED) {
 80004e8:	defffe04 	addi	sp,sp,-8
 80004ec:	df000115 	stw	fp,4(sp)
 80004f0:	df000104 	addi	fp,sp,4
 80004f4:	e13fff15 	stw	r4,-4(fp)
  IOWR_ALTERA_AVALON_PIO_DATA(
 80004f8:	00803804 	movi	r2,224
 80004fc:	10c00037 	ldwio	r3,0(r2)
 8000500:	01000044 	movi	r4,1
 8000504:	e0bfff17 	ldw	r2,-4(fp)
 8000508:	2084983a 	sll	r2,r4,r2
 800050c:	0084303a 	nor	r2,zero,r2
 8000510:	1886703a 	and	r3,r3,r2
 8000514:	00803804 	movi	r2,224
 8000518:	10c00035 	stwio	r3,0(r2)
      LEDS_PIO_BASE,
      (IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) & ~(0x001 << LED)));
}
 800051c:	0001883a 	nop
 8000520:	e037883a 	mov	sp,fp
 8000524:	df000017 	ldw	fp,0(sp)
 8000528:	dec00104 	addi	sp,sp,4
 800052c:	f800283a 	ret

08000530 <printSignedHex0>:

void printSignedHex0(signed char value) {
 8000530:	defffc04 	addi	sp,sp,-16
 8000534:	dfc00315 	stw	ra,12(sp)
 8000538:	df000215 	stw	fp,8(sp)
 800053c:	df000204 	addi	fp,sp,8
 8000540:	2005883a 	mov	r2,r4
 8000544:	e0bfff05 	stb	r2,-4(fp)
  BYTE tens = 0;
 8000548:	e03ffe05 	stb	zero,-8(fp)
  BYTE ones = 0;
 800054c:	e03ffe45 	stb	zero,-7(fp)
  WORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 8000550:	00803c04 	movi	r2,240
 8000554:	10800037 	ldwio	r2,0(r2)
 8000558:	e0bffe8d 	sth	r2,-6(fp)
  if (value < 0) {
 800055c:	e0bfff07 	ldb	r2,-4(fp)
 8000560:	1000060e 	bge	r2,zero,800057c <printSignedHex0+0x4c>
    setLED(11);
 8000564:	010002c4 	movi	r4,11
 8000568:	80004a40 	call	80004a4 <setLED>
    value = -value;
 800056c:	e0bfff03 	ldbu	r2,-4(fp)
 8000570:	0085c83a 	sub	r2,zero,r2
 8000574:	e0bfff05 	stb	r2,-4(fp)
 8000578:	00000206 	br	8000584 <printSignedHex0+0x54>
  } else {
    clearLED(11);
 800057c:	010002c4 	movi	r4,11
 8000580:	80004e80 	call	80004e8 <clearLED>
  }
  // handled hundreds
  if (value / 100)
 8000584:	e0bfff03 	ldbu	r2,-4(fp)
 8000588:	108018c4 	addi	r2,r2,99
 800058c:	10803fcc 	andi	r2,r2,255
 8000590:	108031f0 	cmpltui	r2,r2,199
 8000594:	1000031e 	bne	r2,zero,80005a4 <printSignedHex0+0x74>
    setLED(13);
 8000598:	01000344 	movi	r4,13
 800059c:	80004a40 	call	80004a4 <setLED>
 80005a0:	00000206 	br	80005ac <printSignedHex0+0x7c>
  else
    clearLED(13);
 80005a4:	01000344 	movi	r4,13
 80005a8:	80004e80 	call	80004e8 <clearLED>

  value = value % 100;
 80005ac:	e0bfff07 	ldb	r2,-4(fp)
 80005b0:	01401904 	movi	r5,100
 80005b4:	1009883a 	mov	r4,r2
 80005b8:	80032080 	call	8003208 <__modsi3>
 80005bc:	e0bfff05 	stb	r2,-4(fp)
  tens = value / 10;
 80005c0:	e0bfff07 	ldb	r2,-4(fp)
 80005c4:	01400284 	movi	r5,10
 80005c8:	1009883a 	mov	r4,r2
 80005cc:	80031840 	call	8003184 <__divsi3>
 80005d0:	e0bffe05 	stb	r2,-8(fp)
  ones = value % 10;
 80005d4:	e0bfff07 	ldb	r2,-4(fp)
 80005d8:	01400284 	movi	r5,10
 80005dc:	1009883a 	mov	r4,r2
 80005e0:	80032080 	call	8003208 <__modsi3>
 80005e4:	e0bffe45 	stb	r2,-7(fp)

  pio_val &= 0x00FF;
 80005e8:	e0bffe8b 	ldhu	r2,-6(fp)
 80005ec:	10803fcc 	andi	r2,r2,255
 80005f0:	e0bffe8d 	sth	r2,-6(fp)
  pio_val |= (tens << 12);
 80005f4:	e0bffe03 	ldbu	r2,-8(fp)
 80005f8:	1004933a 	slli	r2,r2,12
 80005fc:	1007883a 	mov	r3,r2
 8000600:	e0bffe8b 	ldhu	r2,-6(fp)
 8000604:	1884b03a 	or	r2,r3,r2
 8000608:	e0bffe8d 	sth	r2,-6(fp)
  pio_val |= (ones << 8);
 800060c:	e0bffe43 	ldbu	r2,-7(fp)
 8000610:	1004923a 	slli	r2,r2,8
 8000614:	1007883a 	mov	r3,r2
 8000618:	e0bffe8b 	ldhu	r2,-6(fp)
 800061c:	1884b03a 	or	r2,r3,r2
 8000620:	e0bffe8d 	sth	r2,-6(fp)

  IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 8000624:	e0fffe8b 	ldhu	r3,-6(fp)
 8000628:	00803c04 	movi	r2,240
 800062c:	10c00035 	stwio	r3,0(r2)
}
 8000630:	0001883a 	nop
 8000634:	e037883a 	mov	sp,fp
 8000638:	dfc00117 	ldw	ra,4(sp)
 800063c:	df000017 	ldw	fp,0(sp)
 8000640:	dec00204 	addi	sp,sp,8
 8000644:	f800283a 	ret

08000648 <printSignedHex1>:

void printSignedHex1(signed char value) {
 8000648:	defffb04 	addi	sp,sp,-20
 800064c:	dfc00415 	stw	ra,16(sp)
 8000650:	df000315 	stw	fp,12(sp)
 8000654:	df000304 	addi	fp,sp,12
 8000658:	2005883a 	mov	r2,r4
 800065c:	e0bfff05 	stb	r2,-4(fp)
  BYTE tens = 0;
 8000660:	e03ffd05 	stb	zero,-12(fp)
  BYTE ones = 0;
 8000664:	e03ffd45 	stb	zero,-11(fp)
  DWORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 8000668:	00803c04 	movi	r2,240
 800066c:	10800037 	ldwio	r2,0(r2)
 8000670:	e0bffe15 	stw	r2,-8(fp)
  if (value < 0) {
 8000674:	e0bfff07 	ldb	r2,-4(fp)
 8000678:	1000060e 	bge	r2,zero,8000694 <printSignedHex1+0x4c>
    setLED(10);
 800067c:	01000284 	movi	r4,10
 8000680:	80004a40 	call	80004a4 <setLED>
    value = -value;
 8000684:	e0bfff03 	ldbu	r2,-4(fp)
 8000688:	0085c83a 	sub	r2,zero,r2
 800068c:	e0bfff05 	stb	r2,-4(fp)
 8000690:	00000206 	br	800069c <printSignedHex1+0x54>
  } else {
    clearLED(10);
 8000694:	01000284 	movi	r4,10
 8000698:	80004e80 	call	80004e8 <clearLED>
  }
  // handled hundreds
  if (value / 100)
 800069c:	e0bfff03 	ldbu	r2,-4(fp)
 80006a0:	108018c4 	addi	r2,r2,99
 80006a4:	10803fcc 	andi	r2,r2,255
 80006a8:	108031f0 	cmpltui	r2,r2,199
 80006ac:	1000031e 	bne	r2,zero,80006bc <printSignedHex1+0x74>
    setLED(12);
 80006b0:	01000304 	movi	r4,12
 80006b4:	80004a40 	call	80004a4 <setLED>
 80006b8:	00000206 	br	80006c4 <printSignedHex1+0x7c>
  else
    clearLED(12);
 80006bc:	01000304 	movi	r4,12
 80006c0:	80004e80 	call	80004e8 <clearLED>

  value = value % 100;
 80006c4:	e0bfff07 	ldb	r2,-4(fp)
 80006c8:	01401904 	movi	r5,100
 80006cc:	1009883a 	mov	r4,r2
 80006d0:	80032080 	call	8003208 <__modsi3>
 80006d4:	e0bfff05 	stb	r2,-4(fp)
  tens = value / 10;
 80006d8:	e0bfff07 	ldb	r2,-4(fp)
 80006dc:	01400284 	movi	r5,10
 80006e0:	1009883a 	mov	r4,r2
 80006e4:	80031840 	call	8003184 <__divsi3>
 80006e8:	e0bffd05 	stb	r2,-12(fp)
  ones = value % 10;
 80006ec:	e0bfff07 	ldb	r2,-4(fp)
 80006f0:	01400284 	movi	r5,10
 80006f4:	1009883a 	mov	r4,r2
 80006f8:	80032080 	call	8003208 <__modsi3>
 80006fc:	e0bffd45 	stb	r2,-11(fp)
  tens = value / 10;
 8000700:	e0bfff07 	ldb	r2,-4(fp)
 8000704:	01400284 	movi	r5,10
 8000708:	1009883a 	mov	r4,r2
 800070c:	80031840 	call	8003184 <__divsi3>
 8000710:	e0bffd05 	stb	r2,-12(fp)
  ones = value % 10;
 8000714:	e0bfff07 	ldb	r2,-4(fp)
 8000718:	01400284 	movi	r5,10
 800071c:	1009883a 	mov	r4,r2
 8000720:	80032080 	call	8003208 <__modsi3>
 8000724:	e0bffd45 	stb	r2,-11(fp)

  pio_val &= 0xFF00;
 8000728:	e0bffe17 	ldw	r2,-8(fp)
 800072c:	10bfc00c 	andi	r2,r2,65280
 8000730:	e0bffe15 	stw	r2,-8(fp)
  pio_val |= (tens << 4);
 8000734:	e0bffd03 	ldbu	r2,-12(fp)
 8000738:	1004913a 	slli	r2,r2,4
 800073c:	1007883a 	mov	r3,r2
 8000740:	e0bffe17 	ldw	r2,-8(fp)
 8000744:	10c4b03a 	or	r2,r2,r3
 8000748:	e0bffe15 	stw	r2,-8(fp)
  pio_val |= (ones << 0);
 800074c:	e0bffd43 	ldbu	r2,-11(fp)
 8000750:	e0fffe17 	ldw	r3,-8(fp)
 8000754:	1884b03a 	or	r2,r3,r2
 8000758:	e0bffe15 	stw	r2,-8(fp)

  IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 800075c:	e0fffe17 	ldw	r3,-8(fp)
 8000760:	00803c04 	movi	r2,240
 8000764:	10c00035 	stwio	r3,0(r2)
}
 8000768:	0001883a 	nop
 800076c:	e037883a 	mov	sp,fp
 8000770:	dfc00117 	ldw	ra,4(sp)
 8000774:	df000017 	ldw	fp,0(sp)
 8000778:	dec00204 	addi	sp,sp,8
 800077c:	f800283a 	ret

08000780 <setKeycode>:

void setKeycode(WORD keycode) {
 8000780:	defffe04 	addi	sp,sp,-8
 8000784:	df000115 	stw	fp,4(sp)
 8000788:	df000104 	addi	fp,sp,4
 800078c:	2005883a 	mov	r2,r4
 8000790:	e0bfff0d 	sth	r2,-4(fp)
  IOWR_ALTERA_AVALON_PIO_DATA(KEYCODE_BASE, keycode);
 8000794:	e0ffff0b 	ldhu	r3,-4(fp)
 8000798:	00808c04 	movi	r2,560
 800079c:	10c00035 	stwio	r3,0(r2)
}
 80007a0:	0001883a 	nop
 80007a4:	e037883a 	mov	sp,fp
 80007a8:	df000017 	ldw	fp,0(sp)
 80007ac:	dec00104 	addi	sp,sp,4
 80007b0:	f800283a 	ret

080007b4 <SGTL5000_init>:

int SGTL5000_init() {
 80007b4:	defffc04 	addi	sp,sp,-16
 80007b8:	dfc00315 	stw	ra,12(sp)
 80007bc:	df000215 	stw	fp,8(sp)
 80007c0:	df000204 	addi	fp,sp,8
  ALT_AVALON_I2C_DEV_t *i2c_dev; // pointer to instance structure
  // get a pointer to the Avalon i2c instance
  i2c_dev = alt_avalon_i2c_open(
 80007c4:	01020074 	movhi	r4,2049
 80007c8:	21235104 	addi	r4,r4,-29372
 80007cc:	80050500 	call	8005050 <alt_avalon_i2c_open>
 80007d0:	e0bffe15 	stw	r2,-8(fp)
      "/dev/i2c_0");   // this has to reflect Platform Designer name
  if (NULL == i2c_dev) // check the BSP if unsure
 80007d4:	e0bffe17 	ldw	r2,-8(fp)
 80007d8:	1000051e 	bne	r2,zero,80007f0 <SGTL5000_init+0x3c>
  {
    printf("Error: Cannot find /dev/i2c_0\n");
 80007dc:	01020074 	movhi	r4,2049
 80007e0:	21235404 	addi	r4,r4,-29360
 80007e4:	80040200 	call	8004020 <puts>
    return 1;
 80007e8:	00800044 	movi	r2,1
 80007ec:	0000ab06 	br	8000a9c <SGTL5000_init+0x2e8>
  }
  printf("I2C Test Program\n");
 80007f0:	01020074 	movhi	r4,2049
 80007f4:	21235c04 	addi	r4,r4,-29328
 80007f8:	80040200 	call	8004020 <puts>

  alt_avalon_i2c_master_target_set(i2c_dev, 0xA); // CODEC at address 0b0001010
 80007fc:	01400284 	movi	r5,10
 8000800:	e13ffe17 	ldw	r4,-8(fp)
 8000804:	80058200 	call	8005820 <alt_avalon_i2c_master_target_set>
  // print device ID (verify I2C is working)
  printf("Device ID register: %x\n",
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_ID));
 8000808:	000b883a 	mov	r5,zero
 800080c:	e13ffe17 	ldw	r4,-8(fp)
 8000810:	8000fc40 	call	8000fc4 <SGTL5000_Reg_Rd>
  }
  printf("I2C Test Program\n");

  alt_avalon_i2c_master_target_set(i2c_dev, 0xA); // CODEC at address 0b0001010
  // print device ID (verify I2C is working)
  printf("Device ID register: %x\n",
 8000814:	10bfffcc 	andi	r2,r2,65535
 8000818:	100b883a 	mov	r5,r2
 800081c:	01020074 	movhi	r4,2049
 8000820:	21236104 	addi	r4,r4,-29308
 8000824:	8003f300 	call	8003f30 <printf>
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_ID));

  // configure PLL, input frequency is 12.5 MHz, output frequency is 180.6336
  // MHz if 44.1kHz is desired or 196.608 MHz else
  BYTE int_divisor = 180633600 / 12500000;
 8000828:	00800384 	movi	r2,14
 800082c:	e0bfff05 	stb	r2,-4(fp)
  WORD frac_divisor =
      (WORD)(((180633600.0f / 12500000.0f) - (float)int_divisor) * 2048.0f);
 8000830:	e0bfff03 	ldbu	r2,-4(fp)
 8000834:	1009883a 	mov	r4,r2
 8000838:	8003da00 	call	8003da0 <__floatunsisf>
 800083c:	1007883a 	mov	r3,r2
 8000840:	180b883a 	mov	r5,r3
 8000844:	011059f4 	movhi	r4,16743
 8000848:	210d8144 	addi	r4,r4,13829
 800084c:	800384c0 	call	800384c <__subsf3>
 8000850:	1007883a 	mov	r3,r2
 8000854:	1805883a 	mov	r2,r3
 8000858:	01514034 	movhi	r5,17664
 800085c:	1009883a 	mov	r4,r2
 8000860:	800341c0 	call	800341c <__mulsf3>
 8000864:	1007883a 	mov	r3,r2
 8000868:	1805883a 	mov	r2,r3
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_ID));

  // configure PLL, input frequency is 12.5 MHz, output frequency is 180.6336
  // MHz if 44.1kHz is desired or 196.608 MHz else
  BYTE int_divisor = 180633600 / 12500000;
  WORD frac_divisor =
 800086c:	1009883a 	mov	r4,r2
 8000870:	80031240 	call	8003124 <__fixunssfsi>
 8000874:	e0bfff8d 	sth	r2,-2(fp)
      (WORD)(((180633600.0f / 12500000.0f) - (float)int_divisor) * 2048.0f);
  printf("Programming PLL with integer divisor: %d, fractional divisor %d\n",
 8000878:	e0bfff03 	ldbu	r2,-4(fp)
 800087c:	e0ffff8b 	ldhu	r3,-2(fp)
 8000880:	180d883a 	mov	r6,r3
 8000884:	100b883a 	mov	r5,r2
 8000888:	01020074 	movhi	r4,2049
 800088c:	21236704 	addi	r4,r4,-29284
 8000890:	8003f300 	call	8003f30 <printf>
         int_divisor, frac_divisor);
  SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_PLL_CTRL,
                  int_divisor << SGTL5000_PLL_INT_DIV_SHIFT |
 8000894:	e0bfff03 	ldbu	r2,-4(fp)
 8000898:	100492fa 	slli	r2,r2,11
  BYTE int_divisor = 180633600 / 12500000;
  WORD frac_divisor =
      (WORD)(((180633600.0f / 12500000.0f) - (float)int_divisor) * 2048.0f);
  printf("Programming PLL with integer divisor: %d, fractional divisor %d\n",
         int_divisor, frac_divisor);
  SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_PLL_CTRL,
 800089c:	1007883a 	mov	r3,r2
 80008a0:	e0bfff8b 	ldhu	r2,-2(fp)
 80008a4:	1884b03a 	or	r2,r3,r2
 80008a8:	10bfffcc 	andi	r2,r2,65535
 80008ac:	100d883a 	mov	r6,r2
 80008b0:	01400c84 	movi	r5,50
 80008b4:	e13ffe17 	ldw	r4,-8(fp)
 80008b8:	80010780 	call	8001078 <SGTL5000_Reg_Wr>
                  int_divisor << SGTL5000_PLL_INT_DIV_SHIFT |
                      frac_divisor << SGTL5000_PLL_FRAC_DIV_SHIFT);
  printf("CHIP_PLL_CTRL register: %x\n",
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_PLL_CTRL));
 80008bc:	01400c84 	movi	r5,50
 80008c0:	e13ffe17 	ldw	r4,-8(fp)
 80008c4:	8000fc40 	call	8000fc4 <SGTL5000_Reg_Rd>
  printf("Programming PLL with integer divisor: %d, fractional divisor %d\n",
         int_divisor, frac_divisor);
  SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_PLL_CTRL,
                  int_divisor << SGTL5000_PLL_INT_DIV_SHIFT |
                      frac_divisor << SGTL5000_PLL_FRAC_DIV_SHIFT);
  printf("CHIP_PLL_CTRL register: %x\n",
 80008c8:	10bfffcc 	andi	r2,r2,65535
 80008cc:	100b883a 	mov	r5,r2
 80008d0:	01020074 	movhi	r4,2049
 80008d4:	21237804 	addi	r4,r4,-29216
 80008d8:	8003f300 	call	8003f30 <printf>
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_PLL_CTRL));

  // configure power control, disable internal VDDD, VDDIO=3.3V, VDDA=VDDD=1.8V
  // (ext)
  SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_POWER,
 80008dc:	01917f84 	movi	r6,17918
 80008e0:	01400c04 	movi	r5,48
 80008e4:	e13ffe17 	ldw	r4,-8(fp)
 80008e8:	80010780 	call	8001078 <SGTL5000_Reg_Wr>
                      SGTL5000_VCOAMP_POWERUP | SGTL5000_VAG_POWERUP |
                      SGTL5000_ADC_STEREO | SGTL5000_REFTOP_POWERUP |
                      SGTL5000_HP_POWERUP | SGTL5000_DAC_POWERUP |
                      SGTL5000_CAPLESS_HP_POWERUP | SGTL5000_ADC_POWERUP);
  printf("CHIP_ANA_POWER register: %x\n",
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_ANA_POWER));
 80008ec:	01400c04 	movi	r5,48
 80008f0:	e13ffe17 	ldw	r4,-8(fp)
 80008f4:	8000fc40 	call	8000fc4 <SGTL5000_Reg_Rd>
                  SGTL5000_DAC_STEREO | SGTL5000_PLL_POWERUP |
                      SGTL5000_VCOAMP_POWERUP | SGTL5000_VAG_POWERUP |
                      SGTL5000_ADC_STEREO | SGTL5000_REFTOP_POWERUP |
                      SGTL5000_HP_POWERUP | SGTL5000_DAC_POWERUP |
                      SGTL5000_CAPLESS_HP_POWERUP | SGTL5000_ADC_POWERUP);
  printf("CHIP_ANA_POWER register: %x\n",
 80008f8:	10bfffcc 	andi	r2,r2,65535
 80008fc:	100b883a 	mov	r5,r2
 8000900:	01020074 	movhi	r4,2049
 8000904:	21237f04 	addi	r4,r4,-29188
 8000908:	8003f300 	call	8003f30 <printf>
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_ANA_POWER));

  // select internal ground bias to .9V (1.8V/2)
  SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_REF_CTRL, 0x004E);
 800090c:	01801384 	movi	r6,78
 8000910:	01400a04 	movi	r5,40
 8000914:	e13ffe17 	ldw	r4,-8(fp)
 8000918:	80010780 	call	8001078 <SGTL5000_Reg_Wr>
  printf("CHIP_REF_CTRL register: %x\n",
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_REF_CTRL));
 800091c:	01400a04 	movi	r5,40
 8000920:	e13ffe17 	ldw	r4,-8(fp)
 8000924:	8000fc40 	call	8000fc4 <SGTL5000_Reg_Rd>
  printf("CHIP_ANA_POWER register: %x\n",
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_ANA_POWER));

  // select internal ground bias to .9V (1.8V/2)
  SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_REF_CTRL, 0x004E);
  printf("CHIP_REF_CTRL register: %x\n",
 8000928:	10bfffcc 	andi	r2,r2,65535
 800092c:	100b883a 	mov	r5,r2
 8000930:	01020074 	movhi	r4,2049
 8000934:	21238704 	addi	r4,r4,-29156
 8000938:	8003f300 	call	8003f30 <printf>
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_REF_CTRL));

  // enable core modules
  SGTL5000_Reg_Wr(
 800093c:	018018c4 	movi	r6,99
 8000940:	01400084 	movi	r5,2
 8000944:	e13ffe17 	ldw	r4,-8(fp)
 8000948:	80010780 	call	8001078 <SGTL5000_Reg_Wr>
      i2c_dev, SGTL5000_CHIP_DIG_POWER,
      SGTL5000_ADC_EN | SGTL5000_DAC_EN |
          // SGTL5000_DAP_POWERUP| //disable digital audio processor in CODEC
          SGTL5000_I2S_OUT_POWERUP | SGTL5000_I2S_IN_POWERUP);
  printf("CHIP_DIG_POWER register: %x\n",
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_DIG_POWER));
 800094c:	01400084 	movi	r5,2
 8000950:	e13ffe17 	ldw	r4,-8(fp)
 8000954:	8000fc40 	call	8000fc4 <SGTL5000_Reg_Rd>
  SGTL5000_Reg_Wr(
      i2c_dev, SGTL5000_CHIP_DIG_POWER,
      SGTL5000_ADC_EN | SGTL5000_DAC_EN |
          // SGTL5000_DAP_POWERUP| //disable digital audio processor in CODEC
          SGTL5000_I2S_OUT_POWERUP | SGTL5000_I2S_IN_POWERUP);
  printf("CHIP_DIG_POWER register: %x\n",
 8000958:	10bfffcc 	andi	r2,r2,65535
 800095c:	100b883a 	mov	r5,r2
 8000960:	01020074 	movhi	r4,2049
 8000964:	21238e04 	addi	r4,r4,-29128
 8000968:	8003f300 	call	8003f30 <printf>
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_DIG_POWER));

  // MCLK is 12.5 MHz, configure clocks to use PLL
  SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_CLK_CTRL,
 800096c:	018001c4 	movi	r6,7
 8000970:	01400104 	movi	r5,4
 8000974:	e13ffe17 	ldw	r4,-8(fp)
 8000978:	80010780 	call	8001078 <SGTL5000_Reg_Wr>
                  SGTL5000_SYS_FS_44_1k << SGTL5000_SYS_FS_SHIFT |
                      SGTL5000_MCLK_FREQ_PLL << SGTL5000_MCLK_FREQ_SHIFT);
  printf("CHIP_CLK_CTRL register: %x\n",
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_CLK_CTRL));
 800097c:	01400104 	movi	r5,4
 8000980:	e13ffe17 	ldw	r4,-8(fp)
 8000984:	8000fc40 	call	8000fc4 <SGTL5000_Reg_Rd>

  // MCLK is 12.5 MHz, configure clocks to use PLL
  SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_CLK_CTRL,
                  SGTL5000_SYS_FS_44_1k << SGTL5000_SYS_FS_SHIFT |
                      SGTL5000_MCLK_FREQ_PLL << SGTL5000_MCLK_FREQ_SHIFT);
  printf("CHIP_CLK_CTRL register: %x\n",
 8000988:	10bfffcc 	andi	r2,r2,65535
 800098c:	100b883a 	mov	r5,r2
 8000990:	01020074 	movhi	r4,2049
 8000994:	21239604 	addi	r4,r4,-29096
 8000998:	8003f300 	call	8003f30 <printf>
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_CLK_CTRL));

  // Set as I2S master
  SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_I2S_CTRL, SGTL5000_I2S_MASTER);
 800099c:	01802004 	movi	r6,128
 80009a0:	01400184 	movi	r5,6
 80009a4:	e13ffe17 	ldw	r4,-8(fp)
 80009a8:	80010780 	call	8001078 <SGTL5000_Reg_Wr>
  printf("CHIP_I2S_CTRL register: %x\n",
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_I2S_CTRL));
 80009ac:	01400184 	movi	r5,6
 80009b0:	e13ffe17 	ldw	r4,-8(fp)
 80009b4:	8000fc40 	call	8000fc4 <SGTL5000_Reg_Rd>
  printf("CHIP_CLK_CTRL register: %x\n",
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_CLK_CTRL));

  // Set as I2S master
  SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_I2S_CTRL, SGTL5000_I2S_MASTER);
  printf("CHIP_I2S_CTRL register: %x\n",
 80009b8:	10bfffcc 	andi	r2,r2,65535
 80009bc:	100b883a 	mov	r5,r2
 80009c0:	01020074 	movhi	r4,2049
 80009c4:	21239d04 	addi	r4,r4,-29068
 80009c8:	8003f300 	call	8003f30 <printf>
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_I2S_CTRL));

  // ADC input from Line
  SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_CTRL,
 80009cc:	01800104 	movi	r6,4
 80009d0:	01400904 	movi	r5,36
 80009d4:	e13ffe17 	ldw	r4,-8(fp)
 80009d8:	80010780 	call	8001078 <SGTL5000_Reg_Wr>
                  SGTL5000_ADC_SEL_LINE_IN << SGTL5000_ADC_SEL_SHIFT);
  printf("CHIP_ANA_CTRL register: %x\n",
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_ANA_CTRL));
 80009dc:	01400904 	movi	r5,36
 80009e0:	e13ffe17 	ldw	r4,-8(fp)
 80009e4:	8000fc40 	call	8000fc4 <SGTL5000_Reg_Rd>
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_I2S_CTRL));

  // ADC input from Line
  SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_CTRL,
                  SGTL5000_ADC_SEL_LINE_IN << SGTL5000_ADC_SEL_SHIFT);
  printf("CHIP_ANA_CTRL register: %x\n",
 80009e8:	10bfffcc 	andi	r2,r2,65535
 80009ec:	100b883a 	mov	r5,r2
 80009f0:	01020074 	movhi	r4,2049
 80009f4:	2123a404 	addi	r4,r4,-29040
 80009f8:	8003f300 	call	8003f30 <printf>
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_ANA_CTRL));

  // ADC -> I2S out, I2S in -> DAC
  SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_SSS_CTRL,
 80009fc:	01800404 	movi	r6,16
 8000a00:	01400284 	movi	r5,10
 8000a04:	e13ffe17 	ldw	r4,-8(fp)
 8000a08:	80010780 	call	8001078 <SGTL5000_Reg_Wr>
                  SGTL5000_DAC_SEL_I2S_IN << SGTL5000_DAC_SEL_SHIFT |
                      SGTL5000_I2S_OUT_SEL_ADC << SGTL5000_I2S_OUT_SEL_SHIFT);
  printf("CHIP_SSS_CTRL register: %x\n",
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_SSS_CTRL));
 8000a0c:	01400284 	movi	r5,10
 8000a10:	e13ffe17 	ldw	r4,-8(fp)
 8000a14:	8000fc40 	call	8000fc4 <SGTL5000_Reg_Rd>

  // ADC -> I2S out, I2S in -> DAC
  SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_SSS_CTRL,
                  SGTL5000_DAC_SEL_I2S_IN << SGTL5000_DAC_SEL_SHIFT |
                      SGTL5000_I2S_OUT_SEL_ADC << SGTL5000_I2S_OUT_SEL_SHIFT);
  printf("CHIP_SSS_CTRL register: %x\n",
 8000a18:	10bfffcc 	andi	r2,r2,65535
 8000a1c:	100b883a 	mov	r5,r2
 8000a20:	01020074 	movhi	r4,2049
 8000a24:	2123ab04 	addi	r4,r4,-29012
 8000a28:	8003f300 	call	8003f30 <printf>
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_SSS_CTRL));

  printf("CHIP_ANA_CTRL register: %x\n",
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_ANA_CTRL));
 8000a2c:	01400904 	movi	r5,36
 8000a30:	e13ffe17 	ldw	r4,-8(fp)
 8000a34:	8000fc40 	call	8000fc4 <SGTL5000_Reg_Rd>
                  SGTL5000_DAC_SEL_I2S_IN << SGTL5000_DAC_SEL_SHIFT |
                      SGTL5000_I2S_OUT_SEL_ADC << SGTL5000_I2S_OUT_SEL_SHIFT);
  printf("CHIP_SSS_CTRL register: %x\n",
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_SSS_CTRL));

  printf("CHIP_ANA_CTRL register: %x\n",
 8000a38:	10bfffcc 	andi	r2,r2,65535
 8000a3c:	100b883a 	mov	r5,r2
 8000a40:	01020074 	movhi	r4,2049
 8000a44:	2123a404 	addi	r4,r4,-29040
 8000a48:	8003f300 	call	8003f30 <printf>
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_ANA_CTRL));

  // ADC -> I2S out, I2S in -> DAC
  SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL, 0x0000);
 8000a4c:	000d883a 	mov	r6,zero
 8000a50:	01400384 	movi	r5,14
 8000a54:	e13ffe17 	ldw	r4,-8(fp)
 8000a58:	80010780 	call	8001078 <SGTL5000_Reg_Wr>
  printf("CHIP_ADCDAC_CTRL register: %x\n",
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL));
 8000a5c:	01400384 	movi	r5,14
 8000a60:	e13ffe17 	ldw	r4,-8(fp)
 8000a64:	8000fc40 	call	8000fc4 <SGTL5000_Reg_Rd>
  printf("CHIP_ANA_CTRL register: %x\n",
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_ANA_CTRL));

  // ADC -> I2S out, I2S in -> DAC
  SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL, 0x0000);
  printf("CHIP_ADCDAC_CTRL register: %x\n",
 8000a68:	10bfffcc 	andi	r2,r2,65535
 8000a6c:	100b883a 	mov	r5,r2
 8000a70:	01020074 	movhi	r4,2049
 8000a74:	2123b204 	addi	r4,r4,-28984
 8000a78:	8003f300 	call	8003f30 <printf>
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL));
  printf("CHIP_PAD_STRENGTH register: %x\n",
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_PAD_STRENGTH));
 8000a7c:	01400504 	movi	r5,20
 8000a80:	e13ffe17 	ldw	r4,-8(fp)
 8000a84:	8000fc40 	call	8000fc4 <SGTL5000_Reg_Rd>

  // ADC -> I2S out, I2S in -> DAC
  SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL, 0x0000);
  printf("CHIP_ADCDAC_CTRL register: %x\n",
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL));
  printf("CHIP_PAD_STRENGTH register: %x\n",
 8000a88:	10bfffcc 	andi	r2,r2,65535
 8000a8c:	100b883a 	mov	r5,r2
 8000a90:	01020074 	movhi	r4,2049
 8000a94:	2123ba04 	addi	r4,r4,-28952
 8000a98:	8003f300 	call	8003f30 <printf>
         SGTL5000_Reg_Rd(i2c_dev, SGTL5000_CHIP_PAD_STRENGTH));
}
 8000a9c:	e037883a 	mov	sp,fp
 8000aa0:	dfc00117 	ldw	ra,4(sp)
 8000aa4:	df000017 	ldw	fp,0(sp)
 8000aa8:	dec00204 	addi	sp,sp,8
 8000aac:	f800283a 	ret

08000ab0 <main>:

int main() {
 8000ab0:	defff504 	addi	sp,sp,-44
 8000ab4:	dfc00a15 	stw	ra,40(sp)
 8000ab8:	df000915 	stw	fp,36(sp)
 8000abc:	df000904 	addi	fp,sp,36
  SGTL5000_init();
 8000ac0:	80007b40 	call	80007b4 <SGTL5000_init>
  printf("SGTL5000 initialized!\n");
 8000ac4:	01020074 	movhi	r4,2049
 8000ac8:	2123c204 	addi	r4,r4,-28920
 8000acc:	80040200 	call	8004020 <puts>
  BYTE rcode;
  BOOT_MOUSE_REPORT buf; // USB mouse report
  BOOT_KBD_REPORT kbdbuf;

  BYTE runningdebugflag = 0; // flag to dump out a bunch of information when we
 8000ad0:	e03ff705 	stb	zero,-36(fp)
                             // first get to USB_STATE_RUNNING
  BYTE errorflag = 0; // flag once we get an error device so we don't keep
 8000ad4:	e03ff745 	stb	zero,-35(fp)
                      // dumping out state info
  BYTE device;
  WORD keycode;

  printf("initializing MAX3421E...\n");
 8000ad8:	01020074 	movhi	r4,2049
 8000adc:	2123c804 	addi	r4,r4,-28896
 8000ae0:	80040200 	call	8004020 <puts>
  MAX3421E_init();
 8000ae4:	80020940 	call	8002094 <MAX3421E_init>
  printf("initializing USB...\n");
 8000ae8:	01020074 	movhi	r4,2049
 8000aec:	2123cf04 	addi	r4,r4,-28868
 8000af0:	80040200 	call	8004020 <puts>
  USB_init();
 8000af4:	80028400 	call	8002840 <USB_init>

  BYTE HERO_X, HERO_Y;
  int cnt;
  cnt = 0;
 8000af8:	e03ff815 	stw	zero,-32(fp)

  while (1) {
    cnt = cnt + 1;
 8000afc:	e0bff817 	ldw	r2,-32(fp)
 8000b00:	10800044 	addi	r2,r2,1
 8000b04:	e0bff815 	stw	r2,-32(fp)
    HERO_X = cnt % 256;
 8000b08:	e0fff817 	ldw	r3,-32(fp)
 8000b0c:	00a00034 	movhi	r2,32768
 8000b10:	10803fc4 	addi	r2,r2,255
 8000b14:	1884703a 	and	r2,r3,r2
 8000b18:	1000040e 	bge	r2,zero,8000b2c <main+0x7c>
 8000b1c:	10bfffc4 	addi	r2,r2,-1
 8000b20:	00ffc004 	movi	r3,-256
 8000b24:	10c4b03a 	or	r2,r2,r3
 8000b28:	10800044 	addi	r2,r2,1
 8000b2c:	e0bffb05 	stb	r2,-20(fp)
    HERO_Y = 0x1000 + cnt % 64;
 8000b30:	e0fff817 	ldw	r3,-32(fp)
 8000b34:	00a00034 	movhi	r2,32768
 8000b38:	10800fc4 	addi	r2,r2,63
 8000b3c:	1884703a 	and	r2,r3,r2
 8000b40:	1000040e 	bge	r2,zero,8000b54 <main+0xa4>
 8000b44:	10bfffc4 	addi	r2,r2,-1
 8000b48:	00fff004 	movi	r3,-64
 8000b4c:	10c4b03a 	or	r2,r2,r3
 8000b50:	10800044 	addi	r2,r2,1
 8000b54:	e0bffb45 	stb	r2,-19(fp)
    setHERO(HERO_X, HERO_Y);
 8000b58:	e0bffb03 	ldbu	r2,-20(fp)
 8000b5c:	e0fffb43 	ldbu	r3,-19(fp)
 8000b60:	180b883a 	mov	r5,r3
 8000b64:	1009883a 	mov	r4,r2
 8000b68:	800045c0 	call	800045c <setHERO>
    if (cnt % 128 == 1) {
 8000b6c:	e0fff817 	ldw	r3,-32(fp)
 8000b70:	00a00034 	movhi	r2,32768
 8000b74:	10801fc4 	addi	r2,r2,127
 8000b78:	1884703a 	and	r2,r3,r2
 8000b7c:	1000040e 	bge	r2,zero,8000b90 <main+0xe0>
 8000b80:	10bfffc4 	addi	r2,r2,-1
 8000b84:	00ffe004 	movi	r3,-128
 8000b88:	10c4b03a 	or	r2,r2,r3
 8000b8c:	10800044 	addi	r2,r2,1
 8000b90:	10800058 	cmpnei	r2,r2,1
 8000b94:	1000191e 	bne	r2,zero,8000bfc <main+0x14c>
      for (int i = 0; i < 256; i = i + 1) {
 8000b98:	e03ff915 	stw	zero,-28(fp)
 8000b9c:	00001406 	br	8000bf0 <main+0x140>
        setMAP(i, cnt % 128 + i);
 8000ba0:	e0bff917 	ldw	r2,-28(fp)
 8000ba4:	11003fcc 	andi	r4,r2,255
 8000ba8:	e0fff817 	ldw	r3,-32(fp)
 8000bac:	00a00034 	movhi	r2,32768
 8000bb0:	10801fc4 	addi	r2,r2,127
 8000bb4:	1884703a 	and	r2,r3,r2
 8000bb8:	1000040e 	bge	r2,zero,8000bcc <main+0x11c>
 8000bbc:	10bfffc4 	addi	r2,r2,-1
 8000bc0:	00ffe004 	movi	r3,-128
 8000bc4:	10c4b03a 	or	r2,r2,r3
 8000bc8:	10800044 	addi	r2,r2,1
 8000bcc:	1007883a 	mov	r3,r2
 8000bd0:	e0bff917 	ldw	r2,-28(fp)
 8000bd4:	1885883a 	add	r2,r3,r2
 8000bd8:	10803fcc 	andi	r2,r2,255
 8000bdc:	100b883a 	mov	r5,r2
 8000be0:	8000f300 	call	8000f30 <setMAP>
    cnt = cnt + 1;
    HERO_X = cnt % 256;
    HERO_Y = 0x1000 + cnt % 64;
    setHERO(HERO_X, HERO_Y);
    if (cnt % 128 == 1) {
      for (int i = 0; i < 256; i = i + 1) {
 8000be4:	e0bff917 	ldw	r2,-28(fp)
 8000be8:	10800044 	addi	r2,r2,1
 8000bec:	e0bff915 	stw	r2,-28(fp)
 8000bf0:	e0bff917 	ldw	r2,-28(fp)
 8000bf4:	10804010 	cmplti	r2,r2,256
 8000bf8:	103fe91e 	bne	r2,zero,8000ba0 <__alt_data_end+0xfc000ba0>
        setMAP(i, cnt % 128 + i);
      }
    }
    if (cnt % 128 == 64) {
 8000bfc:	e0fff817 	ldw	r3,-32(fp)
 8000c00:	00a00034 	movhi	r2,32768
 8000c04:	10801fc4 	addi	r2,r2,127
 8000c08:	1884703a 	and	r2,r3,r2
 8000c0c:	1000040e 	bge	r2,zero,8000c20 <main+0x170>
 8000c10:	10bfffc4 	addi	r2,r2,-1
 8000c14:	00ffe004 	movi	r3,-128
 8000c18:	10c4b03a 	or	r2,r2,r3
 8000c1c:	10800044 	addi	r2,r2,1
 8000c20:	10801018 	cmpnei	r2,r2,64
 8000c24:	1000011e 	bne	r2,zero,8000c2c <main+0x17c>
    	clearMAP();
 8000c28:	8000f740 	call	8000f74 <clearMAP>
    }
    printf(".");
 8000c2c:	01000b84 	movi	r4,46
 8000c30:	8003f840 	call	8003f84 <putchar>
    USB_Task();
 8000c34:	80028d80 	call	80028d8 <USB_Task>
    // usleep (500000);
    BYTE TaskState = GetUsbTaskState();
 8000c38:	80030480 	call	8003048 <GetUsbTaskState>
 8000c3c:	e0bffb85 	stb	r2,-18(fp)
    if (TaskState == USB_STATE_RUNNING) {
 8000c40:	e0bffb83 	ldbu	r2,-18(fp)
 8000c44:	10801018 	cmpnei	r2,r2,64
 8000c48:	1000951e 	bne	r2,zero,8000ea0 <main+0x3f0>
      if (!runningdebugflag) {
 8000c4c:	e0bff703 	ldbu	r2,-36(fp)
 8000c50:	1000071e 	bne	r2,zero,8000c70 <main+0x1c0>
        runningdebugflag = 1;
 8000c54:	00800044 	movi	r2,1
 8000c58:	e0bff705 	stb	r2,-36(fp)
        setLED(9);
 8000c5c:	01000244 	movi	r4,9
 8000c60:	80004a40 	call	80004a4 <setLED>
        device = GetDriverandReport();
 8000c64:	800026c0 	call	800026c <GetDriverandReport>
 8000c68:	e0bff785 	stb	r2,-34(fp)
 8000c6c:	003fa306 	br	8000afc <__alt_data_end+0xfc000afc>
      } else if (device == 1) {
 8000c70:	e0bff783 	ldbu	r2,-34(fp)
 8000c74:	10800058 	cmpnei	r2,r2,1
 8000c78:	10002d1e 	bne	r2,zero,8000d30 <main+0x280>
        // run keyboard debug polling
        rcode = kbdPoll(&kbdbuf);
 8000c7c:	e0bffe04 	addi	r2,fp,-8
 8000c80:	1009883a 	mov	r4,r2
 8000c84:	80019f00 	call	80019f0 <kbdPoll>
 8000c88:	e0bffbc5 	stb	r2,-17(fp)
        if (rcode == hrNAK) {
 8000c8c:	e0bffbc3 	ldbu	r2,-17(fp)
 8000c90:	10800118 	cmpnei	r2,r2,4
 8000c94:	1000a226 	beq	r2,zero,8000f20 <main+0x470>
          continue; // NAK means no new data
        } else if (rcode) {
 8000c98:	e0bffbc3 	ldbu	r2,-17(fp)
 8000c9c:	10000926 	beq	r2,zero,8000cc4 <main+0x214>
          printf("Rcode: ");
 8000ca0:	01020074 	movhi	r4,2049
 8000ca4:	2123d404 	addi	r4,r4,-28848
 8000ca8:	8003f300 	call	8003f30 <printf>
          printf("%x \n", rcode);
 8000cac:	e0bffbc3 	ldbu	r2,-17(fp)
 8000cb0:	100b883a 	mov	r5,r2
 8000cb4:	01020074 	movhi	r4,2049
 8000cb8:	21233f04 	addi	r4,r4,-29444
 8000cbc:	8003f300 	call	8003f30 <printf>
          continue;
 8000cc0:	00009a06 	br	8000f2c <main+0x47c>
        }
        printf("keycodes: ");
 8000cc4:	01020074 	movhi	r4,2049
 8000cc8:	2123d604 	addi	r4,r4,-28840
 8000ccc:	8003f300 	call	8003f30 <printf>
        for (int i = 0; i < 6; i++) {
 8000cd0:	e03ffa15 	stw	zero,-24(fp)
 8000cd4:	00000c06 	br	8000d08 <main+0x258>
          printf("%x ", kbdbuf.keycode[i]);
 8000cd8:	e0fffe84 	addi	r3,fp,-6
 8000cdc:	e0bffa17 	ldw	r2,-24(fp)
 8000ce0:	1885883a 	add	r2,r3,r2
 8000ce4:	10800003 	ldbu	r2,0(r2)
 8000ce8:	10803fcc 	andi	r2,r2,255
 8000cec:	100b883a 	mov	r5,r2
 8000cf0:	01020074 	movhi	r4,2049
 8000cf4:	2123d904 	addi	r4,r4,-28828
 8000cf8:	8003f300 	call	8003f30 <printf>
          printf("Rcode: ");
          printf("%x \n", rcode);
          continue;
        }
        printf("keycodes: ");
        for (int i = 0; i < 6; i++) {
 8000cfc:	e0bffa17 	ldw	r2,-24(fp)
 8000d00:	10800044 	addi	r2,r2,1
 8000d04:	e0bffa15 	stw	r2,-24(fp)
 8000d08:	e0bffa17 	ldw	r2,-24(fp)
 8000d0c:	10800190 	cmplti	r2,r2,6
 8000d10:	103ff11e 	bne	r2,zero,8000cd8 <__alt_data_end+0xfc000cd8>
          printf("%x ", kbdbuf.keycode[i]);
                  }
          setKeycode(kbdbuf.keycode[0]);
 8000d14:	e0bffe83 	ldbu	r2,-6(fp)
 8000d18:	10803fcc 	andi	r2,r2,255
 8000d1c:	1009883a 	mov	r4,r2
 8000d20:	80007800 	call	8000780 <setKeycode>
          //        printSignedHex0(kbdbuf.keycode[0]);
          //        printSignedHex1(kbdbuf.keycode[1]);
          printf("\n");
 8000d24:	01000284 	movi	r4,10
 8000d28:	8003f840 	call	8003f84 <putchar>
 8000d2c:	003f7306 	br	8000afc <__alt_data_end+0xfc000afc>
        }
//        usleep(13000);
        else if (device == 2) {
 8000d30:	e0bff783 	ldbu	r2,-34(fp)
 8000d34:	10800098 	cmpnei	r2,r2,2
 8000d38:	103f701e 	bne	r2,zero,8000afc <__alt_data_end+0xfc000afc>
        rcode = mousePoll(&buf);
 8000d3c:	e0bffc04 	addi	r2,fp,-16
 8000d40:	1009883a 	mov	r4,r2
 8000d44:	80019680 	call	8001968 <mousePoll>
 8000d48:	e0bffbc5 	stb	r2,-17(fp)
        if (rcode == hrNAK) {
 8000d4c:	e0bffbc3 	ldbu	r2,-17(fp)
 8000d50:	10800118 	cmpnei	r2,r2,4
 8000d54:	10007426 	beq	r2,zero,8000f28 <main+0x478>
          // NAK means no new data
          continue;
        } else if (rcode) {
 8000d58:	e0bffbc3 	ldbu	r2,-17(fp)
 8000d5c:	10000926 	beq	r2,zero,8000d84 <main+0x2d4>
          printf("Rcode: ");
 8000d60:	01020074 	movhi	r4,2049
 8000d64:	2123d404 	addi	r4,r4,-28848
 8000d68:	8003f300 	call	8003f30 <printf>
          printf("%x \n", rcode);
 8000d6c:	e0bffbc3 	ldbu	r2,-17(fp)
 8000d70:	100b883a 	mov	r5,r2
 8000d74:	01020074 	movhi	r4,2049
 8000d78:	21233f04 	addi	r4,r4,-29444
 8000d7c:	8003f300 	call	8003f30 <printf>
          continue;
 8000d80:	00006a06 	br	8000f2c <main+0x47c>
        }
        printf("X displacement: ");
 8000d84:	01020074 	movhi	r4,2049
 8000d88:	2123da04 	addi	r4,r4,-28824
 8000d8c:	8003f300 	call	8003f30 <printf>
        printf("%d ", (signed char)buf.Xdispl);
 8000d90:	e0bffc43 	ldbu	r2,-15(fp)
 8000d94:	10803fcc 	andi	r2,r2,255
 8000d98:	1080201c 	xori	r2,r2,128
 8000d9c:	10bfe004 	addi	r2,r2,-128
 8000da0:	100b883a 	mov	r5,r2
 8000da4:	01020074 	movhi	r4,2049
 8000da8:	2123df04 	addi	r4,r4,-28804
 8000dac:	8003f300 	call	8003f30 <printf>
        printSignedHex0((signed char)buf.Xdispl);
 8000db0:	e0bffc43 	ldbu	r2,-15(fp)
 8000db4:	10803fcc 	andi	r2,r2,255
 8000db8:	1080201c 	xori	r2,r2,128
 8000dbc:	10bfe004 	addi	r2,r2,-128
 8000dc0:	1009883a 	mov	r4,r2
 8000dc4:	80005300 	call	8000530 <printSignedHex0>
        printf("Y displacement: ");
 8000dc8:	01020074 	movhi	r4,2049
 8000dcc:	2123e004 	addi	r4,r4,-28800
 8000dd0:	8003f300 	call	8003f30 <printf>
        printf("%d ", (signed char)buf.Ydispl);
 8000dd4:	e0bffc83 	ldbu	r2,-14(fp)
 8000dd8:	10803fcc 	andi	r2,r2,255
 8000ddc:	1080201c 	xori	r2,r2,128
 8000de0:	10bfe004 	addi	r2,r2,-128
 8000de4:	100b883a 	mov	r5,r2
 8000de8:	01020074 	movhi	r4,2049
 8000dec:	2123df04 	addi	r4,r4,-28804
 8000df0:	8003f300 	call	8003f30 <printf>
        printSignedHex1((signed char)buf.Ydispl);
 8000df4:	e0bffc83 	ldbu	r2,-14(fp)
 8000df8:	10803fcc 	andi	r2,r2,255
 8000dfc:	1080201c 	xori	r2,r2,128
 8000e00:	10bfe004 	addi	r2,r2,-128
 8000e04:	1009883a 	mov	r4,r2
 8000e08:	80006480 	call	8000648 <printSignedHex1>
        printf("Buttons: ");
 8000e0c:	01020074 	movhi	r4,2049
 8000e10:	2123e504 	addi	r4,r4,-28780
 8000e14:	8003f300 	call	8003f30 <printf>
        printf("%x\n", buf.button);
 8000e18:	e0bffc03 	ldbu	r2,-16(fp)
 8000e1c:	10803fcc 	andi	r2,r2,255
 8000e20:	100b883a 	mov	r5,r2
 8000e24:	01020074 	movhi	r4,2049
 8000e28:	2123e804 	addi	r4,r4,-28768
 8000e2c:	8003f300 	call	8003f30 <printf>
        if (buf.button & 0x04)
 8000e30:	e0bffc03 	ldbu	r2,-16(fp)
 8000e34:	10803fcc 	andi	r2,r2,255
 8000e38:	1080010c 	andi	r2,r2,4
 8000e3c:	10000326 	beq	r2,zero,8000e4c <main+0x39c>
          setLED(2);
 8000e40:	01000084 	movi	r4,2
 8000e44:	80004a40 	call	80004a4 <setLED>
 8000e48:	00000206 	br	8000e54 <main+0x3a4>
        else
          clearLED(2);
 8000e4c:	01000084 	movi	r4,2
 8000e50:	80004e80 	call	80004e8 <clearLED>
        if (buf.button & 0x02)
 8000e54:	e0bffc03 	ldbu	r2,-16(fp)
 8000e58:	10803fcc 	andi	r2,r2,255
 8000e5c:	1080008c 	andi	r2,r2,2
 8000e60:	10000326 	beq	r2,zero,8000e70 <main+0x3c0>
          setLED(1);
 8000e64:	01000044 	movi	r4,1
 8000e68:	80004a40 	call	80004a4 <setLED>
 8000e6c:	00000206 	br	8000e78 <main+0x3c8>
        else
          clearLED(1);
 8000e70:	01000044 	movi	r4,1
 8000e74:	80004e80 	call	80004e8 <clearLED>
        if (buf.button & 0x01)
 8000e78:	e0bffc03 	ldbu	r2,-16(fp)
 8000e7c:	10803fcc 	andi	r2,r2,255
 8000e80:	1080004c 	andi	r2,r2,1
 8000e84:	10000326 	beq	r2,zero,8000e94 <main+0x3e4>
          setLED(0);
 8000e88:	0009883a 	mov	r4,zero
 8000e8c:	80004a40 	call	80004a4 <setLED>
 8000e90:	003f1a06 	br	8000afc <__alt_data_end+0xfc000afc>
        else
          clearLED(0);
 8000e94:	0009883a 	mov	r4,zero
 8000e98:	80004e80 	call	80004e8 <clearLED>
 8000e9c:	003f1706 	br	8000afc <__alt_data_end+0xfc000afc>
      }
    } else if (GetUsbTaskState() == USB_STATE_ERROR) {
 8000ea0:	80030480 	call	8003048 <GetUsbTaskState>
 8000ea4:	10803fcc 	andi	r2,r2,255
 8000ea8:	10803fd8 	cmpnei	r2,r2,255
 8000eac:	10000a1e 	bne	r2,zero,8000ed8 <main+0x428>
      if (!errorflag) {
 8000eb0:	e0bff743 	ldbu	r2,-35(fp)
 8000eb4:	103f111e 	bne	r2,zero,8000afc <__alt_data_end+0xfc000afc>
        errorflag = 1;
 8000eb8:	00800044 	movi	r2,1
 8000ebc:	e0bff745 	stb	r2,-35(fp)
        clearLED(9);
 8000ec0:	01000244 	movi	r4,9
 8000ec4:	80004e80 	call	80004e8 <clearLED>
        printf("USB Error State\n");
 8000ec8:	01020074 	movhi	r4,2049
 8000ecc:	2123e904 	addi	r4,r4,-28764
 8000ed0:	80040200 	call	8004020 <puts>
 8000ed4:	003f0906 	br	8000afc <__alt_data_end+0xfc000afc>
        // print out string descriptor here
      }
    } else // not in USB running state
    {

      printf("USB task state: ");
 8000ed8:	01020074 	movhi	r4,2049
 8000edc:	2123ed04 	addi	r4,r4,-28748
 8000ee0:	8003f300 	call	8003f30 <printf>
      printf("%x\n", GetUsbTaskState());
 8000ee4:	80030480 	call	8003048 <GetUsbTaskState>
 8000ee8:	10803fcc 	andi	r2,r2,255
 8000eec:	100b883a 	mov	r5,r2
 8000ef0:	01020074 	movhi	r4,2049
 8000ef4:	2123e804 	addi	r4,r4,-28768
 8000ef8:	8003f300 	call	8003f30 <printf>
      if (runningdebugflag) { // previously running, reset USB hardware just
 8000efc:	e0bff703 	ldbu	r2,-36(fp)
 8000f00:	10000326 	beq	r2,zero,8000f10 <main+0x460>
                              // to clear out any funky state, HS/FS etc
        runningdebugflag = 0;
 8000f04:	e03ff705 	stb	zero,-36(fp)
        MAX3421E_init();
 8000f08:	80020940 	call	8002094 <MAX3421E_init>
        USB_init();
 8000f0c:	80028400 	call	8002840 <USB_init>
      }
      errorflag = 0;
 8000f10:	e03ff745 	stb	zero,-35(fp)
      clearLED(9);
 8000f14:	01000244 	movi	r4,9
 8000f18:	80004e80 	call	80004e8 <clearLED>
 8000f1c:	003ef706 	br	8000afc <__alt_data_end+0xfc000afc>
        device = GetDriverandReport();
      } else if (device == 1) {
        // run keyboard debug polling
        rcode = kbdPoll(&kbdbuf);
        if (rcode == hrNAK) {
          continue; // NAK means no new data
 8000f20:	0001883a 	nop
 8000f24:	003ef506 	br	8000afc <__alt_data_end+0xfc000afc>
//        usleep(13000);
        else if (device == 2) {
        rcode = mousePoll(&buf);
        if (rcode == hrNAK) {
          // NAK means no new data
          continue;
 8000f28:	0001883a 	nop
        USB_init();
      }
      errorflag = 0;
      clearLED(9);
    }
  }
 8000f2c:	003ef306 	br	8000afc <__alt_data_end+0xfc000afc>

08000f30 <setMAP>:
#include "map_ram.h"
#include <alt_types.h>

void setMAP(BYTE ADDR, BYTE TILE_INDEX) {
 8000f30:	defffd04 	addi	sp,sp,-12
 8000f34:	df000215 	stw	fp,8(sp)
 8000f38:	df000204 	addi	fp,sp,8
 8000f3c:	2007883a 	mov	r3,r4
 8000f40:	2805883a 	mov	r2,r5
 8000f44:	e0fffe05 	stb	r3,-8(fp)
 8000f48:	e0bfff05 	stb	r2,-4(fp)
    map_ram_ctrl->DATA[ADDR] = TILE_INDEX;
 8000f4c:	d0e00217 	ldw	r3,-32760(gp)
 8000f50:	e0bffe03 	ldbu	r2,-8(fp)
 8000f54:	1885883a 	add	r2,r3,r2
 8000f58:	e0ffff03 	ldbu	r3,-4(fp)
 8000f5c:	10c00005 	stb	r3,0(r2)
}
 8000f60:	0001883a 	nop
 8000f64:	e037883a 	mov	sp,fp
 8000f68:	df000017 	ldw	fp,0(sp)
 8000f6c:	dec00104 	addi	sp,sp,4
 8000f70:	f800283a 	ret

08000f74 <clearMAP>:

void clearMAP() {
 8000f74:	defffe04 	addi	sp,sp,-8
 8000f78:	df000115 	stw	fp,4(sp)
 8000f7c:	df000104 	addi	fp,sp,4
	for (int i = 0; i<(ROWS*COLUMNS); i++)
 8000f80:	e03fff15 	stw	zero,-4(fp)
 8000f84:	00000706 	br	8000fa4 <clearMAP+0x30>
	{
		map_ram_ctrl->DATA[i] = 0x0000;
 8000f88:	d0e00217 	ldw	r3,-32760(gp)
 8000f8c:	e0bfff17 	ldw	r2,-4(fp)
 8000f90:	1885883a 	add	r2,r3,r2
 8000f94:	10000005 	stb	zero,0(r2)
void setMAP(BYTE ADDR, BYTE TILE_INDEX) {
    map_ram_ctrl->DATA[ADDR] = TILE_INDEX;
}

void clearMAP() {
	for (int i = 0; i<(ROWS*COLUMNS); i++)
 8000f98:	e0bfff17 	ldw	r2,-4(fp)
 8000f9c:	10800044 	addi	r2,r2,1
 8000fa0:	e0bfff15 	stw	r2,-4(fp)
 8000fa4:	e0bfff17 	ldw	r2,-4(fp)
 8000fa8:	10804010 	cmplti	r2,r2,256
 8000fac:	103ff61e 	bne	r2,zero,8000f88 <__alt_data_end+0xfc000f88>
	{
		map_ram_ctrl->DATA[i] = 0x0000;
	}
}
 8000fb0:	0001883a 	nop
 8000fb4:	e037883a 	mov	sp,fp
 8000fb8:	df000017 	ldw	fp,0(sp)
 8000fbc:	dec00104 	addi	sp,sp,4
 8000fc0:	f800283a 	ret

08000fc4 <SGTL5000_Reg_Rd>:
#include "sgtl5000.h"
#include "altera_avalon_i2c.h"
#include "altera_avalon_i2c_regs.h"

WORD SGTL5000_Reg_Rd (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR)
{
 8000fc4:	defff804 	addi	sp,sp,-32
 8000fc8:	dfc00715 	stw	ra,28(sp)
 8000fcc:	df000615 	stw	fp,24(sp)
 8000fd0:	df000604 	addi	fp,sp,24
 8000fd4:	e13ffe15 	stw	r4,-8(fp)
 8000fd8:	2805883a 	mov	r2,r5
 8000fdc:	e0bfff0d 	sth	r2,-4(fp)
	BYTE buffer[2];
	WORD value;
	buffer[0] = (ADDR & 0xFF00) >> 8;
 8000fe0:	e0bfff0b 	ldhu	r2,-4(fp)
 8000fe4:	1004d23a 	srli	r2,r2,8
 8000fe8:	e0bffd85 	stb	r2,-10(fp)
	buffer[1] = (ADDR & 0x00FF);
 8000fec:	e0bfff0b 	ldhu	r2,-4(fp)
 8000ff0:	e0bffdc5 	stb	r2,-9(fp)

	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx_rx(dev,buffer,2,buffer,2,0);
 8000ff4:	e13ffd84 	addi	r4,fp,-10
 8000ff8:	e0fffd84 	addi	r3,fp,-10
 8000ffc:	d8000115 	stw	zero,4(sp)
 8001000:	00800084 	movi	r2,2
 8001004:	d8800015 	stw	r2,0(sp)
 8001008:	200f883a 	mov	r7,r4
 800100c:	01800084 	movi	r6,2
 8001010:	180b883a 	mov	r5,r3
 8001014:	e13ffe17 	ldw	r4,-8(fp)
 8001018:	8005c4c0 	call	8005c4c <alt_avalon_i2c_master_tx_rx>
 800101c:	e0bffc15 	stw	r2,-16(fp)

	if (status != ALT_AVALON_I2C_SUCCESS){
 8001020:	e0bffc17 	ldw	r2,-16(fp)
 8001024:	10000626 	beq	r2,zero,8001040 <SGTL5000_Reg_Rd+0x7c>
		printf ("SGTL5000 I2C error, address: %x", ADDR);
 8001028:	e0bfff0b 	ldhu	r2,-4(fp)
 800102c:	100b883a 	mov	r5,r2
 8001030:	01020074 	movhi	r4,2049
 8001034:	2123f204 	addi	r4,r4,-28728
 8001038:	8003f300 	call	8003f30 <printf>
		while (1)
		{
			//hang here
		}
 800103c:	003fff06 	br	800103c <__alt_data_end+0xfc00103c>
	}
	value = (buffer[0] << 8) | buffer[1];
 8001040:	e0bffd83 	ldbu	r2,-10(fp)
 8001044:	10803fcc 	andi	r2,r2,255
 8001048:	1004923a 	slli	r2,r2,8
 800104c:	1007883a 	mov	r3,r2
 8001050:	e0bffdc3 	ldbu	r2,-9(fp)
 8001054:	10803fcc 	andi	r2,r2,255
 8001058:	1884b03a 	or	r2,r3,r2
 800105c:	e0bffd0d 	sth	r2,-12(fp)
	return value;
 8001060:	e0bffd0b 	ldhu	r2,-12(fp)
}
 8001064:	e037883a 	mov	sp,fp
 8001068:	dfc00117 	ldw	ra,4(sp)
 800106c:	df000017 	ldw	fp,0(sp)
 8001070:	dec00204 	addi	sp,sp,8
 8001074:	f800283a 	ret

08001078 <SGTL5000_Reg_Wr>:

WORD SGTL5000_Reg_Wr (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR, WORD DATA)
{
 8001078:	defff904 	addi	sp,sp,-28
 800107c:	dfc00615 	stw	ra,24(sp)
 8001080:	df000515 	stw	fp,20(sp)
 8001084:	df000504 	addi	fp,sp,20
 8001088:	e13ffd15 	stw	r4,-12(fp)
 800108c:	2807883a 	mov	r3,r5
 8001090:	3005883a 	mov	r2,r6
 8001094:	e0fffe0d 	sth	r3,-8(fp)
 8001098:	e0bfff0d 	sth	r2,-4(fp)
	BYTE buffer[4];
	buffer[0] = (ADDR & 0xFF00) >> 8;
 800109c:	e0bffe0b 	ldhu	r2,-8(fp)
 80010a0:	1004d23a 	srli	r2,r2,8
 80010a4:	e0bffc05 	stb	r2,-16(fp)
	buffer[1] = (ADDR & 0x00FF);
 80010a8:	e0bffe0b 	ldhu	r2,-8(fp)
 80010ac:	e0bffc45 	stb	r2,-15(fp)
	buffer[2] = (DATA & 0xFF00) >> 8;
 80010b0:	e0bfff0b 	ldhu	r2,-4(fp)
 80010b4:	1004d23a 	srli	r2,r2,8
 80010b8:	e0bffc85 	stb	r2,-14(fp)
	buffer[3] = (DATA & 0x00FF);
 80010bc:	e0bfff0b 	ldhu	r2,-4(fp)
 80010c0:	e0bffcc5 	stb	r2,-13(fp)


	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx(dev,buffer,4,0);
 80010c4:	e0bffc04 	addi	r2,fp,-16
 80010c8:	000f883a 	mov	r7,zero
 80010cc:	01800104 	movi	r6,4
 80010d0:	100b883a 	mov	r5,r2
 80010d4:	e13ffd17 	ldw	r4,-12(fp)
 80010d8:	8005a280 	call	8005a28 <alt_avalon_i2c_master_tx>
 80010dc:	e0bffb15 	stw	r2,-20(fp)

	if (status != ALT_AVALON_I2C_SUCCESS){
 80010e0:	e0bffb17 	ldw	r2,-20(fp)
 80010e4:	10000626 	beq	r2,zero,8001100 <SGTL5000_Reg_Wr+0x88>
		printf ("SGTL5000 I2C error, address: %x", ADDR);
 80010e8:	e0bffe0b 	ldhu	r2,-8(fp)
 80010ec:	100b883a 	mov	r5,r2
 80010f0:	01020074 	movhi	r4,2049
 80010f4:	2123f204 	addi	r4,r4,-28728
 80010f8:	8003f300 	call	8003f30 <printf>
		while (1)
		{
			//hang here
		}
 80010fc:	003fff06 	br	80010fc <__alt_data_end+0xfc0010fc>
	}
	return DATA;
 8001100:	e0bfff0b 	ldhu	r2,-4(fp)
}
 8001104:	e037883a 	mov	sp,fp
 8001108:	dfc00117 	ldw	ra,4(sp)
 800110c:	df000017 	ldw	fp,0(sp)
 8001110:	dec00204 	addi	sp,sp,8
 8001114:	f800283a 	ret

08001118 <HIDMProbe>:
 8001118:	defff204 	addi	sp,sp,-56
 800111c:	dfc00d15 	stw	ra,52(sp)
 8001120:	df000c15 	stw	fp,48(sp)
 8001124:	df000c04 	addi	fp,sp,48
 8001128:	2005883a 	mov	r2,r4
 800112c:	e17fff15 	stw	r5,-4(fp)
 8001130:	e0bffe05 	stb	r2,-8(fp)
 8001134:	00820074 	movhi	r2,2049
 8001138:	10ae6304 	addi	r2,r2,-18036
 800113c:	e0bffa15 	stw	r2,-24(fp)
 8001140:	00820074 	movhi	r2,2049
 8001144:	10ae6304 	addi	r2,r2,-18036
 8001148:	e0bffb15 	stw	r2,-20(fp)
 800114c:	e0fffe03 	ldbu	r3,-8(fp)
 8001150:	00820074 	movhi	r2,2049
 8001154:	10ae6304 	addi	r2,r2,-18036
 8001158:	d8800415 	stw	r2,16(sp)
 800115c:	00800244 	movi	r2,9
 8001160:	d8800315 	stw	r2,12(sp)
 8001164:	d8000215 	stw	zero,8(sp)
 8001168:	00800084 	movi	r2,2
 800116c:	d8800115 	stw	r2,4(sp)
 8001170:	d8000015 	stw	zero,0(sp)
 8001174:	01c00184 	movi	r7,6
 8001178:	01802004 	movi	r6,128
 800117c:	000b883a 	mov	r5,zero
 8001180:	1809883a 	mov	r4,r3
 8001184:	800228c0 	call	800228c <XferCtrlReq>
 8001188:	e0bffc05 	stb	r2,-16(fp)
 800118c:	e0bffc03 	ldbu	r2,-16(fp)
 8001190:	10000226 	beq	r2,zero,800119c <HIDMProbe+0x84>
 8001194:	0005883a 	mov	r2,zero
 8001198:	0000dc06 	br	800150c <HIDMProbe+0x3f4>
 800119c:	e0bffa17 	ldw	r2,-24(fp)
 80011a0:	1080008b 	ldhu	r2,2(r2)
 80011a4:	10bfffcc 	andi	r2,r2,65535
 80011a8:	10804070 	cmpltui	r2,r2,257
 80011ac:	1000031e 	bne	r2,zero,80011bc <HIDMProbe+0xa4>
 80011b0:	00804004 	movi	r2,256
 80011b4:	e0bff90d 	sth	r2,-28(fp)
 80011b8:	00000306 	br	80011c8 <HIDMProbe+0xb0>
 80011bc:	e0bffa17 	ldw	r2,-24(fp)
 80011c0:	1080008b 	ldhu	r2,2(r2)
 80011c4:	e0bff90d 	sth	r2,-28(fp)
 80011c8:	e13ffe03 	ldbu	r4,-8(fp)
 80011cc:	e0fff90b 	ldhu	r3,-28(fp)
 80011d0:	00820074 	movhi	r2,2049
 80011d4:	10ae6304 	addi	r2,r2,-18036
 80011d8:	d8800415 	stw	r2,16(sp)
 80011dc:	d8c00315 	stw	r3,12(sp)
 80011e0:	d8000215 	stw	zero,8(sp)
 80011e4:	00800084 	movi	r2,2
 80011e8:	d8800115 	stw	r2,4(sp)
 80011ec:	d8000015 	stw	zero,0(sp)
 80011f0:	01c00184 	movi	r7,6
 80011f4:	01802004 	movi	r6,128
 80011f8:	000b883a 	mov	r5,zero
 80011fc:	800228c0 	call	800228c <XferCtrlReq>
 8001200:	e0bffc05 	stb	r2,-16(fp)
 8001204:	e0bffc03 	ldbu	r2,-16(fp)
 8001208:	10000226 	beq	r2,zero,8001214 <HIDMProbe+0xfc>
 800120c:	0005883a 	mov	r2,zero
 8001210:	0000be06 	br	800150c <HIDMProbe+0x3f4>
 8001214:	e0bffa17 	ldw	r2,-24(fp)
 8001218:	10800143 	ldbu	r2,5(r2)
 800121c:	e0bffc45 	stb	r2,-15(fp)
 8001220:	0000b306 	br	80014f0 <HIDMProbe+0x3d8>
 8001224:	e0bffa17 	ldw	r2,-24(fp)
 8001228:	10800043 	ldbu	r2,1(r2)
 800122c:	10803fcc 	andi	r2,r2,255
 8001230:	10800120 	cmpeqi	r2,r2,4
 8001234:	1000091e 	bne	r2,zero,800125c <HIDMProbe+0x144>
 8001238:	e0bffa17 	ldw	r2,-24(fp)
 800123c:	10800003 	ldbu	r2,0(r2)
 8001240:	10803fcc 	andi	r2,r2,255
 8001244:	e0fffb17 	ldw	r3,-20(fp)
 8001248:	1885883a 	add	r2,r3,r2
 800124c:	e0bffb15 	stw	r2,-20(fp)
 8001250:	e0bffb17 	ldw	r2,-20(fp)
 8001254:	e0bffa15 	stw	r2,-24(fp)
 8001258:	0000a506 	br	80014f0 <HIDMProbe+0x3d8>
 800125c:	e0bffa17 	ldw	r2,-24(fp)
 8001260:	10800143 	ldbu	r2,5(r2)
 8001264:	e0bffc85 	stb	r2,-14(fp)
 8001268:	e0bffa17 	ldw	r2,-24(fp)
 800126c:	10800183 	ldbu	r2,6(r2)
 8001270:	e0bffcc5 	stb	r2,-13(fp)
 8001274:	e0bffa17 	ldw	r2,-24(fp)
 8001278:	108001c3 	ldbu	r2,7(r2)
 800127c:	e0bffd05 	stb	r2,-12(fp)
 8001280:	e0bffc83 	ldbu	r2,-14(fp)
 8001284:	108000d8 	cmpnei	r2,r2,3
 8001288:	1000971e 	bne	r2,zero,80014e8 <HIDMProbe+0x3d0>
 800128c:	e0bffcc3 	ldbu	r2,-13(fp)
 8001290:	10800058 	cmpnei	r2,r2,1
 8001294:	1000941e 	bne	r2,zero,80014e8 <HIDMProbe+0x3d0>
 8001298:	e0bffd03 	ldbu	r2,-12(fp)
 800129c:	10800098 	cmpnei	r2,r2,2
 80012a0:	1000911e 	bne	r2,zero,80014e8 <HIDMProbe+0x3d0>
 80012a4:	e0fffe03 	ldbu	r3,-8(fp)
 80012a8:	00820074 	movhi	r2,2049
 80012ac:	10aea304 	addi	r2,r2,-17780
 80012b0:	180690fa 	slli	r3,r3,3
 80012b4:	10c5883a 	add	r2,r2,r3
 80012b8:	10800104 	addi	r2,r2,4
 80012bc:	00c00084 	movi	r3,2
 80012c0:	10c00005 	stb	r3,0(r2)
 80012c4:	e0fffe03 	ldbu	r3,-8(fp)
 80012c8:	00820074 	movhi	r2,2049
 80012cc:	10aea304 	addi	r2,r2,-17780
 80012d0:	180690fa 	slli	r3,r3,3
 80012d4:	10c5883a 	add	r2,r2,r3
 80012d8:	10800017 	ldw	r2,0(r2)
 80012dc:	1080008b 	ldhu	r2,2(r2)
 80012e0:	e0bffd45 	stb	r2,-11(fp)
 80012e4:	80019280 	call	8001928 <HID_init>
 80012e8:	e0fffe03 	ldbu	r3,-8(fp)
 80012ec:	00820074 	movhi	r2,2049
 80012f0:	10aea304 	addi	r2,r2,-17780
 80012f4:	180690fa 	slli	r3,r3,3
 80012f8:	10c7883a 	add	r3,r2,r3
 80012fc:	00820074 	movhi	r2,2049
 8001300:	10ae5904 	addi	r2,r2,-18076
 8001304:	18800015 	stw	r2,0(r3)
 8001308:	e0fffe03 	ldbu	r3,-8(fp)
 800130c:	00820074 	movhi	r2,2049
 8001310:	10aea304 	addi	r2,r2,-17780
 8001314:	180690fa 	slli	r3,r3,3
 8001318:	10c5883a 	add	r2,r2,r3
 800131c:	10800017 	ldw	r2,0(r2)
 8001320:	e0fffd43 	ldbu	r3,-11(fp)
 8001324:	10c0008d 	sth	r3,2(r2)
 8001328:	e0bffa17 	ldw	r2,-24(fp)
 800132c:	10800083 	ldbu	r2,2(r2)
 8001330:	d0a4fa45 	stb	r2,-27671(gp)
 8001334:	e0bffe03 	ldbu	r2,-8(fp)
 8001338:	d0a4fa05 	stb	r2,-27672(gp)
 800133c:	e0bffa17 	ldw	r2,-24(fp)
 8001340:	10800003 	ldbu	r2,0(r2)
 8001344:	10803fcc 	andi	r2,r2,255
 8001348:	e0fffb17 	ldw	r3,-20(fp)
 800134c:	1885883a 	add	r2,r3,r2
 8001350:	e0bffb15 	stw	r2,-20(fp)
 8001354:	e0bffb17 	ldw	r2,-20(fp)
 8001358:	e0bffa15 	stw	r2,-24(fp)
 800135c:	00005b06 	br	80014cc <HIDMProbe+0x3b4>
 8001360:	e0bffa17 	ldw	r2,-24(fp)
 8001364:	10800043 	ldbu	r2,1(r2)
 8001368:	10803fcc 	andi	r2,r2,255
 800136c:	10800160 	cmpeqi	r2,r2,5
 8001370:	1000091e 	bne	r2,zero,8001398 <HIDMProbe+0x280>
 8001374:	e0bffa17 	ldw	r2,-24(fp)
 8001378:	10800003 	ldbu	r2,0(r2)
 800137c:	10803fcc 	andi	r2,r2,255
 8001380:	e0fffb17 	ldw	r3,-20(fp)
 8001384:	1885883a 	add	r2,r3,r2
 8001388:	e0bffb15 	stw	r2,-20(fp)
 800138c:	e0bffb17 	ldw	r2,-20(fp)
 8001390:	e0bffa15 	stw	r2,-24(fp)
 8001394:	00004d06 	br	80014cc <HIDMProbe+0x3b4>
 8001398:	e0fffe03 	ldbu	r3,-8(fp)
 800139c:	00820074 	movhi	r2,2049
 80013a0:	10aea304 	addi	r2,r2,-17780
 80013a4:	180690fa 	slli	r3,r3,3
 80013a8:	10c5883a 	add	r2,r2,r3
 80013ac:	10800017 	ldw	r2,0(r2)
 80013b0:	10800204 	addi	r2,r2,8
 80013b4:	e0fffa17 	ldw	r3,-24(fp)
 80013b8:	18c00083 	ldbu	r3,2(r3)
 80013bc:	10c00005 	stb	r3,0(r2)
 80013c0:	e0fffe03 	ldbu	r3,-8(fp)
 80013c4:	00820074 	movhi	r2,2049
 80013c8:	10aea304 	addi	r2,r2,-17780
 80013cc:	180690fa 	slli	r3,r3,3
 80013d0:	10c5883a 	add	r2,r2,r3
 80013d4:	10800017 	ldw	r2,0(r2)
 80013d8:	10800204 	addi	r2,r2,8
 80013dc:	e0fffa17 	ldw	r3,-24(fp)
 80013e0:	18c000c3 	ldbu	r3,3(r3)
 80013e4:	10c00045 	stb	r3,1(r2)
 80013e8:	e0fffe03 	ldbu	r3,-8(fp)
 80013ec:	00820074 	movhi	r2,2049
 80013f0:	10aea304 	addi	r2,r2,-17780
 80013f4:	180690fa 	slli	r3,r3,3
 80013f8:	10c5883a 	add	r2,r2,r3
 80013fc:	10800017 	ldw	r2,0(r2)
 8001400:	10800204 	addi	r2,r2,8
 8001404:	e0fffa17 	ldw	r3,-24(fp)
 8001408:	18c0010b 	ldhu	r3,4(r3)
 800140c:	10c0008d 	sth	r3,2(r2)
 8001410:	e0fffe03 	ldbu	r3,-8(fp)
 8001414:	00820074 	movhi	r2,2049
 8001418:	10aea304 	addi	r2,r2,-17780
 800141c:	180690fa 	slli	r3,r3,3
 8001420:	10c5883a 	add	r2,r2,r3
 8001424:	10800017 	ldw	r2,0(r2)
 8001428:	10800204 	addi	r2,r2,8
 800142c:	e0fffa17 	ldw	r3,-24(fp)
 8001430:	18c00183 	ldbu	r3,6(r3)
 8001434:	10c00105 	stb	r3,4(r2)
 8001438:	e0fffe03 	ldbu	r3,-8(fp)
 800143c:	e0bffc43 	ldbu	r2,-15(fp)
 8001440:	d8000415 	stw	zero,16(sp)
 8001444:	d8000315 	stw	zero,12(sp)
 8001448:	d8000215 	stw	zero,8(sp)
 800144c:	d8000115 	stw	zero,4(sp)
 8001450:	d8800015 	stw	r2,0(sp)
 8001454:	01c00244 	movi	r7,9
 8001458:	000d883a 	mov	r6,zero
 800145c:	000b883a 	mov	r5,zero
 8001460:	1809883a 	mov	r4,r3
 8001464:	800228c0 	call	800228c <XferCtrlReq>
 8001468:	e0bffc05 	stb	r2,-16(fp)
 800146c:	e0bffc03 	ldbu	r2,-16(fp)
 8001470:	10000226 	beq	r2,zero,800147c <HIDMProbe+0x364>
 8001474:	0005883a 	mov	r2,zero
 8001478:	00002406 	br	800150c <HIDMProbe+0x3f4>
 800147c:	e0fffe03 	ldbu	r3,-8(fp)
 8001480:	d0a4fa43 	ldbu	r2,-27671(gp)
 8001484:	10803fcc 	andi	r2,r2,255
 8001488:	d8000415 	stw	zero,16(sp)
 800148c:	d8000315 	stw	zero,12(sp)
 8001490:	d8800215 	stw	r2,8(sp)
 8001494:	d8000115 	stw	zero,4(sp)
 8001498:	d8000015 	stw	zero,0(sp)
 800149c:	01c002c4 	movi	r7,11
 80014a0:	01800844 	movi	r6,33
 80014a4:	000b883a 	mov	r5,zero
 80014a8:	1809883a 	mov	r4,r3
 80014ac:	800228c0 	call	800228c <XferCtrlReq>
 80014b0:	e0bffc05 	stb	r2,-16(fp)
 80014b4:	e0bffc03 	ldbu	r2,-16(fp)
 80014b8:	10000226 	beq	r2,zero,80014c4 <HIDMProbe+0x3ac>
 80014bc:	0005883a 	mov	r2,zero
 80014c0:	00001206 	br	800150c <HIDMProbe+0x3f4>
 80014c4:	00800044 	movi	r2,1
 80014c8:	00001006 	br	800150c <HIDMProbe+0x3f4>
 80014cc:	e0fff90b 	ldhu	r3,-28(fp)
 80014d0:	00820074 	movhi	r2,2049
 80014d4:	10ae6304 	addi	r2,r2,-18036
 80014d8:	1885883a 	add	r2,r3,r2
 80014dc:	e0fffb17 	ldw	r3,-20(fp)
 80014e0:	18bf9f36 	bltu	r3,r2,8001360 <__alt_data_end+0xfc001360>
 80014e4:	00000206 	br	80014f0 <HIDMProbe+0x3d8>
 80014e8:	0005883a 	mov	r2,zero
 80014ec:	00000706 	br	800150c <HIDMProbe+0x3f4>
 80014f0:	e0fff90b 	ldhu	r3,-28(fp)
 80014f4:	00820074 	movhi	r2,2049
 80014f8:	10ae6304 	addi	r2,r2,-18036
 80014fc:	1885883a 	add	r2,r3,r2
 8001500:	e0fffb17 	ldw	r3,-20(fp)
 8001504:	18bf4736 	bltu	r3,r2,8001224 <__alt_data_end+0xfc001224>
 8001508:	0005883a 	mov	r2,zero
 800150c:	e037883a 	mov	sp,fp
 8001510:	dfc00117 	ldw	ra,4(sp)
 8001514:	df000017 	ldw	fp,0(sp)
 8001518:	dec00204 	addi	sp,sp,8
 800151c:	f800283a 	ret

08001520 <HIDKProbe>:
 8001520:	defff204 	addi	sp,sp,-56
 8001524:	dfc00d15 	stw	ra,52(sp)
 8001528:	df000c15 	stw	fp,48(sp)
 800152c:	df000c04 	addi	fp,sp,48
 8001530:	2005883a 	mov	r2,r4
 8001534:	e17fff15 	stw	r5,-4(fp)
 8001538:	e0bffe05 	stb	r2,-8(fp)
 800153c:	00820074 	movhi	r2,2049
 8001540:	10ae6304 	addi	r2,r2,-18036
 8001544:	e0bffa15 	stw	r2,-24(fp)
 8001548:	00820074 	movhi	r2,2049
 800154c:	10ae6304 	addi	r2,r2,-18036
 8001550:	e0bffb15 	stw	r2,-20(fp)
 8001554:	e0fffe03 	ldbu	r3,-8(fp)
 8001558:	00820074 	movhi	r2,2049
 800155c:	10ae6304 	addi	r2,r2,-18036
 8001560:	d8800415 	stw	r2,16(sp)
 8001564:	00800244 	movi	r2,9
 8001568:	d8800315 	stw	r2,12(sp)
 800156c:	d8000215 	stw	zero,8(sp)
 8001570:	00800084 	movi	r2,2
 8001574:	d8800115 	stw	r2,4(sp)
 8001578:	d8000015 	stw	zero,0(sp)
 800157c:	01c00184 	movi	r7,6
 8001580:	01802004 	movi	r6,128
 8001584:	000b883a 	mov	r5,zero
 8001588:	1809883a 	mov	r4,r3
 800158c:	800228c0 	call	800228c <XferCtrlReq>
 8001590:	e0bffc05 	stb	r2,-16(fp)
 8001594:	e0bffc03 	ldbu	r2,-16(fp)
 8001598:	10000226 	beq	r2,zero,80015a4 <HIDKProbe+0x84>
 800159c:	0005883a 	mov	r2,zero
 80015a0:	0000dc06 	br	8001914 <HIDKProbe+0x3f4>
 80015a4:	e0bffa17 	ldw	r2,-24(fp)
 80015a8:	1080008b 	ldhu	r2,2(r2)
 80015ac:	10bfffcc 	andi	r2,r2,65535
 80015b0:	10804070 	cmpltui	r2,r2,257
 80015b4:	1000031e 	bne	r2,zero,80015c4 <HIDKProbe+0xa4>
 80015b8:	00804004 	movi	r2,256
 80015bc:	e0bff90d 	sth	r2,-28(fp)
 80015c0:	00000306 	br	80015d0 <HIDKProbe+0xb0>
 80015c4:	e0bffa17 	ldw	r2,-24(fp)
 80015c8:	1080008b 	ldhu	r2,2(r2)
 80015cc:	e0bff90d 	sth	r2,-28(fp)
 80015d0:	e13ffe03 	ldbu	r4,-8(fp)
 80015d4:	e0fff90b 	ldhu	r3,-28(fp)
 80015d8:	00820074 	movhi	r2,2049
 80015dc:	10ae6304 	addi	r2,r2,-18036
 80015e0:	d8800415 	stw	r2,16(sp)
 80015e4:	d8c00315 	stw	r3,12(sp)
 80015e8:	d8000215 	stw	zero,8(sp)
 80015ec:	00800084 	movi	r2,2
 80015f0:	d8800115 	stw	r2,4(sp)
 80015f4:	d8000015 	stw	zero,0(sp)
 80015f8:	01c00184 	movi	r7,6
 80015fc:	01802004 	movi	r6,128
 8001600:	000b883a 	mov	r5,zero
 8001604:	800228c0 	call	800228c <XferCtrlReq>
 8001608:	e0bffc05 	stb	r2,-16(fp)
 800160c:	e0bffc03 	ldbu	r2,-16(fp)
 8001610:	10000226 	beq	r2,zero,800161c <HIDKProbe+0xfc>
 8001614:	0005883a 	mov	r2,zero
 8001618:	0000be06 	br	8001914 <HIDKProbe+0x3f4>
 800161c:	e0bffa17 	ldw	r2,-24(fp)
 8001620:	10800143 	ldbu	r2,5(r2)
 8001624:	e0bffc45 	stb	r2,-15(fp)
 8001628:	0000b306 	br	80018f8 <HIDKProbe+0x3d8>
 800162c:	e0bffa17 	ldw	r2,-24(fp)
 8001630:	10800043 	ldbu	r2,1(r2)
 8001634:	10803fcc 	andi	r2,r2,255
 8001638:	10800120 	cmpeqi	r2,r2,4
 800163c:	1000091e 	bne	r2,zero,8001664 <HIDKProbe+0x144>
 8001640:	e0bffa17 	ldw	r2,-24(fp)
 8001644:	10800003 	ldbu	r2,0(r2)
 8001648:	10803fcc 	andi	r2,r2,255
 800164c:	e0fffb17 	ldw	r3,-20(fp)
 8001650:	1885883a 	add	r2,r3,r2
 8001654:	e0bffb15 	stw	r2,-20(fp)
 8001658:	e0bffb17 	ldw	r2,-20(fp)
 800165c:	e0bffa15 	stw	r2,-24(fp)
 8001660:	0000a506 	br	80018f8 <HIDKProbe+0x3d8>
 8001664:	e0bffa17 	ldw	r2,-24(fp)
 8001668:	10800143 	ldbu	r2,5(r2)
 800166c:	e0bffc85 	stb	r2,-14(fp)
 8001670:	e0bffa17 	ldw	r2,-24(fp)
 8001674:	10800183 	ldbu	r2,6(r2)
 8001678:	e0bffcc5 	stb	r2,-13(fp)
 800167c:	e0bffa17 	ldw	r2,-24(fp)
 8001680:	108001c3 	ldbu	r2,7(r2)
 8001684:	e0bffd05 	stb	r2,-12(fp)
 8001688:	e0bffc83 	ldbu	r2,-14(fp)
 800168c:	108000d8 	cmpnei	r2,r2,3
 8001690:	1000971e 	bne	r2,zero,80018f0 <HIDKProbe+0x3d0>
 8001694:	e0bffcc3 	ldbu	r2,-13(fp)
 8001698:	10800058 	cmpnei	r2,r2,1
 800169c:	1000941e 	bne	r2,zero,80018f0 <HIDKProbe+0x3d0>
 80016a0:	e0bffd03 	ldbu	r2,-12(fp)
 80016a4:	10800058 	cmpnei	r2,r2,1
 80016a8:	1000911e 	bne	r2,zero,80018f0 <HIDKProbe+0x3d0>
 80016ac:	e0fffe03 	ldbu	r3,-8(fp)
 80016b0:	00820074 	movhi	r2,2049
 80016b4:	10aea304 	addi	r2,r2,-17780
 80016b8:	180690fa 	slli	r3,r3,3
 80016bc:	10c5883a 	add	r2,r2,r3
 80016c0:	10800104 	addi	r2,r2,4
 80016c4:	00c00044 	movi	r3,1
 80016c8:	10c00005 	stb	r3,0(r2)
 80016cc:	e0fffe03 	ldbu	r3,-8(fp)
 80016d0:	00820074 	movhi	r2,2049
 80016d4:	10aea304 	addi	r2,r2,-17780
 80016d8:	180690fa 	slli	r3,r3,3
 80016dc:	10c5883a 	add	r2,r2,r3
 80016e0:	10800017 	ldw	r2,0(r2)
 80016e4:	1080008b 	ldhu	r2,2(r2)
 80016e8:	e0bffd45 	stb	r2,-11(fp)
 80016ec:	80019280 	call	8001928 <HID_init>
 80016f0:	e0fffe03 	ldbu	r3,-8(fp)
 80016f4:	00820074 	movhi	r2,2049
 80016f8:	10aea304 	addi	r2,r2,-17780
 80016fc:	180690fa 	slli	r3,r3,3
 8001700:	10c7883a 	add	r3,r2,r3
 8001704:	00820074 	movhi	r2,2049
 8001708:	10ae5904 	addi	r2,r2,-18076
 800170c:	18800015 	stw	r2,0(r3)
 8001710:	e0fffe03 	ldbu	r3,-8(fp)
 8001714:	00820074 	movhi	r2,2049
 8001718:	10aea304 	addi	r2,r2,-17780
 800171c:	180690fa 	slli	r3,r3,3
 8001720:	10c5883a 	add	r2,r2,r3
 8001724:	10800017 	ldw	r2,0(r2)
 8001728:	e0fffd43 	ldbu	r3,-11(fp)
 800172c:	10c0008d 	sth	r3,2(r2)
 8001730:	e0bffa17 	ldw	r2,-24(fp)
 8001734:	10800083 	ldbu	r2,2(r2)
 8001738:	d0a4fa45 	stb	r2,-27671(gp)
 800173c:	e0bffe03 	ldbu	r2,-8(fp)
 8001740:	d0a4fa05 	stb	r2,-27672(gp)
 8001744:	e0bffa17 	ldw	r2,-24(fp)
 8001748:	10800003 	ldbu	r2,0(r2)
 800174c:	10803fcc 	andi	r2,r2,255
 8001750:	e0fffb17 	ldw	r3,-20(fp)
 8001754:	1885883a 	add	r2,r3,r2
 8001758:	e0bffb15 	stw	r2,-20(fp)
 800175c:	e0bffb17 	ldw	r2,-20(fp)
 8001760:	e0bffa15 	stw	r2,-24(fp)
 8001764:	00005b06 	br	80018d4 <HIDKProbe+0x3b4>
 8001768:	e0bffa17 	ldw	r2,-24(fp)
 800176c:	10800043 	ldbu	r2,1(r2)
 8001770:	10803fcc 	andi	r2,r2,255
 8001774:	10800160 	cmpeqi	r2,r2,5
 8001778:	1000091e 	bne	r2,zero,80017a0 <HIDKProbe+0x280>
 800177c:	e0bffa17 	ldw	r2,-24(fp)
 8001780:	10800003 	ldbu	r2,0(r2)
 8001784:	10803fcc 	andi	r2,r2,255
 8001788:	e0fffb17 	ldw	r3,-20(fp)
 800178c:	1885883a 	add	r2,r3,r2
 8001790:	e0bffb15 	stw	r2,-20(fp)
 8001794:	e0bffb17 	ldw	r2,-20(fp)
 8001798:	e0bffa15 	stw	r2,-24(fp)
 800179c:	00004d06 	br	80018d4 <HIDKProbe+0x3b4>
 80017a0:	e0fffe03 	ldbu	r3,-8(fp)
 80017a4:	00820074 	movhi	r2,2049
 80017a8:	10aea304 	addi	r2,r2,-17780
 80017ac:	180690fa 	slli	r3,r3,3
 80017b0:	10c5883a 	add	r2,r2,r3
 80017b4:	10800017 	ldw	r2,0(r2)
 80017b8:	10800204 	addi	r2,r2,8
 80017bc:	e0fffa17 	ldw	r3,-24(fp)
 80017c0:	18c00083 	ldbu	r3,2(r3)
 80017c4:	10c00005 	stb	r3,0(r2)
 80017c8:	e0fffe03 	ldbu	r3,-8(fp)
 80017cc:	00820074 	movhi	r2,2049
 80017d0:	10aea304 	addi	r2,r2,-17780
 80017d4:	180690fa 	slli	r3,r3,3
 80017d8:	10c5883a 	add	r2,r2,r3
 80017dc:	10800017 	ldw	r2,0(r2)
 80017e0:	10800204 	addi	r2,r2,8
 80017e4:	e0fffa17 	ldw	r3,-24(fp)
 80017e8:	18c000c3 	ldbu	r3,3(r3)
 80017ec:	10c00045 	stb	r3,1(r2)
 80017f0:	e0fffe03 	ldbu	r3,-8(fp)
 80017f4:	00820074 	movhi	r2,2049
 80017f8:	10aea304 	addi	r2,r2,-17780
 80017fc:	180690fa 	slli	r3,r3,3
 8001800:	10c5883a 	add	r2,r2,r3
 8001804:	10800017 	ldw	r2,0(r2)
 8001808:	10800204 	addi	r2,r2,8
 800180c:	e0fffa17 	ldw	r3,-24(fp)
 8001810:	18c0010b 	ldhu	r3,4(r3)
 8001814:	10c0008d 	sth	r3,2(r2)
 8001818:	e0fffe03 	ldbu	r3,-8(fp)
 800181c:	00820074 	movhi	r2,2049
 8001820:	10aea304 	addi	r2,r2,-17780
 8001824:	180690fa 	slli	r3,r3,3
 8001828:	10c5883a 	add	r2,r2,r3
 800182c:	10800017 	ldw	r2,0(r2)
 8001830:	10800204 	addi	r2,r2,8
 8001834:	e0fffa17 	ldw	r3,-24(fp)
 8001838:	18c00183 	ldbu	r3,6(r3)
 800183c:	10c00105 	stb	r3,4(r2)
 8001840:	e0fffe03 	ldbu	r3,-8(fp)
 8001844:	e0bffc43 	ldbu	r2,-15(fp)
 8001848:	d8000415 	stw	zero,16(sp)
 800184c:	d8000315 	stw	zero,12(sp)
 8001850:	d8000215 	stw	zero,8(sp)
 8001854:	d8000115 	stw	zero,4(sp)
 8001858:	d8800015 	stw	r2,0(sp)
 800185c:	01c00244 	movi	r7,9
 8001860:	000d883a 	mov	r6,zero
 8001864:	000b883a 	mov	r5,zero
 8001868:	1809883a 	mov	r4,r3
 800186c:	800228c0 	call	800228c <XferCtrlReq>
 8001870:	e0bffc05 	stb	r2,-16(fp)
 8001874:	e0bffc03 	ldbu	r2,-16(fp)
 8001878:	10000226 	beq	r2,zero,8001884 <HIDKProbe+0x364>
 800187c:	0005883a 	mov	r2,zero
 8001880:	00002406 	br	8001914 <HIDKProbe+0x3f4>
 8001884:	e0fffe03 	ldbu	r3,-8(fp)
 8001888:	d0a4fa43 	ldbu	r2,-27671(gp)
 800188c:	10803fcc 	andi	r2,r2,255
 8001890:	d8000415 	stw	zero,16(sp)
 8001894:	d8000315 	stw	zero,12(sp)
 8001898:	d8800215 	stw	r2,8(sp)
 800189c:	d8000115 	stw	zero,4(sp)
 80018a0:	d8000015 	stw	zero,0(sp)
 80018a4:	01c002c4 	movi	r7,11
 80018a8:	01800844 	movi	r6,33
 80018ac:	000b883a 	mov	r5,zero
 80018b0:	1809883a 	mov	r4,r3
 80018b4:	800228c0 	call	800228c <XferCtrlReq>
 80018b8:	e0bffc05 	stb	r2,-16(fp)
 80018bc:	e0bffc03 	ldbu	r2,-16(fp)
 80018c0:	10000226 	beq	r2,zero,80018cc <HIDKProbe+0x3ac>
 80018c4:	0005883a 	mov	r2,zero
 80018c8:	00001206 	br	8001914 <HIDKProbe+0x3f4>
 80018cc:	00800044 	movi	r2,1
 80018d0:	00001006 	br	8001914 <HIDKProbe+0x3f4>
 80018d4:	e0fff90b 	ldhu	r3,-28(fp)
 80018d8:	00820074 	movhi	r2,2049
 80018dc:	10ae6304 	addi	r2,r2,-18036
 80018e0:	1885883a 	add	r2,r3,r2
 80018e4:	e0fffb17 	ldw	r3,-20(fp)
 80018e8:	18bf9f36 	bltu	r3,r2,8001768 <__alt_data_end+0xfc001768>
 80018ec:	00000206 	br	80018f8 <HIDKProbe+0x3d8>
 80018f0:	0005883a 	mov	r2,zero
 80018f4:	00000706 	br	8001914 <HIDKProbe+0x3f4>
 80018f8:	e0fff90b 	ldhu	r3,-28(fp)
 80018fc:	00820074 	movhi	r2,2049
 8001900:	10ae6304 	addi	r2,r2,-18036
 8001904:	1885883a 	add	r2,r3,r2
 8001908:	e0fffb17 	ldw	r3,-20(fp)
 800190c:	18bf4736 	bltu	r3,r2,800162c <__alt_data_end+0xfc00162c>
 8001910:	0005883a 	mov	r2,zero
 8001914:	e037883a 	mov	sp,fp
 8001918:	dfc00117 	ldw	ra,4(sp)
 800191c:	df000017 	ldw	fp,0(sp)
 8001920:	dec00204 	addi	sp,sp,8
 8001924:	f800283a 	ret

08001928 <HID_init>:
 8001928:	deffff04 	addi	sp,sp,-4
 800192c:	df000015 	stw	fp,0(sp)
 8001930:	d839883a 	mov	fp,sp
 8001934:	00820074 	movhi	r2,2049
 8001938:	10ae5904 	addi	r2,r2,-18076
 800193c:	00c01004 	movi	r3,64
 8001940:	10c00345 	stb	r3,13(r2)
 8001944:	00820074 	movhi	r2,2049
 8001948:	10ae5904 	addi	r2,r2,-18076
 800194c:	00c00404 	movi	r3,16
 8001950:	10c00385 	stb	r3,14(r2)
 8001954:	0001883a 	nop
 8001958:	e037883a 	mov	sp,fp
 800195c:	df000017 	ldw	fp,0(sp)
 8001960:	dec00104 	addi	sp,sp,4
 8001964:	f800283a 	ret

08001968 <mousePoll>:
 8001968:	defffb04 	addi	sp,sp,-20
 800196c:	dfc00415 	stw	ra,16(sp)
 8001970:	df000315 	stw	fp,12(sp)
 8001974:	df000304 	addi	fp,sp,12
 8001978:	e13fff15 	stw	r4,-4(fp)
 800197c:	d0a4fa03 	ldbu	r2,-27672(gp)
 8001980:	10803fcc 	andi	r2,r2,255
 8001984:	100b883a 	mov	r5,r2
 8001988:	01003804 	movi	r4,224
 800198c:	8001b440 	call	8001b44 <MAXreg_wr>
 8001990:	d0a4fa03 	ldbu	r2,-27672(gp)
 8001994:	11003fcc 	andi	r4,r2,255
 8001998:	d0a4fa03 	ldbu	r2,-27672(gp)
 800199c:	10c03fcc 	andi	r3,r2,255
 80019a0:	00820074 	movhi	r2,2049
 80019a4:	10aea304 	addi	r2,r2,-17780
 80019a8:	180690fa 	slli	r3,r3,3
 80019ac:	10c5883a 	add	r2,r2,r3
 80019b0:	10800017 	ldw	r2,0(r2)
 80019b4:	10800204 	addi	r2,r2,8
 80019b8:	1080008b 	ldhu	r2,2(r2)
 80019bc:	10803fcc 	andi	r2,r2,255
 80019c0:	d8800015 	stw	r2,0(sp)
 80019c4:	e1ffff17 	ldw	r7,-4(fp)
 80019c8:	01800204 	movi	r6,8
 80019cc:	01400044 	movi	r5,1
 80019d0:	80026b00 	call	80026b0 <XferInTransfer>
 80019d4:	e0bffe05 	stb	r2,-8(fp)
 80019d8:	e0bffe03 	ldbu	r2,-8(fp)
 80019dc:	e037883a 	mov	sp,fp
 80019e0:	dfc00117 	ldw	ra,4(sp)
 80019e4:	df000017 	ldw	fp,0(sp)
 80019e8:	dec00204 	addi	sp,sp,8
 80019ec:	f800283a 	ret

080019f0 <kbdPoll>:
 80019f0:	defffb04 	addi	sp,sp,-20
 80019f4:	dfc00415 	stw	ra,16(sp)
 80019f8:	df000315 	stw	fp,12(sp)
 80019fc:	df000304 	addi	fp,sp,12
 8001a00:	e13fff15 	stw	r4,-4(fp)
 8001a04:	d0a4fa03 	ldbu	r2,-27672(gp)
 8001a08:	10803fcc 	andi	r2,r2,255
 8001a0c:	100b883a 	mov	r5,r2
 8001a10:	01003804 	movi	r4,224
 8001a14:	8001b440 	call	8001b44 <MAXreg_wr>
 8001a18:	d0a4fa03 	ldbu	r2,-27672(gp)
 8001a1c:	11003fcc 	andi	r4,r2,255
 8001a20:	d0a4fa03 	ldbu	r2,-27672(gp)
 8001a24:	10c03fcc 	andi	r3,r2,255
 8001a28:	00820074 	movhi	r2,2049
 8001a2c:	10aea304 	addi	r2,r2,-17780
 8001a30:	180690fa 	slli	r3,r3,3
 8001a34:	10c5883a 	add	r2,r2,r3
 8001a38:	10800017 	ldw	r2,0(r2)
 8001a3c:	10800204 	addi	r2,r2,8
 8001a40:	1080008b 	ldhu	r2,2(r2)
 8001a44:	10803fcc 	andi	r2,r2,255
 8001a48:	d8800015 	stw	r2,0(sp)
 8001a4c:	e1ffff17 	ldw	r7,-4(fp)
 8001a50:	01800204 	movi	r6,8
 8001a54:	01400044 	movi	r5,1
 8001a58:	80026b00 	call	80026b0 <XferInTransfer>
 8001a5c:	e0bffe05 	stb	r2,-8(fp)
 8001a60:	e0bffe03 	ldbu	r2,-8(fp)
 8001a64:	e037883a 	mov	sp,fp
 8001a68:	dfc00117 	ldw	ra,4(sp)
 8001a6c:	df000017 	ldw	fp,0(sp)
 8001a70:	dec00204 	addi	sp,sp,8
 8001a74:	f800283a 	ret

08001a78 <HIDMEventHandler>:
 8001a78:	defffb04 	addi	sp,sp,-20
 8001a7c:	df000415 	stw	fp,16(sp)
 8001a80:	df000404 	addi	fp,sp,16
 8001a84:	2007883a 	mov	r3,r4
 8001a88:	2805883a 	mov	r2,r5
 8001a8c:	e1bffe15 	stw	r6,-8(fp)
 8001a90:	e1ffff15 	stw	r7,-4(fp)
 8001a94:	e0fffc05 	stb	r3,-16(fp)
 8001a98:	e0bffd05 	stb	r2,-12(fp)
 8001a9c:	0005883a 	mov	r2,zero
 8001aa0:	e037883a 	mov	sp,fp
 8001aa4:	df000017 	ldw	fp,0(sp)
 8001aa8:	dec00104 	addi	sp,sp,4
 8001aac:	f800283a 	ret

08001ab0 <HIDKEventHandler>:
 8001ab0:	defffb04 	addi	sp,sp,-20
 8001ab4:	df000415 	stw	fp,16(sp)
 8001ab8:	df000404 	addi	fp,sp,16
 8001abc:	2007883a 	mov	r3,r4
 8001ac0:	2805883a 	mov	r2,r5
 8001ac4:	e1bffe15 	stw	r6,-8(fp)
 8001ac8:	e1ffff15 	stw	r7,-4(fp)
 8001acc:	e0fffc05 	stb	r3,-16(fp)
 8001ad0:	e0bffd05 	stb	r2,-12(fp)
 8001ad4:	0005883a 	mov	r2,zero
 8001ad8:	e037883a 	mov	sp,fp
 8001adc:	df000017 	ldw	fp,0(sp)
 8001ae0:	dec00104 	addi	sp,sp,4
 8001ae4:	f800283a 	ret

08001ae8 <SPI_init>:
// variables and data structures
// External variables
extern BYTE usb_task_state;

/* Functions    */
void SPI_init(BYTE sync_mode, BYTE bus_mode, BYTE smp_phase) {
 8001ae8:	defffc04 	addi	sp,sp,-16
 8001aec:	df000315 	stw	fp,12(sp)
 8001af0:	df000304 	addi	fp,sp,12
 8001af4:	2807883a 	mov	r3,r5
 8001af8:	3005883a 	mov	r2,r6
 8001afc:	e13ffd05 	stb	r4,-12(fp)
 8001b00:	e0fffe05 	stb	r3,-8(fp)
 8001b04:	e0bfff05 	stb	r2,-4(fp)
  // Don't need to initialize SPI port, already ready to go with BSP
}
 8001b08:	0001883a 	nop
 8001b0c:	e037883a 	mov	sp,fp
 8001b10:	df000017 	ldw	fp,0(sp)
 8001b14:	dec00104 	addi	sp,sp,4
 8001b18:	f800283a 	ret

08001b1c <SPI_wr>:

// writes single byte to MAX3421E via SPI, simultanously reads status register
// and returns it
BYTE SPI_wr(BYTE data) {
 8001b1c:	defffe04 	addi	sp,sp,-8
 8001b20:	df000115 	stw	fp,4(sp)
 8001b24:	df000104 	addi	fp,sp,4
 8001b28:	2005883a 	mov	r2,r4
 8001b2c:	e0bfff05 	stb	r2,-4(fp)
  // This function is never used by the code, so you do not need to fill it in
}
 8001b30:	0001883a 	nop
 8001b34:	e037883a 	mov	sp,fp
 8001b38:	df000017 	ldw	fp,0(sp)
 8001b3c:	dec00104 	addi	sp,sp,4
 8001b40:	f800283a 	ret

08001b44 <MAXreg_wr>:
// writes register to MAX3421E via SPI
void MAXreg_wr(BYTE reg, BYTE val) {
 8001b44:	defff704 	addi	sp,sp,-36
 8001b48:	dfc00815 	stw	ra,32(sp)
 8001b4c:	df000715 	stw	fp,28(sp)
 8001b50:	df000704 	addi	fp,sp,28
 8001b54:	2007883a 	mov	r3,r4
 8001b58:	2805883a 	mov	r2,r5
 8001b5c:	e0fffe05 	stb	r3,-8(fp)
 8001b60:	e0bfff05 	stb	r2,-4(fp)
  // write val via SPI
  // read return code from SPI peripheral (see Intel documentation)
  // if return code < 0 print an error
  // deselect MAX3421E (may not be necessary if you are using SPI peripheral)
  int code;
  BYTE b_write[2] = {reg + 2, val};
 8001b64:	e0bffe03 	ldbu	r2,-8(fp)
 8001b68:	10800084 	addi	r2,r2,2
 8001b6c:	e0bffd05 	stb	r2,-12(fp)
 8001b70:	e0bfff03 	ldbu	r2,-4(fp)
 8001b74:	e0bffd45 	stb	r2,-11(fp)
  //   printf("%x\n", reg);
  code = alt_avalon_spi_command(SPI_0_BASE, 0, 2, b_write, 0, NULL, 0);
 8001b78:	e0bffd04 	addi	r2,fp,-12
 8001b7c:	d8000215 	stw	zero,8(sp)
 8001b80:	d8000115 	stw	zero,4(sp)
 8001b84:	d8000015 	stw	zero,0(sp)
 8001b88:	100f883a 	mov	r7,r2
 8001b8c:	01800084 	movi	r6,2
 8001b90:	000b883a 	mov	r5,zero
 8001b94:	01000804 	movi	r4,32
 8001b98:	80073940 	call	8007394 <alt_avalon_spi_command>
 8001b9c:	e0bffc15 	stw	r2,-16(fp)
  if (code < 0)
 8001ba0:	e0bffc17 	ldw	r2,-16(fp)
 8001ba4:	1000030e 	bge	r2,zero,8001bb4 <MAXreg_wr+0x70>
    printf("ERROR\n");
 8001ba8:	01020074 	movhi	r4,2049
 8001bac:	2123fa04 	addi	r4,r4,-28696
 8001bb0:	80040200 	call	8004020 <puts>
}
 8001bb4:	0001883a 	nop
 8001bb8:	e037883a 	mov	sp,fp
 8001bbc:	dfc00117 	ldw	ra,4(sp)
 8001bc0:	df000017 	ldw	fp,0(sp)
 8001bc4:	dec00204 	addi	sp,sp,8
 8001bc8:	f800283a 	ret

08001bcc <MAXbytes_wr>:

// multiple-byte write
// returns a pointer to a memory position after last written
BYTE *MAXbytes_wr(BYTE reg, BYTE nbytes, BYTE *data) {
 8001bcc:	defff304 	addi	sp,sp,-52
 8001bd0:	dfc00c15 	stw	ra,48(sp)
 8001bd4:	df000b15 	stw	fp,44(sp)
 8001bd8:	dc000a15 	stw	r16,40(sp)
 8001bdc:	df000b04 	addi	fp,sp,44
 8001be0:	201b883a 	mov	r13,r4
 8001be4:	2809883a 	mov	r4,r5
 8001be8:	e1bffe15 	stw	r6,-8(fp)
 8001bec:	e37ffc05 	stb	r13,-16(fp)
 8001bf0:	e13ffd05 	stb	r4,-12(fp)
 8001bf4:	d809883a 	mov	r4,sp
 8001bf8:	2021883a 	mov	r16,r4
  // read return code from SPI peripheral (see Intel documentation)
  // if return code < 0  print an error
  // deselect MAX3421E (may not be necessary if you are using SPI peripheral)
  // return (data + nbytes);
  int code;
  BYTE b_write[1 + nbytes];
 8001bfc:	e13ffd03 	ldbu	r4,-12(fp)
 8001c00:	21000044 	addi	r4,r4,1
 8001c04:	217fffc4 	addi	r5,r4,-1
 8001c08:	e17ff915 	stw	r5,-28(fp)
 8001c0c:	200b883a 	mov	r5,r4
 8001c10:	2817883a 	mov	r11,r5
 8001c14:	0019883a 	mov	r12,zero
 8001c18:	580ad77a 	srli	r5,r11,29
 8001c1c:	601090fa 	slli	r8,r12,3
 8001c20:	2a10b03a 	or	r8,r5,r8
 8001c24:	580e90fa 	slli	r7,r11,3
 8001c28:	200b883a 	mov	r5,r4
 8001c2c:	2813883a 	mov	r9,r5
 8001c30:	0015883a 	mov	r10,zero
 8001c34:	480ad77a 	srli	r5,r9,29
 8001c38:	500690fa 	slli	r3,r10,3
 8001c3c:	28c6b03a 	or	r3,r5,r3
 8001c40:	480490fa 	slli	r2,r9,3
 8001c44:	2005883a 	mov	r2,r4
 8001c48:	108000c4 	addi	r2,r2,3
 8001c4c:	1004d0ba 	srli	r2,r2,2
 8001c50:	1085883a 	add	r2,r2,r2
 8001c54:	1085883a 	add	r2,r2,r2
 8001c58:	d8b7c83a 	sub	sp,sp,r2
 8001c5c:	d8800304 	addi	r2,sp,12
 8001c60:	1005883a 	mov	r2,r2
 8001c64:	e0bffa15 	stw	r2,-24(fp)
  b_write[0] = (reg + 2);
 8001c68:	e0bffc03 	ldbu	r2,-16(fp)
 8001c6c:	10800084 	addi	r2,r2,2
 8001c70:	1007883a 	mov	r3,r2
 8001c74:	e0bffa17 	ldw	r2,-24(fp)
 8001c78:	10c00005 	stb	r3,0(r2)
  //   printf("write1\n");
  for (int i = 0; i < nbytes; i++) {
 8001c7c:	e03ff815 	stw	zero,-32(fp)
 8001c80:	00000c06 	br	8001cb4 <MAXbytes_wr+0xe8>
    b_write[i + 1] = data[i];
 8001c84:	e0bff817 	ldw	r2,-32(fp)
 8001c88:	10800044 	addi	r2,r2,1
 8001c8c:	e0fff817 	ldw	r3,-32(fp)
 8001c90:	e13ffe17 	ldw	r4,-8(fp)
 8001c94:	20c7883a 	add	r3,r4,r3
 8001c98:	18c00003 	ldbu	r3,0(r3)
 8001c9c:	e13ffa17 	ldw	r4,-24(fp)
 8001ca0:	2085883a 	add	r2,r4,r2
 8001ca4:	10c00005 	stb	r3,0(r2)
  // return (data + nbytes);
  int code;
  BYTE b_write[1 + nbytes];
  b_write[0] = (reg + 2);
  //   printf("write1\n");
  for (int i = 0; i < nbytes; i++) {
 8001ca8:	e0bff817 	ldw	r2,-32(fp)
 8001cac:	10800044 	addi	r2,r2,1
 8001cb0:	e0bff815 	stw	r2,-32(fp)
 8001cb4:	e0bffd03 	ldbu	r2,-12(fp)
 8001cb8:	e0fff817 	ldw	r3,-32(fp)
 8001cbc:	18bff116 	blt	r3,r2,8001c84 <__alt_data_end+0xfc001c84>
    b_write[i + 1] = data[i];
  }
  code = alt_avalon_spi_command(SPI_0_BASE, 0, 1 + nbytes, b_write, 0, NULL, 0);
 8001cc0:	e0bffd03 	ldbu	r2,-12(fp)
 8001cc4:	10800044 	addi	r2,r2,1
 8001cc8:	1007883a 	mov	r3,r2
 8001ccc:	e0bffa17 	ldw	r2,-24(fp)
 8001cd0:	d8000215 	stw	zero,8(sp)
 8001cd4:	d8000115 	stw	zero,4(sp)
 8001cd8:	d8000015 	stw	zero,0(sp)
 8001cdc:	100f883a 	mov	r7,r2
 8001ce0:	180d883a 	mov	r6,r3
 8001ce4:	000b883a 	mov	r5,zero
 8001ce8:	01000804 	movi	r4,32
 8001cec:	80073940 	call	8007394 <alt_avalon_spi_command>
 8001cf0:	e0bffb15 	stw	r2,-20(fp)
  if (code < 0)
 8001cf4:	e0bffb17 	ldw	r2,-20(fp)
 8001cf8:	1000030e 	bge	r2,zero,8001d08 <MAXbytes_wr+0x13c>
    printf("ERROR\n");
 8001cfc:	01020074 	movhi	r4,2049
 8001d00:	2123fa04 	addi	r4,r4,-28696
 8001d04:	80040200 	call	8004020 <puts>
  return (data + nbytes);
 8001d08:	e0bffd03 	ldbu	r2,-12(fp)
 8001d0c:	e0fffe17 	ldw	r3,-8(fp)
 8001d10:	1885883a 	add	r2,r3,r2
 8001d14:	8037883a 	mov	sp,r16
}
 8001d18:	e6ffff04 	addi	sp,fp,-4
 8001d1c:	dfc00217 	ldw	ra,8(sp)
 8001d20:	df000117 	ldw	fp,4(sp)
 8001d24:	dc000017 	ldw	r16,0(sp)
 8001d28:	dec00304 	addi	sp,sp,12
 8001d2c:	f800283a 	ret

08001d30 <MAXreg_rd>:

// reads register from MAX3421E via SPI
BYTE MAXreg_rd(BYTE reg) {
 8001d30:	defff804 	addi	sp,sp,-32
 8001d34:	dfc00715 	stw	ra,28(sp)
 8001d38:	df000615 	stw	fp,24(sp)
 8001d3c:	df000604 	addi	fp,sp,24
 8001d40:	2005883a 	mov	r2,r4
 8001d44:	e0bfff05 	stb	r2,-4(fp)
  // read return code from SPI peripheral (see Intel documentation)
  // if return code < 0 print an error
  // deselect MAX3421E (may not be necessary if you are using SPI peripheral)
  // return val
  int code;
  BYTE val = "";
 8001d48:	00820074 	movhi	r2,2049
 8001d4c:	10a3fc04 	addi	r2,r2,-28688
 8001d50:	e0bffe05 	stb	r2,-8(fp)
  BYTE b_write[1] = {reg};
 8001d54:	e0bfff03 	ldbu	r2,-4(fp)
 8001d58:	e0bffe45 	stb	r2,-7(fp)
  code = alt_avalon_spi_command(SPI_0_BASE, 0, 1, b_write, 1, &val, 0);
 8001d5c:	e0fffe44 	addi	r3,fp,-7
 8001d60:	d8000215 	stw	zero,8(sp)
 8001d64:	e0bffe04 	addi	r2,fp,-8
 8001d68:	d8800115 	stw	r2,4(sp)
 8001d6c:	00800044 	movi	r2,1
 8001d70:	d8800015 	stw	r2,0(sp)
 8001d74:	180f883a 	mov	r7,r3
 8001d78:	01800044 	movi	r6,1
 8001d7c:	000b883a 	mov	r5,zero
 8001d80:	01000804 	movi	r4,32
 8001d84:	80073940 	call	8007394 <alt_avalon_spi_command>
 8001d88:	e0bffd15 	stw	r2,-12(fp)
  if (code < 0)
 8001d8c:	e0bffd17 	ldw	r2,-12(fp)
 8001d90:	1000030e 	bge	r2,zero,8001da0 <MAXreg_rd+0x70>
    printf("ERROR\n");
 8001d94:	01020074 	movhi	r4,2049
 8001d98:	2123fa04 	addi	r4,r4,-28696
 8001d9c:	80040200 	call	8004020 <puts>
  return val;
 8001da0:	e0bffe03 	ldbu	r2,-8(fp)
}
 8001da4:	e037883a 	mov	sp,fp
 8001da8:	dfc00117 	ldw	ra,4(sp)
 8001dac:	df000017 	ldw	fp,0(sp)
 8001db0:	dec00204 	addi	sp,sp,8
 8001db4:	f800283a 	ret

08001db8 <MAXbytes_rd>:

// multiple-byte write
// returns a pointer to a memory position after last written
BYTE *MAXbytes_rd(BYTE reg, BYTE nbytes, BYTE *data) {
 8001db8:	defff604 	addi	sp,sp,-40
 8001dbc:	dfc00915 	stw	ra,36(sp)
 8001dc0:	df000815 	stw	fp,32(sp)
 8001dc4:	df000804 	addi	fp,sp,32
 8001dc8:	2007883a 	mov	r3,r4
 8001dcc:	2805883a 	mov	r2,r5
 8001dd0:	e1bfff15 	stw	r6,-4(fp)
 8001dd4:	e0fffd05 	stb	r3,-12(fp)
 8001dd8:	e0bffe05 	stb	r2,-8(fp)
  // if return code < 0 print an error
  // deselect MAX3421E (may not be necessary if you are using SPI peripheral)
  // return (data + nbytes);
  int code;
  BYTE b_write[1];
  b_write[0] = (reg);
 8001ddc:	e0bffd03 	ldbu	r2,-12(fp)
 8001de0:	e0bffc05 	stb	r2,-16(fp)
  code = alt_avalon_spi_command(SPI_0_BASE, 0, 1, b_write, nbytes, data, 0);
 8001de4:	e0bffe03 	ldbu	r2,-8(fp)
 8001de8:	e13ffc04 	addi	r4,fp,-16
 8001dec:	d8000215 	stw	zero,8(sp)
 8001df0:	e0ffff17 	ldw	r3,-4(fp)
 8001df4:	d8c00115 	stw	r3,4(sp)
 8001df8:	d8800015 	stw	r2,0(sp)
 8001dfc:	200f883a 	mov	r7,r4
 8001e00:	01800044 	movi	r6,1
 8001e04:	000b883a 	mov	r5,zero
 8001e08:	01000804 	movi	r4,32
 8001e0c:	80073940 	call	8007394 <alt_avalon_spi_command>
 8001e10:	e0bffb15 	stw	r2,-20(fp)
  if (code < 0)
 8001e14:	e0bffb17 	ldw	r2,-20(fp)
 8001e18:	1000030e 	bge	r2,zero,8001e28 <MAXbytes_rd+0x70>
    printf("ERROR\n");
 8001e1c:	01020074 	movhi	r4,2049
 8001e20:	2123fa04 	addi	r4,r4,-28696
 8001e24:	80040200 	call	8004020 <puts>
  return (data + nbytes);
 8001e28:	e0bffe03 	ldbu	r2,-8(fp)
 8001e2c:	e0ffff17 	ldw	r3,-4(fp)
 8001e30:	1885883a 	add	r2,r3,r2
}
 8001e34:	e037883a 	mov	sp,fp
 8001e38:	dfc00117 	ldw	ra,4(sp)
 8001e3c:	df000017 	ldw	fp,0(sp)
 8001e40:	dec00204 	addi	sp,sp,8
 8001e44:	f800283a 	ret

08001e48 <MAX3421E_reset>:
/* reset MAX3421E using chip reset bit. SPI configuration is not affected   */
void MAX3421E_reset(void) {
 8001e48:	defffd04 	addi	sp,sp,-12
 8001e4c:	dfc00215 	stw	ra,8(sp)
 8001e50:	df000115 	stw	fp,4(sp)
 8001e54:	df000104 	addi	fp,sp,4
  // hardware reset, then software reset
  IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
 8001e58:	0007883a 	mov	r3,zero
 8001e5c:	00808004 	movi	r2,512
 8001e60:	10c00035 	stwio	r3,0(r2)
  usleep(1000000);
 8001e64:	010003f4 	movhi	r4,15
 8001e68:	21109004 	addi	r4,r4,16960
 8001e6c:	8004acc0 	call	8004acc <usleep>
  IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
 8001e70:	00c00044 	movi	r3,1
 8001e74:	00808004 	movi	r2,512
 8001e78:	10c00035 	stwio	r3,0(r2)
  BYTE tmp = 0;
 8001e7c:	e03fff05 	stb	zero,-4(fp)
  MAXreg_wr(rUSBCTL, bmCHIPRES); // Chip reset. This stops the oscillator
 8001e80:	01400804 	movi	r5,32
 8001e84:	01001e04 	movi	r4,120
 8001e88:	8001b440 	call	8001b44 <MAXreg_wr>
  MAXreg_wr(rUSBCTL, 0x00);      // Remove the reset
 8001e8c:	000b883a 	mov	r5,zero
 8001e90:	01001e04 	movi	r4,120
 8001e94:	8001b440 	call	8001b44 <MAXreg_wr>
  while (!(MAXreg_rd(rUSBIRQ) & bmOSCOKIRQ)) { // wait until the PLL stabilizes
 8001e98:	00000806 	br	8001ebc <MAX3421E_reset+0x74>
    tmp++;                                     // timeout after 256 attempts
 8001e9c:	e0bfff03 	ldbu	r2,-4(fp)
 8001ea0:	10800044 	addi	r2,r2,1
 8001ea4:	e0bfff05 	stb	r2,-4(fp)
    if (tmp == 0) {
 8001ea8:	e0bfff03 	ldbu	r2,-4(fp)
 8001eac:	1000031e 	bne	r2,zero,8001ebc <MAX3421E_reset+0x74>
      printf("reset timeout!");
 8001eb0:	01020074 	movhi	r4,2049
 8001eb4:	2123fd04 	addi	r4,r4,-28684
 8001eb8:	8003f300 	call	8003f30 <printf>
  usleep(1000000);
  IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
  BYTE tmp = 0;
  MAXreg_wr(rUSBCTL, bmCHIPRES); // Chip reset. This stops the oscillator
  MAXreg_wr(rUSBCTL, 0x00);      // Remove the reset
  while (!(MAXreg_rd(rUSBIRQ) & bmOSCOKIRQ)) { // wait until the PLL stabilizes
 8001ebc:	01001a04 	movi	r4,104
 8001ec0:	8001d300 	call	8001d30 <MAXreg_rd>
 8001ec4:	10803fcc 	andi	r2,r2,255
 8001ec8:	1080004c 	andi	r2,r2,1
 8001ecc:	103ff326 	beq	r2,zero,8001e9c <__alt_data_end+0xfc001e9c>
    tmp++;                                     // timeout after 256 attempts
    if (tmp == 0) {
      printf("reset timeout!");
    }
  }
}
 8001ed0:	0001883a 	nop
 8001ed4:	e037883a 	mov	sp,fp
 8001ed8:	dfc00117 	ldw	ra,4(sp)
 8001edc:	df000017 	ldw	fp,0(sp)
 8001ee0:	dec00204 	addi	sp,sp,8
 8001ee4:	f800283a 	ret

08001ee8 <Vbus_power>:
/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
BOOL Vbus_power(BOOL action) {
 8001ee8:	defffe04 	addi	sp,sp,-8
 8001eec:	df000115 	stw	fp,4(sp)
 8001ef0:	df000104 	addi	fp,sp,4
 8001ef4:	e13fff15 	stw	r4,-4(fp)
  // power on/off successful
  return (1);
 8001ef8:	00800044 	movi	r2,1
}
 8001efc:	e037883a 	mov	sp,fp
 8001f00:	df000017 	ldw	fp,0(sp)
 8001f04:	dec00104 	addi	sp,sp,4
 8001f08:	f800283a 	ret

08001f0c <MAX_busprobe>:

/* probe bus to determine device presense and speed */
void MAX_busprobe(void) {
 8001f0c:	defffd04 	addi	sp,sp,-12
 8001f10:	dfc00215 	stw	ra,8(sp)
 8001f14:	df000115 	stw	fp,4(sp)
 8001f18:	df000104 	addi	fp,sp,4
  BYTE bus_sample;

  //  MAXreg_wr(rHCTL,bmSAMPLEBUS);
  bus_sample = MAXreg_rd(rHRSL);         // Get J,K status
 8001f1c:	01003e04 	movi	r4,248
 8001f20:	8001d300 	call	8001d30 <MAXreg_rd>
 8001f24:	e0bfff05 	stb	r2,-4(fp)
  bus_sample &= (bmJSTATUS | bmKSTATUS); // zero the rest of the byte
 8001f28:	e0ffff03 	ldbu	r3,-4(fp)
 8001f2c:	00bff004 	movi	r2,-64
 8001f30:	1884703a 	and	r2,r3,r2
 8001f34:	e0bfff05 	stb	r2,-4(fp)

  switch (bus_sample) { // start full-speed or low-speed host
 8001f38:	e0bfff03 	ldbu	r2,-4(fp)
 8001f3c:	10c01020 	cmpeqi	r3,r2,64
 8001f40:	1800221e 	bne	r3,zero,8001fcc <MAX_busprobe+0xc0>
 8001f44:	10c01048 	cmpgei	r3,r2,65
 8001f48:	1800021e 	bne	r3,zero,8001f54 <MAX_busprobe+0x48>
 8001f4c:	10003b26 	beq	r2,zero,800203c <MAX_busprobe+0x130>
      MAXreg_wr(rMODE, MODE_FS_HOST); // start full-speed host
      usb_task_state = (USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
    }
    break;
  } // end switch( bus_sample )
}
 8001f50:	00004a06 	br	800207c <MAX_busprobe+0x170>

  //  MAXreg_wr(rHCTL,bmSAMPLEBUS);
  bus_sample = MAXreg_rd(rHRSL);         // Get J,K status
  bus_sample &= (bmJSTATUS | bmKSTATUS); // zero the rest of the byte

  switch (bus_sample) { // start full-speed or low-speed host
 8001f54:	10c02020 	cmpeqi	r3,r2,128
 8001f58:	1800031e 	bne	r3,zero,8001f68 <MAX_busprobe+0x5c>
 8001f5c:	10803020 	cmpeqi	r2,r2,192
 8001f60:	1000331e 	bne	r2,zero,8002030 <MAX_busprobe+0x124>
      MAXreg_wr(rMODE, MODE_FS_HOST); // start full-speed host
      usb_task_state = (USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
    }
    break;
  } // end switch( bus_sample )
}
 8001f64:	00004506 	br	800207c <MAX_busprobe+0x170>
  bus_sample &= (bmJSTATUS | bmKSTATUS); // zero the rest of the byte

  switch (bus_sample) { // start full-speed or low-speed host
  case (bmJSTATUS):
    /*kludgy*/
    if (usb_task_state !=
 8001f68:	d0a00503 	ldbu	r2,-32748(gp)
 8001f6c:	10803fcc 	andi	r2,r2,255
 8001f70:	108004e0 	cmpeqi	r2,r2,19
 8001f74:	10003e1e 	bne	r2,zero,8002070 <MAX_busprobe+0x164>
        USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { // bus reset causes
                                                     // connection detect
                                                     // interrupt
      if (!(MAXreg_rd(rMODE) & bmLOWSPEED)) {
 8001f78:	01003604 	movi	r4,216
 8001f7c:	8001d300 	call	8001d30 <MAXreg_rd>
 8001f80:	10803fcc 	andi	r2,r2,255
 8001f84:	1080008c 	andi	r2,r2,2
 8001f88:	1000071e 	bne	r2,zero,8001fa8 <MAX_busprobe+0x9c>
        MAXreg_wr(rMODE, MODE_FS_HOST); // start full-speed host
 8001f8c:	01403244 	movi	r5,201
 8001f90:	01003604 	movi	r4,216
 8001f94:	8001b440 	call	8001b44 <MAXreg_wr>
        printf("Starting in full speed\n");
 8001f98:	01020074 	movhi	r4,2049
 8001f9c:	21240104 	addi	r4,r4,-28668
 8001fa0:	80040200 	call	8004020 <puts>
 8001fa4:	00000606 	br	8001fc0 <MAX_busprobe+0xb4>
      } else {
        MAXreg_wr(rMODE, MODE_LS_HOST); // start low-speed host
 8001fa8:	014032c4 	movi	r5,203
 8001fac:	01003604 	movi	r4,216
 8001fb0:	8001b440 	call	8001b44 <MAXreg_wr>
        printf("Starting in low speed\n");
 8001fb4:	01020074 	movhi	r4,2049
 8001fb8:	21240704 	addi	r4,r4,-28644
 8001fbc:	80040200 	call	8004020 <puts>
      }
      usb_task_state = (USB_STATE_ATTACHED); // signal usb state machine to
 8001fc0:	00800404 	movi	r2,16
 8001fc4:	d0a00505 	stb	r2,-32748(gp)
                                             // start attachment sequence
    }
    break;
 8001fc8:	00002906 	br	8002070 <MAX_busprobe+0x164>
  case (bmKSTATUS):
    if (usb_task_state !=
 8001fcc:	d0a00503 	ldbu	r2,-32748(gp)
 8001fd0:	10803fcc 	andi	r2,r2,255
 8001fd4:	108004e0 	cmpeqi	r2,r2,19
 8001fd8:	1000271e 	bne	r2,zero,8002078 <MAX_busprobe+0x16c>
        USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { // bus reset causes
                                                     // connection detect
                                                     // interrupt
      if (!(MAXreg_rd(rMODE) & bmLOWSPEED)) {
 8001fdc:	01003604 	movi	r4,216
 8001fe0:	8001d300 	call	8001d30 <MAXreg_rd>
 8001fe4:	10803fcc 	andi	r2,r2,255
 8001fe8:	1080008c 	andi	r2,r2,2
 8001fec:	1000071e 	bne	r2,zero,800200c <MAX_busprobe+0x100>
        MAXreg_wr(rMODE, MODE_LS_HOST); // start low-speed host
 8001ff0:	014032c4 	movi	r5,203
 8001ff4:	01003604 	movi	r4,216
 8001ff8:	8001b440 	call	8001b44 <MAXreg_wr>
        printf("Starting in low speed\n");
 8001ffc:	01020074 	movhi	r4,2049
 8002000:	21240704 	addi	r4,r4,-28644
 8002004:	80040200 	call	8004020 <puts>
 8002008:	00000606 	br	8002024 <MAX_busprobe+0x118>
      } else {
        MAXreg_wr(rMODE, MODE_FS_HOST); // start full-speed host
 800200c:	01403244 	movi	r5,201
 8002010:	01003604 	movi	r4,216
 8002014:	8001b440 	call	8001b44 <MAXreg_wr>
        printf("Starting in full speed\n");
 8002018:	01020074 	movhi	r4,2049
 800201c:	21240104 	addi	r4,r4,-28668
 8002020:	80040200 	call	8004020 <puts>
      }
      usb_task_state = (USB_STATE_ATTACHED); // signal usb state machine to
 8002024:	00800404 	movi	r2,16
 8002028:	d0a00505 	stb	r2,-32748(gp)
                                             // start attachment sequence
    }
    break;
 800202c:	00001206 	br	8002078 <MAX_busprobe+0x16c>
  case (bmSE1): // illegal state
    usb_task_state = (USB_DETACHED_SUBSTATE_ILLEGAL);
 8002030:	00800104 	movi	r2,4
 8002034:	d0a00505 	stb	r2,-32748(gp)
    break;
 8002038:	00001006 	br	800207c <MAX_busprobe+0x170>
  case (bmSE0): // disconnected state
    if (!((usb_task_state & USB_STATE_MASK) ==
 800203c:	d0a00503 	ldbu	r2,-32748(gp)
 8002040:	10803fcc 	andi	r2,r2,255
 8002044:	10803c0c 	andi	r2,r2,240
 8002048:	10000326 	beq	r2,zero,8002058 <MAX_busprobe+0x14c>
          USB_STATE_DETACHED)) // if we came here from other than detached state
      usb_task_state =
 800204c:	00800044 	movi	r2,1
 8002050:	d0a00505 	stb	r2,-32748(gp)
          (USB_DETACHED_SUBSTATE_INITIALIZE); // clear device data structures
    else {
      MAXreg_wr(rMODE, MODE_FS_HOST); // start full-speed host
      usb_task_state = (USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
    }
    break;
 8002054:	00000906 	br	800207c <MAX_busprobe+0x170>
    if (!((usb_task_state & USB_STATE_MASK) ==
          USB_STATE_DETACHED)) // if we came here from other than detached state
      usb_task_state =
          (USB_DETACHED_SUBSTATE_INITIALIZE); // clear device data structures
    else {
      MAXreg_wr(rMODE, MODE_FS_HOST); // start full-speed host
 8002058:	01403244 	movi	r5,201
 800205c:	01003604 	movi	r4,216
 8002060:	8001b440 	call	8001b44 <MAXreg_wr>
      usb_task_state = (USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
 8002064:	008000c4 	movi	r2,3
 8002068:	d0a00505 	stb	r2,-32748(gp)
    }
    break;
 800206c:	00000306 	br	800207c <MAX_busprobe+0x170>
        printf("Starting in low speed\n");
      }
      usb_task_state = (USB_STATE_ATTACHED); // signal usb state machine to
                                             // start attachment sequence
    }
    break;
 8002070:	0001883a 	nop
 8002074:	00000106 	br	800207c <MAX_busprobe+0x170>
        printf("Starting in full speed\n");
      }
      usb_task_state = (USB_STATE_ATTACHED); // signal usb state machine to
                                             // start attachment sequence
    }
    break;
 8002078:	0001883a 	nop
      MAXreg_wr(rMODE, MODE_FS_HOST); // start full-speed host
      usb_task_state = (USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
    }
    break;
  } // end switch( bus_sample )
}
 800207c:	0001883a 	nop
 8002080:	e037883a 	mov	sp,fp
 8002084:	dfc00117 	ldw	ra,4(sp)
 8002088:	df000017 	ldw	fp,0(sp)
 800208c:	dec00204 	addi	sp,sp,8
 8002090:	f800283a 	ret

08002094 <MAX3421E_init>:
/* MAX3421E initialization after power-on   */
void MAX3421E_init(void) {
 8002094:	defffe04 	addi	sp,sp,-8
 8002098:	dfc00115 	stw	ra,4(sp)
 800209c:	df000015 	stw	fp,0(sp)
 80020a0:	d839883a 	mov	fp,sp
  /* Configure full-duplex SPI, interrupt pulse   */
  MAXreg_wr(rPINCTL, (bmFDUPSPI + bmINTLEVEL +
 80020a4:	01400684 	movi	r5,26
 80020a8:	01002204 	movi	r4,136
 80020ac:	8001b440 	call	8001b44 <MAXreg_wr>
                      bmGPXB)); // Full-duplex SPI, level interrupt, GPX
  MAX3421E_reset();             // stop/start the oscillator
 80020b0:	8001e480 	call	8001e48 <MAX3421E_reset>
  /* configure power switch   */
  Vbus_power(OFF); // turn Vbus power off
 80020b4:	0009883a 	mov	r4,zero
 80020b8:	8001ee80 	call	8001ee8 <Vbus_power>
  MAXreg_wr(
 80020bc:	01402004 	movi	r5,128
 80020c0:	01002e04 	movi	r4,184
 80020c4:	8001b440 	call	8001b44 <MAXreg_wr>
      rGPINIEN,
      bmGPINIEN7); // enable interrupt on GPIN7 (power switch overload flag)
  Vbus_power(ON);
 80020c8:	01000044 	movi	r4,1
 80020cc:	8001ee80 	call	8001ee8 <Vbus_power>
  /* configure host operation */
  MAXreg_wr(
 80020d0:	01403444 	movi	r5,209
 80020d4:	01003604 	movi	r4,216
 80020d8:	8001b440 	call	8001b44 <MAXreg_wr>
      rMODE,
      bmDPPULLDN | bmDMPULLDN | bmHOST |
          bmSEPIRQ); // set pull-downs, SOF, Host, Separate GPIN IRQ on GPX
  // MAXreg_wr( rHIEN, bmFRAMEIE|bmCONDETIE|bmBUSEVENTIE ); // enable SOF,
  // connection detection, bus event IRQs
  MAXreg_wr(rHIEN, bmCONDETIE); // connection detection
 80020dc:	01400804 	movi	r5,32
 80020e0:	01003404 	movi	r4,208
 80020e4:	8001b440 	call	8001b44 <MAXreg_wr>
  /* HXFRDNIRQ is checked in Dispatch packet function */
  MAXreg_wr(rHCTL, bmSAMPLEBUS); // update the JSTATUS and KSTATUS bits
 80020e8:	01400104 	movi	r5,4
 80020ec:	01003a04 	movi	r4,232
 80020f0:	8001b440 	call	8001b44 <MAXreg_wr>
  MAX_busprobe();                // check if anything is connected
 80020f4:	8001f0c0 	call	8001f0c <MAX_busprobe>
  MAXreg_wr(rHIRQ, bmCONDETIRQ); // clear connection detect interrupt
 80020f8:	01400804 	movi	r5,32
 80020fc:	01003204 	movi	r4,200
 8002100:	8001b440 	call	8001b44 <MAXreg_wr>
  MAXreg_wr(rCPUCTL, 0x01);      // enable interrupt pin
 8002104:	01400044 	movi	r5,1
 8002108:	01002004 	movi	r4,128
 800210c:	8001b440 	call	8001b44 <MAXreg_wr>
}
 8002110:	0001883a 	nop
 8002114:	e037883a 	mov	sp,fp
 8002118:	dfc00117 	ldw	ra,4(sp)
 800211c:	df000017 	ldw	fp,0(sp)
 8002120:	dec00204 	addi	sp,sp,8
 8002124:	f800283a 	ret

08002128 <MAX3421E_Task>:

/* MAX3421 state change task and interrupt handler */
void MAX3421E_Task(void) {
 8002128:	defffe04 	addi	sp,sp,-8
 800212c:	dfc00115 	stw	ra,4(sp)
 8002130:	df000015 	stw	fp,0(sp)
 8002134:	d839883a 	mov	fp,sp
  if (IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
 8002138:	00808804 	movi	r2,544
 800213c:	10800037 	ldwio	r2,0(r2)
 8002140:	1000041e 	bne	r2,zero,8002154 <MAX3421E_Task+0x2c>
    printf("MAX interrupt\n\r");
 8002144:	01020074 	movhi	r4,2049
 8002148:	21240d04 	addi	r4,r4,-28620
 800214c:	8003f300 	call	8003f30 <printf>
    MaxIntHandler();
 8002150:	800218c0 	call	800218c <MaxIntHandler>
  }
  if (IORD_ALTERA_AVALON_PIO_DATA(USB_GPX_BASE) == 1) {
 8002154:	00808404 	movi	r2,528
 8002158:	10800037 	ldwio	r2,0(r2)
 800215c:	10800058 	cmpnei	r2,r2,1
 8002160:	1000041e 	bne	r2,zero,8002174 <MAX3421E_Task+0x4c>
    printf("GPX interrupt\n\r");
 8002164:	01020074 	movhi	r4,2049
 8002168:	21241104 	addi	r4,r4,-28604
 800216c:	8003f300 	call	8003f30 <printf>
    MaxGpxHandler();
 8002170:	80022580 	call	8002258 <MaxGpxHandler>
  }
}
 8002174:	0001883a 	nop
 8002178:	e037883a 	mov	sp,fp
 800217c:	dfc00117 	ldw	ra,4(sp)
 8002180:	df000017 	ldw	fp,0(sp)
 8002184:	dec00204 	addi	sp,sp,8
 8002188:	f800283a 	ret

0800218c <MaxIntHandler>:

void MaxIntHandler(void) {
 800218c:	defffd04 	addi	sp,sp,-12
 8002190:	dfc00215 	stw	ra,8(sp)
 8002194:	df000115 	stw	fp,4(sp)
 8002198:	df000104 	addi	fp,sp,4
  BYTE HIRQ;
  BYTE HIRQ_sendback = 0x00;
 800219c:	e03fff05 	stb	zero,-4(fp)
  HIRQ = MAXreg_rd(rHIRQ); // determine interrupt source
 80021a0:	01003204 	movi	r4,200
 80021a4:	8001d300 	call	8001d30 <MAXreg_rd>
 80021a8:	e0bfff45 	stb	r2,-3(fp)
  printf("IRQ: %x\n", HIRQ);
 80021ac:	e0bfff43 	ldbu	r2,-3(fp)
 80021b0:	100b883a 	mov	r5,r2
 80021b4:	01020074 	movhi	r4,2049
 80021b8:	21241504 	addi	r4,r4,-28588
 80021bc:	8003f300 	call	8003f30 <printf>
  if (HIRQ & bmFRAMEIRQ) { //->1ms SOF interrupt handler
 80021c0:	e0bfff43 	ldbu	r2,-3(fp)
 80021c4:	1080100c 	andi	r2,r2,64
 80021c8:	10000326 	beq	r2,zero,80021d8 <MaxIntHandler+0x4c>
    HIRQ_sendback |= bmFRAMEIRQ;
 80021cc:	e0bfff03 	ldbu	r2,-4(fp)
 80021d0:	10801014 	ori	r2,r2,64
 80021d4:	e0bfff05 	stb	r2,-4(fp)
  } // end FRAMEIRQ handling

  if (HIRQ & bmCONDETIRQ) {
 80021d8:	e0bfff43 	ldbu	r2,-3(fp)
 80021dc:	1080080c 	andi	r2,r2,32
 80021e0:	10000426 	beq	r2,zero,80021f4 <MaxIntHandler+0x68>
    MAX_busprobe();
 80021e4:	8001f0c0 	call	8001f0c <MAX_busprobe>
    HIRQ_sendback |= bmCONDETIRQ; // set sendback to 1 to clear register
 80021e8:	e0bfff03 	ldbu	r2,-4(fp)
 80021ec:	10800814 	ori	r2,r2,32
 80021f0:	e0bfff05 	stb	r2,-4(fp)
  }
  if (HIRQ & bmSNDBAVIRQ) // if the send buffer is clear (previous transfer
 80021f4:	e0bfff43 	ldbu	r2,-3(fp)
 80021f8:	1080020c 	andi	r2,r2,8
 80021fc:	10000326 	beq	r2,zero,800220c <MaxIntHandler+0x80>
                          // completed without issue)
  {
    MAXreg_wr(rSNDBC, 0x00); // clear the send buffer (not really necessary, but
 8002200:	000b883a 	mov	r5,zero
 8002204:	01000e04 	movi	r4,56
 8002208:	8001b440 	call	8001b44 <MAXreg_wr>
                             // clears interrupt)
  }
  if (HIRQ & bmBUSEVENTIRQ) { // bus event is either reset or suspend
 800220c:	e0bfff43 	ldbu	r2,-3(fp)
 8002210:	1080004c 	andi	r2,r2,1
 8002214:	10000626 	beq	r2,zero,8002230 <MaxIntHandler+0xa4>
    usb_task_state++;         // advance USB task state machine
 8002218:	d0a00503 	ldbu	r2,-32748(gp)
 800221c:	10800044 	addi	r2,r2,1
 8002220:	d0a00505 	stb	r2,-32748(gp)
    HIRQ_sendback |= bmBUSEVENTIRQ;
 8002224:	e0bfff03 	ldbu	r2,-4(fp)
 8002228:	10800054 	ori	r2,r2,1
 800222c:	e0bfff05 	stb	r2,-4(fp)
  }
  /* End HIRQ interrupts handling, clear serviced IRQs    */
  MAXreg_wr(rHIRQ,
 8002230:	e0bfff03 	ldbu	r2,-4(fp)
 8002234:	100b883a 	mov	r5,r2
 8002238:	01003204 	movi	r4,200
 800223c:	8001b440 	call	8001b44 <MAXreg_wr>
            HIRQ_sendback); // write '1' to CONDETIRQ to ack bus state change
}
 8002240:	0001883a 	nop
 8002244:	e037883a 	mov	sp,fp
 8002248:	dfc00117 	ldw	ra,4(sp)
 800224c:	df000017 	ldw	fp,0(sp)
 8002250:	dec00204 	addi	sp,sp,8
 8002254:	f800283a 	ret

08002258 <MaxGpxHandler>:

void MaxGpxHandler(void) {
 8002258:	defffd04 	addi	sp,sp,-12
 800225c:	dfc00215 	stw	ra,8(sp)
 8002260:	df000115 	stw	fp,4(sp)
 8002264:	df000104 	addi	fp,sp,4
  BYTE GPINIRQ;
  GPINIRQ = MAXreg_rd(rGPINIRQ); // read both IRQ registers
 8002268:	01002c04 	movi	r4,176
 800226c:	8001d300 	call	8001d30 <MAXreg_rd>
 8002270:	e0bfff05 	stb	r2,-4(fp)
}
 8002274:	0001883a 	nop
 8002278:	e037883a 	mov	sp,fp
 800227c:	dfc00117 	ldw	ra,4(sp)
 8002280:	df000017 	ldw	fp,0(sp)
 8002284:	dec00204 	addi	sp,sp,8
 8002288:	f800283a 	ret

0800228c <XferCtrlReq>:
/* depending on request. Actual requests are defined as macros                                                                                      */
/* return codes:                */
/* 00       =   success         */
/* 01-0f    =   non-zero HRSLT  */
BYTE XferCtrlReq( BYTE addr, BYTE ep, BYTE bmReqType, BYTE bRequest, BYTE wValLo, BYTE wValHi, WORD wInd, WORD nbytes, BYTE* dataptr )
{
 800228c:	defff104 	addi	sp,sp,-60
 8002290:	dfc00e15 	stw	ra,56(sp)
 8002294:	df000d15 	stw	fp,52(sp)
 8002298:	df000d04 	addi	fp,sp,52
 800229c:	2015883a 	mov	r10,r4
 80022a0:	2813883a 	mov	r9,r5
 80022a4:	3011883a 	mov	r8,r6
 80022a8:	380d883a 	mov	r6,r7
 80022ac:	e1400217 	ldw	r5,8(fp)
 80022b0:	e1000317 	ldw	r4,12(fp)
 80022b4:	e0c00417 	ldw	r3,16(fp)
 80022b8:	e0800517 	ldw	r2,20(fp)
 80022bc:	e2bff805 	stb	r10,-32(fp)
 80022c0:	e27ff905 	stb	r9,-28(fp)
 80022c4:	e23ffa05 	stb	r8,-24(fp)
 80022c8:	e1bffb05 	stb	r6,-20(fp)
 80022cc:	e17ffc05 	stb	r5,-16(fp)
 80022d0:	e13ffd05 	stb	r4,-12(fp)
 80022d4:	e0fffe0d 	sth	r3,-8(fp)
 80022d8:	e0bfff0d 	sth	r2,-4(fp)
 BOOL direction = FALSE;        //request direction, IN or OUT
 80022dc:	e03ff415 	stw	zero,-48(fp)
 BYTE datastage = 1; //request data stage present or absent
 80022e0:	00800044 	movi	r2,1
 80022e4:	e0bff505 	stb	r2,-44(fp)
 BYTE rcode;
 SETUP_PKT setup_pkt;
    if( dataptr == NULL ) {
 80022e8:	e0800617 	ldw	r2,24(fp)
 80022ec:	1000011e 	bne	r2,zero,80022f4 <XferCtrlReq+0x68>
        datastage = 0;
 80022f0:	e03ff505 	stb	zero,-44(fp)
    }
    MAXreg_wr( rPERADDR, addr );                    //set peripheral address
 80022f4:	e0bff803 	ldbu	r2,-32(fp)
 80022f8:	100b883a 	mov	r5,r2
 80022fc:	01003804 	movi	r4,224
 8002300:	8001b440 	call	8001b44 <MAXreg_wr>
    /* fill in setup packet */
    if( bmReqType & 0x80 ) {
 8002304:	e0bffa03 	ldbu	r2,-24(fp)
 8002308:	10803fcc 	andi	r2,r2,255
 800230c:	1080201c 	xori	r2,r2,128
 8002310:	10bfe004 	addi	r2,r2,-128
 8002314:	1000020e 	bge	r2,zero,8002320 <XferCtrlReq+0x94>
        direction = TRUE;                   		//determine request direction
 8002318:	00800044 	movi	r2,1
 800231c:	e0bff415 	stw	r2,-48(fp)
    }
    /* fill in setup packet */
    setup_pkt.ReqType_u.bmRequestType = bmReqType;
 8002320:	e0bffa03 	ldbu	r2,-24(fp)
 8002324:	e0bff585 	stb	r2,-42(fp)
    setup_pkt.bRequest = bRequest;
 8002328:	e0bffb03 	ldbu	r2,-20(fp)
 800232c:	e0bff5c5 	stb	r2,-41(fp)
    setup_pkt.wVal_u.wValueLo = wValLo;
 8002330:	e0bffc03 	ldbu	r2,-16(fp)
 8002334:	e0bff605 	stb	r2,-40(fp)
    setup_pkt.wVal_u.wValueHi = wValHi;
 8002338:	e0bffd03 	ldbu	r2,-12(fp)
 800233c:	e0bff645 	stb	r2,-39(fp)
    setup_pkt.wIndex = wInd;
 8002340:	e0bffe0b 	ldhu	r2,-8(fp)
 8002344:	e0bff68d 	sth	r2,-38(fp)
    setup_pkt.wLength = nbytes;
 8002348:	e0bfff0b 	ldhu	r2,-4(fp)
 800234c:	e0bff70d 	sth	r2,-36(fp)
    MAXbytes_wr( rSUDFIFO, 8, (BYTE *)&setup_pkt );     //transfer to setup packet FIFO
 8002350:	e0bff584 	addi	r2,fp,-42
 8002354:	100d883a 	mov	r6,r2
 8002358:	01400204 	movi	r5,8
 800235c:	01000804 	movi	r4,32
 8002360:	8001bcc0 	call	8001bcc <MAXbytes_wr>
    rcode = XferDispatchPkt( tokSETUP, ep );            //dispatch packet
 8002364:	e0bff903 	ldbu	r2,-28(fp)
 8002368:	100b883a 	mov	r5,r2
 800236c:	01000404 	movi	r4,16
 8002370:	80025340 	call	8002534 <XferDispatchPkt>
 8002374:	e0bff545 	stb	r2,-43(fp)
    if( rcode ) {                                       //return HRSLT if not zero
 8002378:	e0bff543 	ldbu	r2,-43(fp)
 800237c:	10000226 	beq	r2,zero,8002388 <XferCtrlReq+0xfc>
        return( rcode );
 8002380:	e0bff543 	ldbu	r2,-43(fp)
 8002384:	00000f06 	br	80023c4 <XferCtrlReq+0x138>
    }
    rcode = ctrl_xfers[ datastage ]( addr, ep, nbytes, dataptr, direction );    //call data stage or no data stage transfer
 8002388:	e0bff503 	ldbu	r2,-44(fp)
 800238c:	1085883a 	add	r2,r2,r2
 8002390:	1087883a 	add	r3,r2,r2
 8002394:	d0a00304 	addi	r2,gp,-32756
 8002398:	1885883a 	add	r2,r3,r2
 800239c:	10800017 	ldw	r2,0(r2)
 80023a0:	e13ff803 	ldbu	r4,-32(fp)
 80023a4:	e17ff903 	ldbu	r5,-28(fp)
 80023a8:	e1bfff0b 	ldhu	r6,-4(fp)
 80023ac:	e0fff417 	ldw	r3,-48(fp)
 80023b0:	d8c00015 	stw	r3,0(sp)
 80023b4:	e1c00617 	ldw	r7,24(fp)
 80023b8:	103ee83a 	callr	r2
 80023bc:	e0bff545 	stb	r2,-43(fp)
    return( rcode );
 80023c0:	e0bff543 	ldbu	r2,-43(fp)
}
 80023c4:	e037883a 	mov	sp,fp
 80023c8:	dfc00117 	ldw	ra,4(sp)
 80023cc:	df000017 	ldw	fp,0(sp)
 80023d0:	dec00204 	addi	sp,sp,8
 80023d4:	f800283a 	ret

080023d8 <XferCtrlData>:
/* Control transfer with data stage */
BYTE XferCtrlData( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 80023d8:	defff804 	addi	sp,sp,-32
 80023dc:	dfc00715 	stw	ra,28(sp)
 80023e0:	df000615 	stw	fp,24(sp)
 80023e4:	df000604 	addi	fp,sp,24
 80023e8:	2807883a 	mov	r3,r5
 80023ec:	3005883a 	mov	r2,r6
 80023f0:	e1ffff15 	stw	r7,-4(fp)
 80023f4:	e13ffc05 	stb	r4,-16(fp)
 80023f8:	e0fffd05 	stb	r3,-12(fp)
 80023fc:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;

    //MAXreg_wr( rHCTL, bmRCVTOG1 );       //set toggle to DATA1
    if( direction ) {   //IN transfer
 8002400:	e0800217 	ldw	r2,8(fp)
 8002404:	10002826 	beq	r2,zero,80024a8 <XferCtrlData+0xd0>
        devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 8002408:	e0fffc03 	ldbu	r3,-16(fp)
 800240c:	00820074 	movhi	r2,2049
 8002410:	10aea304 	addi	r2,r2,-17780
 8002414:	180690fa 	slli	r3,r3,3
 8002418:	10c5883a 	add	r2,r2,r3
 800241c:	10c00017 	ldw	r3,0(r2)
 8002420:	e0bffd03 	ldbu	r2,-12(fp)
 8002424:	100490fa 	slli	r2,r2,3
 8002428:	1885883a 	add	r2,r3,r2
 800242c:	00c00804 	movi	r3,32
 8002430:	10c00185 	stb	r3,6(r2)
        rcode = XferInTransfer( addr, ep, nbytes, dataptr, devtable[ addr ].epinfo[ ep ].MaxPktSize );
 8002434:	e13ffc03 	ldbu	r4,-16(fp)
 8002438:	e17ffd03 	ldbu	r5,-12(fp)
 800243c:	e1bffe0b 	ldhu	r6,-8(fp)
 8002440:	e0fffc03 	ldbu	r3,-16(fp)
 8002444:	00820074 	movhi	r2,2049
 8002448:	10aea304 	addi	r2,r2,-17780
 800244c:	180690fa 	slli	r3,r3,3
 8002450:	10c5883a 	add	r2,r2,r3
 8002454:	10c00017 	ldw	r3,0(r2)
 8002458:	e0bffd03 	ldbu	r2,-12(fp)
 800245c:	100490fa 	slli	r2,r2,3
 8002460:	1885883a 	add	r2,r3,r2
 8002464:	1080008b 	ldhu	r2,2(r2)
 8002468:	10803fcc 	andi	r2,r2,255
 800246c:	d8800015 	stw	r2,0(sp)
 8002470:	e1ffff17 	ldw	r7,-4(fp)
 8002474:	80026b00 	call	80026b0 <XferInTransfer>
 8002478:	e0bffb05 	stb	r2,-20(fp)
        if( rcode ) {
 800247c:	e0bffb03 	ldbu	r2,-20(fp)
 8002480:	10000226 	beq	r2,zero,800248c <XferCtrlData+0xb4>
        return( rcode );
 8002484:	e0bffb03 	ldbu	r2,-20(fp)
 8002488:	00000806 	br	80024ac <XferCtrlData+0xd4>
        }
        rcode = XferDispatchPkt( tokOUTHS, ep );
 800248c:	e0bffd03 	ldbu	r2,-12(fp)
 8002490:	100b883a 	mov	r5,r2
 8002494:	01002804 	movi	r4,160
 8002498:	80025340 	call	8002534 <XferDispatchPkt>
 800249c:	e0bffb05 	stb	r2,-20(fp)
        return( rcode );
 80024a0:	e0bffb03 	ldbu	r2,-20(fp)
 80024a4:	00000106 	br	80024ac <XferCtrlData+0xd4>
    }
    else {              //OUT not implemented
        return( 0xff );
 80024a8:	00bfffc4 	movi	r2,-1
    }
}
 80024ac:	e037883a 	mov	sp,fp
 80024b0:	dfc00117 	ldw	ra,4(sp)
 80024b4:	df000017 	ldw	fp,0(sp)
 80024b8:	dec00204 	addi	sp,sp,8
 80024bc:	f800283a 	ret

080024c0 <XferCtrlND>:
/* Control transfer with status stage and no data stage */
BYTE XferCtrlND( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 80024c0:	defff904 	addi	sp,sp,-28
 80024c4:	dfc00615 	stw	ra,24(sp)
 80024c8:	df000515 	stw	fp,20(sp)
 80024cc:	df000504 	addi	fp,sp,20
 80024d0:	2807883a 	mov	r3,r5
 80024d4:	3005883a 	mov	r2,r6
 80024d8:	e1ffff15 	stw	r7,-4(fp)
 80024dc:	e13ffc05 	stb	r4,-16(fp)
 80024e0:	e0fffd05 	stb	r3,-12(fp)
 80024e4:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;
    if( direction ) { //GET
 80024e8:	e0800217 	ldw	r2,8(fp)
 80024ec:	10000626 	beq	r2,zero,8002508 <XferCtrlND+0x48>
        rcode = XferDispatchPkt( tokOUTHS, ep );
 80024f0:	e0bffd03 	ldbu	r2,-12(fp)
 80024f4:	100b883a 	mov	r5,r2
 80024f8:	01002804 	movi	r4,160
 80024fc:	80025340 	call	8002534 <XferDispatchPkt>
 8002500:	e0bffb05 	stb	r2,-20(fp)
 8002504:	00000506 	br	800251c <XferCtrlND+0x5c>
    }
    else {
        rcode = XferDispatchPkt( tokINHS, ep );
 8002508:	e0bffd03 	ldbu	r2,-12(fp)
 800250c:	100b883a 	mov	r5,r2
 8002510:	01002004 	movi	r4,128
 8002514:	80025340 	call	8002534 <XferDispatchPkt>
 8002518:	e0bffb05 	stb	r2,-20(fp)
    }
    return( rcode );
 800251c:	e0bffb03 	ldbu	r2,-20(fp)
}
 8002520:	e037883a 	mov	sp,fp
 8002524:	dfc00117 	ldw	ra,4(sp)
 8002528:	df000017 	ldw	fp,0(sp)
 800252c:	dec00204 	addi	sp,sp,8
 8002530:	f800283a 	ret

08002534 <XferDispatchPkt>:
/* Result code: 0 success, nonzero = error condition                                                */
/* If NAK, tries to re-send up to USB_NAK_LIMIT times                                               */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */
/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
BYTE XferDispatchPkt( BYTE token, BYTE ep )
{
 8002534:	defff904 	addi	sp,sp,-28
 8002538:	dfc00615 	stw	ra,24(sp)
 800253c:	df000515 	stw	fp,20(sp)
 8002540:	df000504 	addi	fp,sp,20
 8002544:	2007883a 	mov	r3,r4
 8002548:	2805883a 	mov	r2,r5
 800254c:	e0fffe05 	stb	r3,-8(fp)
 8002550:	e0bfff05 	stb	r2,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8002554:	d0a50517 	ldw	r2,-27628(gp)
 DWORD timeout = (alt_nticks()*1000)/alt_ticks_per_second() + USB_XFER_TIMEOUT;
 8002558:	0140fa04 	movi	r5,1000
 800255c:	1009883a 	mov	r4,r2
 8002560:	80033380 	call	8003338 <__mulsi3>
 8002564:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8002568:	d0a50417 	ldw	r2,-27632(gp)
 800256c:	100b883a 	mov	r5,r2
 8002570:	1809883a 	mov	r4,r3
 8002574:	800327c0 	call	800327c <__udivsi3>
 8002578:	1084e204 	addi	r2,r2,5000
 800257c:	e0bffc15 	stw	r2,-16(fp)
 BYTE tmpdata;
 BYTE rcode;
 char retry_count = 0;
 8002580:	e03ffb45 	stb	zero,-19(fp)
 BYTE nak_count = 0;
 8002584:	e03ffb85 	stb	zero,-18(fp)

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
 8002588:	e0fffe03 	ldbu	r3,-8(fp)
 800258c:	e0bfff03 	ldbu	r2,-4(fp)
 8002590:	1884b03a 	or	r2,r3,r2
 8002594:	10803fcc 	andi	r2,r2,255
 8002598:	100b883a 	mov	r5,r2
 800259c:	01003c04 	movi	r4,240
 80025a0:	8001b440 	call	8001b44 <MAXreg_wr>
        rcode = 0xff;
 80025a4:	00bfffc4 	movi	r2,-1
 80025a8:	e0bffb05 	stb	r2,-20(fp)
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 80025ac:	00000d06 	br	80025e4 <XferDispatchPkt+0xb0>
            tmpdata = MAXreg_rd( rHIRQ );
 80025b0:	01003204 	movi	r4,200
 80025b4:	8001d300 	call	8001d30 <MAXreg_rd>
 80025b8:	e0bffd05 	stb	r2,-12(fp)
            if( tmpdata & bmHXFRDNIRQ ) {
 80025bc:	e0bffd03 	ldbu	r2,-12(fp)
 80025c0:	10803fcc 	andi	r2,r2,255
 80025c4:	1080201c 	xori	r2,r2,128
 80025c8:	10bfe004 	addi	r2,r2,-128
 80025cc:	1000050e 	bge	r2,zero,80025e4 <XferDispatchPkt+0xb0>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
 80025d0:	01402004 	movi	r5,128
 80025d4:	01003204 	movi	r4,200
 80025d8:	8001b440 	call	8001b44 <MAXreg_wr>
                rcode = 0x00;
 80025dc:	e03ffb05 	stb	zero,-20(fp)
                break;
 80025e0:	00000c06 	br	8002614 <XferDispatchPkt+0xe0>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 80025e4:	d0a50517 	ldw	r2,-27628(gp)
 BYTE nak_count = 0;

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
        rcode = 0xff;
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 80025e8:	0140fa04 	movi	r5,1000
 80025ec:	1009883a 	mov	r4,r2
 80025f0:	80033380 	call	8003338 <__mulsi3>
 80025f4:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 80025f8:	d0a50417 	ldw	r2,-27632(gp)
 80025fc:	100b883a 	mov	r5,r2
 8002600:	1809883a 	mov	r4,r3
 8002604:	800327c0 	call	800327c <__udivsi3>
 8002608:	1007883a 	mov	r3,r2
 800260c:	e0bffc17 	ldw	r2,-16(fp)
 8002610:	18bfe736 	bltu	r3,r2,80025b0 <__alt_data_end+0xfc0025b0>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
                rcode = 0x00;
                break;
            }
        }
        if( rcode != 0x00 ) {               //exit if timeout
 8002614:	e0bffb03 	ldbu	r2,-20(fp)
 8002618:	10000226 	beq	r2,zero,8002624 <XferDispatchPkt+0xf0>
            return( rcode );
 800261c:	e0bffb03 	ldbu	r2,-20(fp)
 8002620:	00001e06 	br	800269c <XferDispatchPkt+0x168>
        }
        rcode = ( MAXreg_rd( rHRSL ) & 0x0f );
 8002624:	01003e04 	movi	r4,248
 8002628:	8001d300 	call	8001d30 <MAXreg_rd>
 800262c:	108003cc 	andi	r2,r2,15
 8002630:	e0bffb05 	stb	r2,-20(fp)
        if( rcode == hrNAK ) {
 8002634:	e0bffb03 	ldbu	r2,-20(fp)
 8002638:	10800118 	cmpnei	r2,r2,4
 800263c:	1000071e 	bne	r2,zero,800265c <XferDispatchPkt+0x128>
            nak_count++;
 8002640:	e0bffb83 	ldbu	r2,-18(fp)
 8002644:	10800044 	addi	r2,r2,1
 8002648:	e0bffb85 	stb	r2,-18(fp)
            if( nak_count == USB_NAK_LIMIT ) {
 800264c:	e0bffb83 	ldbu	r2,-18(fp)
 8002650:	10803218 	cmpnei	r2,r2,200
 8002654:	10000b1e 	bne	r2,zero,8002684 <XferDispatchPkt+0x150>
                break;
 8002658:	00000f06 	br	8002698 <XferDispatchPkt+0x164>
            }
            else {
                continue;
            }
        }
        if( rcode == hrTIMEOUT ) {
 800265c:	e0bffb03 	ldbu	r2,-20(fp)
 8002660:	10800398 	cmpnei	r2,r2,14
 8002664:	1000091e 	bne	r2,zero,800268c <XferDispatchPkt+0x158>
            retry_count++;
 8002668:	e0bffb43 	ldbu	r2,-19(fp)
 800266c:	10800044 	addi	r2,r2,1
 8002670:	e0bffb45 	stb	r2,-19(fp)
            if( retry_count == USB_RETRY_LIMIT ) {
 8002674:	e0bffb47 	ldb	r2,-19(fp)
 8002678:	108000d8 	cmpnei	r2,r2,3
 800267c:	10000526 	beq	r2,zero,8002694 <XferDispatchPkt+0x160>
                break;
            }
            else {
                continue;
 8002680:	00000106 	br	8002688 <XferDispatchPkt+0x154>
            nak_count++;
            if( nak_count == USB_NAK_LIMIT ) {
                break;
            }
            else {
                continue;
 8002684:	0001883a 	nop
            else {
                continue;
            }
        }
        else break;
    }//while( 1 )
 8002688:	003fbf06 	br	8002588 <__alt_data_end+0xfc002588>
            }
            else {
                continue;
            }
        }
        else break;
 800268c:	0001883a 	nop
 8002690:	00000106 	br	8002698 <XferDispatchPkt+0x164>
            }
        }
        if( rcode == hrTIMEOUT ) {
            retry_count++;
            if( retry_count == USB_RETRY_LIMIT ) {
                break;
 8002694:	0001883a 	nop
                continue;
            }
        }
        else break;
    }//while( 1 )
    return( rcode );
 8002698:	e0bffb03 	ldbu	r2,-20(fp)
}
 800269c:	e037883a 	mov	sp,fp
 80026a0:	dfc00117 	ldw	ra,4(sp)
 80026a4:	df000017 	ldw	fp,0(sp)
 80026a8:	dec00204 	addi	sp,sp,8
 80026ac:	f800283a 	ret

080026b0 <XferInTransfer>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes.
    Keep sending INs and writes data to memory area pointed by 'data' */
/* rcode 0 if no errors. rcode 01-0f is relayed from prvXferDispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
BYTE XferInTransfer( BYTE addr/* not sure if it's necessary */, BYTE ep, WORD nbytes, BYTE* data, BYTE maxpktsize )
{
 80026b0:	defff804 	addi	sp,sp,-32
 80026b4:	dfc00715 	stw	ra,28(sp)
 80026b8:	df000615 	stw	fp,24(sp)
 80026bc:	df000604 	addi	fp,sp,24
 80026c0:	2011883a 	mov	r8,r4
 80026c4:	2809883a 	mov	r4,r5
 80026c8:	3007883a 	mov	r3,r6
 80026cc:	e1fffe15 	stw	r7,-8(fp)
 80026d0:	e0800217 	ldw	r2,8(fp)
 80026d4:	e23ffb05 	stb	r8,-20(fp)
 80026d8:	e13ffc05 	stb	r4,-16(fp)
 80026dc:	e0fffd0d 	sth	r3,-12(fp)
 80026e0:	e0bfff05 	stb	r2,-4(fp)
 BYTE rcode;
 BYTE i;
 BYTE tmpbyte;
 BYTE pktsize;
 WORD xfrlen = 0;
 80026e4:	e03ffa0d 	sth	zero,-24(fp)
    MAXreg_wr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
 80026e8:	e0fffb03 	ldbu	r3,-20(fp)
 80026ec:	00820074 	movhi	r2,2049
 80026f0:	10aea304 	addi	r2,r2,-17780
 80026f4:	180690fa 	slli	r3,r3,3
 80026f8:	10c5883a 	add	r2,r2,r3
 80026fc:	10c00017 	ldw	r3,0(r2)
 8002700:	e0bffc03 	ldbu	r2,-16(fp)
 8002704:	100490fa 	slli	r2,r2,3
 8002708:	1885883a 	add	r2,r3,r2
 800270c:	10800183 	ldbu	r2,6(r2)
 8002710:	10803fcc 	andi	r2,r2,255
 8002714:	100b883a 	mov	r5,r2
 8002718:	01003a04 	movi	r4,232
 800271c:	8001b440 	call	8001b44 <MAXreg_wr>
    while( 1 ) { // use a 'return' to exit this loop
        rcode = XferDispatchPkt( tokIN, ep );           //IN packet to EP-'endpoint'. Function takes care of NAKS.
 8002720:	e0bffc03 	ldbu	r2,-16(fp)
 8002724:	100b883a 	mov	r5,r2
 8002728:	0009883a 	mov	r4,zero
 800272c:	80025340 	call	8002534 <XferDispatchPkt>
 8002730:	e0bffa85 	stb	r2,-22(fp)
        if( rcode ) {
 8002734:	e0bffa83 	ldbu	r2,-22(fp)
 8002738:	10000226 	beq	r2,zero,8002744 <XferInTransfer+0x94>
            return( rcode );                            //should be 0, indicating ACK. Else return error code.
 800273c:	e0bffa83 	ldbu	r2,-22(fp)
 8002740:	00003a06 	br	800282c <XferInTransfer+0x17c>
        }
        /* check for RCVDAVIRQ and generate error if not present */
        /* the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred. Need to add handling for that */
        if(( MAXreg_rd( rHIRQ ) & bmRCVDAVIRQ ) == 0 ) {
 8002744:	01003204 	movi	r4,200
 8002748:	8001d300 	call	8001d30 <MAXreg_rd>
 800274c:	10803fcc 	andi	r2,r2,255
 8002750:	1080010c 	andi	r2,r2,4
 8002754:	1000021e 	bne	r2,zero,8002760 <XferInTransfer+0xb0>
            return ( 0xf0 );                            //receive error
 8002758:	00bffc04 	movi	r2,-16
 800275c:	00003306 	br	800282c <XferInTransfer+0x17c>
        }
        pktsize = MAXreg_rd( rRCVBC );                  //number of received bytes
 8002760:	01000c04 	movi	r4,48
 8002764:	8001d300 	call	8001d30 <MAXreg_rd>
 8002768:	e0bffac5 	stb	r2,-21(fp)
        //printf ("pktsize: %d\n", pktsize);
        data = MAXbytes_rd( rRCVFIFO, pktsize, data );
 800276c:	e0bffac3 	ldbu	r2,-21(fp)
 8002770:	e1bffe17 	ldw	r6,-8(fp)
 8002774:	100b883a 	mov	r5,r2
 8002778:	01000204 	movi	r4,8
 800277c:	8001db80 	call	8001db8 <MAXbytes_rd>
 8002780:	e0bffe15 	stw	r2,-8(fp)
        MAXreg_wr( rHIRQ, bmRCVDAVIRQ );                // Clear the IRQ & free the buffer
 8002784:	01400104 	movi	r5,4
 8002788:	01003204 	movi	r4,200
 800278c:	8001b440 	call	8001b44 <MAXreg_wr>
        xfrlen += pktsize;                              // add this packet's byte count to total transfer length
 8002790:	e0fffac3 	ldbu	r3,-21(fp)
 8002794:	e0bffa0b 	ldhu	r2,-24(fp)
 8002798:	1885883a 	add	r2,r3,r2
 800279c:	e0bffa0d 	sth	r2,-24(fp)
        /* The transfer is complete under two conditions:           */
        /* 1. The device sent a short packet (L.T. maxPacketSize)   */
        /* 2. 'nbytes' have been transferred.                       */
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {    // have we transferred 'nbytes' bytes?
 80027a0:	e0fffac3 	ldbu	r3,-21(fp)
 80027a4:	e0bfff03 	ldbu	r2,-4(fp)
 80027a8:	18800336 	bltu	r3,r2,80027b8 <XferInTransfer+0x108>
 80027ac:	e0fffa0b 	ldhu	r3,-24(fp)
 80027b0:	e0bffd0b 	ldhu	r2,-12(fp)
 80027b4:	18bfda36 	bltu	r3,r2,8002720 <__alt_data_end+0xfc002720>
            if( MAXreg_rd( rHRSL ) & bmRCVTOGRD ) {                 //save toggle value
 80027b8:	01003e04 	movi	r4,248
 80027bc:	8001d300 	call	8001d30 <MAXreg_rd>
 80027c0:	10803fcc 	andi	r2,r2,255
 80027c4:	1080040c 	andi	r2,r2,16
 80027c8:	10000c26 	beq	r2,zero,80027fc <XferInTransfer+0x14c>
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 80027cc:	e0fffb03 	ldbu	r3,-20(fp)
 80027d0:	00820074 	movhi	r2,2049
 80027d4:	10aea304 	addi	r2,r2,-17780
 80027d8:	180690fa 	slli	r3,r3,3
 80027dc:	10c5883a 	add	r2,r2,r3
 80027e0:	10c00017 	ldw	r3,0(r2)
 80027e4:	e0bffc03 	ldbu	r2,-16(fp)
 80027e8:	100490fa 	slli	r2,r2,3
 80027ec:	1885883a 	add	r2,r3,r2
 80027f0:	00c00804 	movi	r3,32
 80027f4:	10c00185 	stb	r3,6(r2)
 80027f8:	00000b06 	br	8002828 <XferInTransfer+0x178>
            }
            else {
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
 80027fc:	e0fffb03 	ldbu	r3,-20(fp)
 8002800:	00820074 	movhi	r2,2049
 8002804:	10aea304 	addi	r2,r2,-17780
 8002808:	180690fa 	slli	r3,r3,3
 800280c:	10c5883a 	add	r2,r2,r3
 8002810:	10c00017 	ldw	r3,0(r2)
 8002814:	e0bffc03 	ldbu	r2,-16(fp)
 8002818:	100490fa 	slli	r2,r2,3
 800281c:	1885883a 	add	r2,r3,r2
 8002820:	00c00404 	movi	r3,16
 8002824:	10c00185 	stb	r3,6(r2)
            }
            return( 0 );
 8002828:	0005883a 	mov	r2,zero
        }
  }//while( 1 )
}
 800282c:	e037883a 	mov	sp,fp
 8002830:	dfc00117 	ldw	ra,4(sp)
 8002834:	df000017 	ldw	fp,0(sp)
 8002838:	dec00204 	addi	sp,sp,8
 800283c:	f800283a 	ret

08002840 <USB_init>:
/* initialization of USB data structures */
void USB_init( void )
{
 8002840:	defffe04 	addi	sp,sp,-8
 8002844:	df000115 	stw	fp,4(sp)
 8002848:	df000104 	addi	fp,sp,4
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 800284c:	e03fff05 	stb	zero,-4(fp)
 8002850:	00001006 	br	8002894 <USB_init+0x54>
        devtable[ i ].epinfo = NULL;       //clear device table
 8002854:	e0ffff03 	ldbu	r3,-4(fp)
 8002858:	00820074 	movhi	r2,2049
 800285c:	10aea304 	addi	r2,r2,-17780
 8002860:	180690fa 	slli	r3,r3,3
 8002864:	10c5883a 	add	r2,r2,r3
 8002868:	10000015 	stw	zero,0(r2)
        devtable[ i ].devclass = 0;
 800286c:	e0ffff03 	ldbu	r3,-4(fp)
 8002870:	00820074 	movhi	r2,2049
 8002874:	10aea304 	addi	r2,r2,-17780
 8002878:	180690fa 	slli	r3,r3,3
 800287c:	10c5883a 	add	r2,r2,r3
 8002880:	10800104 	addi	r2,r2,4
 8002884:	10000005 	stb	zero,0(r2)
}
/* initialization of USB data structures */
void USB_init( void )
{
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 8002888:	e0bfff03 	ldbu	r2,-4(fp)
 800288c:	10800044 	addi	r2,r2,1
 8002890:	e0bfff05 	stb	r2,-4(fp)
 8002894:	e0bfff03 	ldbu	r2,-4(fp)
 8002898:	10800270 	cmpltui	r2,r2,9
 800289c:	103fed1e 	bne	r2,zero,8002854 <__alt_data_end+0xfc002854>
        devtable[ i ].epinfo = NULL;       //clear device table
        devtable[ i ].devclass = 0;
    }
    devtable[ 0 ].epinfo = &dev0ep;  //set single ep for uninitialized device
 80028a0:	00820074 	movhi	r2,2049
 80028a4:	10aea304 	addi	r2,r2,-17780
 80028a8:	d0e4fb04 	addi	r3,gp,-27668
 80028ac:	10c00015 	stw	r3,0(r2)
    dev0ep.MaxPktSize = 0;
 80028b0:	d024fb8d 	sth	zero,-27666(gp)
    dev0ep.sndToggle = bmSNDTOG0;   //set DATA0/1 toggles to 0
 80028b4:	00801004 	movi	r2,64
 80028b8:	d0a4fc45 	stb	r2,-27663(gp)
    dev0ep.rcvToggle = bmRCVTOG0;
 80028bc:	00800404 	movi	r2,16
 80028c0:	d0a4fc85 	stb	r2,-27662(gp)
}
 80028c4:	0001883a 	nop
 80028c8:	e037883a 	mov	sp,fp
 80028cc:	df000017 	ldw	fp,0(sp)
 80028d0:	dec00104 	addi	sp,sp,4
 80028d4:	f800283a 	ret

080028d8 <USB_Task>:
/* error codes: 01-0f HRSLT        */
/* ff - unsupported device         */
/* fe - no address available       */
/* fd - no client driver available */
void USB_Task( void )
{
 80028d8:	deffb204 	addi	sp,sp,-312
 80028dc:	dfc04d15 	stw	ra,308(sp)
 80028e0:	df004c15 	stw	fp,304(sp)
 80028e4:	dc004b15 	stw	r16,300(sp)
 80028e8:	df004c04 	addi	fp,sp,304
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 80028ec:	d0a00503 	ldbu	r2,-32748(gp)
 80028f0:	10803fcc 	andi	r2,r2,255
 80028f4:	10803c0c 	andi	r2,r2,240
 80028f8:	10c00820 	cmpeqi	r3,r2,32
 80028fc:	1801121e 	bne	r3,zero,8002d48 <USB_Task+0x470>
 8002900:	10c00848 	cmpgei	r3,r2,33
 8002904:	1800041e 	bne	r3,zero,8002918 <USB_Task+0x40>
 8002908:	10000a26 	beq	r2,zero,8002934 <USB_Task+0x5c>
 800290c:	10800420 	cmpeqi	r2,r2,16
 8002910:	10001b1e 	bne	r2,zero,8002980 <USB_Task+0xa8>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
 8002914:	00017a06 	br	8002f00 <USB_Task+0x628>
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 8002918:	10c01020 	cmpeqi	r3,r2,64
 800291c:	18016f1e 	bne	r3,zero,8002edc <USB_Task+0x604>
 8002920:	10c03fe0 	cmpeqi	r3,r2,255
 8002924:	18016f1e 	bne	r3,zero,8002ee4 <USB_Task+0x60c>
 8002928:	10800c20 	cmpeqi	r2,r2,48
 800292c:	1001441e 	bne	r2,zero,8002e40 <USB_Task+0x568>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
 8002930:	00017306 	br	8002f00 <USB_Task+0x628>
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
 8002934:	d0a00503 	ldbu	r2,-32748(gp)
 8002938:	10803fcc 	andi	r2,r2,255
 800293c:	10c000e0 	cmpeqi	r3,r2,3
 8002940:	1800091e 	bne	r3,zero,8002968 <USB_Task+0x90>
 8002944:	10c00120 	cmpeqi	r3,r2,4
 8002948:	18000b1e 	bne	r3,zero,8002978 <USB_Task+0xa0>
 800294c:	10800060 	cmpeqi	r2,r2,1
 8002950:	1000011e 	bne	r2,zero,8002958 <USB_Task+0x80>
                    break;
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
 8002954:	00016a06 	br	8002f00 <USB_Task+0x628>
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
                case( USB_DETACHED_SUBSTATE_INITIALIZE ):
                    /* cleanup device data structures */
                    USB_init();
 8002958:	80028400 	call	8002840 <USB_init>
                    usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 800295c:	008000c4 	movi	r2,3
 8002960:	d0a00505 	stb	r2,-32748(gp)
                    break;
 8002964:	00000506 	br	800297c <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE ):
                    /* Do nothing */
                    MAXreg_wr(rHCTL,bmSAMPLEBUS);
 8002968:	01400104 	movi	r5,4
 800296c:	01003a04 	movi	r4,232
 8002970:	8001b440 	call	8001b44 <MAXreg_wr>
                    break;
 8002974:	00000106 	br	800297c <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
 8002978:	0001883a 	nop
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
 800297c:	00016006 	br	8002f00 <USB_Task+0x628>
            /**/
        case( USB_STATE_ATTACHED ):                     //prepare for enumeration
            switch( usb_task_state ) {
 8002980:	d0a00503 	ldbu	r2,-32748(gp)
 8002984:	10803fcc 	andi	r2,r2,255
 8002988:	10bffc04 	addi	r2,r2,-16
 800298c:	10c001a8 	cmpgeui	r3,r2,6
 8002990:	1801561e 	bne	r3,zero,8002eec <USB_Task+0x614>
 8002994:	100690ba 	slli	r3,r2,2
 8002998:	00820034 	movhi	r2,2048
 800299c:	108a6b04 	addi	r2,r2,10668
 80029a0:	1885883a 	add	r2,r3,r2
 80029a4:	10800017 	ldw	r2,0(r2)
 80029a8:	1000683a 	jmp	r2
 80029ac:	080029c4 	addi	zero,at,167
 80029b0:	080029fc 	xorhi	zero,at,167
 80029b4:	08002a38 	rdprs	zero,at,168
 80029b8:	08002a5c 	xori	zero,at,169
 80029bc:	08002a9c 	xori	zero,at,170
 80029c0:	08002ab0 	cmpltui	zero,at,170
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 80029c4:	d0a50517 	ldw	r2,-27628(gp)
                case( USB_STATE_ATTACHED ):
                    usb_delay = (alt_nticks()*1000)/alt_ticks_per_second() + 200;           //initial settle 200ms
 80029c8:	0140fa04 	movi	r5,1000
 80029cc:	1009883a 	mov	r4,r2
 80029d0:	80033380 	call	8003338 <__mulsi3>
 80029d4:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 80029d8:	d0a50417 	ldw	r2,-27632(gp)
 80029dc:	100b883a 	mov	r5,r2
 80029e0:	1809883a 	mov	r4,r3
 80029e4:	800327c0 	call	800327c <__udivsi3>
 80029e8:	10803204 	addi	r2,r2,200
 80029ec:	d0a4fe15 	stw	r2,-27656(gp)
                    usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 80029f0:	00800444 	movi	r2,17
 80029f4:	d0a00505 	stb	r2,-32748(gp)
                    break;//case( USB_STATE_ATTACHED )
 80029f8:	0000d206 	br	8002d44 <USB_Task+0x46c>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 80029fc:	d0a50517 	ldw	r2,-27628(gp)
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
 8002a00:	0140fa04 	movi	r5,1000
 8002a04:	1009883a 	mov	r4,r2
 8002a08:	80033380 	call	8003338 <__mulsi3>
 8002a0c:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8002a10:	d0a50417 	ldw	r2,-27632(gp)
 8002a14:	100b883a 	mov	r5,r2
 8002a18:	1809883a 	mov	r4,r3
 8002a1c:	800327c0 	call	800327c <__udivsi3>
 8002a20:	1007883a 	mov	r3,r2
 8002a24:	d0a4fe17 	ldw	r2,-27656(gp)
 8002a28:	10c0c32e 	bgeu	r2,r3,8002d38 <USB_Task+0x460>
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 8002a2c:	00800484 	movi	r2,18
 8002a30:	d0a00505 	stb	r2,-32748(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 8002a34:	0000c006 	br	8002d38 <USB_Task+0x460>
                case( USB_ATTACHED_SUBSTATE_RESET_DEVICE ):
                    MAXreg_wr( rHIRQ, bmBUSEVENTIRQ );                               //clear bus event IRQ
 8002a38:	01400044 	movi	r5,1
 8002a3c:	01003204 	movi	r4,200
 8002a40:	8001b440 	call	8001b44 <MAXreg_wr>
                    MAXreg_wr( rHCTL, bmBUSRST );                                    //issue bus reset
 8002a44:	01400044 	movi	r5,1
 8002a48:	01003a04 	movi	r4,232
 8002a4c:	8001b440 	call	8001b44 <MAXreg_wr>
                    usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 8002a50:	008004c4 	movi	r2,19
 8002a54:	d0a00505 	stb	r2,-32748(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_RESET_DEVICE )
 8002a58:	0000ba06 	br	8002d44 <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE ):                  //wait for bus reset and first SOF
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
 8002a5c:	01003a04 	movi	r4,232
 8002a60:	8001d300 	call	8001d30 <MAXreg_rd>
 8002a64:	10803fcc 	andi	r2,r2,255
 8002a68:	1080004c 	andi	r2,r2,1
 8002a6c:	1000b41e 	bne	r2,zero,8002d40 <USB_Task+0x468>
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
 8002a70:	01003604 	movi	r4,216
 8002a74:	8001d300 	call	8001d30 <MAXreg_rd>
 8002a78:	10800214 	ori	r2,r2,8
 8002a7c:	e0bfb945 	stb	r2,-283(fp)
                        MAXreg_wr( rMODE, tmpdata );
 8002a80:	e0bfb943 	ldbu	r2,-283(fp)
 8002a84:	100b883a 	mov	r5,r2
 8002a88:	01003604 	movi	r4,216
 8002a8c:	8001b440 	call	8001b44 <MAXreg_wr>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 8002a90:	00800504 	movi	r2,20
 8002a94:	d0a00505 	stb	r2,-32748(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 8002a98:	0000a906 	br	8002d40 <USB_Task+0x468>
                case( USB_ATTACHED_SUBSTATE_WAIT_SOF ):
                    if( MAXreg_rd( rHIRQ ) | bmFRAMEIRQ ) {                     //when first SOF received we can continue
 8002a9c:	01003204 	movi	r4,200
 8002aa0:	8001d300 	call	8001d30 <MAXreg_rd>
                        usb_task_state = USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE;
 8002aa4:	00800544 	movi	r2,21
 8002aa8:	d0a00505 	stb	r2,-32748(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_SOF )
 8002aac:	0000a506 	br	8002d44 <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):   //send request for first 8 bytes of device descriptor
                    devtable[ 0 ].epinfo->MaxPktSize = 0x0008;             //fill max packet size with minimum allowed
 8002ab0:	00820074 	movhi	r2,2049
 8002ab4:	10aea304 	addi	r2,r2,-17780
 8002ab8:	10800017 	ldw	r2,0(r2)
 8002abc:	00c00204 	movi	r3,8
 8002ac0:	10c0008d 	sth	r3,2(r2)
                	rcode = XferGetDevDescr( 0, 0, 8, (BYTE *)&buf );       //get device descriptor size
 8002ac4:	e0bfba04 	addi	r2,fp,-280
 8002ac8:	d8800415 	stw	r2,16(sp)
 8002acc:	00800204 	movi	r2,8
 8002ad0:	d8800315 	stw	r2,12(sp)
 8002ad4:	d8000215 	stw	zero,8(sp)
 8002ad8:	00800044 	movi	r2,1
 8002adc:	d8800115 	stw	r2,4(sp)
 8002ae0:	d8000015 	stw	zero,0(sp)
 8002ae4:	01c00184 	movi	r7,6
 8002ae8:	01802004 	movi	r6,128
 8002aec:	000b883a 	mov	r5,zero
 8002af0:	0009883a 	mov	r4,zero
 8002af4:	800228c0 	call	800228c <XferCtrlReq>
 8002af8:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
 8002afc:	e0bfb983 	ldbu	r2,-282(fp)
 8002b00:	1000861e 	bne	r2,zero,8002d1c <USB_Task+0x444>
                        devtable[ 0 ].epinfo->MaxPktSize = buf.bMaxPacketSize0;
 8002b04:	00820074 	movhi	r2,2049
 8002b08:	10aea304 	addi	r2,r2,-17780
 8002b0c:	10800017 	ldw	r2,0(r2)
 8002b10:	e0ffbbc3 	ldbu	r3,-273(fp)
 8002b14:	18c03fcc 	andi	r3,r3,255
 8002b18:	10c0008d 	sth	r3,2(r2)

                        rcode = XferGetDevDescr( 0, 0, buf.bLength, (BYTE *)&buf );     //get full descriptor
 8002b1c:	e0bfba03 	ldbu	r2,-280(fp)
 8002b20:	10803fcc 	andi	r2,r2,255
 8002b24:	e0ffba04 	addi	r3,fp,-280
 8002b28:	d8c00415 	stw	r3,16(sp)
 8002b2c:	d8800315 	stw	r2,12(sp)
 8002b30:	d8000215 	stw	zero,8(sp)
 8002b34:	00800044 	movi	r2,1
 8002b38:	d8800115 	stw	r2,4(sp)
 8002b3c:	d8000015 	stw	zero,0(sp)
 8002b40:	01c00184 	movi	r7,6
 8002b44:	01802004 	movi	r6,128
 8002b48:	000b883a 	mov	r5,zero
 8002b4c:	0009883a 	mov	r4,zero
 8002b50:	800228c0 	call	800228c <XferCtrlReq>
 8002b54:	e0bfb985 	stb	r2,-282(fp)
                        //pull the string descriptor for the product if it exists
            			//hackish, store this somewhere
                        if (buf.iManufacturer != 0)
 8002b58:	e0bfbd83 	ldbu	r2,-266(fp)
 8002b5c:	10803fcc 	andi	r2,r2,255
 8002b60:	10003426 	beq	r2,zero,8002c34 <USB_Task+0x35c>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                			rcode = XferGetStrDescr( 0, 0, 2, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 8002b64:	e0bfbd83 	ldbu	r2,-266(fp)
 8002b68:	10803fcc 	andi	r2,r2,255
 8002b6c:	e0ffbe84 	addi	r3,fp,-262
 8002b70:	d8c00415 	stw	r3,16(sp)
 8002b74:	00c00084 	movi	r3,2
 8002b78:	d8c00315 	stw	r3,12(sp)
 8002b7c:	00c10244 	movi	r3,1033
 8002b80:	d8c00215 	stw	r3,8(sp)
 8002b84:	00c000c4 	movi	r3,3
 8002b88:	d8c00115 	stw	r3,4(sp)
 8002b8c:	d8800015 	stw	r2,0(sp)
 8002b90:	01c00184 	movi	r7,6
 8002b94:	01802004 	movi	r6,128
 8002b98:	000b883a 	mov	r5,zero
 8002b9c:	0009883a 	mov	r4,zero
 8002ba0:	800228c0 	call	800228c <XferCtrlReq>
 8002ba4:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 8002ba8:	e0bfbd83 	ldbu	r2,-266(fp)
 8002bac:	10803fcc 	andi	r2,r2,255
 8002bb0:	e0ffbe83 	ldbu	r3,-262(fp)
 8002bb4:	18c03fcc 	andi	r3,r3,255
 8002bb8:	e13fbe84 	addi	r4,fp,-262
 8002bbc:	d9000415 	stw	r4,16(sp)
 8002bc0:	d8c00315 	stw	r3,12(sp)
 8002bc4:	00c10244 	movi	r3,1033
 8002bc8:	d8c00215 	stw	r3,8(sp)
 8002bcc:	00c000c4 	movi	r3,3
 8002bd0:	d8c00115 	stw	r3,4(sp)
 8002bd4:	d8800015 	stw	r2,0(sp)
 8002bd8:	01c00184 	movi	r7,6
 8002bdc:	01802004 	movi	r6,128
 8002be0:	000b883a 	mov	r5,zero
 8002be4:	0009883a 	mov	r4,zero
 8002be8:	800228c0 	call	800228c <XferCtrlReq>
 8002bec:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Mfgr string(%i): %s\n", buf.iManufacturer, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 8002bf0:	e0bfbd83 	ldbu	r2,-266(fp)
 8002bf4:	14003fcc 	andi	r16,r2,255
 8002bf8:	e0bfbe83 	ldbu	r2,-262(fp)
 8002bfc:	10803fcc 	andi	r2,r2,255
 8002c00:	1004d07a 	srli	r2,r2,1
 8002c04:	10bfffc4 	addi	r2,r2,-1
 8002c08:	10c03fcc 	andi	r3,r2,255
 8002c0c:	e0bfbe84 	addi	r2,fp,-262
 8002c10:	10800084 	addi	r2,r2,2
 8002c14:	180b883a 	mov	r5,r3
 8002c18:	1009883a 	mov	r4,r2
 8002c1c:	80030a00 	call	80030a0 <ConvUTF8ToStr>
 8002c20:	100d883a 	mov	r6,r2
 8002c24:	800b883a 	mov	r5,r16
 8002c28:	01020074 	movhi	r4,2049
 8002c2c:	21241804 	addi	r4,r4,-28576
 8002c30:	8003f300 	call	8003f30 <printf>
                		}
                		if (buf.iProduct != 0)
 8002c34:	e0bfbdc3 	ldbu	r2,-265(fp)
 8002c38:	10803fcc 	andi	r2,r2,255
 8002c3c:	10003426 	beq	r2,zero,8002d10 <USB_Task+0x438>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                        	rcode = XferGetStrDescr( 0, 0, 2, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 8002c40:	e0bfbdc3 	ldbu	r2,-265(fp)
 8002c44:	10803fcc 	andi	r2,r2,255
 8002c48:	e0ffbe84 	addi	r3,fp,-262
 8002c4c:	d8c00415 	stw	r3,16(sp)
 8002c50:	00c00084 	movi	r3,2
 8002c54:	d8c00315 	stw	r3,12(sp)
 8002c58:	00c10244 	movi	r3,1033
 8002c5c:	d8c00215 	stw	r3,8(sp)
 8002c60:	00c000c4 	movi	r3,3
 8002c64:	d8c00115 	stw	r3,4(sp)
 8002c68:	d8800015 	stw	r2,0(sp)
 8002c6c:	01c00184 	movi	r7,6
 8002c70:	01802004 	movi	r6,128
 8002c74:	000b883a 	mov	r5,zero
 8002c78:	0009883a 	mov	r4,zero
 8002c7c:	800228c0 	call	800228c <XferCtrlReq>
 8002c80:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 8002c84:	e0bfbdc3 	ldbu	r2,-265(fp)
 8002c88:	10803fcc 	andi	r2,r2,255
 8002c8c:	e0ffbe83 	ldbu	r3,-262(fp)
 8002c90:	18c03fcc 	andi	r3,r3,255
 8002c94:	e13fbe84 	addi	r4,fp,-262
 8002c98:	d9000415 	stw	r4,16(sp)
 8002c9c:	d8c00315 	stw	r3,12(sp)
 8002ca0:	00c10244 	movi	r3,1033
 8002ca4:	d8c00215 	stw	r3,8(sp)
 8002ca8:	00c000c4 	movi	r3,3
 8002cac:	d8c00115 	stw	r3,4(sp)
 8002cb0:	d8800015 	stw	r2,0(sp)
 8002cb4:	01c00184 	movi	r7,6
 8002cb8:	01802004 	movi	r6,128
 8002cbc:	000b883a 	mov	r5,zero
 8002cc0:	0009883a 	mov	r4,zero
 8002cc4:	800228c0 	call	800228c <XferCtrlReq>
 8002cc8:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Product string(%i): %s\n", buf.iProduct, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 8002ccc:	e0bfbdc3 	ldbu	r2,-265(fp)
 8002cd0:	14003fcc 	andi	r16,r2,255
 8002cd4:	e0bfbe83 	ldbu	r2,-262(fp)
 8002cd8:	10803fcc 	andi	r2,r2,255
 8002cdc:	1004d07a 	srli	r2,r2,1
 8002ce0:	10bfffc4 	addi	r2,r2,-1
 8002ce4:	10c03fcc 	andi	r3,r2,255
 8002ce8:	e0bfbe84 	addi	r2,fp,-262
 8002cec:	10800084 	addi	r2,r2,2
 8002cf0:	180b883a 	mov	r5,r3
 8002cf4:	1009883a 	mov	r4,r2
 8002cf8:	80030a00 	call	80030a0 <ConvUTF8ToStr>
 8002cfc:	100d883a 	mov	r6,r2
 8002d00:	800b883a 	mov	r5,r16
 8002d04:	01020074 	movhi	r4,2049
 8002d08:	21241e04 	addi	r4,r4,-28552
 8002d0c:	8003f300 	call	8003f30 <printf>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;
 8002d10:	00800804 	movi	r2,32
 8002d14:	d0a00505 	stb	r2,-32748(gp)
                    else {
                        usb_error = rcode;
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 8002d18:	00000a06 	br	8002d44 <USB_Task+0x46c>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;

                    }
                    else {
                        usb_error = rcode;
 8002d1c:	e0bfb983 	ldbu	r2,-282(fp)
 8002d20:	d0a4ff45 	stb	r2,-27651(gp)
                        last_usb_task_state = usb_task_state;
 8002d24:	d0a00503 	ldbu	r2,-32748(gp)
 8002d28:	d0a4fd05 	stb	r2,-27660(gp)
                        usb_task_state = USB_STATE_ERROR;
 8002d2c:	00bfffc4 	movi	r2,-1
 8002d30:	d0a00505 	stb	r2,-32748(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 8002d34:	00000306 	br	8002d44 <USB_Task+0x46c>
                    break;//case( USB_STATE_ATTACHED )
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 8002d38:	0001883a 	nop
 8002d3c:	00006b06 	br	8002eec <USB_Task+0x614>
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
                        MAXreg_wr( rMODE, tmpdata );
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 8002d40:	0001883a 	nop
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
 8002d44:	00006906 	br	8002eec <USB_Task+0x614>
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 8002d48:	00800044 	movi	r2,1
 8002d4c:	e0bfb905 	stb	r2,-284(fp)
 8002d50:	00002d06 	br	8002e08 <USB_Task+0x530>
                if( devtable[ i ].epinfo == NULL ) {
 8002d54:	e0ffb903 	ldbu	r3,-284(fp)
 8002d58:	00820074 	movhi	r2,2049
 8002d5c:	10aea304 	addi	r2,r2,-17780
 8002d60:	180690fa 	slli	r3,r3,3
 8002d64:	10c5883a 	add	r2,r2,r3
 8002d68:	10800017 	ldw	r2,0(r2)
 8002d6c:	1000231e 	bne	r2,zero,8002dfc <USB_Task+0x524>
                    devtable[ i ].epinfo = devtable[ 0 ].epinfo;        //set correct MaxPktSize
 8002d70:	e13fb903 	ldbu	r4,-284(fp)
 8002d74:	00820074 	movhi	r2,2049
 8002d78:	10aea304 	addi	r2,r2,-17780
 8002d7c:	10c00017 	ldw	r3,0(r2)
 8002d80:	00820074 	movhi	r2,2049
 8002d84:	10aea304 	addi	r2,r2,-17780
 8002d88:	200890fa 	slli	r4,r4,3
 8002d8c:	1105883a 	add	r2,r2,r4
 8002d90:	10c00015 	stw	r3,0(r2)
                    //devtable[ i ].epinfo->MaxPktSize = devtable[ 0 ].epinfo->MaxPktSize;  //copy uninitialized device record to have correct MaxPktSize
                    rcode = XferSetAddr( 0, 0, i );
 8002d94:	e0bfb903 	ldbu	r2,-284(fp)
 8002d98:	d8000415 	stw	zero,16(sp)
 8002d9c:	d8000315 	stw	zero,12(sp)
 8002da0:	d8000215 	stw	zero,8(sp)
 8002da4:	d8000115 	stw	zero,4(sp)
 8002da8:	d8800015 	stw	r2,0(sp)
 8002dac:	01c00144 	movi	r7,5
 8002db0:	000d883a 	mov	r6,zero
 8002db4:	000b883a 	mov	r5,zero
 8002db8:	0009883a 	mov	r4,zero
 8002dbc:	800228c0 	call	800228c <XferCtrlReq>
 8002dc0:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
 8002dc4:	e0bfb983 	ldbu	r2,-282(fp)
 8002dc8:	1000051e 	bne	r2,zero,8002de0 <USB_Task+0x508>
                        tmp_addr = i;
 8002dcc:	e0bfb903 	ldbu	r2,-284(fp)
 8002dd0:	d0a4ff05 	stb	r2,-27652(gp)
                        usb_task_state = USB_STATE_CONFIGURING;
 8002dd4:	00800c04 	movi	r2,48
 8002dd8:	d0a00505 	stb	r2,-32748(gp)
                    else {
                        usb_error = rcode;          //set address error
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
 8002ddc:	00000d06 	br	8002e14 <USB_Task+0x53c>
                    if( rcode == 0 ) {
                        tmp_addr = i;
                        usb_task_state = USB_STATE_CONFIGURING;
                    }
                    else {
                        usb_error = rcode;          //set address error
 8002de0:	e0bfb983 	ldbu	r2,-282(fp)
 8002de4:	d0a4ff45 	stb	r2,-27651(gp)
                        last_usb_task_state = usb_task_state;
 8002de8:	d0a00503 	ldbu	r2,-32748(gp)
 8002dec:	d0a4fd05 	stb	r2,-27660(gp)
                        usb_task_state = USB_STATE_ERROR;
 8002df0:	00bfffc4 	movi	r2,-1
 8002df4:	d0a00505 	stb	r2,-32748(gp)
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
 8002df8:	00000606 	br	8002e14 <USB_Task+0x53c>
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 8002dfc:	e0bfb903 	ldbu	r2,-284(fp)
 8002e00:	10800044 	addi	r2,r2,1
 8002e04:	e0bfb905 	stb	r2,-284(fp)
 8002e08:	e0bfb903 	ldbu	r2,-284(fp)
 8002e0c:	10800230 	cmpltui	r2,r2,8
 8002e10:	103fd01e 	bne	r2,zero,8002d54 <__alt_data_end+0xfc002d54>
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
                }
            }
            if( usb_task_state == USB_STATE_ADDRESSING ) {
 8002e14:	d0a00503 	ldbu	r2,-32748(gp)
 8002e18:	10803fcc 	andi	r2,r2,255
 8002e1c:	10800818 	cmpnei	r2,r2,32
 8002e20:	1000341e 	bne	r2,zero,8002ef4 <USB_Task+0x61c>
                usb_error = 0xfe;
 8002e24:	00bfff84 	movi	r2,-2
 8002e28:	d0a4ff45 	stb	r2,-27651(gp)
                last_usb_task_state = usb_task_state;
 8002e2c:	d0a00503 	ldbu	r2,-32748(gp)
 8002e30:	d0a4fd05 	stb	r2,-27660(gp)
                usb_task_state = USB_STATE_ERROR;
 8002e34:	00bfffc4 	movi	r2,-1
 8002e38:	d0a00505 	stb	r2,-32748(gp)
            }
            break;//case ( USB_STATE_ADDRESSING )
 8002e3c:	00002d06 	br	8002ef4 <USB_Task+0x61c>
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 8002e40:	e03fb905 	stb	zero,-284(fp)
 8002e44:	00001706 	br	8002ea4 <USB_Task+0x5cc>
                rcode = ClientDriverTable[ i ].Initialize( tmp_addr, 0 );
 8002e48:	e0bfb903 	ldbu	r2,-284(fp)
 8002e4c:	04020074 	movhi	r16,2049
 8002e50:	84247d04 	addi	r16,r16,-28172
 8002e54:	01400304 	movi	r5,12
 8002e58:	1009883a 	mov	r4,r2
 8002e5c:	80033380 	call	8003338 <__mulsi3>
 8002e60:	8085883a 	add	r2,r16,r2
 8002e64:	10800017 	ldw	r2,0(r2)
 8002e68:	d0e4ff03 	ldbu	r3,-27652(gp)
 8002e6c:	18c03fcc 	andi	r3,r3,255
 8002e70:	000b883a 	mov	r5,zero
 8002e74:	1809883a 	mov	r4,r3
 8002e78:	103ee83a 	callr	r2
 8002e7c:	e0bfb985 	stb	r2,-282(fp)
                if( rcode == TRUE ) {
 8002e80:	e0bfb983 	ldbu	r2,-282(fp)
 8002e84:	10800058 	cmpnei	r2,r2,1
 8002e88:	1000031e 	bne	r2,zero,8002e98 <USB_Task+0x5c0>
			        usb_task_state = USB_STATE_RUNNING;
 8002e8c:	00801004 	movi	r2,64
 8002e90:	d0a00505 	stb	r2,-32748(gp)
                    break;
 8002e94:	00000606 	br	8002eb0 <USB_Task+0x5d8>
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 8002e98:	e0bfb903 	ldbu	r2,-284(fp)
 8002e9c:	10800044 	addi	r2,r2,1
 8002ea0:	e0bfb905 	stb	r2,-284(fp)
 8002ea4:	e0bfb903 	ldbu	r2,-284(fp)
 8002ea8:	10800130 	cmpltui	r2,r2,4
 8002eac:	103fe61e 	bne	r2,zero,8002e48 <__alt_data_end+0xfc002e48>
                if( rcode == TRUE ) {
			        usb_task_state = USB_STATE_RUNNING;
                    break;
                }
            }
            if( usb_task_state == USB_STATE_CONFIGURING ) {
 8002eb0:	d0a00503 	ldbu	r2,-32748(gp)
 8002eb4:	10803fcc 	andi	r2,r2,255
 8002eb8:	10800c18 	cmpnei	r2,r2,48
 8002ebc:	10000f1e 	bne	r2,zero,8002efc <USB_Task+0x624>
                usb_error = 0xfd;
 8002ec0:	00bfff44 	movi	r2,-3
 8002ec4:	d0a4ff45 	stb	r2,-27651(gp)
                last_usb_task_state = usb_task_state;
 8002ec8:	d0a00503 	ldbu	r2,-32748(gp)
 8002ecc:	d0a4fd05 	stb	r2,-27660(gp)
                usb_task_state = USB_STATE_ERROR;
 8002ed0:	00bfffc4 	movi	r2,-1
 8002ed4:	d0a00505 	stb	r2,-32748(gp)
            }
            break;//( USB_STATE_CONFIGURING )
 8002ed8:	00000806 	br	8002efc <USB_Task+0x624>
        case( USB_STATE_RUNNING ):
          //vTaskDelay( LED_RATE );
            break;//( USB_STATE_RUNNING )
 8002edc:	0001883a 	nop
 8002ee0:	00000706 	br	8002f00 <USB_Task+0x628>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
 8002ee4:	0001883a 	nop
 8002ee8:	00000506 	br	8002f00 <USB_Task+0x628>
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
 8002eec:	0001883a 	nop
 8002ef0:	00000306 	br	8002f00 <USB_Task+0x628>
            if( usb_task_state == USB_STATE_ADDRESSING ) {
                usb_error = 0xfe;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
 8002ef4:	0001883a 	nop
 8002ef8:	00000106 	br	8002f00 <USB_Task+0x628>
            if( usb_task_state == USB_STATE_CONFIGURING ) {
                usb_error = 0xfd;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//( USB_STATE_CONFIGURING )
 8002efc:	0001883a 	nop
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
    }//switch( usb_task_state & STATE_MASK )
}
 8002f00:	0001883a 	nop
 8002f04:	e6ffff04 	addi	sp,fp,-4
 8002f08:	dfc00217 	ldw	ra,8(sp)
 8002f0c:	df000117 	ldw	fp,4(sp)
 8002f10:	dc000017 	ldw	r16,0(sp)
 8002f14:	dec00304 	addi	sp,sp,12
 8002f18:	f800283a 	ret

08002f1c <MSDProbe>:

//place-holders for MSD (mass-storage device) drivers, we don't have them ported.
//returns TRUE if device is successfully identified and configured, otherwise returns FALSE
BOOL MSDProbe( BYTE addr, DWORD flags )
{
 8002f1c:	defffd04 	addi	sp,sp,-12
 8002f20:	df000215 	stw	fp,8(sp)
 8002f24:	df000204 	addi	fp,sp,8
 8002f28:	2005883a 	mov	r2,r4
 8002f2c:	e17fff15 	stw	r5,-4(fp)
 8002f30:	e0bffe05 	stb	r2,-8(fp)
    return( FALSE );
 8002f34:	0005883a 	mov	r2,zero
}
 8002f38:	e037883a 	mov	sp,fp
 8002f3c:	df000017 	ldw	fp,0(sp)
 8002f40:	dec00104 	addi	sp,sp,4
 8002f44:	f800283a 	ret

08002f48 <MSDEventHandler>:

BOOL MSDEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 8002f48:	defffb04 	addi	sp,sp,-20
 8002f4c:	df000415 	stw	fp,16(sp)
 8002f50:	df000404 	addi	fp,sp,16
 8002f54:	2007883a 	mov	r3,r4
 8002f58:	2805883a 	mov	r2,r5
 8002f5c:	e1bffe15 	stw	r6,-8(fp)
 8002f60:	e1ffff15 	stw	r7,-4(fp)
 8002f64:	e0fffc05 	stb	r3,-16(fp)
 8002f68:	e0bffd05 	stb	r2,-12(fp)

	return( FALSE );
 8002f6c:	0005883a 	mov	r2,zero

}
 8002f70:	e037883a 	mov	sp,fp
 8002f74:	df000017 	ldw	fp,0(sp)
 8002f78:	dec00104 	addi	sp,sp,4
 8002f7c:	f800283a 	ret

08002f80 <CDCProbe>:
//CDC (communication device class also not supported)
BOOL CDCProbe( BYTE address, DWORD flags )
{
 8002f80:	defffd04 	addi	sp,sp,-12
 8002f84:	df000215 	stw	fp,8(sp)
 8002f88:	df000204 	addi	fp,sp,8
 8002f8c:	2005883a 	mov	r2,r4
 8002f90:	e17fff15 	stw	r5,-4(fp)
 8002f94:	e0bffe05 	stb	r2,-8(fp)

	return( FALSE );
 8002f98:	0005883a 	mov	r2,zero

}
 8002f9c:	e037883a 	mov	sp,fp
 8002fa0:	df000017 	ldw	fp,0(sp)
 8002fa4:	dec00104 	addi	sp,sp,4
 8002fa8:	f800283a 	ret

08002fac <CDCEventHandler>:

BOOL CDCEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 8002fac:	defffb04 	addi	sp,sp,-20
 8002fb0:	df000415 	stw	fp,16(sp)
 8002fb4:	df000404 	addi	fp,sp,16
 8002fb8:	2007883a 	mov	r3,r4
 8002fbc:	2805883a 	mov	r2,r5
 8002fc0:	e1bffe15 	stw	r6,-8(fp)
 8002fc4:	e1ffff15 	stw	r7,-4(fp)
 8002fc8:	e0fffc05 	stb	r3,-16(fp)
 8002fcc:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
 8002fd0:	0005883a 	mov	r2,zero
}
 8002fd4:	e037883a 	mov	sp,fp
 8002fd8:	df000017 	ldw	fp,0(sp)
 8002fdc:	dec00104 	addi	sp,sp,4
 8002fe0:	f800283a 	ret

08002fe4 <DummyProbe>:

BOOL DummyProbe( BYTE address , DWORD flags )
{
 8002fe4:	defffd04 	addi	sp,sp,-12
 8002fe8:	df000215 	stw	fp,8(sp)
 8002fec:	df000204 	addi	fp,sp,8
 8002ff0:	2005883a 	mov	r2,r4
 8002ff4:	e17fff15 	stw	r5,-4(fp)
 8002ff8:	e0bffe05 	stb	r2,-8(fp)
	return( FALSE );
 8002ffc:	0005883a 	mov	r2,zero
}
 8003000:	e037883a 	mov	sp,fp
 8003004:	df000017 	ldw	fp,0(sp)
 8003008:	dec00104 	addi	sp,sp,4
 800300c:	f800283a 	ret

08003010 <DummyEventHandler>:

BOOL DummyEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 8003010:	defffb04 	addi	sp,sp,-20
 8003014:	df000415 	stw	fp,16(sp)
 8003018:	df000404 	addi	fp,sp,16
 800301c:	2007883a 	mov	r3,r4
 8003020:	2805883a 	mov	r2,r5
 8003024:	e1bffe15 	stw	r6,-8(fp)
 8003028:	e1ffff15 	stw	r7,-4(fp)
 800302c:	e0fffc05 	stb	r3,-16(fp)
 8003030:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
 8003034:	0005883a 	mov	r2,zero
}
 8003038:	e037883a 	mov	sp,fp
 800303c:	df000017 	ldw	fp,0(sp)
 8003040:	dec00104 	addi	sp,sp,4
 8003044:	f800283a 	ret

08003048 <GetUsbTaskState>:
/* Function to access usb_task_state variable from outside */
BYTE GetUsbTaskState( void )
{
 8003048:	deffff04 	addi	sp,sp,-4
 800304c:	df000015 	stw	fp,0(sp)
 8003050:	d839883a 	mov	fp,sp
    return( usb_task_state );
 8003054:	d0a00503 	ldbu	r2,-32748(gp)
}
 8003058:	e037883a 	mov	sp,fp
 800305c:	df000017 	ldw	fp,0(sp)
 8003060:	dec00104 	addi	sp,sp,4
 8003064:	f800283a 	ret

08003068 <GetDevtable>:
/* Function to access devtable[] from outside */
DEV_RECORD* GetDevtable( BYTE index )
{
 8003068:	defffe04 	addi	sp,sp,-8
 800306c:	df000115 	stw	fp,4(sp)
 8003070:	df000104 	addi	fp,sp,4
 8003074:	2005883a 	mov	r2,r4
 8003078:	e0bfff05 	stb	r2,-4(fp)
    return( &devtable[ index ] );
 800307c:	e0bfff03 	ldbu	r2,-4(fp)
 8003080:	100690fa 	slli	r3,r2,3
 8003084:	00820074 	movhi	r2,2049
 8003088:	10aea304 	addi	r2,r2,-17780
 800308c:	1885883a 	add	r2,r3,r2
}
 8003090:	e037883a 	mov	sp,fp
 8003094:	df000017 	ldw	fp,0(sp)
 8003098:	dec00104 	addi	sp,sp,4
 800309c:	f800283a 	ret

080030a0 <ConvUTF8ToStr>:

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
 80030a0:	defffc04 	addi	sp,sp,-16
 80030a4:	df000315 	stw	fp,12(sp)
 80030a8:	df000304 	addi	fp,sp,12
 80030ac:	e13ffe15 	stw	r4,-8(fp)
 80030b0:	2805883a 	mov	r2,r5
 80030b4:	e0bfff05 	stb	r2,-4(fp)
	BYTE i;
	for (i = 0; i < length; i++)
 80030b8:	e03ffd05 	stb	zero,-12(fp)
 80030bc:	00000d06 	br	80030f4 <ConvUTF8ToStr+0x54>
	{
		utf8[i] = utf8[2*i];
 80030c0:	e0bffd03 	ldbu	r2,-12(fp)
 80030c4:	e0fffe17 	ldw	r3,-8(fp)
 80030c8:	1887883a 	add	r3,r3,r2
 80030cc:	e0bffd03 	ldbu	r2,-12(fp)
 80030d0:	1085883a 	add	r2,r2,r2
 80030d4:	1009883a 	mov	r4,r2
 80030d8:	e0bffe17 	ldw	r2,-8(fp)
 80030dc:	1105883a 	add	r2,r2,r4
 80030e0:	10800003 	ldbu	r2,0(r2)
 80030e4:	18800005 	stb	r2,0(r3)
}

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
	BYTE i;
	for (i = 0; i < length; i++)
 80030e8:	e0bffd03 	ldbu	r2,-12(fp)
 80030ec:	10800044 	addi	r2,r2,1
 80030f0:	e0bffd05 	stb	r2,-12(fp)
 80030f4:	e0fffd03 	ldbu	r3,-12(fp)
 80030f8:	e0bfff03 	ldbu	r2,-4(fp)
 80030fc:	18bff036 	bltu	r3,r2,80030c0 <__alt_data_end+0xfc0030c0>
	{
		utf8[i] = utf8[2*i];
	}
	utf8[length] = 0x00;
 8003100:	e0bfff03 	ldbu	r2,-4(fp)
 8003104:	e0fffe17 	ldw	r3,-8(fp)
 8003108:	1885883a 	add	r2,r3,r2
 800310c:	10000005 	stb	zero,0(r2)
	return (char*)utf8;
 8003110:	e0bffe17 	ldw	r2,-8(fp)
}
 8003114:	e037883a 	mov	sp,fp
 8003118:	df000017 	ldw	fp,0(sp)
 800311c:	dec00104 	addi	sp,sp,4
 8003120:	f800283a 	ret

08003124 <__fixunssfsi>:
 8003124:	defffd04 	addi	sp,sp,-12
 8003128:	dc000015 	stw	r16,0(sp)
 800312c:	0413c034 	movhi	r16,20224
 8003130:	800b883a 	mov	r5,r16
 8003134:	dc400115 	stw	r17,4(sp)
 8003138:	dfc00215 	stw	ra,8(sp)
 800313c:	2023883a 	mov	r17,r4
 8003140:	80033600 	call	8003360 <__gesf2>
 8003144:	1000070e 	bge	r2,zero,8003164 <__fixunssfsi+0x40>
 8003148:	8809883a 	mov	r4,r17
 800314c:	8003d300 	call	8003d30 <__fixsfsi>
 8003150:	dfc00217 	ldw	ra,8(sp)
 8003154:	dc400117 	ldw	r17,4(sp)
 8003158:	dc000017 	ldw	r16,0(sp)
 800315c:	dec00304 	addi	sp,sp,12
 8003160:	f800283a 	ret
 8003164:	800b883a 	mov	r5,r16
 8003168:	8809883a 	mov	r4,r17
 800316c:	800384c0 	call	800384c <__subsf3>
 8003170:	1009883a 	mov	r4,r2
 8003174:	8003d300 	call	8003d30 <__fixsfsi>
 8003178:	00e00034 	movhi	r3,32768
 800317c:	10c5883a 	add	r2,r2,r3
 8003180:	003ff306 	br	8003150 <__alt_data_end+0xfc003150>

08003184 <__divsi3>:
 8003184:	20001b16 	blt	r4,zero,80031f4 <__divsi3+0x70>
 8003188:	000f883a 	mov	r7,zero
 800318c:	28001616 	blt	r5,zero,80031e8 <__divsi3+0x64>
 8003190:	200d883a 	mov	r6,r4
 8003194:	29001a2e 	bgeu	r5,r4,8003200 <__divsi3+0x7c>
 8003198:	00800804 	movi	r2,32
 800319c:	00c00044 	movi	r3,1
 80031a0:	00000106 	br	80031a8 <__divsi3+0x24>
 80031a4:	10000d26 	beq	r2,zero,80031dc <__divsi3+0x58>
 80031a8:	294b883a 	add	r5,r5,r5
 80031ac:	10bfffc4 	addi	r2,r2,-1
 80031b0:	18c7883a 	add	r3,r3,r3
 80031b4:	293ffb36 	bltu	r5,r4,80031a4 <__alt_data_end+0xfc0031a4>
 80031b8:	0005883a 	mov	r2,zero
 80031bc:	18000726 	beq	r3,zero,80031dc <__divsi3+0x58>
 80031c0:	0005883a 	mov	r2,zero
 80031c4:	31400236 	bltu	r6,r5,80031d0 <__divsi3+0x4c>
 80031c8:	314dc83a 	sub	r6,r6,r5
 80031cc:	10c4b03a 	or	r2,r2,r3
 80031d0:	1806d07a 	srli	r3,r3,1
 80031d4:	280ad07a 	srli	r5,r5,1
 80031d8:	183ffa1e 	bne	r3,zero,80031c4 <__alt_data_end+0xfc0031c4>
 80031dc:	38000126 	beq	r7,zero,80031e4 <__divsi3+0x60>
 80031e0:	0085c83a 	sub	r2,zero,r2
 80031e4:	f800283a 	ret
 80031e8:	014bc83a 	sub	r5,zero,r5
 80031ec:	39c0005c 	xori	r7,r7,1
 80031f0:	003fe706 	br	8003190 <__alt_data_end+0xfc003190>
 80031f4:	0109c83a 	sub	r4,zero,r4
 80031f8:	01c00044 	movi	r7,1
 80031fc:	003fe306 	br	800318c <__alt_data_end+0xfc00318c>
 8003200:	00c00044 	movi	r3,1
 8003204:	003fee06 	br	80031c0 <__alt_data_end+0xfc0031c0>

08003208 <__modsi3>:
 8003208:	20001716 	blt	r4,zero,8003268 <__modsi3+0x60>
 800320c:	000f883a 	mov	r7,zero
 8003210:	2005883a 	mov	r2,r4
 8003214:	28001216 	blt	r5,zero,8003260 <__modsi3+0x58>
 8003218:	2900162e 	bgeu	r5,r4,8003274 <__modsi3+0x6c>
 800321c:	01800804 	movi	r6,32
 8003220:	00c00044 	movi	r3,1
 8003224:	00000106 	br	800322c <__modsi3+0x24>
 8003228:	30000a26 	beq	r6,zero,8003254 <__modsi3+0x4c>
 800322c:	294b883a 	add	r5,r5,r5
 8003230:	31bfffc4 	addi	r6,r6,-1
 8003234:	18c7883a 	add	r3,r3,r3
 8003238:	293ffb36 	bltu	r5,r4,8003228 <__alt_data_end+0xfc003228>
 800323c:	18000526 	beq	r3,zero,8003254 <__modsi3+0x4c>
 8003240:	1806d07a 	srli	r3,r3,1
 8003244:	11400136 	bltu	r2,r5,800324c <__modsi3+0x44>
 8003248:	1145c83a 	sub	r2,r2,r5
 800324c:	280ad07a 	srli	r5,r5,1
 8003250:	183ffb1e 	bne	r3,zero,8003240 <__alt_data_end+0xfc003240>
 8003254:	38000126 	beq	r7,zero,800325c <__modsi3+0x54>
 8003258:	0085c83a 	sub	r2,zero,r2
 800325c:	f800283a 	ret
 8003260:	014bc83a 	sub	r5,zero,r5
 8003264:	003fec06 	br	8003218 <__alt_data_end+0xfc003218>
 8003268:	0109c83a 	sub	r4,zero,r4
 800326c:	01c00044 	movi	r7,1
 8003270:	003fe706 	br	8003210 <__alt_data_end+0xfc003210>
 8003274:	00c00044 	movi	r3,1
 8003278:	003ff106 	br	8003240 <__alt_data_end+0xfc003240>

0800327c <__udivsi3>:
 800327c:	200d883a 	mov	r6,r4
 8003280:	2900152e 	bgeu	r5,r4,80032d8 <__udivsi3+0x5c>
 8003284:	28001416 	blt	r5,zero,80032d8 <__udivsi3+0x5c>
 8003288:	00800804 	movi	r2,32
 800328c:	00c00044 	movi	r3,1
 8003290:	00000206 	br	800329c <__udivsi3+0x20>
 8003294:	10000e26 	beq	r2,zero,80032d0 <__udivsi3+0x54>
 8003298:	28000516 	blt	r5,zero,80032b0 <__udivsi3+0x34>
 800329c:	294b883a 	add	r5,r5,r5
 80032a0:	10bfffc4 	addi	r2,r2,-1
 80032a4:	18c7883a 	add	r3,r3,r3
 80032a8:	293ffa36 	bltu	r5,r4,8003294 <__alt_data_end+0xfc003294>
 80032ac:	18000826 	beq	r3,zero,80032d0 <__udivsi3+0x54>
 80032b0:	0005883a 	mov	r2,zero
 80032b4:	31400236 	bltu	r6,r5,80032c0 <__udivsi3+0x44>
 80032b8:	314dc83a 	sub	r6,r6,r5
 80032bc:	10c4b03a 	or	r2,r2,r3
 80032c0:	1806d07a 	srli	r3,r3,1
 80032c4:	280ad07a 	srli	r5,r5,1
 80032c8:	183ffa1e 	bne	r3,zero,80032b4 <__alt_data_end+0xfc0032b4>
 80032cc:	f800283a 	ret
 80032d0:	0005883a 	mov	r2,zero
 80032d4:	f800283a 	ret
 80032d8:	00c00044 	movi	r3,1
 80032dc:	003ff406 	br	80032b0 <__alt_data_end+0xfc0032b0>

080032e0 <__umodsi3>:
 80032e0:	2005883a 	mov	r2,r4
 80032e4:	2900122e 	bgeu	r5,r4,8003330 <__umodsi3+0x50>
 80032e8:	28001116 	blt	r5,zero,8003330 <__umodsi3+0x50>
 80032ec:	01800804 	movi	r6,32
 80032f0:	00c00044 	movi	r3,1
 80032f4:	00000206 	br	8003300 <__umodsi3+0x20>
 80032f8:	30000c26 	beq	r6,zero,800332c <__umodsi3+0x4c>
 80032fc:	28000516 	blt	r5,zero,8003314 <__umodsi3+0x34>
 8003300:	294b883a 	add	r5,r5,r5
 8003304:	31bfffc4 	addi	r6,r6,-1
 8003308:	18c7883a 	add	r3,r3,r3
 800330c:	293ffa36 	bltu	r5,r4,80032f8 <__alt_data_end+0xfc0032f8>
 8003310:	18000626 	beq	r3,zero,800332c <__umodsi3+0x4c>
 8003314:	1806d07a 	srli	r3,r3,1
 8003318:	11400136 	bltu	r2,r5,8003320 <__umodsi3+0x40>
 800331c:	1145c83a 	sub	r2,r2,r5
 8003320:	280ad07a 	srli	r5,r5,1
 8003324:	183ffb1e 	bne	r3,zero,8003314 <__alt_data_end+0xfc003314>
 8003328:	f800283a 	ret
 800332c:	f800283a 	ret
 8003330:	00c00044 	movi	r3,1
 8003334:	003ff706 	br	8003314 <__alt_data_end+0xfc003314>

08003338 <__mulsi3>:
 8003338:	0005883a 	mov	r2,zero
 800333c:	20000726 	beq	r4,zero,800335c <__mulsi3+0x24>
 8003340:	20c0004c 	andi	r3,r4,1
 8003344:	2008d07a 	srli	r4,r4,1
 8003348:	18000126 	beq	r3,zero,8003350 <__mulsi3+0x18>
 800334c:	1145883a 	add	r2,r2,r5
 8003350:	294b883a 	add	r5,r5,r5
 8003354:	203ffa1e 	bne	r4,zero,8003340 <__alt_data_end+0xfc003340>
 8003358:	f800283a 	ret
 800335c:	f800283a 	ret

08003360 <__gesf2>:
 8003360:	2004d5fa 	srli	r2,r4,23
 8003364:	2806d5fa 	srli	r3,r5,23
 8003368:	01802034 	movhi	r6,128
 800336c:	31bfffc4 	addi	r6,r6,-1
 8003370:	10803fcc 	andi	r2,r2,255
 8003374:	01c03fc4 	movi	r7,255
 8003378:	3110703a 	and	r8,r6,r4
 800337c:	18c03fcc 	andi	r3,r3,255
 8003380:	314c703a 	and	r6,r6,r5
 8003384:	2008d7fa 	srli	r4,r4,31
 8003388:	280ad7fa 	srli	r5,r5,31
 800338c:	11c01926 	beq	r2,r7,80033f4 <__gesf2+0x94>
 8003390:	01c03fc4 	movi	r7,255
 8003394:	19c00f26 	beq	r3,r7,80033d4 <__gesf2+0x74>
 8003398:	1000061e 	bne	r2,zero,80033b4 <__gesf2+0x54>
 800339c:	400f003a 	cmpeq	r7,r8,zero
 80033a0:	1800071e 	bne	r3,zero,80033c0 <__gesf2+0x60>
 80033a4:	3000061e 	bne	r6,zero,80033c0 <__gesf2+0x60>
 80033a8:	0005883a 	mov	r2,zero
 80033ac:	40000e1e 	bne	r8,zero,80033e8 <__gesf2+0x88>
 80033b0:	f800283a 	ret
 80033b4:	18000a1e 	bne	r3,zero,80033e0 <__gesf2+0x80>
 80033b8:	30000b26 	beq	r6,zero,80033e8 <__gesf2+0x88>
 80033bc:	000f883a 	mov	r7,zero
 80033c0:	29403fcc 	andi	r5,r5,255
 80033c4:	38000726 	beq	r7,zero,80033e4 <__gesf2+0x84>
 80033c8:	28000826 	beq	r5,zero,80033ec <__gesf2+0x8c>
 80033cc:	00800044 	movi	r2,1
 80033d0:	f800283a 	ret
 80033d4:	303ff026 	beq	r6,zero,8003398 <__alt_data_end+0xfc003398>
 80033d8:	00bfff84 	movi	r2,-2
 80033dc:	f800283a 	ret
 80033e0:	29403fcc 	andi	r5,r5,255
 80033e4:	21400526 	beq	r4,r5,80033fc <__gesf2+0x9c>
 80033e8:	203ff826 	beq	r4,zero,80033cc <__alt_data_end+0xfc0033cc>
 80033ec:	00bfffc4 	movi	r2,-1
 80033f0:	f800283a 	ret
 80033f4:	403fe626 	beq	r8,zero,8003390 <__alt_data_end+0xfc003390>
 80033f8:	003ff706 	br	80033d8 <__alt_data_end+0xfc0033d8>
 80033fc:	18bffa16 	blt	r3,r2,80033e8 <__alt_data_end+0xfc0033e8>
 8003400:	10c00216 	blt	r2,r3,800340c <__gesf2+0xac>
 8003404:	323ff836 	bltu	r6,r8,80033e8 <__alt_data_end+0xfc0033e8>
 8003408:	4180022e 	bgeu	r8,r6,8003414 <__gesf2+0xb4>
 800340c:	203fef1e 	bne	r4,zero,80033cc <__alt_data_end+0xfc0033cc>
 8003410:	003ff606 	br	80033ec <__alt_data_end+0xfc0033ec>
 8003414:	0005883a 	mov	r2,zero
 8003418:	f800283a 	ret

0800341c <__mulsf3>:
 800341c:	defff504 	addi	sp,sp,-44
 8003420:	dc000115 	stw	r16,4(sp)
 8003424:	2020d5fa 	srli	r16,r4,23
 8003428:	dd400615 	stw	r21,24(sp)
 800342c:	202ad7fa 	srli	r21,r4,31
 8003430:	dc800315 	stw	r18,12(sp)
 8003434:	04802034 	movhi	r18,128
 8003438:	df000915 	stw	fp,36(sp)
 800343c:	dd000515 	stw	r20,20(sp)
 8003440:	94bfffc4 	addi	r18,r18,-1
 8003444:	dfc00a15 	stw	ra,40(sp)
 8003448:	ddc00815 	stw	r23,32(sp)
 800344c:	dd800715 	stw	r22,28(sp)
 8003450:	dcc00415 	stw	r19,16(sp)
 8003454:	dc400215 	stw	r17,8(sp)
 8003458:	84003fcc 	andi	r16,r16,255
 800345c:	9124703a 	and	r18,r18,r4
 8003460:	a829883a 	mov	r20,r21
 8003464:	af003fcc 	andi	fp,r21,255
 8003468:	80005426 	beq	r16,zero,80035bc <__mulsf3+0x1a0>
 800346c:	00803fc4 	movi	r2,255
 8003470:	80802f26 	beq	r16,r2,8003530 <__mulsf3+0x114>
 8003474:	91002034 	orhi	r4,r18,128
 8003478:	202490fa 	slli	r18,r4,3
 800347c:	843fe044 	addi	r16,r16,-127
 8003480:	0023883a 	mov	r17,zero
 8003484:	002f883a 	mov	r23,zero
 8003488:	2804d5fa 	srli	r2,r5,23
 800348c:	282cd7fa 	srli	r22,r5,31
 8003490:	01002034 	movhi	r4,128
 8003494:	213fffc4 	addi	r4,r4,-1
 8003498:	10803fcc 	andi	r2,r2,255
 800349c:	2166703a 	and	r19,r4,r5
 80034a0:	b1803fcc 	andi	r6,r22,255
 80034a4:	10004c26 	beq	r2,zero,80035d8 <__mulsf3+0x1bc>
 80034a8:	00c03fc4 	movi	r3,255
 80034ac:	10c04726 	beq	r2,r3,80035cc <__mulsf3+0x1b0>
 80034b0:	99002034 	orhi	r4,r19,128
 80034b4:	202690fa 	slli	r19,r4,3
 80034b8:	10bfe044 	addi	r2,r2,-127
 80034bc:	0007883a 	mov	r3,zero
 80034c0:	80a1883a 	add	r16,r16,r2
 80034c4:	010003c4 	movi	r4,15
 80034c8:	1c44b03a 	or	r2,r3,r17
 80034cc:	b56af03a 	xor	r21,r22,r21
 80034d0:	81c00044 	addi	r7,r16,1
 80034d4:	20806b36 	bltu	r4,r2,8003684 <__mulsf3+0x268>
 80034d8:	100490ba 	slli	r2,r2,2
 80034dc:	01020034 	movhi	r4,2048
 80034e0:	210d3c04 	addi	r4,r4,13552
 80034e4:	1105883a 	add	r2,r2,r4
 80034e8:	10800017 	ldw	r2,0(r2)
 80034ec:	1000683a 	jmp	r2
 80034f0:	08003684 	addi	zero,at,218
 80034f4:	08003544 	addi	zero,at,213
 80034f8:	08003544 	addi	zero,at,213
 80034fc:	08003540 	call	800354 <__alt_mem_onchip_memory2_0+0x800354>
 8003500:	08003668 	cmpgeui	zero,at,217
 8003504:	08003668 	cmpgeui	zero,at,217
 8003508:	08003654 	ori	zero,at,217
 800350c:	08003540 	call	800354 <__alt_mem_onchip_memory2_0+0x800354>
 8003510:	08003668 	cmpgeui	zero,at,217
 8003514:	08003654 	ori	zero,at,217
 8003518:	08003668 	cmpgeui	zero,at,217
 800351c:	08003540 	call	800354 <__alt_mem_onchip_memory2_0+0x800354>
 8003520:	08003674 	orhi	zero,at,217
 8003524:	08003674 	orhi	zero,at,217
 8003528:	08003674 	orhi	zero,at,217
 800352c:	08003784 	addi	zero,at,222
 8003530:	90003b1e 	bne	r18,zero,8003620 <__mulsf3+0x204>
 8003534:	04400204 	movi	r17,8
 8003538:	05c00084 	movi	r23,2
 800353c:	003fd206 	br	8003488 <__alt_data_end+0xfc003488>
 8003540:	302b883a 	mov	r21,r6
 8003544:	00800084 	movi	r2,2
 8003548:	18802626 	beq	r3,r2,80035e4 <__mulsf3+0x1c8>
 800354c:	008000c4 	movi	r2,3
 8003550:	1880b826 	beq	r3,r2,8003834 <__mulsf3+0x418>
 8003554:	00800044 	movi	r2,1
 8003558:	1880af1e 	bne	r3,r2,8003818 <__mulsf3+0x3fc>
 800355c:	a829883a 	mov	r20,r21
 8003560:	0007883a 	mov	r3,zero
 8003564:	0009883a 	mov	r4,zero
 8003568:	18803fcc 	andi	r2,r3,255
 800356c:	100695fa 	slli	r3,r2,23
 8003570:	a0803fcc 	andi	r2,r20,255
 8003574:	100a97fa 	slli	r5,r2,31
 8003578:	00802034 	movhi	r2,128
 800357c:	10bfffc4 	addi	r2,r2,-1
 8003580:	2084703a 	and	r2,r4,r2
 8003584:	10c4b03a 	or	r2,r2,r3
 8003588:	1144b03a 	or	r2,r2,r5
 800358c:	dfc00a17 	ldw	ra,40(sp)
 8003590:	df000917 	ldw	fp,36(sp)
 8003594:	ddc00817 	ldw	r23,32(sp)
 8003598:	dd800717 	ldw	r22,28(sp)
 800359c:	dd400617 	ldw	r21,24(sp)
 80035a0:	dd000517 	ldw	r20,20(sp)
 80035a4:	dcc00417 	ldw	r19,16(sp)
 80035a8:	dc800317 	ldw	r18,12(sp)
 80035ac:	dc400217 	ldw	r17,8(sp)
 80035b0:	dc000117 	ldw	r16,4(sp)
 80035b4:	dec00b04 	addi	sp,sp,44
 80035b8:	f800283a 	ret
 80035bc:	90000d1e 	bne	r18,zero,80035f4 <__mulsf3+0x1d8>
 80035c0:	04400104 	movi	r17,4
 80035c4:	05c00044 	movi	r23,1
 80035c8:	003faf06 	br	8003488 <__alt_data_end+0xfc003488>
 80035cc:	9806c03a 	cmpne	r3,r19,zero
 80035d0:	18c00084 	addi	r3,r3,2
 80035d4:	003fba06 	br	80034c0 <__alt_data_end+0xfc0034c0>
 80035d8:	9800141e 	bne	r19,zero,800362c <__mulsf3+0x210>
 80035dc:	00c00044 	movi	r3,1
 80035e0:	003fb706 	br	80034c0 <__alt_data_end+0xfc0034c0>
 80035e4:	a829883a 	mov	r20,r21
 80035e8:	00ffffc4 	movi	r3,-1
 80035ec:	0009883a 	mov	r4,zero
 80035f0:	003fdd06 	br	8003568 <__alt_data_end+0xfc003568>
 80035f4:	9009883a 	mov	r4,r18
 80035f8:	d9400015 	stw	r5,0(sp)
 80035fc:	8003e900 	call	8003e90 <__clzsi2>
 8003600:	10fffec4 	addi	r3,r2,-5
 8003604:	10801d84 	addi	r2,r2,118
 8003608:	90e4983a 	sll	r18,r18,r3
 800360c:	00a1c83a 	sub	r16,zero,r2
 8003610:	0023883a 	mov	r17,zero
 8003614:	002f883a 	mov	r23,zero
 8003618:	d9400017 	ldw	r5,0(sp)
 800361c:	003f9a06 	br	8003488 <__alt_data_end+0xfc003488>
 8003620:	04400304 	movi	r17,12
 8003624:	05c000c4 	movi	r23,3
 8003628:	003f9706 	br	8003488 <__alt_data_end+0xfc003488>
 800362c:	9809883a 	mov	r4,r19
 8003630:	d9800015 	stw	r6,0(sp)
 8003634:	8003e900 	call	8003e90 <__clzsi2>
 8003638:	10fffec4 	addi	r3,r2,-5
 800363c:	10801d84 	addi	r2,r2,118
 8003640:	98e6983a 	sll	r19,r19,r3
 8003644:	0085c83a 	sub	r2,zero,r2
 8003648:	0007883a 	mov	r3,zero
 800364c:	d9800017 	ldw	r6,0(sp)
 8003650:	003f9b06 	br	80034c0 <__alt_data_end+0xfc0034c0>
 8003654:	01002034 	movhi	r4,128
 8003658:	0029883a 	mov	r20,zero
 800365c:	213fffc4 	addi	r4,r4,-1
 8003660:	00ffffc4 	movi	r3,-1
 8003664:	003fc006 	br	8003568 <__alt_data_end+0xfc003568>
 8003668:	9027883a 	mov	r19,r18
 800366c:	b807883a 	mov	r3,r23
 8003670:	003fb406 	br	8003544 <__alt_data_end+0xfc003544>
 8003674:	9027883a 	mov	r19,r18
 8003678:	e02b883a 	mov	r21,fp
 800367c:	b807883a 	mov	r3,r23
 8003680:	003fb006 	br	8003544 <__alt_data_end+0xfc003544>
 8003684:	9028d43a 	srli	r20,r18,16
 8003688:	982cd43a 	srli	r22,r19,16
 800368c:	94bfffcc 	andi	r18,r18,65535
 8003690:	9cffffcc 	andi	r19,r19,65535
 8003694:	980b883a 	mov	r5,r19
 8003698:	9009883a 	mov	r4,r18
 800369c:	d9c00015 	stw	r7,0(sp)
 80036a0:	80033380 	call	8003338 <__mulsi3>
 80036a4:	a00b883a 	mov	r5,r20
 80036a8:	9809883a 	mov	r4,r19
 80036ac:	1023883a 	mov	r17,r2
 80036b0:	80033380 	call	8003338 <__mulsi3>
 80036b4:	a009883a 	mov	r4,r20
 80036b8:	b00b883a 	mov	r5,r22
 80036bc:	1027883a 	mov	r19,r2
 80036c0:	80033380 	call	8003338 <__mulsi3>
 80036c4:	b00b883a 	mov	r5,r22
 80036c8:	9009883a 	mov	r4,r18
 80036cc:	1029883a 	mov	r20,r2
 80036d0:	80033380 	call	8003338 <__mulsi3>
 80036d4:	8806d43a 	srli	r3,r17,16
 80036d8:	14c5883a 	add	r2,r2,r19
 80036dc:	d9c00017 	ldw	r7,0(sp)
 80036e0:	1885883a 	add	r2,r3,r2
 80036e4:	14c0022e 	bgeu	r2,r19,80036f0 <__mulsf3+0x2d4>
 80036e8:	00c00074 	movhi	r3,1
 80036ec:	a0e9883a 	add	r20,r20,r3
 80036f0:	1026943a 	slli	r19,r2,16
 80036f4:	8c7fffcc 	andi	r17,r17,65535
 80036f8:	1004d43a 	srli	r2,r2,16
 80036fc:	9c63883a 	add	r17,r19,r17
 8003700:	882691ba 	slli	r19,r17,6
 8003704:	1505883a 	add	r2,r2,r20
 8003708:	8822d6ba 	srli	r17,r17,26
 800370c:	100891ba 	slli	r4,r2,6
 8003710:	9826c03a 	cmpne	r19,r19,zero
 8003714:	9c62b03a 	or	r17,r19,r17
 8003718:	8926b03a 	or	r19,r17,r4
 800371c:	9882002c 	andhi	r2,r19,2048
 8003720:	10000426 	beq	r2,zero,8003734 <__mulsf3+0x318>
 8003724:	9804d07a 	srli	r2,r19,1
 8003728:	9900004c 	andi	r4,r19,1
 800372c:	3821883a 	mov	r16,r7
 8003730:	1126b03a 	or	r19,r2,r4
 8003734:	80c01fc4 	addi	r3,r16,127
 8003738:	00c0210e 	bge	zero,r3,80037c0 <__mulsf3+0x3a4>
 800373c:	988001cc 	andi	r2,r19,7
 8003740:	10000426 	beq	r2,zero,8003754 <__mulsf3+0x338>
 8003744:	988003cc 	andi	r2,r19,15
 8003748:	01000104 	movi	r4,4
 800374c:	11000126 	beq	r2,r4,8003754 <__mulsf3+0x338>
 8003750:	9927883a 	add	r19,r19,r4
 8003754:	9882002c 	andhi	r2,r19,2048
 8003758:	10000426 	beq	r2,zero,800376c <__mulsf3+0x350>
 800375c:	00be0034 	movhi	r2,63488
 8003760:	10bfffc4 	addi	r2,r2,-1
 8003764:	80c02004 	addi	r3,r16,128
 8003768:	98a6703a 	and	r19,r19,r2
 800376c:	00803f84 	movi	r2,254
 8003770:	10ff9c16 	blt	r2,r3,80035e4 <__alt_data_end+0xfc0035e4>
 8003774:	980891ba 	slli	r4,r19,6
 8003778:	a829883a 	mov	r20,r21
 800377c:	2008d27a 	srli	r4,r4,9
 8003780:	003f7906 	br	8003568 <__alt_data_end+0xfc003568>
 8003784:	9080102c 	andhi	r2,r18,64
 8003788:	10000826 	beq	r2,zero,80037ac <__mulsf3+0x390>
 800378c:	9880102c 	andhi	r2,r19,64
 8003790:	1000061e 	bne	r2,zero,80037ac <__mulsf3+0x390>
 8003794:	00802034 	movhi	r2,128
 8003798:	99001034 	orhi	r4,r19,64
 800379c:	10bfffc4 	addi	r2,r2,-1
 80037a0:	b029883a 	mov	r20,r22
 80037a4:	2088703a 	and	r4,r4,r2
 80037a8:	003fad06 	br	8003660 <__alt_data_end+0xfc003660>
 80037ac:	00802034 	movhi	r2,128
 80037b0:	91001034 	orhi	r4,r18,64
 80037b4:	10bfffc4 	addi	r2,r2,-1
 80037b8:	2088703a 	and	r4,r4,r2
 80037bc:	003fa806 	br	8003660 <__alt_data_end+0xfc003660>
 80037c0:	00800044 	movi	r2,1
 80037c4:	10c7c83a 	sub	r3,r2,r3
 80037c8:	008006c4 	movi	r2,27
 80037cc:	10ff6316 	blt	r2,r3,800355c <__alt_data_end+0xfc00355c>
 80037d0:	00800804 	movi	r2,32
 80037d4:	10c5c83a 	sub	r2,r2,r3
 80037d8:	9884983a 	sll	r2,r19,r2
 80037dc:	98c6d83a 	srl	r3,r19,r3
 80037e0:	1004c03a 	cmpne	r2,r2,zero
 80037e4:	1884b03a 	or	r2,r3,r2
 80037e8:	10c001cc 	andi	r3,r2,7
 80037ec:	18000426 	beq	r3,zero,8003800 <__mulsf3+0x3e4>
 80037f0:	10c003cc 	andi	r3,r2,15
 80037f4:	01000104 	movi	r4,4
 80037f8:	19000126 	beq	r3,r4,8003800 <__mulsf3+0x3e4>
 80037fc:	1105883a 	add	r2,r2,r4
 8003800:	10c1002c 	andhi	r3,r2,1024
 8003804:	18000626 	beq	r3,zero,8003820 <__mulsf3+0x404>
 8003808:	a829883a 	mov	r20,r21
 800380c:	00c00044 	movi	r3,1
 8003810:	0009883a 	mov	r4,zero
 8003814:	003f5406 	br	8003568 <__alt_data_end+0xfc003568>
 8003818:	3821883a 	mov	r16,r7
 800381c:	003fc506 	br	8003734 <__alt_data_end+0xfc003734>
 8003820:	100491ba 	slli	r2,r2,6
 8003824:	a829883a 	mov	r20,r21
 8003828:	0007883a 	mov	r3,zero
 800382c:	1008d27a 	srli	r4,r2,9
 8003830:	003f4d06 	br	8003568 <__alt_data_end+0xfc003568>
 8003834:	00802034 	movhi	r2,128
 8003838:	99001034 	orhi	r4,r19,64
 800383c:	10bfffc4 	addi	r2,r2,-1
 8003840:	a829883a 	mov	r20,r21
 8003844:	2088703a 	and	r4,r4,r2
 8003848:	003f8506 	br	8003660 <__alt_data_end+0xfc003660>

0800384c <__subsf3>:
 800384c:	defffc04 	addi	sp,sp,-16
 8003850:	280cd5fa 	srli	r6,r5,23
 8003854:	dc000015 	stw	r16,0(sp)
 8003858:	01c02034 	movhi	r7,128
 800385c:	2020d5fa 	srli	r16,r4,23
 8003860:	39ffffc4 	addi	r7,r7,-1
 8003864:	3906703a 	and	r3,r7,r4
 8003868:	dc400115 	stw	r17,4(sp)
 800386c:	394e703a 	and	r7,r7,r5
 8003870:	2022d7fa 	srli	r17,r4,31
 8003874:	dfc00315 	stw	ra,12(sp)
 8003878:	dc800215 	stw	r18,8(sp)
 800387c:	31803fcc 	andi	r6,r6,255
 8003880:	01003fc4 	movi	r4,255
 8003884:	84003fcc 	andi	r16,r16,255
 8003888:	180690fa 	slli	r3,r3,3
 800388c:	2804d7fa 	srli	r2,r5,31
 8003890:	380e90fa 	slli	r7,r7,3
 8003894:	31006d26 	beq	r6,r4,8003a4c <__subsf3+0x200>
 8003898:	1080005c 	xori	r2,r2,1
 800389c:	8189c83a 	sub	r4,r16,r6
 80038a0:	14404f26 	beq	r2,r17,80039e0 <__subsf3+0x194>
 80038a4:	0100770e 	bge	zero,r4,8003a84 <__subsf3+0x238>
 80038a8:	30001e1e 	bne	r6,zero,8003924 <__subsf3+0xd8>
 80038ac:	38006a1e 	bne	r7,zero,8003a58 <__subsf3+0x20c>
 80038b0:	188001cc 	andi	r2,r3,7
 80038b4:	10000426 	beq	r2,zero,80038c8 <__subsf3+0x7c>
 80038b8:	188003cc 	andi	r2,r3,15
 80038bc:	01000104 	movi	r4,4
 80038c0:	11000126 	beq	r2,r4,80038c8 <__subsf3+0x7c>
 80038c4:	1907883a 	add	r3,r3,r4
 80038c8:	1881002c 	andhi	r2,r3,1024
 80038cc:	10003926 	beq	r2,zero,80039b4 <__subsf3+0x168>
 80038d0:	84000044 	addi	r16,r16,1
 80038d4:	00803fc4 	movi	r2,255
 80038d8:	80807526 	beq	r16,r2,8003ab0 <__subsf3+0x264>
 80038dc:	180691ba 	slli	r3,r3,6
 80038e0:	8880004c 	andi	r2,r17,1
 80038e4:	180ad27a 	srli	r5,r3,9
 80038e8:	84003fcc 	andi	r16,r16,255
 80038ec:	800695fa 	slli	r3,r16,23
 80038f0:	10803fcc 	andi	r2,r2,255
 80038f4:	01002034 	movhi	r4,128
 80038f8:	213fffc4 	addi	r4,r4,-1
 80038fc:	100497fa 	slli	r2,r2,31
 8003900:	2920703a 	and	r16,r5,r4
 8003904:	80e0b03a 	or	r16,r16,r3
 8003908:	8084b03a 	or	r2,r16,r2
 800390c:	dfc00317 	ldw	ra,12(sp)
 8003910:	dc800217 	ldw	r18,8(sp)
 8003914:	dc400117 	ldw	r17,4(sp)
 8003918:	dc000017 	ldw	r16,0(sp)
 800391c:	dec00404 	addi	sp,sp,16
 8003920:	f800283a 	ret
 8003924:	00803fc4 	movi	r2,255
 8003928:	80bfe126 	beq	r16,r2,80038b0 <__alt_data_end+0xfc0038b0>
 800392c:	39c10034 	orhi	r7,r7,1024
 8003930:	008006c4 	movi	r2,27
 8003934:	11007416 	blt	r2,r4,8003b08 <__subsf3+0x2bc>
 8003938:	00800804 	movi	r2,32
 800393c:	1105c83a 	sub	r2,r2,r4
 8003940:	3884983a 	sll	r2,r7,r2
 8003944:	390ed83a 	srl	r7,r7,r4
 8003948:	1008c03a 	cmpne	r4,r2,zero
 800394c:	390eb03a 	or	r7,r7,r4
 8003950:	19c7c83a 	sub	r3,r3,r7
 8003954:	1881002c 	andhi	r2,r3,1024
 8003958:	10001426 	beq	r2,zero,80039ac <__subsf3+0x160>
 800395c:	04810034 	movhi	r18,1024
 8003960:	94bfffc4 	addi	r18,r18,-1
 8003964:	1ca4703a 	and	r18,r3,r18
 8003968:	9009883a 	mov	r4,r18
 800396c:	8003e900 	call	8003e90 <__clzsi2>
 8003970:	10bffec4 	addi	r2,r2,-5
 8003974:	90a4983a 	sll	r18,r18,r2
 8003978:	14005116 	blt	r2,r16,8003ac0 <__subsf3+0x274>
 800397c:	1405c83a 	sub	r2,r2,r16
 8003980:	10c00044 	addi	r3,r2,1
 8003984:	00800804 	movi	r2,32
 8003988:	10c5c83a 	sub	r2,r2,r3
 800398c:	9084983a 	sll	r2,r18,r2
 8003990:	90e4d83a 	srl	r18,r18,r3
 8003994:	0021883a 	mov	r16,zero
 8003998:	1006c03a 	cmpne	r3,r2,zero
 800399c:	90c6b03a 	or	r3,r18,r3
 80039a0:	003fc306 	br	80038b0 <__alt_data_end+0xfc0038b0>
 80039a4:	2000e026 	beq	r4,zero,8003d28 <__subsf3+0x4dc>
 80039a8:	2007883a 	mov	r3,r4
 80039ac:	188001cc 	andi	r2,r3,7
 80039b0:	103fc11e 	bne	r2,zero,80038b8 <__alt_data_end+0xfc0038b8>
 80039b4:	180ad0fa 	srli	r5,r3,3
 80039b8:	00c03fc4 	movi	r3,255
 80039bc:	8880004c 	andi	r2,r17,1
 80039c0:	80c0031e 	bne	r16,r3,80039d0 <__subsf3+0x184>
 80039c4:	28006d26 	beq	r5,zero,8003b7c <__subsf3+0x330>
 80039c8:	29401034 	orhi	r5,r5,64
 80039cc:	043fffc4 	movi	r16,-1
 80039d0:	00c02034 	movhi	r3,128
 80039d4:	18ffffc4 	addi	r3,r3,-1
 80039d8:	28ca703a 	and	r5,r5,r3
 80039dc:	003fc206 	br	80038e8 <__alt_data_end+0xfc0038e8>
 80039e0:	01003c0e 	bge	zero,r4,8003ad4 <__subsf3+0x288>
 80039e4:	30002126 	beq	r6,zero,8003a6c <__subsf3+0x220>
 80039e8:	01403fc4 	movi	r5,255
 80039ec:	817fb026 	beq	r16,r5,80038b0 <__alt_data_end+0xfc0038b0>
 80039f0:	39c10034 	orhi	r7,r7,1024
 80039f4:	014006c4 	movi	r5,27
 80039f8:	29007416 	blt	r5,r4,8003bcc <__subsf3+0x380>
 80039fc:	01400804 	movi	r5,32
 8003a00:	290bc83a 	sub	r5,r5,r4
 8003a04:	394a983a 	sll	r5,r7,r5
 8003a08:	390ed83a 	srl	r7,r7,r4
 8003a0c:	2808c03a 	cmpne	r4,r5,zero
 8003a10:	390eb03a 	or	r7,r7,r4
 8003a14:	19c7883a 	add	r3,r3,r7
 8003a18:	1901002c 	andhi	r4,r3,1024
 8003a1c:	20003826 	beq	r4,zero,8003b00 <__subsf3+0x2b4>
 8003a20:	84000044 	addi	r16,r16,1
 8003a24:	01003fc4 	movi	r4,255
 8003a28:	81005426 	beq	r16,r4,8003b7c <__subsf3+0x330>
 8003a2c:	1023883a 	mov	r17,r2
 8003a30:	00bf0034 	movhi	r2,64512
 8003a34:	10bfffc4 	addi	r2,r2,-1
 8003a38:	1900004c 	andi	r4,r3,1
 8003a3c:	1886703a 	and	r3,r3,r2
 8003a40:	1806d07a 	srli	r3,r3,1
 8003a44:	1906b03a 	or	r3,r3,r4
 8003a48:	003f9906 	br	80038b0 <__alt_data_end+0xfc0038b0>
 8003a4c:	383f9226 	beq	r7,zero,8003898 <__alt_data_end+0xfc003898>
 8003a50:	10803fcc 	andi	r2,r2,255
 8003a54:	003f9106 	br	800389c <__alt_data_end+0xfc00389c>
 8003a58:	213fffc4 	addi	r4,r4,-1
 8003a5c:	203fbc26 	beq	r4,zero,8003950 <__alt_data_end+0xfc003950>
 8003a60:	00803fc4 	movi	r2,255
 8003a64:	80bfb21e 	bne	r16,r2,8003930 <__alt_data_end+0xfc003930>
 8003a68:	003f9106 	br	80038b0 <__alt_data_end+0xfc0038b0>
 8003a6c:	383f9026 	beq	r7,zero,80038b0 <__alt_data_end+0xfc0038b0>
 8003a70:	213fffc4 	addi	r4,r4,-1
 8003a74:	203fe726 	beq	r4,zero,8003a14 <__alt_data_end+0xfc003a14>
 8003a78:	01403fc4 	movi	r5,255
 8003a7c:	817fdd1e 	bne	r16,r5,80039f4 <__alt_data_end+0xfc0039f4>
 8003a80:	003f8b06 	br	80038b0 <__alt_data_end+0xfc0038b0>
 8003a84:	2000221e 	bne	r4,zero,8003b10 <__subsf3+0x2c4>
 8003a88:	81000044 	addi	r4,r16,1
 8003a8c:	21003fcc 	andi	r4,r4,255
 8003a90:	01400044 	movi	r5,1
 8003a94:	2900470e 	bge	r5,r4,8003bb4 <__subsf3+0x368>
 8003a98:	19e5c83a 	sub	r18,r3,r7
 8003a9c:	9141002c 	andhi	r5,r18,1024
 8003aa0:	28002d26 	beq	r5,zero,8003b58 <__subsf3+0x30c>
 8003aa4:	38e5c83a 	sub	r18,r7,r3
 8003aa8:	1023883a 	mov	r17,r2
 8003aac:	003fae06 	br	8003968 <__alt_data_end+0xfc003968>
 8003ab0:	8880004c 	andi	r2,r17,1
 8003ab4:	043fffc4 	movi	r16,-1
 8003ab8:	000b883a 	mov	r5,zero
 8003abc:	003f8a06 	br	80038e8 <__alt_data_end+0xfc0038e8>
 8003ac0:	00ff0034 	movhi	r3,64512
 8003ac4:	18ffffc4 	addi	r3,r3,-1
 8003ac8:	80a1c83a 	sub	r16,r16,r2
 8003acc:	90c6703a 	and	r3,r18,r3
 8003ad0:	003f7706 	br	80038b0 <__alt_data_end+0xfc0038b0>
 8003ad4:	2000431e 	bne	r4,zero,8003be4 <__subsf3+0x398>
 8003ad8:	81000044 	addi	r4,r16,1
 8003adc:	21803fcc 	andi	r6,r4,255
 8003ae0:	01400044 	movi	r5,1
 8003ae4:	2980280e 	bge	r5,r6,8003b88 <__subsf3+0x33c>
 8003ae8:	01403fc4 	movi	r5,255
 8003aec:	21402326 	beq	r4,r5,8003b7c <__subsf3+0x330>
 8003af0:	19c7883a 	add	r3,r3,r7
 8003af4:	1806d07a 	srli	r3,r3,1
 8003af8:	2021883a 	mov	r16,r4
 8003afc:	003f6c06 	br	80038b0 <__alt_data_end+0xfc0038b0>
 8003b00:	1023883a 	mov	r17,r2
 8003b04:	003fa906 	br	80039ac <__alt_data_end+0xfc0039ac>
 8003b08:	01c00044 	movi	r7,1
 8003b0c:	003f9006 	br	8003950 <__alt_data_end+0xfc003950>
 8003b10:	8000151e 	bne	r16,zero,8003b68 <__subsf3+0x31c>
 8003b14:	18002f26 	beq	r3,zero,8003bd4 <__subsf3+0x388>
 8003b18:	0108303a 	nor	r4,zero,r4
 8003b1c:	20000a26 	beq	r4,zero,8003b48 <__subsf3+0x2fc>
 8003b20:	01403fc4 	movi	r5,255
 8003b24:	31402b26 	beq	r6,r5,8003bd4 <__subsf3+0x388>
 8003b28:	014006c4 	movi	r5,27
 8003b2c:	29006e16 	blt	r5,r4,8003ce8 <__subsf3+0x49c>
 8003b30:	01400804 	movi	r5,32
 8003b34:	290bc83a 	sub	r5,r5,r4
 8003b38:	194a983a 	sll	r5,r3,r5
 8003b3c:	1908d83a 	srl	r4,r3,r4
 8003b40:	2806c03a 	cmpne	r3,r5,zero
 8003b44:	20c6b03a 	or	r3,r4,r3
 8003b48:	38c7c83a 	sub	r3,r7,r3
 8003b4c:	3021883a 	mov	r16,r6
 8003b50:	1023883a 	mov	r17,r2
 8003b54:	003f7f06 	br	8003954 <__alt_data_end+0xfc003954>
 8003b58:	903f831e 	bne	r18,zero,8003968 <__alt_data_end+0xfc003968>
 8003b5c:	0005883a 	mov	r2,zero
 8003b60:	0021883a 	mov	r16,zero
 8003b64:	003f9a06 	br	80039d0 <__alt_data_end+0xfc0039d0>
 8003b68:	01403fc4 	movi	r5,255
 8003b6c:	31401926 	beq	r6,r5,8003bd4 <__subsf3+0x388>
 8003b70:	0109c83a 	sub	r4,zero,r4
 8003b74:	18c10034 	orhi	r3,r3,1024
 8003b78:	003feb06 	br	8003b28 <__alt_data_end+0xfc003b28>
 8003b7c:	043fffc4 	movi	r16,-1
 8003b80:	000b883a 	mov	r5,zero
 8003b84:	003f5806 	br	80038e8 <__alt_data_end+0xfc0038e8>
 8003b88:	8000481e 	bne	r16,zero,8003cac <__subsf3+0x460>
 8003b8c:	18006226 	beq	r3,zero,8003d18 <__subsf3+0x4cc>
 8003b90:	383f4726 	beq	r7,zero,80038b0 <__alt_data_end+0xfc0038b0>
 8003b94:	19c7883a 	add	r3,r3,r7
 8003b98:	1881002c 	andhi	r2,r3,1024
 8003b9c:	103f8326 	beq	r2,zero,80039ac <__alt_data_end+0xfc0039ac>
 8003ba0:	00bf0034 	movhi	r2,64512
 8003ba4:	10bfffc4 	addi	r2,r2,-1
 8003ba8:	2821883a 	mov	r16,r5
 8003bac:	1886703a 	and	r3,r3,r2
 8003bb0:	003f3f06 	br	80038b0 <__alt_data_end+0xfc0038b0>
 8003bb4:	80001c1e 	bne	r16,zero,8003c28 <__subsf3+0x3dc>
 8003bb8:	1800261e 	bne	r3,zero,8003c54 <__subsf3+0x408>
 8003bbc:	38004c26 	beq	r7,zero,8003cf0 <__subsf3+0x4a4>
 8003bc0:	3807883a 	mov	r3,r7
 8003bc4:	1023883a 	mov	r17,r2
 8003bc8:	003f3906 	br	80038b0 <__alt_data_end+0xfc0038b0>
 8003bcc:	01c00044 	movi	r7,1
 8003bd0:	003f9006 	br	8003a14 <__alt_data_end+0xfc003a14>
 8003bd4:	3807883a 	mov	r3,r7
 8003bd8:	3021883a 	mov	r16,r6
 8003bdc:	1023883a 	mov	r17,r2
 8003be0:	003f3306 	br	80038b0 <__alt_data_end+0xfc0038b0>
 8003be4:	8000161e 	bne	r16,zero,8003c40 <__subsf3+0x3f4>
 8003be8:	18002d26 	beq	r3,zero,8003ca0 <__subsf3+0x454>
 8003bec:	0108303a 	nor	r4,zero,r4
 8003bf0:	20000a26 	beq	r4,zero,8003c1c <__subsf3+0x3d0>
 8003bf4:	01403fc4 	movi	r5,255
 8003bf8:	31402926 	beq	r6,r5,8003ca0 <__subsf3+0x454>
 8003bfc:	014006c4 	movi	r5,27
 8003c00:	29004716 	blt	r5,r4,8003d20 <__subsf3+0x4d4>
 8003c04:	01400804 	movi	r5,32
 8003c08:	290bc83a 	sub	r5,r5,r4
 8003c0c:	194a983a 	sll	r5,r3,r5
 8003c10:	1908d83a 	srl	r4,r3,r4
 8003c14:	2806c03a 	cmpne	r3,r5,zero
 8003c18:	20c6b03a 	or	r3,r4,r3
 8003c1c:	19c7883a 	add	r3,r3,r7
 8003c20:	3021883a 	mov	r16,r6
 8003c24:	003f7c06 	br	8003a18 <__alt_data_end+0xfc003a18>
 8003c28:	1800111e 	bne	r3,zero,8003c70 <__subsf3+0x424>
 8003c2c:	38003326 	beq	r7,zero,8003cfc <__subsf3+0x4b0>
 8003c30:	3807883a 	mov	r3,r7
 8003c34:	1023883a 	mov	r17,r2
 8003c38:	04003fc4 	movi	r16,255
 8003c3c:	003f1c06 	br	80038b0 <__alt_data_end+0xfc0038b0>
 8003c40:	01403fc4 	movi	r5,255
 8003c44:	31401626 	beq	r6,r5,8003ca0 <__subsf3+0x454>
 8003c48:	0109c83a 	sub	r4,zero,r4
 8003c4c:	18c10034 	orhi	r3,r3,1024
 8003c50:	003fea06 	br	8003bfc <__alt_data_end+0xfc003bfc>
 8003c54:	383f1626 	beq	r7,zero,80038b0 <__alt_data_end+0xfc0038b0>
 8003c58:	19c9c83a 	sub	r4,r3,r7
 8003c5c:	2141002c 	andhi	r5,r4,1024
 8003c60:	283f5026 	beq	r5,zero,80039a4 <__alt_data_end+0xfc0039a4>
 8003c64:	38c7c83a 	sub	r3,r7,r3
 8003c68:	1023883a 	mov	r17,r2
 8003c6c:	003f1006 	br	80038b0 <__alt_data_end+0xfc0038b0>
 8003c70:	38001b26 	beq	r7,zero,8003ce0 <__subsf3+0x494>
 8003c74:	1806d0fa 	srli	r3,r3,3
 8003c78:	1900102c 	andhi	r4,r3,64
 8003c7c:	20000526 	beq	r4,zero,8003c94 <__subsf3+0x448>
 8003c80:	380ed0fa 	srli	r7,r7,3
 8003c84:	3900102c 	andhi	r4,r7,64
 8003c88:	2000021e 	bne	r4,zero,8003c94 <__subsf3+0x448>
 8003c8c:	3807883a 	mov	r3,r7
 8003c90:	1023883a 	mov	r17,r2
 8003c94:	180690fa 	slli	r3,r3,3
 8003c98:	04003fc4 	movi	r16,255
 8003c9c:	003f0406 	br	80038b0 <__alt_data_end+0xfc0038b0>
 8003ca0:	3807883a 	mov	r3,r7
 8003ca4:	3021883a 	mov	r16,r6
 8003ca8:	003f0106 	br	80038b0 <__alt_data_end+0xfc0038b0>
 8003cac:	18001726 	beq	r3,zero,8003d0c <__subsf3+0x4c0>
 8003cb0:	38000b26 	beq	r7,zero,8003ce0 <__subsf3+0x494>
 8003cb4:	1806d0fa 	srli	r3,r3,3
 8003cb8:	1900102c 	andhi	r4,r3,64
 8003cbc:	20000426 	beq	r4,zero,8003cd0 <__subsf3+0x484>
 8003cc0:	380ed0fa 	srli	r7,r7,3
 8003cc4:	3900102c 	andhi	r4,r7,64
 8003cc8:	2000011e 	bne	r4,zero,8003cd0 <__subsf3+0x484>
 8003ccc:	3807883a 	mov	r3,r7
 8003cd0:	180690fa 	slli	r3,r3,3
 8003cd4:	1023883a 	mov	r17,r2
 8003cd8:	04003fc4 	movi	r16,255
 8003cdc:	003ef406 	br	80038b0 <__alt_data_end+0xfc0038b0>
 8003ce0:	04003fc4 	movi	r16,255
 8003ce4:	003ef206 	br	80038b0 <__alt_data_end+0xfc0038b0>
 8003ce8:	00c00044 	movi	r3,1
 8003cec:	003f9606 	br	8003b48 <__alt_data_end+0xfc003b48>
 8003cf0:	000b883a 	mov	r5,zero
 8003cf4:	0005883a 	mov	r2,zero
 8003cf8:	003f3506 	br	80039d0 <__alt_data_end+0xfc0039d0>
 8003cfc:	01402034 	movhi	r5,128
 8003d00:	297fffc4 	addi	r5,r5,-1
 8003d04:	0005883a 	mov	r2,zero
 8003d08:	003f2f06 	br	80039c8 <__alt_data_end+0xfc0039c8>
 8003d0c:	3807883a 	mov	r3,r7
 8003d10:	04003fc4 	movi	r16,255
 8003d14:	003ee606 	br	80038b0 <__alt_data_end+0xfc0038b0>
 8003d18:	3807883a 	mov	r3,r7
 8003d1c:	003ee406 	br	80038b0 <__alt_data_end+0xfc0038b0>
 8003d20:	00c00044 	movi	r3,1
 8003d24:	003fbd06 	br	8003c1c <__alt_data_end+0xfc003c1c>
 8003d28:	0005883a 	mov	r2,zero
 8003d2c:	003f2806 	br	80039d0 <__alt_data_end+0xfc0039d0>

08003d30 <__fixsfsi>:
 8003d30:	200ad5fa 	srli	r5,r4,23
 8003d34:	00c02034 	movhi	r3,128
 8003d38:	18ffffc4 	addi	r3,r3,-1
 8003d3c:	29403fcc 	andi	r5,r5,255
 8003d40:	00801f84 	movi	r2,126
 8003d44:	1906703a 	and	r3,r3,r4
 8003d48:	2008d7fa 	srli	r4,r4,31
 8003d4c:	11400e0e 	bge	r2,r5,8003d88 <__fixsfsi+0x58>
 8003d50:	00802744 	movi	r2,157
 8003d54:	11400816 	blt	r2,r5,8003d78 <__fixsfsi+0x48>
 8003d58:	00802544 	movi	r2,149
 8003d5c:	18c02034 	orhi	r3,r3,128
 8003d60:	11400b0e 	bge	r2,r5,8003d90 <__fixsfsi+0x60>
 8003d64:	28bfda84 	addi	r2,r5,-150
 8003d68:	1884983a 	sll	r2,r3,r2
 8003d6c:	20000726 	beq	r4,zero,8003d8c <__fixsfsi+0x5c>
 8003d70:	0085c83a 	sub	r2,zero,r2
 8003d74:	f800283a 	ret
 8003d78:	00a00034 	movhi	r2,32768
 8003d7c:	10bfffc4 	addi	r2,r2,-1
 8003d80:	2085883a 	add	r2,r4,r2
 8003d84:	f800283a 	ret
 8003d88:	0005883a 	mov	r2,zero
 8003d8c:	f800283a 	ret
 8003d90:	00802584 	movi	r2,150
 8003d94:	1145c83a 	sub	r2,r2,r5
 8003d98:	1884d83a 	srl	r2,r3,r2
 8003d9c:	003ff306 	br	8003d6c <__alt_data_end+0xfc003d6c>

08003da0 <__floatunsisf>:
 8003da0:	defffe04 	addi	sp,sp,-8
 8003da4:	dfc00115 	stw	ra,4(sp)
 8003da8:	dc000015 	stw	r16,0(sp)
 8003dac:	20002c26 	beq	r4,zero,8003e60 <__floatunsisf+0xc0>
 8003db0:	2021883a 	mov	r16,r4
 8003db4:	8003e900 	call	8003e90 <__clzsi2>
 8003db8:	00c02784 	movi	r3,158
 8003dbc:	1887c83a 	sub	r3,r3,r2
 8003dc0:	01002584 	movi	r4,150
 8003dc4:	20c00f16 	blt	r4,r3,8003e04 <__floatunsisf+0x64>
 8003dc8:	20c9c83a 	sub	r4,r4,r3
 8003dcc:	8108983a 	sll	r4,r16,r4
 8003dd0:	00802034 	movhi	r2,128
 8003dd4:	10bfffc4 	addi	r2,r2,-1
 8003dd8:	2088703a 	and	r4,r4,r2
 8003ddc:	18803fcc 	andi	r2,r3,255
 8003de0:	100695fa 	slli	r3,r2,23
 8003de4:	00802034 	movhi	r2,128
 8003de8:	10bfffc4 	addi	r2,r2,-1
 8003dec:	2084703a 	and	r2,r4,r2
 8003df0:	10c4b03a 	or	r2,r2,r3
 8003df4:	dfc00117 	ldw	ra,4(sp)
 8003df8:	dc000017 	ldw	r16,0(sp)
 8003dfc:	dec00204 	addi	sp,sp,8
 8003e00:	f800283a 	ret
 8003e04:	01002644 	movi	r4,153
 8003e08:	20c01816 	blt	r4,r3,8003e6c <__floatunsisf+0xcc>
 8003e0c:	20c9c83a 	sub	r4,r4,r3
 8003e10:	8108983a 	sll	r4,r16,r4
 8003e14:	017f0034 	movhi	r5,64512
 8003e18:	297fffc4 	addi	r5,r5,-1
 8003e1c:	218001cc 	andi	r6,r4,7
 8003e20:	214a703a 	and	r5,r4,r5
 8003e24:	30000426 	beq	r6,zero,8003e38 <__floatunsisf+0x98>
 8003e28:	210003cc 	andi	r4,r4,15
 8003e2c:	01800104 	movi	r6,4
 8003e30:	21800126 	beq	r4,r6,8003e38 <__floatunsisf+0x98>
 8003e34:	298b883a 	add	r5,r5,r6
 8003e38:	2901002c 	andhi	r4,r5,1024
 8003e3c:	20000526 	beq	r4,zero,8003e54 <__floatunsisf+0xb4>
 8003e40:	00c027c4 	movi	r3,159
 8003e44:	1887c83a 	sub	r3,r3,r2
 8003e48:	00bf0034 	movhi	r2,64512
 8003e4c:	10bfffc4 	addi	r2,r2,-1
 8003e50:	288a703a 	and	r5,r5,r2
 8003e54:	280891ba 	slli	r4,r5,6
 8003e58:	2008d27a 	srli	r4,r4,9
 8003e5c:	003fdf06 	br	8003ddc <__alt_data_end+0xfc003ddc>
 8003e60:	0007883a 	mov	r3,zero
 8003e64:	0009883a 	mov	r4,zero
 8003e68:	003fdc06 	br	8003ddc <__alt_data_end+0xfc003ddc>
 8003e6c:	01402e44 	movi	r5,185
 8003e70:	28cbc83a 	sub	r5,r5,r3
 8003e74:	01000144 	movi	r4,5
 8003e78:	2089c83a 	sub	r4,r4,r2
 8003e7c:	814a983a 	sll	r5,r16,r5
 8003e80:	8108d83a 	srl	r4,r16,r4
 8003e84:	2820c03a 	cmpne	r16,r5,zero
 8003e88:	2408b03a 	or	r4,r4,r16
 8003e8c:	003fe106 	br	8003e14 <__alt_data_end+0xfc003e14>

08003e90 <__clzsi2>:
 8003e90:	00bfffd4 	movui	r2,65535
 8003e94:	11000536 	bltu	r2,r4,8003eac <__clzsi2+0x1c>
 8003e98:	00803fc4 	movi	r2,255
 8003e9c:	11000f36 	bltu	r2,r4,8003edc <__clzsi2+0x4c>
 8003ea0:	00800804 	movi	r2,32
 8003ea4:	0007883a 	mov	r3,zero
 8003ea8:	00000506 	br	8003ec0 <__clzsi2+0x30>
 8003eac:	00804034 	movhi	r2,256
 8003eb0:	10bfffc4 	addi	r2,r2,-1
 8003eb4:	11000c2e 	bgeu	r2,r4,8003ee8 <__clzsi2+0x58>
 8003eb8:	00800204 	movi	r2,8
 8003ebc:	00c00604 	movi	r3,24
 8003ec0:	20c8d83a 	srl	r4,r4,r3
 8003ec4:	00c20074 	movhi	r3,2049
 8003ec8:	18e42404 	addi	r3,r3,-28528
 8003ecc:	1909883a 	add	r4,r3,r4
 8003ed0:	20c00003 	ldbu	r3,0(r4)
 8003ed4:	10c5c83a 	sub	r2,r2,r3
 8003ed8:	f800283a 	ret
 8003edc:	00800604 	movi	r2,24
 8003ee0:	00c00204 	movi	r3,8
 8003ee4:	003ff606 	br	8003ec0 <__alt_data_end+0xfc003ec0>
 8003ee8:	00800404 	movi	r2,16
 8003eec:	1007883a 	mov	r3,r2
 8003ef0:	003ff306 	br	8003ec0 <__alt_data_end+0xfc003ec0>

08003ef4 <_printf_r>:
 8003ef4:	defffd04 	addi	sp,sp,-12
 8003ef8:	dfc00015 	stw	ra,0(sp)
 8003efc:	d9800115 	stw	r6,4(sp)
 8003f00:	d9c00215 	stw	r7,8(sp)
 8003f04:	20c00217 	ldw	r3,8(r4)
 8003f08:	01820034 	movhi	r6,2048
 8003f0c:	31918104 	addi	r6,r6,17924
 8003f10:	19800115 	stw	r6,4(r3)
 8003f14:	280d883a 	mov	r6,r5
 8003f18:	21400217 	ldw	r5,8(r4)
 8003f1c:	d9c00104 	addi	r7,sp,4
 8003f20:	80040bc0 	call	80040bc <___vfprintf_internal_r>
 8003f24:	dfc00017 	ldw	ra,0(sp)
 8003f28:	dec00304 	addi	sp,sp,12
 8003f2c:	f800283a 	ret

08003f30 <printf>:
 8003f30:	defffc04 	addi	sp,sp,-16
 8003f34:	dfc00015 	stw	ra,0(sp)
 8003f38:	d9400115 	stw	r5,4(sp)
 8003f3c:	d9800215 	stw	r6,8(sp)
 8003f40:	d9c00315 	stw	r7,12(sp)
 8003f44:	00820074 	movhi	r2,2049
 8003f48:	10a95804 	addi	r2,r2,-23200
 8003f4c:	10800017 	ldw	r2,0(r2)
 8003f50:	01420034 	movhi	r5,2048
 8003f54:	29518104 	addi	r5,r5,17924
 8003f58:	10c00217 	ldw	r3,8(r2)
 8003f5c:	d9800104 	addi	r6,sp,4
 8003f60:	19400115 	stw	r5,4(r3)
 8003f64:	200b883a 	mov	r5,r4
 8003f68:	11000217 	ldw	r4,8(r2)
 8003f6c:	80045e80 	call	80045e8 <__vfprintf_internal>
 8003f70:	dfc00017 	ldw	ra,0(sp)
 8003f74:	dec00404 	addi	sp,sp,16
 8003f78:	f800283a 	ret

08003f7c <_putchar_r>:
 8003f7c:	21800217 	ldw	r6,8(r4)
 8003f80:	80047101 	jmpi	8004710 <_putc_r>

08003f84 <putchar>:
 8003f84:	00820074 	movhi	r2,2049
 8003f88:	10a95804 	addi	r2,r2,-23200
 8003f8c:	10800017 	ldw	r2,0(r2)
 8003f90:	200b883a 	mov	r5,r4
 8003f94:	11800217 	ldw	r6,8(r2)
 8003f98:	1009883a 	mov	r4,r2
 8003f9c:	80047101 	jmpi	8004710 <_putc_r>

08003fa0 <_puts_r>:
 8003fa0:	defffd04 	addi	sp,sp,-12
 8003fa4:	dc000015 	stw	r16,0(sp)
 8003fa8:	2021883a 	mov	r16,r4
 8003fac:	2809883a 	mov	r4,r5
 8003fb0:	dfc00215 	stw	ra,8(sp)
 8003fb4:	dc400115 	stw	r17,4(sp)
 8003fb8:	2823883a 	mov	r17,r5
 8003fbc:	80040340 	call	8004034 <strlen>
 8003fc0:	81400217 	ldw	r5,8(r16)
 8003fc4:	01020034 	movhi	r4,2048
 8003fc8:	21118104 	addi	r4,r4,17924
 8003fcc:	29000115 	stw	r4,4(r5)
 8003fd0:	100f883a 	mov	r7,r2
 8003fd4:	880d883a 	mov	r6,r17
 8003fd8:	8009883a 	mov	r4,r16
 8003fdc:	80046040 	call	8004604 <__sfvwrite_small_dev>
 8003fe0:	00ffffc4 	movi	r3,-1
 8003fe4:	10c00926 	beq	r2,r3,800400c <_puts_r+0x6c>
 8003fe8:	81400217 	ldw	r5,8(r16)
 8003fec:	01820074 	movhi	r6,2049
 8003ff0:	01c00044 	movi	r7,1
 8003ff4:	28800117 	ldw	r2,4(r5)
 8003ff8:	31a46404 	addi	r6,r6,-28272
 8003ffc:	8009883a 	mov	r4,r16
 8004000:	103ee83a 	callr	r2
 8004004:	10bfffe0 	cmpeqi	r2,r2,-1
 8004008:	0085c83a 	sub	r2,zero,r2
 800400c:	dfc00217 	ldw	ra,8(sp)
 8004010:	dc400117 	ldw	r17,4(sp)
 8004014:	dc000017 	ldw	r16,0(sp)
 8004018:	dec00304 	addi	sp,sp,12
 800401c:	f800283a 	ret

08004020 <puts>:
 8004020:	00820074 	movhi	r2,2049
 8004024:	10a95804 	addi	r2,r2,-23200
 8004028:	200b883a 	mov	r5,r4
 800402c:	11000017 	ldw	r4,0(r2)
 8004030:	8003fa01 	jmpi	8003fa0 <_puts_r>

08004034 <strlen>:
 8004034:	2005883a 	mov	r2,r4
 8004038:	10c00007 	ldb	r3,0(r2)
 800403c:	18000226 	beq	r3,zero,8004048 <strlen+0x14>
 8004040:	10800044 	addi	r2,r2,1
 8004044:	003ffc06 	br	8004038 <__alt_data_end+0xfc004038>
 8004048:	1105c83a 	sub	r2,r2,r4
 800404c:	f800283a 	ret

08004050 <print_repeat>:
 8004050:	defffb04 	addi	sp,sp,-20
 8004054:	dc800315 	stw	r18,12(sp)
 8004058:	dc400215 	stw	r17,8(sp)
 800405c:	dc000115 	stw	r16,4(sp)
 8004060:	dfc00415 	stw	ra,16(sp)
 8004064:	2025883a 	mov	r18,r4
 8004068:	2823883a 	mov	r17,r5
 800406c:	d9800005 	stb	r6,0(sp)
 8004070:	3821883a 	mov	r16,r7
 8004074:	04000a0e 	bge	zero,r16,80040a0 <print_repeat+0x50>
 8004078:	88800117 	ldw	r2,4(r17)
 800407c:	01c00044 	movi	r7,1
 8004080:	d80d883a 	mov	r6,sp
 8004084:	880b883a 	mov	r5,r17
 8004088:	9009883a 	mov	r4,r18
 800408c:	103ee83a 	callr	r2
 8004090:	843fffc4 	addi	r16,r16,-1
 8004094:	103ff726 	beq	r2,zero,8004074 <__alt_data_end+0xfc004074>
 8004098:	00bfffc4 	movi	r2,-1
 800409c:	00000106 	br	80040a4 <print_repeat+0x54>
 80040a0:	0005883a 	mov	r2,zero
 80040a4:	dfc00417 	ldw	ra,16(sp)
 80040a8:	dc800317 	ldw	r18,12(sp)
 80040ac:	dc400217 	ldw	r17,8(sp)
 80040b0:	dc000117 	ldw	r16,4(sp)
 80040b4:	dec00504 	addi	sp,sp,20
 80040b8:	f800283a 	ret

080040bc <___vfprintf_internal_r>:
 80040bc:	deffe504 	addi	sp,sp,-108
 80040c0:	d8c00804 	addi	r3,sp,32
 80040c4:	ddc01815 	stw	r23,96(sp)
 80040c8:	dd801715 	stw	r22,92(sp)
 80040cc:	dd401615 	stw	r21,88(sp)
 80040d0:	dd001515 	stw	r20,84(sp)
 80040d4:	dcc01415 	stw	r19,80(sp)
 80040d8:	dc801315 	stw	r18,76(sp)
 80040dc:	dc401215 	stw	r17,72(sp)
 80040e0:	dc001115 	stw	r16,68(sp)
 80040e4:	dfc01a15 	stw	ra,104(sp)
 80040e8:	df001915 	stw	fp,100(sp)
 80040ec:	2029883a 	mov	r20,r4
 80040f0:	2823883a 	mov	r17,r5
 80040f4:	382d883a 	mov	r22,r7
 80040f8:	d9800f15 	stw	r6,60(sp)
 80040fc:	0021883a 	mov	r16,zero
 8004100:	d8000e15 	stw	zero,56(sp)
 8004104:	d8000a15 	stw	zero,40(sp)
 8004108:	002b883a 	mov	r21,zero
 800410c:	0027883a 	mov	r19,zero
 8004110:	0025883a 	mov	r18,zero
 8004114:	d8000c15 	stw	zero,48(sp)
 8004118:	d8000b15 	stw	zero,44(sp)
 800411c:	002f883a 	mov	r23,zero
 8004120:	d8c00915 	stw	r3,36(sp)
 8004124:	d8c00f17 	ldw	r3,60(sp)
 8004128:	19000003 	ldbu	r4,0(r3)
 800412c:	20803fcc 	andi	r2,r4,255
 8004130:	1080201c 	xori	r2,r2,128
 8004134:	10bfe004 	addi	r2,r2,-128
 8004138:	10011e26 	beq	r2,zero,80045b4 <___vfprintf_internal_r+0x4f8>
 800413c:	00c00044 	movi	r3,1
 8004140:	b8c01426 	beq	r23,r3,8004194 <___vfprintf_internal_r+0xd8>
 8004144:	1dc00216 	blt	r3,r23,8004150 <___vfprintf_internal_r+0x94>
 8004148:	b8000626 	beq	r23,zero,8004164 <___vfprintf_internal_r+0xa8>
 800414c:	00011506 	br	80045a4 <___vfprintf_internal_r+0x4e8>
 8004150:	01400084 	movi	r5,2
 8004154:	b9401d26 	beq	r23,r5,80041cc <___vfprintf_internal_r+0x110>
 8004158:	014000c4 	movi	r5,3
 800415c:	b9402b26 	beq	r23,r5,800420c <___vfprintf_internal_r+0x150>
 8004160:	00011006 	br	80045a4 <___vfprintf_internal_r+0x4e8>
 8004164:	01400944 	movi	r5,37
 8004168:	1140fc26 	beq	r2,r5,800455c <___vfprintf_internal_r+0x4a0>
 800416c:	88800117 	ldw	r2,4(r17)
 8004170:	d9000005 	stb	r4,0(sp)
 8004174:	01c00044 	movi	r7,1
 8004178:	d80d883a 	mov	r6,sp
 800417c:	880b883a 	mov	r5,r17
 8004180:	a009883a 	mov	r4,r20
 8004184:	103ee83a 	callr	r2
 8004188:	1000d81e 	bne	r2,zero,80044ec <___vfprintf_internal_r+0x430>
 800418c:	84000044 	addi	r16,r16,1
 8004190:	00010406 	br	80045a4 <___vfprintf_internal_r+0x4e8>
 8004194:	01400c04 	movi	r5,48
 8004198:	1140fa26 	beq	r2,r5,8004584 <___vfprintf_internal_r+0x4c8>
 800419c:	01400944 	movi	r5,37
 80041a0:	11400a1e 	bne	r2,r5,80041cc <___vfprintf_internal_r+0x110>
 80041a4:	d8800005 	stb	r2,0(sp)
 80041a8:	88800117 	ldw	r2,4(r17)
 80041ac:	b80f883a 	mov	r7,r23
 80041b0:	d80d883a 	mov	r6,sp
 80041b4:	880b883a 	mov	r5,r17
 80041b8:	a009883a 	mov	r4,r20
 80041bc:	103ee83a 	callr	r2
 80041c0:	1000ca1e 	bne	r2,zero,80044ec <___vfprintf_internal_r+0x430>
 80041c4:	84000044 	addi	r16,r16,1
 80041c8:	0000f506 	br	80045a0 <___vfprintf_internal_r+0x4e4>
 80041cc:	25fff404 	addi	r23,r4,-48
 80041d0:	bdc03fcc 	andi	r23,r23,255
 80041d4:	00c00244 	movi	r3,9
 80041d8:	1dc00936 	bltu	r3,r23,8004200 <___vfprintf_internal_r+0x144>
 80041dc:	00bfffc4 	movi	r2,-1
 80041e0:	90800426 	beq	r18,r2,80041f4 <___vfprintf_internal_r+0x138>
 80041e4:	01400284 	movi	r5,10
 80041e8:	9009883a 	mov	r4,r18
 80041ec:	80033380 	call	8003338 <__mulsi3>
 80041f0:	00000106 	br	80041f8 <___vfprintf_internal_r+0x13c>
 80041f4:	0005883a 	mov	r2,zero
 80041f8:	b8a5883a 	add	r18,r23,r2
 80041fc:	0000e206 	br	8004588 <___vfprintf_internal_r+0x4cc>
 8004200:	01400b84 	movi	r5,46
 8004204:	1140e426 	beq	r2,r5,8004598 <___vfprintf_internal_r+0x4dc>
 8004208:	05c00084 	movi	r23,2
 800420c:	213ff404 	addi	r4,r4,-48
 8004210:	27003fcc 	andi	fp,r4,255
 8004214:	00c00244 	movi	r3,9
 8004218:	1f000936 	bltu	r3,fp,8004240 <___vfprintf_internal_r+0x184>
 800421c:	00bfffc4 	movi	r2,-1
 8004220:	98800426 	beq	r19,r2,8004234 <___vfprintf_internal_r+0x178>
 8004224:	01400284 	movi	r5,10
 8004228:	9809883a 	mov	r4,r19
 800422c:	80033380 	call	8003338 <__mulsi3>
 8004230:	00000106 	br	8004238 <___vfprintf_internal_r+0x17c>
 8004234:	0005883a 	mov	r2,zero
 8004238:	e0a7883a 	add	r19,fp,r2
 800423c:	0000d906 	br	80045a4 <___vfprintf_internal_r+0x4e8>
 8004240:	00c01b04 	movi	r3,108
 8004244:	10c0d226 	beq	r2,r3,8004590 <___vfprintf_internal_r+0x4d4>
 8004248:	013fffc4 	movi	r4,-1
 800424c:	99000226 	beq	r19,r4,8004258 <___vfprintf_internal_r+0x19c>
 8004250:	d8000b15 	stw	zero,44(sp)
 8004254:	00000106 	br	800425c <___vfprintf_internal_r+0x1a0>
 8004258:	04c00044 	movi	r19,1
 800425c:	01001a44 	movi	r4,105
 8004260:	11001626 	beq	r2,r4,80042bc <___vfprintf_internal_r+0x200>
 8004264:	20800916 	blt	r4,r2,800428c <___vfprintf_internal_r+0x1d0>
 8004268:	010018c4 	movi	r4,99
 800426c:	11008826 	beq	r2,r4,8004490 <___vfprintf_internal_r+0x3d4>
 8004270:	01001904 	movi	r4,100
 8004274:	11001126 	beq	r2,r4,80042bc <___vfprintf_internal_r+0x200>
 8004278:	01001604 	movi	r4,88
 800427c:	1100c81e 	bne	r2,r4,80045a0 <___vfprintf_internal_r+0x4e4>
 8004280:	00c00044 	movi	r3,1
 8004284:	d8c00e15 	stw	r3,56(sp)
 8004288:	00001506 	br	80042e0 <___vfprintf_internal_r+0x224>
 800428c:	01001cc4 	movi	r4,115
 8004290:	11009826 	beq	r2,r4,80044f4 <___vfprintf_internal_r+0x438>
 8004294:	20800416 	blt	r4,r2,80042a8 <___vfprintf_internal_r+0x1ec>
 8004298:	01001bc4 	movi	r4,111
 800429c:	1100c01e 	bne	r2,r4,80045a0 <___vfprintf_internal_r+0x4e4>
 80042a0:	05400204 	movi	r21,8
 80042a4:	00000f06 	br	80042e4 <___vfprintf_internal_r+0x228>
 80042a8:	01001d44 	movi	r4,117
 80042ac:	11000d26 	beq	r2,r4,80042e4 <___vfprintf_internal_r+0x228>
 80042b0:	01001e04 	movi	r4,120
 80042b4:	11000a26 	beq	r2,r4,80042e0 <___vfprintf_internal_r+0x224>
 80042b8:	0000b906 	br	80045a0 <___vfprintf_internal_r+0x4e4>
 80042bc:	d8c00a17 	ldw	r3,40(sp)
 80042c0:	b7000104 	addi	fp,r22,4
 80042c4:	18000726 	beq	r3,zero,80042e4 <___vfprintf_internal_r+0x228>
 80042c8:	df000d15 	stw	fp,52(sp)
 80042cc:	b5c00017 	ldw	r23,0(r22)
 80042d0:	b800080e 	bge	r23,zero,80042f4 <___vfprintf_internal_r+0x238>
 80042d4:	05efc83a 	sub	r23,zero,r23
 80042d8:	02400044 	movi	r9,1
 80042dc:	00000606 	br	80042f8 <___vfprintf_internal_r+0x23c>
 80042e0:	05400404 	movi	r21,16
 80042e4:	b0c00104 	addi	r3,r22,4
 80042e8:	d8c00d15 	stw	r3,52(sp)
 80042ec:	b5c00017 	ldw	r23,0(r22)
 80042f0:	d8000a15 	stw	zero,40(sp)
 80042f4:	0013883a 	mov	r9,zero
 80042f8:	d839883a 	mov	fp,sp
 80042fc:	b8001726 	beq	r23,zero,800435c <___vfprintf_internal_r+0x2a0>
 8004300:	a80b883a 	mov	r5,r21
 8004304:	b809883a 	mov	r4,r23
 8004308:	da401015 	stw	r9,64(sp)
 800430c:	800327c0 	call	800327c <__udivsi3>
 8004310:	a80b883a 	mov	r5,r21
 8004314:	1009883a 	mov	r4,r2
 8004318:	102d883a 	mov	r22,r2
 800431c:	80033380 	call	8003338 <__mulsi3>
 8004320:	b885c83a 	sub	r2,r23,r2
 8004324:	00c00244 	movi	r3,9
 8004328:	da401017 	ldw	r9,64(sp)
 800432c:	18800216 	blt	r3,r2,8004338 <___vfprintf_internal_r+0x27c>
 8004330:	10800c04 	addi	r2,r2,48
 8004334:	00000506 	br	800434c <___vfprintf_internal_r+0x290>
 8004338:	d8c00e17 	ldw	r3,56(sp)
 800433c:	18000226 	beq	r3,zero,8004348 <___vfprintf_internal_r+0x28c>
 8004340:	10800dc4 	addi	r2,r2,55
 8004344:	00000106 	br	800434c <___vfprintf_internal_r+0x290>
 8004348:	108015c4 	addi	r2,r2,87
 800434c:	e0800005 	stb	r2,0(fp)
 8004350:	b02f883a 	mov	r23,r22
 8004354:	e7000044 	addi	fp,fp,1
 8004358:	003fe806 	br	80042fc <__alt_data_end+0xfc0042fc>
 800435c:	e6efc83a 	sub	r23,fp,sp
 8004360:	9dc5c83a 	sub	r2,r19,r23
 8004364:	0080090e 	bge	zero,r2,800438c <___vfprintf_internal_r+0x2d0>
 8004368:	e085883a 	add	r2,fp,r2
 800436c:	01400c04 	movi	r5,48
 8004370:	d8c00917 	ldw	r3,36(sp)
 8004374:	e009883a 	mov	r4,fp
 8004378:	e0c0032e 	bgeu	fp,r3,8004388 <___vfprintf_internal_r+0x2cc>
 800437c:	e7000044 	addi	fp,fp,1
 8004380:	21400005 	stb	r5,0(r4)
 8004384:	e0bffa1e 	bne	fp,r2,8004370 <__alt_data_end+0xfc004370>
 8004388:	e6efc83a 	sub	r23,fp,sp
 800438c:	d8c00b17 	ldw	r3,44(sp)
 8004390:	4dd1883a 	add	r8,r9,r23
 8004394:	922dc83a 	sub	r22,r18,r8
 8004398:	18001626 	beq	r3,zero,80043f4 <___vfprintf_internal_r+0x338>
 800439c:	48000a26 	beq	r9,zero,80043c8 <___vfprintf_internal_r+0x30c>
 80043a0:	00800b44 	movi	r2,45
 80043a4:	d8800805 	stb	r2,32(sp)
 80043a8:	88800117 	ldw	r2,4(r17)
 80043ac:	01c00044 	movi	r7,1
 80043b0:	d9800804 	addi	r6,sp,32
 80043b4:	880b883a 	mov	r5,r17
 80043b8:	a009883a 	mov	r4,r20
 80043bc:	103ee83a 	callr	r2
 80043c0:	10004a1e 	bne	r2,zero,80044ec <___vfprintf_internal_r+0x430>
 80043c4:	84000044 	addi	r16,r16,1
 80043c8:	0580070e 	bge	zero,r22,80043e8 <___vfprintf_internal_r+0x32c>
 80043cc:	b00f883a 	mov	r7,r22
 80043d0:	01800c04 	movi	r6,48
 80043d4:	880b883a 	mov	r5,r17
 80043d8:	a009883a 	mov	r4,r20
 80043dc:	80040500 	call	8004050 <print_repeat>
 80043e0:	1000421e 	bne	r2,zero,80044ec <___vfprintf_internal_r+0x430>
 80043e4:	85a1883a 	add	r16,r16,r22
 80043e8:	e02d883a 	mov	r22,fp
 80043ec:	bf2fc83a 	sub	r23,r23,fp
 80043f0:	00002006 	br	8004474 <___vfprintf_internal_r+0x3b8>
 80043f4:	0580090e 	bge	zero,r22,800441c <___vfprintf_internal_r+0x360>
 80043f8:	b00f883a 	mov	r7,r22
 80043fc:	01800804 	movi	r6,32
 8004400:	880b883a 	mov	r5,r17
 8004404:	a009883a 	mov	r4,r20
 8004408:	da401015 	stw	r9,64(sp)
 800440c:	80040500 	call	8004050 <print_repeat>
 8004410:	da401017 	ldw	r9,64(sp)
 8004414:	1000351e 	bne	r2,zero,80044ec <___vfprintf_internal_r+0x430>
 8004418:	85a1883a 	add	r16,r16,r22
 800441c:	483ff226 	beq	r9,zero,80043e8 <__alt_data_end+0xfc0043e8>
 8004420:	00800b44 	movi	r2,45
 8004424:	d8800805 	stb	r2,32(sp)
 8004428:	88800117 	ldw	r2,4(r17)
 800442c:	01c00044 	movi	r7,1
 8004430:	d9800804 	addi	r6,sp,32
 8004434:	880b883a 	mov	r5,r17
 8004438:	a009883a 	mov	r4,r20
 800443c:	103ee83a 	callr	r2
 8004440:	10002a1e 	bne	r2,zero,80044ec <___vfprintf_internal_r+0x430>
 8004444:	84000044 	addi	r16,r16,1
 8004448:	003fe706 	br	80043e8 <__alt_data_end+0xfc0043e8>
 800444c:	b5bfffc4 	addi	r22,r22,-1
 8004450:	b0800003 	ldbu	r2,0(r22)
 8004454:	01c00044 	movi	r7,1
 8004458:	d9800804 	addi	r6,sp,32
 800445c:	d8800805 	stb	r2,32(sp)
 8004460:	88800117 	ldw	r2,4(r17)
 8004464:	880b883a 	mov	r5,r17
 8004468:	a009883a 	mov	r4,r20
 800446c:	103ee83a 	callr	r2
 8004470:	10001e1e 	bne	r2,zero,80044ec <___vfprintf_internal_r+0x430>
 8004474:	8585c83a 	sub	r2,r16,r22
 8004478:	b5c9883a 	add	r4,r22,r23
 800447c:	e085883a 	add	r2,fp,r2
 8004480:	013ff216 	blt	zero,r4,800444c <__alt_data_end+0xfc00444c>
 8004484:	1021883a 	mov	r16,r2
 8004488:	dd800d17 	ldw	r22,52(sp)
 800448c:	00004406 	br	80045a0 <___vfprintf_internal_r+0x4e4>
 8004490:	00800044 	movi	r2,1
 8004494:	1480080e 	bge	r2,r18,80044b8 <___vfprintf_internal_r+0x3fc>
 8004498:	95ffffc4 	addi	r23,r18,-1
 800449c:	b80f883a 	mov	r7,r23
 80044a0:	01800804 	movi	r6,32
 80044a4:	880b883a 	mov	r5,r17
 80044a8:	a009883a 	mov	r4,r20
 80044ac:	80040500 	call	8004050 <print_repeat>
 80044b0:	10000e1e 	bne	r2,zero,80044ec <___vfprintf_internal_r+0x430>
 80044b4:	85e1883a 	add	r16,r16,r23
 80044b8:	b0800017 	ldw	r2,0(r22)
 80044bc:	01c00044 	movi	r7,1
 80044c0:	d80d883a 	mov	r6,sp
 80044c4:	d8800005 	stb	r2,0(sp)
 80044c8:	88800117 	ldw	r2,4(r17)
 80044cc:	880b883a 	mov	r5,r17
 80044d0:	a009883a 	mov	r4,r20
 80044d4:	b5c00104 	addi	r23,r22,4
 80044d8:	103ee83a 	callr	r2
 80044dc:	1000031e 	bne	r2,zero,80044ec <___vfprintf_internal_r+0x430>
 80044e0:	84000044 	addi	r16,r16,1
 80044e4:	b82d883a 	mov	r22,r23
 80044e8:	00002d06 	br	80045a0 <___vfprintf_internal_r+0x4e4>
 80044ec:	00bfffc4 	movi	r2,-1
 80044f0:	00003106 	br	80045b8 <___vfprintf_internal_r+0x4fc>
 80044f4:	b5c00017 	ldw	r23,0(r22)
 80044f8:	b7000104 	addi	fp,r22,4
 80044fc:	b809883a 	mov	r4,r23
 8004500:	80040340 	call	8004034 <strlen>
 8004504:	9091c83a 	sub	r8,r18,r2
 8004508:	102d883a 	mov	r22,r2
 800450c:	0200090e 	bge	zero,r8,8004534 <___vfprintf_internal_r+0x478>
 8004510:	400f883a 	mov	r7,r8
 8004514:	01800804 	movi	r6,32
 8004518:	880b883a 	mov	r5,r17
 800451c:	a009883a 	mov	r4,r20
 8004520:	da001015 	stw	r8,64(sp)
 8004524:	80040500 	call	8004050 <print_repeat>
 8004528:	da001017 	ldw	r8,64(sp)
 800452c:	103fef1e 	bne	r2,zero,80044ec <__alt_data_end+0xfc0044ec>
 8004530:	8221883a 	add	r16,r16,r8
 8004534:	88800117 	ldw	r2,4(r17)
 8004538:	b00f883a 	mov	r7,r22
 800453c:	b80d883a 	mov	r6,r23
 8004540:	880b883a 	mov	r5,r17
 8004544:	a009883a 	mov	r4,r20
 8004548:	103ee83a 	callr	r2
 800454c:	103fe71e 	bne	r2,zero,80044ec <__alt_data_end+0xfc0044ec>
 8004550:	85a1883a 	add	r16,r16,r22
 8004554:	e02d883a 	mov	r22,fp
 8004558:	00001106 	br	80045a0 <___vfprintf_internal_r+0x4e4>
 800455c:	00c00044 	movi	r3,1
 8004560:	04ffffc4 	movi	r19,-1
 8004564:	d8000e15 	stw	zero,56(sp)
 8004568:	d8c00a15 	stw	r3,40(sp)
 800456c:	05400284 	movi	r21,10
 8004570:	9825883a 	mov	r18,r19
 8004574:	d8000c15 	stw	zero,48(sp)
 8004578:	d8000b15 	stw	zero,44(sp)
 800457c:	182f883a 	mov	r23,r3
 8004580:	00000806 	br	80045a4 <___vfprintf_internal_r+0x4e8>
 8004584:	ddc00b15 	stw	r23,44(sp)
 8004588:	05c00084 	movi	r23,2
 800458c:	00000506 	br	80045a4 <___vfprintf_internal_r+0x4e8>
 8004590:	00c00044 	movi	r3,1
 8004594:	d8c00c15 	stw	r3,48(sp)
 8004598:	05c000c4 	movi	r23,3
 800459c:	00000106 	br	80045a4 <___vfprintf_internal_r+0x4e8>
 80045a0:	002f883a 	mov	r23,zero
 80045a4:	d8c00f17 	ldw	r3,60(sp)
 80045a8:	18c00044 	addi	r3,r3,1
 80045ac:	d8c00f15 	stw	r3,60(sp)
 80045b0:	003edc06 	br	8004124 <__alt_data_end+0xfc004124>
 80045b4:	8005883a 	mov	r2,r16
 80045b8:	dfc01a17 	ldw	ra,104(sp)
 80045bc:	df001917 	ldw	fp,100(sp)
 80045c0:	ddc01817 	ldw	r23,96(sp)
 80045c4:	dd801717 	ldw	r22,92(sp)
 80045c8:	dd401617 	ldw	r21,88(sp)
 80045cc:	dd001517 	ldw	r20,84(sp)
 80045d0:	dcc01417 	ldw	r19,80(sp)
 80045d4:	dc801317 	ldw	r18,76(sp)
 80045d8:	dc401217 	ldw	r17,72(sp)
 80045dc:	dc001117 	ldw	r16,68(sp)
 80045e0:	dec01b04 	addi	sp,sp,108
 80045e4:	f800283a 	ret

080045e8 <__vfprintf_internal>:
 80045e8:	00820074 	movhi	r2,2049
 80045ec:	10a95804 	addi	r2,r2,-23200
 80045f0:	300f883a 	mov	r7,r6
 80045f4:	280d883a 	mov	r6,r5
 80045f8:	200b883a 	mov	r5,r4
 80045fc:	11000017 	ldw	r4,0(r2)
 8004600:	80040bc1 	jmpi	80040bc <___vfprintf_internal_r>

08004604 <__sfvwrite_small_dev>:
 8004604:	2880000b 	ldhu	r2,0(r5)
 8004608:	1080020c 	andi	r2,r2,8
 800460c:	10002126 	beq	r2,zero,8004694 <__sfvwrite_small_dev+0x90>
 8004610:	2880008f 	ldh	r2,2(r5)
 8004614:	defffa04 	addi	sp,sp,-24
 8004618:	dc000015 	stw	r16,0(sp)
 800461c:	dfc00515 	stw	ra,20(sp)
 8004620:	dd000415 	stw	r20,16(sp)
 8004624:	dcc00315 	stw	r19,12(sp)
 8004628:	dc800215 	stw	r18,8(sp)
 800462c:	dc400115 	stw	r17,4(sp)
 8004630:	2821883a 	mov	r16,r5
 8004634:	10001216 	blt	r2,zero,8004680 <__sfvwrite_small_dev+0x7c>
 8004638:	2027883a 	mov	r19,r4
 800463c:	3025883a 	mov	r18,r6
 8004640:	3823883a 	mov	r17,r7
 8004644:	05010004 	movi	r20,1024
 8004648:	04400b0e 	bge	zero,r17,8004678 <__sfvwrite_small_dev+0x74>
 800464c:	880f883a 	mov	r7,r17
 8004650:	a440010e 	bge	r20,r17,8004658 <__sfvwrite_small_dev+0x54>
 8004654:	01c10004 	movi	r7,1024
 8004658:	8140008f 	ldh	r5,2(r16)
 800465c:	900d883a 	mov	r6,r18
 8004660:	9809883a 	mov	r4,r19
 8004664:	80047680 	call	8004768 <_write_r>
 8004668:	0080050e 	bge	zero,r2,8004680 <__sfvwrite_small_dev+0x7c>
 800466c:	88a3c83a 	sub	r17,r17,r2
 8004670:	90a5883a 	add	r18,r18,r2
 8004674:	003ff406 	br	8004648 <__alt_data_end+0xfc004648>
 8004678:	0005883a 	mov	r2,zero
 800467c:	00000706 	br	800469c <__sfvwrite_small_dev+0x98>
 8004680:	8080000b 	ldhu	r2,0(r16)
 8004684:	10801014 	ori	r2,r2,64
 8004688:	8080000d 	sth	r2,0(r16)
 800468c:	00bfffc4 	movi	r2,-1
 8004690:	00000206 	br	800469c <__sfvwrite_small_dev+0x98>
 8004694:	00bfffc4 	movi	r2,-1
 8004698:	f800283a 	ret
 800469c:	dfc00517 	ldw	ra,20(sp)
 80046a0:	dd000417 	ldw	r20,16(sp)
 80046a4:	dcc00317 	ldw	r19,12(sp)
 80046a8:	dc800217 	ldw	r18,8(sp)
 80046ac:	dc400117 	ldw	r17,4(sp)
 80046b0:	dc000017 	ldw	r16,0(sp)
 80046b4:	dec00604 	addi	sp,sp,24
 80046b8:	f800283a 	ret

080046bc <putc>:
 80046bc:	defffd04 	addi	sp,sp,-12
 80046c0:	00820034 	movhi	r2,2048
 80046c4:	dc000115 	stw	r16,4(sp)
 80046c8:	dfc00215 	stw	ra,8(sp)
 80046cc:	10918104 	addi	r2,r2,17924
 80046d0:	28800115 	stw	r2,4(r5)
 80046d4:	00820074 	movhi	r2,2049
 80046d8:	10a95804 	addi	r2,r2,-23200
 80046dc:	d9000005 	stb	r4,0(sp)
 80046e0:	2021883a 	mov	r16,r4
 80046e4:	11000017 	ldw	r4,0(r2)
 80046e8:	01c00044 	movi	r7,1
 80046ec:	d80d883a 	mov	r6,sp
 80046f0:	80046040 	call	8004604 <__sfvwrite_small_dev>
 80046f4:	00ffffc4 	movi	r3,-1
 80046f8:	10c00126 	beq	r2,r3,8004700 <putc+0x44>
 80046fc:	8005883a 	mov	r2,r16
 8004700:	dfc00217 	ldw	ra,8(sp)
 8004704:	dc000117 	ldw	r16,4(sp)
 8004708:	dec00304 	addi	sp,sp,12
 800470c:	f800283a 	ret

08004710 <_putc_r>:
 8004710:	defffd04 	addi	sp,sp,-12
 8004714:	00820034 	movhi	r2,2048
 8004718:	dc000115 	stw	r16,4(sp)
 800471c:	dfc00215 	stw	ra,8(sp)
 8004720:	10918104 	addi	r2,r2,17924
 8004724:	30800115 	stw	r2,4(r6)
 8004728:	00820074 	movhi	r2,2049
 800472c:	10a95804 	addi	r2,r2,-23200
 8004730:	11000017 	ldw	r4,0(r2)
 8004734:	2821883a 	mov	r16,r5
 8004738:	01c00044 	movi	r7,1
 800473c:	300b883a 	mov	r5,r6
 8004740:	d80d883a 	mov	r6,sp
 8004744:	dc000005 	stb	r16,0(sp)
 8004748:	80046040 	call	8004604 <__sfvwrite_small_dev>
 800474c:	00ffffc4 	movi	r3,-1
 8004750:	10c00126 	beq	r2,r3,8004758 <_putc_r+0x48>
 8004754:	8005883a 	mov	r2,r16
 8004758:	dfc00217 	ldw	ra,8(sp)
 800475c:	dc000117 	ldw	r16,4(sp)
 8004760:	dec00304 	addi	sp,sp,12
 8004764:	f800283a 	ret

08004768 <_write_r>:
 8004768:	defffd04 	addi	sp,sp,-12
 800476c:	dc000015 	stw	r16,0(sp)
 8004770:	04020074 	movhi	r16,2049
 8004774:	dc400115 	stw	r17,4(sp)
 8004778:	842e5104 	addi	r16,r16,-18108
 800477c:	2023883a 	mov	r17,r4
 8004780:	2809883a 	mov	r4,r5
 8004784:	300b883a 	mov	r5,r6
 8004788:	380d883a 	mov	r6,r7
 800478c:	dfc00215 	stw	ra,8(sp)
 8004790:	80000015 	stw	zero,0(r16)
 8004794:	8004b380 	call	8004b38 <write>
 8004798:	00ffffc4 	movi	r3,-1
 800479c:	10c0031e 	bne	r2,r3,80047ac <_write_r+0x44>
 80047a0:	80c00017 	ldw	r3,0(r16)
 80047a4:	18000126 	beq	r3,zero,80047ac <_write_r+0x44>
 80047a8:	88c00015 	stw	r3,0(r17)
 80047ac:	dfc00217 	ldw	ra,8(sp)
 80047b0:	dc400117 	ldw	r17,4(sp)
 80047b4:	dc000017 	ldw	r16,0(sp)
 80047b8:	dec00304 	addi	sp,sp,12
 80047bc:	f800283a 	ret

080047c0 <alt_load_section>:
 80047c0:	defffc04 	addi	sp,sp,-16
 80047c4:	df000315 	stw	fp,12(sp)
 80047c8:	df000304 	addi	fp,sp,12
 80047cc:	e13ffd15 	stw	r4,-12(fp)
 80047d0:	e17ffe15 	stw	r5,-8(fp)
 80047d4:	e1bfff15 	stw	r6,-4(fp)
 80047d8:	e0fffe17 	ldw	r3,-8(fp)
 80047dc:	e0bffd17 	ldw	r2,-12(fp)
 80047e0:	18800c26 	beq	r3,r2,8004814 <alt_load_section+0x54>
 80047e4:	00000806 	br	8004808 <alt_load_section+0x48>
 80047e8:	e0bffe17 	ldw	r2,-8(fp)
 80047ec:	10c00104 	addi	r3,r2,4
 80047f0:	e0fffe15 	stw	r3,-8(fp)
 80047f4:	e0fffd17 	ldw	r3,-12(fp)
 80047f8:	19000104 	addi	r4,r3,4
 80047fc:	e13ffd15 	stw	r4,-12(fp)
 8004800:	18c00017 	ldw	r3,0(r3)
 8004804:	10c00015 	stw	r3,0(r2)
 8004808:	e0fffe17 	ldw	r3,-8(fp)
 800480c:	e0bfff17 	ldw	r2,-4(fp)
 8004810:	18bff51e 	bne	r3,r2,80047e8 <__alt_data_end+0xfc0047e8>
 8004814:	0001883a 	nop
 8004818:	e037883a 	mov	sp,fp
 800481c:	df000017 	ldw	fp,0(sp)
 8004820:	dec00104 	addi	sp,sp,4
 8004824:	f800283a 	ret

08004828 <alt_load>:
 8004828:	defffe04 	addi	sp,sp,-8
 800482c:	dfc00115 	stw	ra,4(sp)
 8004830:	df000015 	stw	fp,0(sp)
 8004834:	d839883a 	mov	fp,sp
 8004838:	01820074 	movhi	r6,2049
 800483c:	31a96404 	addi	r6,r6,-23152
 8004840:	01420074 	movhi	r5,2049
 8004844:	29647d04 	addi	r5,r5,-28172
 8004848:	01020074 	movhi	r4,2049
 800484c:	21296404 	addi	r4,r4,-23152
 8004850:	80047c00 	call	80047c0 <alt_load_section>
 8004854:	01820034 	movhi	r6,2048
 8004858:	31808c04 	addi	r6,r6,560
 800485c:	01420034 	movhi	r5,2048
 8004860:	29400804 	addi	r5,r5,32
 8004864:	01020034 	movhi	r4,2048
 8004868:	21000804 	addi	r4,r4,32
 800486c:	80047c00 	call	80047c0 <alt_load_section>
 8004870:	01820074 	movhi	r6,2049
 8004874:	31a47d04 	addi	r6,r6,-28172
 8004878:	01420074 	movhi	r5,2049
 800487c:	29631704 	addi	r5,r5,-29604
 8004880:	01020074 	movhi	r4,2049
 8004884:	21231704 	addi	r4,r4,-29604
 8004888:	80047c00 	call	80047c0 <alt_load_section>
 800488c:	8007a1c0 	call	8007a1c <alt_dcache_flush_all>
 8004890:	8007c980 	call	8007c98 <alt_icache_flush_all>
 8004894:	0001883a 	nop
 8004898:	e037883a 	mov	sp,fp
 800489c:	dfc00117 	ldw	ra,4(sp)
 80048a0:	df000017 	ldw	fp,0(sp)
 80048a4:	dec00204 	addi	sp,sp,8
 80048a8:	f800283a 	ret

080048ac <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 80048ac:	defffd04 	addi	sp,sp,-12
 80048b0:	dfc00215 	stw	ra,8(sp)
 80048b4:	df000115 	stw	fp,4(sp)
 80048b8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 80048bc:	0009883a 	mov	r4,zero
 80048c0:	8004c6c0 	call	8004c6c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 80048c4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 80048c8:	8004ca40 	call	8004ca4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 80048cc:	01820074 	movhi	r6,2049
 80048d0:	31a46504 	addi	r6,r6,-28268
 80048d4:	01420074 	movhi	r5,2049
 80048d8:	29646504 	addi	r5,r5,-28268
 80048dc:	01020074 	movhi	r4,2049
 80048e0:	21246504 	addi	r4,r4,-28268
 80048e4:	800803c0 	call	800803c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 80048e8:	8007b480 	call	8007b48 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 80048ec:	01020034 	movhi	r4,2048
 80048f0:	211eea04 	addi	r4,r4,31656
 80048f4:	80088b40 	call	80088b4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 80048f8:	d0a50117 	ldw	r2,-27644(gp)
 80048fc:	d0e50217 	ldw	r3,-27640(gp)
 8004900:	d1250317 	ldw	r4,-27636(gp)
 8004904:	200d883a 	mov	r6,r4
 8004908:	180b883a 	mov	r5,r3
 800490c:	1009883a 	mov	r4,r2
 8004910:	8000ab00 	call	8000ab0 <main>
 8004914:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8004918:	01000044 	movi	r4,1
 800491c:	80079440 	call	8007944 <close>
  exit (result);
 8004920:	e13fff17 	ldw	r4,-4(fp)
 8004924:	80088c80 	call	80088c8 <exit>

08004928 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8004928:	defffa04 	addi	sp,sp,-24
 800492c:	df000515 	stw	fp,20(sp)
 8004930:	df000504 	addi	fp,sp,20
 8004934:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004938:	0005303a 	rdctl	r2,status
 800493c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004940:	e0fffc17 	ldw	r3,-16(fp)
 8004944:	00bfff84 	movi	r2,-2
 8004948:	1884703a 	and	r2,r3,r2
 800494c:	1001703a 	wrctl	status,r2
  
  return context;
 8004950:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8004954:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8004958:	e0bfff17 	ldw	r2,-4(fp)
 800495c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8004960:	e0bffd17 	ldw	r2,-12(fp)
 8004964:	10800017 	ldw	r2,0(r2)
 8004968:	e0fffd17 	ldw	r3,-12(fp)
 800496c:	18c00117 	ldw	r3,4(r3)
 8004970:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8004974:	e0bffd17 	ldw	r2,-12(fp)
 8004978:	10800117 	ldw	r2,4(r2)
 800497c:	e0fffd17 	ldw	r3,-12(fp)
 8004980:	18c00017 	ldw	r3,0(r3)
 8004984:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8004988:	e0bffd17 	ldw	r2,-12(fp)
 800498c:	e0fffd17 	ldw	r3,-12(fp)
 8004990:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8004994:	e0bffd17 	ldw	r2,-12(fp)
 8004998:	e0fffd17 	ldw	r3,-12(fp)
 800499c:	10c00015 	stw	r3,0(r2)
 80049a0:	e0bffb17 	ldw	r2,-20(fp)
 80049a4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80049a8:	e0bffe17 	ldw	r2,-8(fp)
 80049ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 80049b0:	0001883a 	nop
 80049b4:	e037883a 	mov	sp,fp
 80049b8:	df000017 	ldw	fp,0(sp)
 80049bc:	dec00104 	addi	sp,sp,4
 80049c0:	f800283a 	ret

080049c4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 80049c4:	defffb04 	addi	sp,sp,-20
 80049c8:	dfc00415 	stw	ra,16(sp)
 80049cc:	df000315 	stw	fp,12(sp)
 80049d0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 80049d4:	d0a00817 	ldw	r2,-32736(gp)
 80049d8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 80049dc:	d0a50517 	ldw	r2,-27628(gp)
 80049e0:	10800044 	addi	r2,r2,1
 80049e4:	d0a50515 	stw	r2,-27628(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 80049e8:	00002e06 	br	8004aa4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 80049ec:	e0bffd17 	ldw	r2,-12(fp)
 80049f0:	10800017 	ldw	r2,0(r2)
 80049f4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 80049f8:	e0bffd17 	ldw	r2,-12(fp)
 80049fc:	10800403 	ldbu	r2,16(r2)
 8004a00:	10803fcc 	andi	r2,r2,255
 8004a04:	10000426 	beq	r2,zero,8004a18 <alt_tick+0x54>
 8004a08:	d0a50517 	ldw	r2,-27628(gp)
 8004a0c:	1000021e 	bne	r2,zero,8004a18 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8004a10:	e0bffd17 	ldw	r2,-12(fp)
 8004a14:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8004a18:	e0bffd17 	ldw	r2,-12(fp)
 8004a1c:	10800217 	ldw	r2,8(r2)
 8004a20:	d0e50517 	ldw	r3,-27628(gp)
 8004a24:	18801d36 	bltu	r3,r2,8004a9c <alt_tick+0xd8>
 8004a28:	e0bffd17 	ldw	r2,-12(fp)
 8004a2c:	10800403 	ldbu	r2,16(r2)
 8004a30:	10803fcc 	andi	r2,r2,255
 8004a34:	1000191e 	bne	r2,zero,8004a9c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8004a38:	e0bffd17 	ldw	r2,-12(fp)
 8004a3c:	10800317 	ldw	r2,12(r2)
 8004a40:	e0fffd17 	ldw	r3,-12(fp)
 8004a44:	18c00517 	ldw	r3,20(r3)
 8004a48:	1809883a 	mov	r4,r3
 8004a4c:	103ee83a 	callr	r2
 8004a50:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8004a54:	e0bfff17 	ldw	r2,-4(fp)
 8004a58:	1000031e 	bne	r2,zero,8004a68 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8004a5c:	e13ffd17 	ldw	r4,-12(fp)
 8004a60:	80049280 	call	8004928 <alt_alarm_stop>
 8004a64:	00000d06 	br	8004a9c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8004a68:	e0bffd17 	ldw	r2,-12(fp)
 8004a6c:	10c00217 	ldw	r3,8(r2)
 8004a70:	e0bfff17 	ldw	r2,-4(fp)
 8004a74:	1887883a 	add	r3,r3,r2
 8004a78:	e0bffd17 	ldw	r2,-12(fp)
 8004a7c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8004a80:	e0bffd17 	ldw	r2,-12(fp)
 8004a84:	10c00217 	ldw	r3,8(r2)
 8004a88:	d0a50517 	ldw	r2,-27628(gp)
 8004a8c:	1880032e 	bgeu	r3,r2,8004a9c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8004a90:	e0bffd17 	ldw	r2,-12(fp)
 8004a94:	00c00044 	movi	r3,1
 8004a98:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8004a9c:	e0bffe17 	ldw	r2,-8(fp)
 8004aa0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8004aa4:	e0fffd17 	ldw	r3,-12(fp)
 8004aa8:	d0a00804 	addi	r2,gp,-32736
 8004aac:	18bfcf1e 	bne	r3,r2,80049ec <__alt_data_end+0xfc0049ec>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8004ab0:	0001883a 	nop
}
 8004ab4:	0001883a 	nop
 8004ab8:	e037883a 	mov	sp,fp
 8004abc:	dfc00117 	ldw	ra,4(sp)
 8004ac0:	df000017 	ldw	fp,0(sp)
 8004ac4:	dec00204 	addi	sp,sp,8
 8004ac8:	f800283a 	ret

08004acc <usleep>:
 8004acc:	defffd04 	addi	sp,sp,-12
 8004ad0:	dfc00215 	stw	ra,8(sp)
 8004ad4:	df000115 	stw	fp,4(sp)
 8004ad8:	df000104 	addi	fp,sp,4
 8004adc:	e13fff15 	stw	r4,-4(fp)
 8004ae0:	e13fff17 	ldw	r4,-4(fp)
 8004ae4:	80077b00 	call	80077b0 <alt_busy_sleep>
 8004ae8:	e037883a 	mov	sp,fp
 8004aec:	dfc00117 	ldw	ra,4(sp)
 8004af0:	df000017 	ldw	fp,0(sp)
 8004af4:	dec00204 	addi	sp,sp,8
 8004af8:	f800283a 	ret

08004afc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8004afc:	defffe04 	addi	sp,sp,-8
 8004b00:	dfc00115 	stw	ra,4(sp)
 8004b04:	df000015 	stw	fp,0(sp)
 8004b08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8004b0c:	d0a01117 	ldw	r2,-32700(gp)
 8004b10:	10000326 	beq	r2,zero,8004b20 <alt_get_errno+0x24>
 8004b14:	d0a01117 	ldw	r2,-32700(gp)
 8004b18:	103ee83a 	callr	r2
 8004b1c:	00000106 	br	8004b24 <alt_get_errno+0x28>
 8004b20:	d0a50004 	addi	r2,gp,-27648
}
 8004b24:	e037883a 	mov	sp,fp
 8004b28:	dfc00117 	ldw	ra,4(sp)
 8004b2c:	df000017 	ldw	fp,0(sp)
 8004b30:	dec00204 	addi	sp,sp,8
 8004b34:	f800283a 	ret

08004b38 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8004b38:	defff904 	addi	sp,sp,-28
 8004b3c:	dfc00615 	stw	ra,24(sp)
 8004b40:	df000515 	stw	fp,20(sp)
 8004b44:	df000504 	addi	fp,sp,20
 8004b48:	e13ffd15 	stw	r4,-12(fp)
 8004b4c:	e17ffe15 	stw	r5,-8(fp)
 8004b50:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8004b54:	e0bffd17 	ldw	r2,-12(fp)
 8004b58:	10000816 	blt	r2,zero,8004b7c <write+0x44>
 8004b5c:	01400304 	movi	r5,12
 8004b60:	e13ffd17 	ldw	r4,-12(fp)
 8004b64:	80033380 	call	8003338 <__mulsi3>
 8004b68:	1007883a 	mov	r3,r2
 8004b6c:	00820074 	movhi	r2,2049
 8004b70:	10a8f104 	addi	r2,r2,-23612
 8004b74:	1885883a 	add	r2,r3,r2
 8004b78:	00000106 	br	8004b80 <write+0x48>
 8004b7c:	0005883a 	mov	r2,zero
 8004b80:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8004b84:	e0bffb17 	ldw	r2,-20(fp)
 8004b88:	10002126 	beq	r2,zero,8004c10 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8004b8c:	e0bffb17 	ldw	r2,-20(fp)
 8004b90:	10800217 	ldw	r2,8(r2)
 8004b94:	108000cc 	andi	r2,r2,3
 8004b98:	10001826 	beq	r2,zero,8004bfc <write+0xc4>
 8004b9c:	e0bffb17 	ldw	r2,-20(fp)
 8004ba0:	10800017 	ldw	r2,0(r2)
 8004ba4:	10800617 	ldw	r2,24(r2)
 8004ba8:	10001426 	beq	r2,zero,8004bfc <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8004bac:	e0bffb17 	ldw	r2,-20(fp)
 8004bb0:	10800017 	ldw	r2,0(r2)
 8004bb4:	10800617 	ldw	r2,24(r2)
 8004bb8:	e0ffff17 	ldw	r3,-4(fp)
 8004bbc:	180d883a 	mov	r6,r3
 8004bc0:	e17ffe17 	ldw	r5,-8(fp)
 8004bc4:	e13ffb17 	ldw	r4,-20(fp)
 8004bc8:	103ee83a 	callr	r2
 8004bcc:	e0bffc15 	stw	r2,-16(fp)
 8004bd0:	e0bffc17 	ldw	r2,-16(fp)
 8004bd4:	1000070e 	bge	r2,zero,8004bf4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 8004bd8:	8004afc0 	call	8004afc <alt_get_errno>
 8004bdc:	1007883a 	mov	r3,r2
 8004be0:	e0bffc17 	ldw	r2,-16(fp)
 8004be4:	0085c83a 	sub	r2,zero,r2
 8004be8:	18800015 	stw	r2,0(r3)
        return -1;
 8004bec:	00bfffc4 	movi	r2,-1
 8004bf0:	00000c06 	br	8004c24 <write+0xec>
      }
      return rval;
 8004bf4:	e0bffc17 	ldw	r2,-16(fp)
 8004bf8:	00000a06 	br	8004c24 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8004bfc:	8004afc0 	call	8004afc <alt_get_errno>
 8004c00:	1007883a 	mov	r3,r2
 8004c04:	00800344 	movi	r2,13
 8004c08:	18800015 	stw	r2,0(r3)
 8004c0c:	00000406 	br	8004c20 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8004c10:	8004afc0 	call	8004afc <alt_get_errno>
 8004c14:	1007883a 	mov	r3,r2
 8004c18:	00801444 	movi	r2,81
 8004c1c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8004c20:	00bfffc4 	movi	r2,-1
}
 8004c24:	e037883a 	mov	sp,fp
 8004c28:	dfc00117 	ldw	ra,4(sp)
 8004c2c:	df000017 	ldw	fp,0(sp)
 8004c30:	dec00204 	addi	sp,sp,8
 8004c34:	f800283a 	ret

08004c38 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8004c38:	defffd04 	addi	sp,sp,-12
 8004c3c:	dfc00215 	stw	ra,8(sp)
 8004c40:	df000115 	stw	fp,4(sp)
 8004c44:	df000104 	addi	fp,sp,4
 8004c48:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8004c4c:	d1600e04 	addi	r5,gp,-32712
 8004c50:	e13fff17 	ldw	r4,-4(fp)
 8004c54:	8007aa40 	call	8007aa4 <alt_dev_llist_insert>
}
 8004c58:	e037883a 	mov	sp,fp
 8004c5c:	dfc00117 	ldw	ra,4(sp)
 8004c60:	df000017 	ldw	fp,0(sp)
 8004c64:	dec00204 	addi	sp,sp,8
 8004c68:	f800283a 	ret

08004c6c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8004c6c:	defffd04 	addi	sp,sp,-12
 8004c70:	dfc00215 	stw	ra,8(sp)
 8004c74:	df000115 	stw	fp,4(sp)
 8004c78:	df000104 	addi	fp,sp,4
 8004c7c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 8004c80:	80086280 	call	8008628 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8004c84:	00800044 	movi	r2,1
 8004c88:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8004c8c:	0001883a 	nop
 8004c90:	e037883a 	mov	sp,fp
 8004c94:	dfc00117 	ldw	ra,4(sp)
 8004c98:	df000017 	ldw	fp,0(sp)
 8004c9c:	dec00204 	addi	sp,sp,8
 8004ca0:	f800283a 	ret

08004ca4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8004ca4:	defffe04 	addi	sp,sp,-8
 8004ca8:	dfc00115 	stw	ra,4(sp)
 8004cac:	df000015 	stw	fp,0(sp)
 8004cb0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 8004cb4:	01c0fa04 	movi	r7,1000
 8004cb8:	01800084 	movi	r6,2
 8004cbc:	000b883a 	mov	r5,zero
 8004cc0:	01001004 	movi	r4,64
 8004cc4:	80076080 	call	8007608 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
 8004cc8:	01020074 	movhi	r4,2049
 8004ccc:	2124c104 	addi	r4,r4,-27900
 8004cd0:	8004f640 	call	8004f64 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8004cd4:	01800044 	movi	r6,1
 8004cd8:	000b883a 	mov	r5,zero
 8004cdc:	01020074 	movhi	r4,2049
 8004ce0:	2124d904 	addi	r4,r4,-27804
 8004ce4:	8006a900 	call	8006a90 <altera_avalon_jtag_uart_init>
 8004ce8:	01020074 	movhi	r4,2049
 8004cec:	2124cf04 	addi	r4,r4,-27844
 8004cf0:	8004c380 	call	8004c38 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 8004cf4:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 8004cf8:	0001883a 	nop
}
 8004cfc:	0001883a 	nop
 8004d00:	e037883a 	mov	sp,fp
 8004d04:	dfc00117 	ldw	ra,4(sp)
 8004d08:	df000017 	ldw	fp,0(sp)
 8004d0c:	dec00204 	addi	sp,sp,8
 8004d10:	f800283a 	ret

08004d14 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
 8004d14:	defff904 	addi	sp,sp,-28
 8004d18:	dfc00615 	stw	ra,24(sp)
 8004d1c:	df000515 	stw	fp,20(sp)
 8004d20:	df000504 	addi	fp,sp,20
 8004d24:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
 8004d28:	008000b4 	movhi	r2,2
 8004d2c:	10a1a804 	addi	r2,r2,-31072
 8004d30:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
 8004d34:	e0bfff17 	ldw	r2,-4(fp)
 8004d38:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
 8004d3c:	e0bffc17 	ldw	r2,-16(fp)
 8004d40:	10800717 	ldw	r2,28(r2)
 8004d44:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
 8004d48:	e0bffd17 	ldw	r2,-12(fp)
 8004d4c:	10800217 	ldw	r2,8(r2)
 8004d50:	10800098 	cmpnei	r2,r2,2
 8004d54:	1000251e 	bne	r2,zero,8004dec <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
 8004d58:	e0bffd17 	ldw	r2,-12(fp)
 8004d5c:	10c00017 	ldw	r3,0(r2)
 8004d60:	e0bffd17 	ldw	r2,-12(fp)
 8004d64:	10800117 	ldw	r2,4(r2)
 8004d68:	e13ffe04 	addi	r4,fp,-8
 8004d6c:	200f883a 	mov	r7,r4
 8004d70:	100d883a 	mov	r6,r2
 8004d74:	180b883a 	mov	r5,r3
 8004d78:	e13ffc17 	ldw	r4,-16(fp)
 8004d7c:	80054c40 	call	80054c4 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
 8004d80:	e0bffd17 	ldw	r2,-12(fp)
 8004d84:	10c00117 	ldw	r3,4(r2)
 8004d88:	e0bffe17 	ldw	r2,-8(fp)
 8004d8c:	1887c83a 	sub	r3,r3,r2
 8004d90:	e0bffd17 	ldw	r2,-12(fp)
 8004d94:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
 8004d98:	e0bffd17 	ldw	r2,-12(fp)
 8004d9c:	10c00017 	ldw	r3,0(r2)
 8004da0:	e0bffe17 	ldw	r2,-8(fp)
 8004da4:	1887883a 	add	r3,r3,r2
 8004da8:	e0bffd17 	ldw	r2,-12(fp)
 8004dac:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
 8004db0:	e0bffd17 	ldw	r2,-12(fp)
 8004db4:	10800117 	ldw	r2,4(r2)
 8004db8:	10000c26 	beq	r2,zero,8004dec <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 8004dbc:	01400704 	movi	r5,28
 8004dc0:	e13ffc17 	ldw	r4,-16(fp)
 8004dc4:	800667c0 	call	800667c <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 8004dc8:	01400084 	movi	r5,2
 8004dcc:	e13ffc17 	ldw	r4,-16(fp)
 8004dd0:	80067200 	call	8006720 <alt_avalon_i2c_int_enable>
 8004dd4:	00000e06 	br	8004e10 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
 8004dd8:	e0bffb17 	ldw	r2,-20(fp)
 8004ddc:	10bfffc4 	addi	r2,r2,-1
 8004de0:	e0bffb15 	stw	r2,-20(fp)
 8004de4:	e0bffb17 	ldw	r2,-20(fp)
 8004de8:	10000426 	beq	r2,zero,8004dfc <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
 8004dec:	e13ffc17 	ldw	r4,-16(fp)
 8004df0:	80054800 	call	8005480 <alt_avalon_i2c_is_busy>
 8004df4:	103ff81e 	bne	r2,zero,8004dd8 <__alt_data_end+0xfc004dd8>
 8004df8:	00000106 	br	8004e00 <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
 8004dfc:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
 8004e00:	e13ffc17 	ldw	r4,-16(fp)
 8004e04:	80051280 	call	8005128 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
 8004e08:	e0bffd17 	ldw	r2,-12(fp)
 8004e0c:	10000215 	stw	zero,8(r2)
}
 8004e10:	e037883a 	mov	sp,fp
 8004e14:	dfc00117 	ldw	ra,4(sp)
 8004e18:	df000017 	ldw	fp,0(sp)
 8004e1c:	dec00204 	addi	sp,sp,8
 8004e20:	f800283a 	ret

08004e24 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
 8004e24:	defffc04 	addi	sp,sp,-16
 8004e28:	dfc00315 	stw	ra,12(sp)
 8004e2c:	df000215 	stw	fp,8(sp)
 8004e30:	df000204 	addi	fp,sp,8
 8004e34:	e13ffe15 	stw	r4,-8(fp)
 8004e38:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
 8004e3c:	e0bfff17 	ldw	r2,-4(fp)
 8004e40:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
 8004e44:	e1ffff17 	ldw	r7,-4(fp)
 8004e48:	000d883a 	mov	r6,zero
 8004e4c:	01420034 	movhi	r5,2048
 8004e50:	29534504 	addi	r5,r5,19732
 8004e54:	e13ffe17 	ldw	r4,-8(fp)
 8004e58:	8004f100 	call	8004f10 <alt_avalon_i2c_register_callback>
}
 8004e5c:	0001883a 	nop
 8004e60:	e037883a 	mov	sp,fp
 8004e64:	dfc00117 	ldw	ra,4(sp)
 8004e68:	df000017 	ldw	fp,0(sp)
 8004e6c:	dec00204 	addi	sp,sp,8
 8004e70:	f800283a 	ret

08004e74 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
 8004e74:	defff904 	addi	sp,sp,-28
 8004e78:	dfc00615 	stw	ra,24(sp)
 8004e7c:	df000515 	stw	fp,20(sp)
 8004e80:	df000504 	addi	fp,sp,20
 8004e84:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
 8004e88:	e0bfff17 	ldw	r2,-4(fp)
 8004e8c:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 8004e90:	014007c4 	movi	r5,31
 8004e94:	e13ffb17 	ldw	r4,-20(fp)
 8004e98:	80066b80 	call	80066b8 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 8004e9c:	01400704 	movi	r5,28
 8004ea0:	e13ffb17 	ldw	r4,-20(fp)
 8004ea4:	800667c0 	call	800667c <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
 8004ea8:	e0bffb17 	ldw	r2,-20(fp)
 8004eac:	10800617 	ldw	r2,24(r2)
 8004eb0:	10001126 	beq	r2,zero,8004ef8 <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004eb4:	0005303a 	rdctl	r2,status
 8004eb8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004ebc:	e0fffd17 	ldw	r3,-12(fp)
 8004ec0:	00bfff84 	movi	r2,-2
 8004ec4:	1884703a 	and	r2,r3,r2
 8004ec8:	1001703a 	wrctl	status,r2
  
  return context;
 8004ecc:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
 8004ed0:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
 8004ed4:	e0bffb17 	ldw	r2,-20(fp)
 8004ed8:	10800617 	ldw	r2,24(r2)
 8004edc:	e13ffb17 	ldw	r4,-20(fp)
 8004ee0:	103ee83a 	callr	r2
 8004ee4:	e0bffc17 	ldw	r2,-16(fp)
 8004ee8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8004eec:	e0bffe17 	ldw	r2,-8(fp)
 8004ef0:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
 8004ef4:	0001883a 	nop
 8004ef8:	0001883a 	nop
}
 8004efc:	e037883a 	mov	sp,fp
 8004f00:	dfc00117 	ldw	ra,4(sp)
 8004f04:	df000017 	ldw	fp,0(sp)
 8004f08:	dec00204 	addi	sp,sp,8
 8004f0c:	f800283a 	ret

08004f10 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
 8004f10:	defffb04 	addi	sp,sp,-20
 8004f14:	df000415 	stw	fp,16(sp)
 8004f18:	df000404 	addi	fp,sp,16
 8004f1c:	e13ffc15 	stw	r4,-16(fp)
 8004f20:	e17ffd15 	stw	r5,-12(fp)
 8004f24:	e1bffe15 	stw	r6,-8(fp)
 8004f28:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
 8004f2c:	e0bffc17 	ldw	r2,-16(fp)
 8004f30:	e0fffd17 	ldw	r3,-12(fp)
 8004f34:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
 8004f38:	e0bffc17 	ldw	r2,-16(fp)
 8004f3c:	e0ffff17 	ldw	r3,-4(fp)
 8004f40:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
 8004f44:	e0bffc17 	ldw	r2,-16(fp)
 8004f48:	e0fffe17 	ldw	r3,-8(fp)
 8004f4c:	10c00815 	stw	r3,32(r2)

    return ;
 8004f50:	0001883a 	nop
}
 8004f54:	e037883a 	mov	sp,fp
 8004f58:	df000017 	ldw	fp,0(sp)
 8004f5c:	dec00104 	addi	sp,sp,4
 8004f60:	f800283a 	ret

08004f64 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
 8004f64:	defff704 	addi	sp,sp,-36
 8004f68:	dfc00815 	stw	ra,32(sp)
 8004f6c:	df000715 	stw	fp,28(sp)
 8004f70:	df000704 	addi	fp,sp,28
 8004f74:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
 8004f78:	e13fff17 	ldw	r4,-4(fp)
 8004f7c:	80051280 	call	8005128 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 8004f80:	014007c4 	movi	r5,31
 8004f84:	e13fff17 	ldw	r4,-4(fp)
 8004f88:	80066b80 	call	80066b8 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 8004f8c:	01400704 	movi	r5,28
 8004f90:	e13fff17 	ldw	r4,-4(fp)
 8004f94:	800667c0 	call	800667c <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
 8004f98:	014000c4 	movi	r5,3
 8004f9c:	e13fff17 	ldw	r4,-4(fp)
 8004fa0:	80068c40 	call	80068c4 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
 8004fa4:	014000c4 	movi	r5,3
 8004fa8:	e13fff17 	ldw	r4,-4(fp)
 8004fac:	80068140 	call	8006814 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
 8004fb0:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
 8004fb4:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
 8004fb8:	e0bffb04 	addi	r2,fp,-20
 8004fbc:	018000b4 	movhi	r6,2
 8004fc0:	31a1a804 	addi	r6,r6,-31072
 8004fc4:	100b883a 	mov	r5,r2
 8004fc8:	e13fff17 	ldw	r4,-4(fp)
 8004fcc:	80053840 	call	8005384 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
 8004fd0:	e0bffb04 	addi	r2,fp,-20
 8004fd4:	100b883a 	mov	r5,r2
 8004fd8:	e13fff17 	ldw	r4,-4(fp)
 8004fdc:	80052240 	call	8005224 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
 8004fe0:	d1600a04 	addi	r5,gp,-32728
 8004fe4:	e13fff17 	ldw	r4,-4(fp)
 8004fe8:	8007aa40 	call	8007aa4 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 8004fec:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
 8004ff0:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
 8004ff4:	e0bffa17 	ldw	r2,-24(fp)
 8004ff8:	10000c1e 	bne	r2,zero,800502c <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
 8004ffc:	e0bfff17 	ldw	r2,-4(fp)
 8005000:	10c00417 	ldw	r3,16(r2)
 8005004:	e0bfff17 	ldw	r2,-4(fp)
 8005008:	10800517 	ldw	r2,20(r2)
 800500c:	d8000015 	stw	zero,0(sp)
 8005010:	e1ffff17 	ldw	r7,-4(fp)
 8005014:	01820034 	movhi	r6,2048
 8005018:	31939d04 	addi	r6,r6,20084
 800501c:	100b883a 	mov	r5,r2
 8005020:	1809883a 	mov	r4,r3
 8005024:	8007cb80 	call	8007cb8 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
 8005028:	00000406 	br	800503c <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
 800502c:	01020074 	movhi	r4,2049
 8005030:	21247204 	addi	r4,r4,-28216
 8005034:	800833c0 	call	800833c <alt_printf>
    }

    return;
 8005038:	0001883a 	nop

}
 800503c:	e037883a 	mov	sp,fp
 8005040:	dfc00117 	ldw	ra,4(sp)
 8005044:	df000017 	ldw	fp,0(sp)
 8005048:	dec00204 	addi	sp,sp,8
 800504c:	f800283a 	ret

08005050 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
 8005050:	defffc04 	addi	sp,sp,-16
 8005054:	dfc00315 	stw	ra,12(sp)
 8005058:	df000215 	stw	fp,8(sp)
 800505c:	df000204 	addi	fp,sp,8
 8005060:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
 8005064:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
 8005068:	d1600a04 	addi	r5,gp,-32728
 800506c:	e13fff17 	ldw	r4,-4(fp)
 8005070:	8007c080 	call	8007c08 <alt_find_dev>
 8005074:	e0bffe15 	stw	r2,-8(fp)

    return dev;
 8005078:	e0bffe17 	ldw	r2,-8(fp)
}
 800507c:	e037883a 	mov	sp,fp
 8005080:	dfc00117 	ldw	ra,4(sp)
 8005084:	df000017 	ldw	fp,0(sp)
 8005088:	dec00204 	addi	sp,sp,8
 800508c:	f800283a 	ret

08005090 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 8005090:	defffc04 	addi	sp,sp,-16
 8005094:	df000315 	stw	fp,12(sp)
 8005098:	df000304 	addi	fp,sp,12
 800509c:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 80050a0:	e0bfff17 	ldw	r2,-4(fp)
 80050a4:	10800717 	ldw	r2,28(r2)
 80050a8:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
 80050ac:	e0bfff17 	ldw	r2,-4(fp)
 80050b0:	10800317 	ldw	r2,12(r2)
 80050b4:	10800204 	addi	r2,r2,8
 80050b8:	10800037 	ldwio	r2,0(r2)
 80050bc:	1080004c 	andi	r2,r2,1
 80050c0:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
 80050c4:	e0bffe17 	ldw	r2,-8(fp)
 80050c8:	10000226 	beq	r2,zero,80050d4 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
 80050cc:	00bffe44 	movi	r2,-7
 80050d0:	00001106 	br	8005118 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
 80050d4:	e0bfff17 	ldw	r2,-4(fp)
 80050d8:	10c00617 	ldw	r3,24(r2)
 80050dc:	00820034 	movhi	r2,2048
 80050e0:	10934504 	addi	r2,r2,19732
 80050e4:	1880021e 	bne	r3,r2,80050f0 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
 80050e8:	e0bffd17 	ldw	r2,-12(fp)
 80050ec:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
 80050f0:	e0bfff17 	ldw	r2,-4(fp)
 80050f4:	10800317 	ldw	r2,12(r2)
 80050f8:	10800204 	addi	r2,r2,8
 80050fc:	e0ffff17 	ldw	r3,-4(fp)
 8005100:	18c00317 	ldw	r3,12(r3)
 8005104:	18c00204 	addi	r3,r3,8
 8005108:	18c00037 	ldwio	r3,0(r3)
 800510c:	18c00054 	ori	r3,r3,1
 8005110:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 8005114:	0005883a 	mov	r2,zero
}
 8005118:	e037883a 	mov	sp,fp
 800511c:	df000017 	ldw	fp,0(sp)
 8005120:	dec00104 	addi	sp,sp,4
 8005124:	f800283a 	ret

08005128 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 8005128:	defffe04 	addi	sp,sp,-8
 800512c:	df000115 	stw	fp,4(sp)
 8005130:	df000104 	addi	fp,sp,4
 8005134:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
 8005138:	e0bfff17 	ldw	r2,-4(fp)
 800513c:	10800317 	ldw	r2,12(r2)
 8005140:	10800204 	addi	r2,r2,8
 8005144:	e0ffff17 	ldw	r3,-4(fp)
 8005148:	18c00317 	ldw	r3,12(r3)
 800514c:	18c00204 	addi	r3,r3,8
 8005150:	19000037 	ldwio	r4,0(r3)
 8005154:	00ffff84 	movi	r3,-2
 8005158:	20c6703a 	and	r3,r4,r3
 800515c:	10c00035 	stwio	r3,0(r2)

}
 8005160:	0001883a 	nop
 8005164:	e037883a 	mov	sp,fp
 8005168:	df000017 	ldw	fp,0(sp)
 800516c:	dec00104 	addi	sp,sp,4
 8005170:	f800283a 	ret

08005174 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 8005174:	defffd04 	addi	sp,sp,-12
 8005178:	df000215 	stw	fp,8(sp)
 800517c:	df000204 	addi	fp,sp,8
 8005180:	e13ffe15 	stw	r4,-8(fp)
 8005184:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
 8005188:	e0bffe17 	ldw	r2,-8(fp)
 800518c:	10c00d17 	ldw	r3,52(r2)
 8005190:	e0bfff17 	ldw	r2,-4(fp)
 8005194:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
 8005198:	e0bffe17 	ldw	r2,-8(fp)
 800519c:	10800317 	ldw	r2,12(r2)
 80051a0:	10800204 	addi	r2,r2,8
 80051a4:	10800037 	ldwio	r2,0(r2)
 80051a8:	1080008c 	andi	r2,r2,2
 80051ac:	1005d07a 	srai	r2,r2,1
 80051b0:	1007883a 	mov	r3,r2
 80051b4:	e0bfff17 	ldw	r2,-4(fp)
 80051b8:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
 80051bc:	e0bffe17 	ldw	r2,-8(fp)
 80051c0:	10800317 	ldw	r2,12(r2)
 80051c4:	10800904 	addi	r2,r2,36
 80051c8:	10800037 	ldwio	r2,0(r2)
 80051cc:	1007883a 	mov	r3,r2
 80051d0:	e0bfff17 	ldw	r2,-4(fp)
 80051d4:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
 80051d8:	e0bffe17 	ldw	r2,-8(fp)
 80051dc:	10800317 	ldw	r2,12(r2)
 80051e0:	10800804 	addi	r2,r2,32
 80051e4:	10800037 	ldwio	r2,0(r2)
 80051e8:	1007883a 	mov	r3,r2
 80051ec:	e0bfff17 	ldw	r2,-4(fp)
 80051f0:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
 80051f4:	e0bffe17 	ldw	r2,-8(fp)
 80051f8:	10800317 	ldw	r2,12(r2)
 80051fc:	10800a04 	addi	r2,r2,40
 8005200:	10800037 	ldwio	r2,0(r2)
 8005204:	1007883a 	mov	r3,r2
 8005208:	e0bfff17 	ldw	r2,-4(fp)
 800520c:	10c0030d 	sth	r3,12(r2)
}
 8005210:	0001883a 	nop
 8005214:	e037883a 	mov	sp,fp
 8005218:	df000017 	ldw	fp,0(sp)
 800521c:	dec00104 	addi	sp,sp,4
 8005220:	f800283a 	ret

08005224 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 8005224:	defffd04 	addi	sp,sp,-12
 8005228:	df000215 	stw	fp,8(sp)
 800522c:	df000204 	addi	fp,sp,8
 8005230:	e13ffe15 	stw	r4,-8(fp)
 8005234:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
 8005238:	e0bfff17 	ldw	r2,-4(fp)
 800523c:	10c00017 	ldw	r3,0(r2)
 8005240:	e0bffe17 	ldw	r2,-8(fp)
 8005244:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
 8005248:	e0bffe17 	ldw	r2,-8(fp)
 800524c:	10800317 	ldw	r2,12(r2)
 8005250:	10c00204 	addi	r3,r2,8
 8005254:	e0bffe17 	ldw	r2,-8(fp)
 8005258:	10800317 	ldw	r2,12(r2)
 800525c:	10800204 	addi	r2,r2,8
 8005260:	10800037 	ldwio	r2,0(r2)
 8005264:	1009883a 	mov	r4,r2
 8005268:	00bfff44 	movi	r2,-3
 800526c:	2088703a 	and	r4,r4,r2
 8005270:	e0bfff17 	ldw	r2,-4(fp)
 8005274:	10800117 	ldw	r2,4(r2)
 8005278:	1085883a 	add	r2,r2,r2
 800527c:	1080008c 	andi	r2,r2,2
 8005280:	2084b03a 	or	r2,r4,r2
 8005284:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
 8005288:	e0bffe17 	ldw	r2,-8(fp)
 800528c:	10800317 	ldw	r2,12(r2)
 8005290:	10800904 	addi	r2,r2,36
 8005294:	e0ffff17 	ldw	r3,-4(fp)
 8005298:	18c0020b 	ldhu	r3,8(r3)
 800529c:	18ffffcc 	andi	r3,r3,65535
 80052a0:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
 80052a4:	e0bffe17 	ldw	r2,-8(fp)
 80052a8:	10800317 	ldw	r2,12(r2)
 80052ac:	10800804 	addi	r2,r2,32
 80052b0:	e0ffff17 	ldw	r3,-4(fp)
 80052b4:	18c0028b 	ldhu	r3,10(r3)
 80052b8:	18ffffcc 	andi	r3,r3,65535
 80052bc:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
 80052c0:	e0bffe17 	ldw	r2,-8(fp)
 80052c4:	10800317 	ldw	r2,12(r2)
 80052c8:	10800a04 	addi	r2,r2,40
 80052cc:	e0ffff17 	ldw	r3,-4(fp)
 80052d0:	18c0030b 	ldhu	r3,12(r3)
 80052d4:	18ffffcc 	andi	r3,r3,65535
 80052d8:	10c00035 	stwio	r3,0(r2)
}
 80052dc:	0001883a 	nop
 80052e0:	e037883a 	mov	sp,fp
 80052e4:	df000017 	ldw	fp,0(sp)
 80052e8:	dec00104 	addi	sp,sp,4
 80052ec:	f800283a 	ret

080052f0 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
 80052f0:	defffb04 	addi	sp,sp,-20
 80052f4:	dfc00415 	stw	ra,16(sp)
 80052f8:	df000315 	stw	fp,12(sp)
 80052fc:	df000304 	addi	fp,sp,12
 8005300:	e13ffd15 	stw	r4,-12(fp)
 8005304:	e17ffe15 	stw	r5,-8(fp)
 8005308:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
 800530c:	e0bffe17 	ldw	r2,-8(fp)
 8005310:	1080028b 	ldhu	r2,10(r2)
 8005314:	10bfffcc 	andi	r2,r2,65535
 8005318:	10000426 	beq	r2,zero,800532c <alt_avalon_i2c_master_config_speed_get+0x3c>
 800531c:	e0bffe17 	ldw	r2,-8(fp)
 8005320:	1080020b 	ldhu	r2,8(r2)
 8005324:	10bfffcc 	andi	r2,r2,65535
 8005328:	1000021e 	bne	r2,zero,8005334 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
 800532c:	00bfff44 	movi	r2,-3
 8005330:	00000f06 	br	8005370 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
 8005334:	e0bffd17 	ldw	r2,-12(fp)
 8005338:	11000c17 	ldw	r4,48(r2)
 800533c:	e0bffe17 	ldw	r2,-8(fp)
 8005340:	1080028b 	ldhu	r2,10(r2)
 8005344:	10ffffcc 	andi	r3,r2,65535
 8005348:	e0bffe17 	ldw	r2,-8(fp)
 800534c:	1080020b 	ldhu	r2,8(r2)
 8005350:	10bfffcc 	andi	r2,r2,65535
 8005354:	1885883a 	add	r2,r3,r2
 8005358:	100b883a 	mov	r5,r2
 800535c:	800327c0 	call	800327c <__udivsi3>
 8005360:	1007883a 	mov	r3,r2
 8005364:	e0bfff17 	ldw	r2,-4(fp)
 8005368:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 800536c:	0005883a 	mov	r2,zero
}
 8005370:	e037883a 	mov	sp,fp
 8005374:	dfc00117 	ldw	ra,4(sp)
 8005378:	df000017 	ldw	fp,0(sp)
 800537c:	dec00204 	addi	sp,sp,8
 8005380:	f800283a 	ret

08005384 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
 8005384:	defff904 	addi	sp,sp,-28
 8005388:	dfc00615 	stw	ra,24(sp)
 800538c:	df000515 	stw	fp,20(sp)
 8005390:	df000504 	addi	fp,sp,20
 8005394:	e13ffd15 	stw	r4,-12(fp)
 8005398:	e17ffe15 	stw	r5,-8(fp)
 800539c:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
 80053a0:	e0ffff17 	ldw	r3,-4(fp)
 80053a4:	008001b4 	movhi	r2,6
 80053a8:	1086a004 	addi	r2,r2,6784
 80053ac:	10c00436 	bltu	r2,r3,80053c0 <alt_avalon_i2c_master_config_speed_set+0x3c>
 80053b0:	e0bfff17 	ldw	r2,-4(fp)
 80053b4:	10000226 	beq	r2,zero,80053c0 <alt_avalon_i2c_master_config_speed_set+0x3c>
 80053b8:	e0bfff17 	ldw	r2,-4(fp)
 80053bc:	1000021e 	bne	r2,zero,80053c8 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
 80053c0:	00bfff04 	movi	r2,-4
 80053c4:	00002906 	br	800546c <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
 80053c8:	e0bffd17 	ldw	r2,-12(fp)
 80053cc:	10c00c17 	ldw	r3,48(r2)
 80053d0:	e0bfff17 	ldw	r2,-4(fp)
 80053d4:	1085883a 	add	r2,r2,r2
 80053d8:	100b883a 	mov	r5,r2
 80053dc:	1809883a 	mov	r4,r3
 80053e0:	800327c0 	call	800327c <__udivsi3>
 80053e4:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 80053e8:	e0bffb17 	ldw	r2,-20(fp)
 80053ec:	10800f04 	addi	r2,r2,60
 80053f0:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 80053f4:	e0bffb17 	ldw	r2,-20(fp)
 80053f8:	10bff104 	addi	r2,r2,-60
 80053fc:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
 8005400:	e0ffff17 	ldw	r3,-4(fp)
 8005404:	008000b4 	movhi	r2,2
 8005408:	10a1a804 	addi	r2,r2,-31072
 800540c:	10c0042e 	bgeu	r2,r3,8005420 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
 8005410:	e0bffe17 	ldw	r2,-8(fp)
 8005414:	00c00044 	movi	r3,1
 8005418:	10c00115 	stw	r3,4(r2)
 800541c:	00000206 	br	8005428 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
 8005420:	e0bffe17 	ldw	r2,-8(fp)
 8005424:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
 8005428:	e0bffb17 	ldw	r2,-20(fp)
 800542c:	1007883a 	mov	r3,r2
 8005430:	e0bffe17 	ldw	r2,-8(fp)
 8005434:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
 8005438:	e0bffc17 	ldw	r2,-16(fp)
 800543c:	1007883a 	mov	r3,r2
 8005440:	e0bffe17 	ldw	r2,-8(fp)
 8005444:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
 8005448:	e0bffb17 	ldw	r2,-20(fp)
 800544c:	1007883a 	mov	r3,r2
 8005450:	e0bffb17 	ldw	r2,-20(fp)
 8005454:	1004d07a 	srli	r2,r2,1
 8005458:	1885c83a 	sub	r2,r3,r2
 800545c:	1007883a 	mov	r3,r2
 8005460:	e0bffe17 	ldw	r2,-8(fp)
 8005464:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
 8005468:	0005883a 	mov	r2,zero

}
 800546c:	e037883a 	mov	sp,fp
 8005470:	dfc00117 	ldw	ra,4(sp)
 8005474:	df000017 	ldw	fp,0(sp)
 8005478:	dec00204 	addi	sp,sp,8
 800547c:	f800283a 	ret

08005480 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 8005480:	defffe04 	addi	sp,sp,-8
 8005484:	df000115 	stw	fp,4(sp)
 8005488:	df000104 	addi	fp,sp,4
 800548c:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
 8005490:	e0bfff17 	ldw	r2,-4(fp)
 8005494:	10800317 	ldw	r2,12(r2)
 8005498:	10800504 	addi	r2,r2,20
 800549c:	10800037 	ldwio	r2,0(r2)
 80054a0:	1080004c 	andi	r2,r2,1
 80054a4:	10000226 	beq	r2,zero,80054b0 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
 80054a8:	00800044 	movi	r2,1
 80054ac:	00000106 	br	80054b4 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
 80054b0:	0005883a 	mov	r2,zero
}
 80054b4:	e037883a 	mov	sp,fp
 80054b8:	df000017 	ldw	fp,0(sp)
 80054bc:	dec00104 	addi	sp,sp,4
 80054c0:	f800283a 	ret

080054c4 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
 80054c4:	defffb04 	addi	sp,sp,-20
 80054c8:	df000415 	stw	fp,16(sp)
 80054cc:	df000404 	addi	fp,sp,16
 80054d0:	e13ffc15 	stw	r4,-16(fp)
 80054d4:	e17ffd15 	stw	r5,-12(fp)
 80054d8:	e1bffe15 	stw	r6,-8(fp)
 80054dc:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
 80054e0:	e0bfff17 	ldw	r2,-4(fp)
 80054e4:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 80054e8:	00001406 	br	800553c <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 80054ec:	e0bfff17 	ldw	r2,-4(fp)
 80054f0:	10800017 	ldw	r2,0(r2)
 80054f4:	e0fffd17 	ldw	r3,-12(fp)
 80054f8:	1885883a 	add	r2,r3,r2
 80054fc:	e0fffc17 	ldw	r3,-16(fp)
 8005500:	18c00317 	ldw	r3,12(r3)
 8005504:	18c00104 	addi	r3,r3,4
 8005508:	18c00037 	ldwio	r3,0(r3)
 800550c:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
 8005510:	e0bfff17 	ldw	r2,-4(fp)
 8005514:	10800017 	ldw	r2,0(r2)
 8005518:	10c00044 	addi	r3,r2,1
 800551c:	e0bfff17 	ldw	r2,-4(fp)
 8005520:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 8005524:	e0bfff17 	ldw	r2,-4(fp)
 8005528:	10c00017 	ldw	r3,0(r2)
 800552c:	e0bffe17 	ldw	r2,-8(fp)
 8005530:	1880021e 	bne	r3,r2,800553c <alt_avalon_i2c_rx_read_available+0x78>
 8005534:	e0bffe17 	ldw	r2,-8(fp)
 8005538:	1000061e 	bne	r2,zero,8005554 <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 800553c:	e0bffc17 	ldw	r2,-16(fp)
 8005540:	10800317 	ldw	r2,12(r2)
 8005544:	10800704 	addi	r2,r2,28
 8005548:	10800037 	ldwio	r2,0(r2)
 800554c:	103fe71e 	bne	r2,zero,80054ec <__alt_data_end+0xfc0054ec>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
 8005550:	00000106 	br	8005558 <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 8005554:	0001883a 	nop
    }
}
 8005558:	0001883a 	nop
 800555c:	e037883a 	mov	sp,fp
 8005560:	df000017 	ldw	fp,0(sp)
 8005564:	dec00104 	addi	sp,sp,4
 8005568:	f800283a 	ret

0800556c <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
 800556c:	defffa04 	addi	sp,sp,-24
 8005570:	dfc00515 	stw	ra,20(sp)
 8005574:	df000415 	stw	fp,16(sp)
 8005578:	df000404 	addi	fp,sp,16
 800557c:	e13ffe15 	stw	r4,-8(fp)
 8005580:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
 8005584:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
 8005588:	008000b4 	movhi	r2,2
 800558c:	10a1a804 	addi	r2,r2,-31072
 8005590:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 8005594:	00000d06 	br	80055cc <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
 8005598:	e0bffd17 	ldw	r2,-12(fp)
 800559c:	108002a8 	cmpgeui	r2,r2,10
 80055a0:	1000021e 	bne	r2,zero,80055ac <alt_avalon_i2c_rx_read+0x40>
 80055a4:	0109c404 	movi	r4,10000
 80055a8:	80077b00 	call	80077b0 <alt_busy_sleep>
      if (--timeout == 0)
 80055ac:	e0bffd17 	ldw	r2,-12(fp)
 80055b0:	10bfffc4 	addi	r2,r2,-1
 80055b4:	e0bffd15 	stw	r2,-12(fp)
 80055b8:	e0bffd17 	ldw	r2,-12(fp)
 80055bc:	1000031e 	bne	r2,zero,80055cc <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
 80055c0:	00bfff84 	movi	r2,-2
 80055c4:	e0bffc15 	stw	r2,-16(fp)
        break;
 80055c8:	00000506 	br	80055e0 <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 80055cc:	e0bffe17 	ldw	r2,-8(fp)
 80055d0:	10800317 	ldw	r2,12(r2)
 80055d4:	10800704 	addi	r2,r2,28
 80055d8:	10800037 	ldwio	r2,0(r2)
 80055dc:	103fee26 	beq	r2,zero,8005598 <__alt_data_end+0xfc005598>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 80055e0:	e0bffe17 	ldw	r2,-8(fp)
 80055e4:	10800317 	ldw	r2,12(r2)
 80055e8:	10800104 	addi	r2,r2,4
 80055ec:	10800037 	ldwio	r2,0(r2)
 80055f0:	1007883a 	mov	r3,r2
 80055f4:	e0bfff17 	ldw	r2,-4(fp)
 80055f8:	10c00005 	stb	r3,0(r2)
        
    return status;
 80055fc:	e0bffc17 	ldw	r2,-16(fp)
}
 8005600:	e037883a 	mov	sp,fp
 8005604:	dfc00117 	ldw	ra,4(sp)
 8005608:	df000017 	ldw	fp,0(sp)
 800560c:	dec00204 	addi	sp,sp,8
 8005610:	f800283a 	ret

08005614 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
 8005614:	defff804 	addi	sp,sp,-32
 8005618:	dfc00715 	stw	ra,28(sp)
 800561c:	df000615 	stw	fp,24(sp)
 8005620:	df000604 	addi	fp,sp,24
 8005624:	e13ffc15 	stw	r4,-16(fp)
 8005628:	2809883a 	mov	r4,r5
 800562c:	3007883a 	mov	r3,r6
 8005630:	3805883a 	mov	r2,r7
 8005634:	e13ffd05 	stb	r4,-12(fp)
 8005638:	e0fffe05 	stb	r3,-8(fp)
 800563c:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
 8005640:	0089c404 	movi	r2,10000
 8005644:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 8005648:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 800564c:	00000c06 	br	8005680 <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
 8005650:	e0bffa17 	ldw	r2,-24(fp)
 8005654:	108002a8 	cmpgeui	r2,r2,10
 8005658:	1000021e 	bne	r2,zero,8005664 <alt_avalon_i2c_cmd_write+0x50>
 800565c:	0109c404 	movi	r4,10000
 8005660:	80077b00 	call	80077b0 <alt_busy_sleep>
      if (--timeout == 0)
 8005664:	e0bffa17 	ldw	r2,-24(fp)
 8005668:	10bfffc4 	addi	r2,r2,-1
 800566c:	e0bffa15 	stw	r2,-24(fp)
 8005670:	e0bffa17 	ldw	r2,-24(fp)
 8005674:	1000021e 	bne	r2,zero,8005680 <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
 8005678:	00bfff84 	movi	r2,-2
 800567c:	00001906 	br	80056e4 <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 8005680:	e0bffc17 	ldw	r2,-16(fp)
 8005684:	10800317 	ldw	r2,12(r2)
 8005688:	10800404 	addi	r2,r2,16
 800568c:	10800037 	ldwio	r2,0(r2)
 8005690:	1080004c 	andi	r2,r2,1
 8005694:	103fee26 	beq	r2,zero,8005650 <__alt_data_end+0xfc005650>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
 8005698:	e0bffc17 	ldw	r2,-16(fp)
 800569c:	10800317 	ldw	r2,12(r2)
 80056a0:	e13ffd03 	ldbu	r4,-12(fp)
 80056a4:	e0fffe03 	ldbu	r3,-8(fp)
 80056a8:	1806927a 	slli	r3,r3,9
 80056ac:	20c8b03a 	or	r4,r4,r3
 80056b0:	e0ffff03 	ldbu	r3,-4(fp)
 80056b4:	1806923a 	slli	r3,r3,8
 80056b8:	20c6b03a 	or	r3,r4,r3
 80056bc:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 80056c0:	e0bffb04 	addi	r2,fp,-20
 80056c4:	100b883a 	mov	r5,r2
 80056c8:	e13ffc17 	ldw	r4,-16(fp)
 80056cc:	80058540 	call	8005854 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
 80056d0:	e0bffb04 	addi	r2,fp,-20
 80056d4:	100b883a 	mov	r5,r2
 80056d8:	e13ffc17 	ldw	r4,-16(fp)
 80056dc:	80058a00 	call	80058a0 <alt_avalon_i2c_check_arblost>
    
    return status;
 80056e0:	e0bffb17 	ldw	r2,-20(fp)
}
 80056e4:	e037883a 	mov	sp,fp
 80056e8:	dfc00117 	ldw	ra,4(sp)
 80056ec:	df000017 	ldw	fp,0(sp)
 80056f0:	dec00204 	addi	sp,sp,8
 80056f4:	f800283a 	ret

080056f8 <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
 80056f8:	defffa04 	addi	sp,sp,-24
 80056fc:	dfc00515 	stw	ra,20(sp)
 8005700:	df000415 	stw	fp,16(sp)
 8005704:	df000404 	addi	fp,sp,16
 8005708:	e13ffd15 	stw	r4,-12(fp)
 800570c:	e17ffe15 	stw	r5,-8(fp)
 8005710:	3005883a 	mov	r2,r6
 8005714:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
 8005718:	e0bffd17 	ldw	r2,-12(fp)
 800571c:	10800d17 	ldw	r2,52(r2)
 8005720:	10800058 	cmpnei	r2,r2,1
 8005724:	10001c1e 	bne	r2,zero,8005798 <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 8005728:	e0bffd17 	ldw	r2,-12(fp)
 800572c:	10800917 	ldw	r2,36(r2)
 8005730:	109e0014 	ori	r2,r2,30720
 8005734:	1004d1fa 	srli	r2,r2,7
 8005738:	1007883a 	mov	r3,r2
 800573c:	00bfff84 	movi	r2,-2
 8005740:	1884703a 	and	r2,r3,r2
 8005744:	1007883a 	mov	r3,r2
 8005748:	e0bffe17 	ldw	r2,-8(fp)
 800574c:	1884b03a 	or	r2,r3,r2
 8005750:	10803fcc 	andi	r2,r2,255
 8005754:	e0ffff03 	ldbu	r3,-4(fp)
 8005758:	000f883a 	mov	r7,zero
 800575c:	180d883a 	mov	r6,r3
 8005760:	100b883a 	mov	r5,r2
 8005764:	e13ffd17 	ldw	r4,-12(fp)
 8005768:	80056140 	call	8005614 <alt_avalon_i2c_cmd_write>
 800576c:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
 8005770:	e0bffd17 	ldw	r2,-12(fp)
 8005774:	10800917 	ldw	r2,36(r2)
 8005778:	10803fcc 	andi	r2,r2,255
 800577c:	000f883a 	mov	r7,zero
 8005780:	000d883a 	mov	r6,zero
 8005784:	100b883a 	mov	r5,r2
 8005788:	e13ffd17 	ldw	r4,-12(fp)
 800578c:	80056140 	call	8005614 <alt_avalon_i2c_cmd_write>
 8005790:	e0bffc15 	stw	r2,-16(fp)
 8005794:	00000e06 	br	80057d0 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 8005798:	e0bffd17 	ldw	r2,-12(fp)
 800579c:	10800917 	ldw	r2,36(r2)
 80057a0:	1085883a 	add	r2,r2,r2
 80057a4:	1007883a 	mov	r3,r2
 80057a8:	e0bffe17 	ldw	r2,-8(fp)
 80057ac:	1884b03a 	or	r2,r3,r2
 80057b0:	10803fcc 	andi	r2,r2,255
 80057b4:	e0ffff03 	ldbu	r3,-4(fp)
 80057b8:	000f883a 	mov	r7,zero
 80057bc:	180d883a 	mov	r6,r3
 80057c0:	100b883a 	mov	r5,r2
 80057c4:	e13ffd17 	ldw	r4,-12(fp)
 80057c8:	80056140 	call	8005614 <alt_avalon_i2c_cmd_write>
 80057cc:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
 80057d0:	e0bffc17 	ldw	r2,-16(fp)
}
 80057d4:	e037883a 	mov	sp,fp
 80057d8:	dfc00117 	ldw	ra,4(sp)
 80057dc:	df000017 	ldw	fp,0(sp)
 80057e0:	dec00204 	addi	sp,sp,8
 80057e4:	f800283a 	ret

080057e8 <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
 80057e8:	defffd04 	addi	sp,sp,-12
 80057ec:	df000215 	stw	fp,8(sp)
 80057f0:	df000204 	addi	fp,sp,8
 80057f4:	e13ffe15 	stw	r4,-8(fp)
 80057f8:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
 80057fc:	e0bffe17 	ldw	r2,-8(fp)
 8005800:	10c00917 	ldw	r3,36(r2)
 8005804:	e0bfff17 	ldw	r2,-4(fp)
 8005808:	10c00015 	stw	r3,0(r2)
}
 800580c:	0001883a 	nop
 8005810:	e037883a 	mov	sp,fp
 8005814:	df000017 	ldw	fp,0(sp)
 8005818:	dec00104 	addi	sp,sp,4
 800581c:	f800283a 	ret

08005820 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
 8005820:	defffd04 	addi	sp,sp,-12
 8005824:	df000215 	stw	fp,8(sp)
 8005828:	df000204 	addi	fp,sp,8
 800582c:	e13ffe15 	stw	r4,-8(fp)
 8005830:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
 8005834:	e0bffe17 	ldw	r2,-8(fp)
 8005838:	e0ffff17 	ldw	r3,-4(fp)
 800583c:	10c00915 	stw	r3,36(r2)
}
 8005840:	0001883a 	nop
 8005844:	e037883a 	mov	sp,fp
 8005848:	df000017 	ldw	fp,0(sp)
 800584c:	dec00104 	addi	sp,sp,4
 8005850:	f800283a 	ret

08005854 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
 8005854:	defffd04 	addi	sp,sp,-12
 8005858:	df000215 	stw	fp,8(sp)
 800585c:	df000204 	addi	fp,sp,8
 8005860:	e13ffe15 	stw	r4,-8(fp)
 8005864:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
 8005868:	e0bffe17 	ldw	r2,-8(fp)
 800586c:	10800317 	ldw	r2,12(r2)
 8005870:	10800404 	addi	r2,r2,16
 8005874:	10800037 	ldwio	r2,0(r2)
 8005878:	1080010c 	andi	r2,r2,4
 800587c:	10000326 	beq	r2,zero,800588c <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
 8005880:	e0bfff17 	ldw	r2,-4(fp)
 8005884:	00fffec4 	movi	r3,-5
 8005888:	10c00015 	stw	r3,0(r2)
    }
}
 800588c:	0001883a 	nop
 8005890:	e037883a 	mov	sp,fp
 8005894:	df000017 	ldw	fp,0(sp)
 8005898:	dec00104 	addi	sp,sp,4
 800589c:	f800283a 	ret

080058a0 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
 80058a0:	defffd04 	addi	sp,sp,-12
 80058a4:	df000215 	stw	fp,8(sp)
 80058a8:	df000204 	addi	fp,sp,8
 80058ac:	e13ffe15 	stw	r4,-8(fp)
 80058b0:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
 80058b4:	e0bffe17 	ldw	r2,-8(fp)
 80058b8:	10800317 	ldw	r2,12(r2)
 80058bc:	10800404 	addi	r2,r2,16
 80058c0:	10800037 	ldwio	r2,0(r2)
 80058c4:	1080020c 	andi	r2,r2,8
 80058c8:	10000326 	beq	r2,zero,80058d8 <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
 80058cc:	e0bfff17 	ldw	r2,-4(fp)
 80058d0:	00fffe84 	movi	r3,-6
 80058d4:	10c00015 	stw	r3,0(r2)
    }
}
 80058d8:	0001883a 	nop
 80058dc:	e037883a 	mov	sp,fp
 80058e0:	df000017 	ldw	fp,0(sp)
 80058e4:	dec00104 	addi	sp,sp,4
 80058e8:	f800283a 	ret

080058ec <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 80058ec:	defff804 	addi	sp,sp,-32
 80058f0:	dfc00715 	stw	ra,28(sp)
 80058f4:	df000615 	stw	fp,24(sp)
 80058f8:	df000604 	addi	fp,sp,24
 80058fc:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 8005900:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 8005904:	e0bfff17 	ldw	r2,-4(fp)
 8005908:	10800717 	ldw	r2,28(r2)
 800590c:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
 8005910:	e0bffb17 	ldw	r2,-20(fp)
 8005914:	10800117 	ldw	r2,4(r2)
 8005918:	10800044 	addi	r2,r2,1
 800591c:	0149c404 	movi	r5,10000
 8005920:	1009883a 	mov	r4,r2
 8005924:	80033380 	call	8003338 <__mulsi3>
 8005928:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
 800592c:	e0bffd04 	addi	r2,fp,-12
 8005930:	100b883a 	mov	r5,r2
 8005934:	e13fff17 	ldw	r4,-4(fp)
 8005938:	80067840 	call	8006784 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
 800593c:	e0bffd17 	ldw	r2,-12(fp)
 8005940:	100b883a 	mov	r5,r2
 8005944:	e13fff17 	ldw	r4,-4(fp)
 8005948:	80066b80 	call	80066b8 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 800594c:	e0bffc04 	addi	r2,fp,-16
 8005950:	100b883a 	mov	r5,r2
 8005954:	e13fff17 	ldw	r4,-4(fp)
 8005958:	80058540 	call	8005854 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
 800595c:	e0bffc17 	ldw	r2,-16(fp)
 8005960:	10002226 	beq	r2,zero,80059ec <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
 8005964:	e0bffb17 	ldw	r2,-20(fp)
 8005968:	10800217 	ldw	r2,8(r2)
 800596c:	10001d26 	beq	r2,zero,80059e4 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
 8005970:	00000d06 	br	80059a8 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
 8005974:	e0bffa17 	ldw	r2,-24(fp)
 8005978:	108002a8 	cmpgeui	r2,r2,10
 800597c:	1000021e 	bne	r2,zero,8005988 <alt_avalon_i2c_interrupt_transaction_status+0x9c>
 8005980:	0109c404 	movi	r4,10000
 8005984:	80077b00 	call	80077b0 <alt_busy_sleep>
              if (--timeout == 0)
 8005988:	e0bffa17 	ldw	r2,-24(fp)
 800598c:	10bfffc4 	addi	r2,r2,-1
 8005990:	e0bffa15 	stw	r2,-24(fp)
 8005994:	e0bffa17 	ldw	r2,-24(fp)
 8005998:	1000031e 	bne	r2,zero,80059a8 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
 800599c:	00bfff84 	movi	r2,-2
 80059a0:	e0bffc15 	stw	r2,-16(fp)
                 break;
 80059a4:	00000306 	br	80059b4 <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
 80059a8:	e13fff17 	ldw	r4,-4(fp)
 80059ac:	80054800 	call	8005480 <alt_avalon_i2c_is_busy>
 80059b0:	103ff01e 	bne	r2,zero,8005974 <__alt_data_end+0xfc005974>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
 80059b4:	e0bffb17 	ldw	r2,-20(fp)
 80059b8:	10800017 	ldw	r2,0(r2)
 80059bc:	e0fffe04 	addi	r3,fp,-8
 80059c0:	180f883a 	mov	r7,r3
 80059c4:	000d883a 	mov	r6,zero
 80059c8:	100b883a 	mov	r5,r2
 80059cc:	e13fff17 	ldw	r4,-4(fp)
 80059d0:	80054c40 	call	80054c4 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
 80059d4:	e13fff17 	ldw	r4,-4(fp)
 80059d8:	80051280 	call	8005128 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
 80059dc:	e0bffb17 	ldw	r2,-20(fp)
 80059e0:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
 80059e4:	e0bffc17 	ldw	r2,-16(fp)
 80059e8:	00000a06 	br	8005a14 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
 80059ec:	e0bffb17 	ldw	r2,-20(fp)
 80059f0:	10800217 	ldw	r2,8(r2)
 80059f4:	10000626 	beq	r2,zero,8005a10 <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
 80059f8:	e0bffd17 	ldw	r2,-12(fp)
 80059fc:	100b883a 	mov	r5,r2
 8005a00:	e13fff17 	ldw	r4,-4(fp)
 8005a04:	80067200 	call	8006720 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
 8005a08:	00bffe44 	movi	r2,-7
 8005a0c:	00000106 	br	8005a14 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
 8005a10:	0005883a 	mov	r2,zero
}
 8005a14:	e037883a 	mov	sp,fp
 8005a18:	dfc00117 	ldw	ra,4(sp)
 8005a1c:	df000017 	ldw	fp,0(sp)
 8005a20:	dec00204 	addi	sp,sp,8
 8005a24:	f800283a 	ret

08005a28 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 8005a28:	defff704 	addi	sp,sp,-36
 8005a2c:	dfc00815 	stw	ra,32(sp)
 8005a30:	df000715 	stw	fp,28(sp)
 8005a34:	df000704 	addi	fp,sp,28
 8005a38:	e13ffc15 	stw	r4,-16(fp)
 8005a3c:	e17ffd15 	stw	r5,-12(fp)
 8005a40:	e1bffe15 	stw	r6,-8(fp)
 8005a44:	3805883a 	mov	r2,r7
 8005a48:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 8005a4c:	0089c404 	movi	r2,10000
 8005a50:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
 8005a54:	00002206 	br	8005ae0 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
 8005a58:	e0bffb17 	ldw	r2,-20(fp)
 8005a5c:	108002a8 	cmpgeui	r2,r2,10
 8005a60:	1000021e 	bne	r2,zero,8005a6c <alt_avalon_i2c_master_tx+0x44>
 8005a64:	0109c404 	movi	r4,10000
 8005a68:	80077b00 	call	80077b0 <alt_busy_sleep>
      if (use_interrupts)
 8005a6c:	e0bfff03 	ldbu	r2,-4(fp)
 8005a70:	10000926 	beq	r2,zero,8005a98 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
 8005a74:	00800044 	movi	r2,1
 8005a78:	d8800015 	stw	r2,0(sp)
 8005a7c:	000f883a 	mov	r7,zero
 8005a80:	e1bffe17 	ldw	r6,-8(fp)
 8005a84:	e17ffd17 	ldw	r5,-12(fp)
 8005a88:	e13ffc17 	ldw	r4,-16(fp)
 8005a8c:	8005fd40 	call	8005fd4 <alt_avalon_i2c_master_transmit_using_interrupts>
 8005a90:	e0bffa15 	stw	r2,-24(fp)
 8005a94:	00000806 	br	8005ab8 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
 8005a98:	00800044 	movi	r2,1
 8005a9c:	d8800015 	stw	r2,0(sp)
 8005aa0:	000f883a 	mov	r7,zero
 8005aa4:	e1bffe17 	ldw	r6,-8(fp)
 8005aa8:	e17ffd17 	ldw	r5,-12(fp)
 8005aac:	e13ffc17 	ldw	r4,-16(fp)
 8005ab0:	8005e140 	call	8005e14 <alt_avalon_i2c_master_transmit>
 8005ab4:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 8005ab8:	e0bffa17 	ldw	r2,-24(fp)
 8005abc:	10bffea0 	cmpeqi	r2,r2,-6
 8005ac0:	1000061e 	bne	r2,zero,8005adc <alt_avalon_i2c_master_tx+0xb4>
 8005ac4:	e0bffa17 	ldw	r2,-24(fp)
 8005ac8:	10bffee0 	cmpeqi	r2,r2,-5
 8005acc:	1000031e 	bne	r2,zero,8005adc <alt_avalon_i2c_master_tx+0xb4>
 8005ad0:	e0bffa17 	ldw	r2,-24(fp)
 8005ad4:	10bffe58 	cmpnei	r2,r2,-7
 8005ad8:	1000061e 	bne	r2,zero,8005af4 <alt_avalon_i2c_master_tx+0xcc>
 8005adc:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
 8005ae0:	e0bffb17 	ldw	r2,-20(fp)
 8005ae4:	10ffffc4 	addi	r3,r2,-1
 8005ae8:	e0fffb15 	stw	r3,-20(fp)
 8005aec:	103fda1e 	bne	r2,zero,8005a58 <__alt_data_end+0xfc005a58>
 8005af0:	00000106 	br	8005af8 <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
 8005af4:	0001883a 	nop
    }

    return status;
 8005af8:	e0bffa17 	ldw	r2,-24(fp)
}        
 8005afc:	e037883a 	mov	sp,fp
 8005b00:	dfc00117 	ldw	ra,4(sp)
 8005b04:	df000017 	ldw	fp,0(sp)
 8005b08:	dec00204 	addi	sp,sp,8
 8005b0c:	f800283a 	ret

08005b10 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 8005b10:	defff704 	addi	sp,sp,-36
 8005b14:	dfc00815 	stw	ra,32(sp)
 8005b18:	df000715 	stw	fp,28(sp)
 8005b1c:	df000704 	addi	fp,sp,28
 8005b20:	e13ffc15 	stw	r4,-16(fp)
 8005b24:	e17ffd15 	stw	r5,-12(fp)
 8005b28:	e1bffe15 	stw	r6,-8(fp)
 8005b2c:	3805883a 	mov	r2,r7
 8005b30:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 8005b34:	0089c404 	movi	r2,10000
 8005b38:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
 8005b3c:	e0bfff03 	ldbu	r2,-4(fp)
 8005b40:	10003426 	beq	r2,zero,8005c14 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
 8005b44:	00001706 	br	8005ba4 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
 8005b48:	e0bffb17 	ldw	r2,-20(fp)
 8005b4c:	108002a8 	cmpgeui	r2,r2,10
 8005b50:	1000021e 	bne	r2,zero,8005b5c <alt_avalon_i2c_master_rx+0x4c>
 8005b54:	0109c404 	movi	r4,10000
 8005b58:	80077b00 	call	80077b0 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 8005b5c:	00800044 	movi	r2,1
 8005b60:	d8800015 	stw	r2,0(sp)
 8005b64:	000f883a 	mov	r7,zero
 8005b68:	e1bffe17 	ldw	r6,-8(fp)
 8005b6c:	e17ffd17 	ldw	r5,-12(fp)
 8005b70:	e13ffc17 	ldw	r4,-16(fp)
 8005b74:	80063f00 	call	80063f0 <alt_avalon_i2c_master_receive_using_interrupts>
 8005b78:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 8005b7c:	e0bffa17 	ldw	r2,-24(fp)
 8005b80:	10bffea0 	cmpeqi	r2,r2,-6
 8005b84:	1000061e 	bne	r2,zero,8005ba0 <alt_avalon_i2c_master_rx+0x90>
 8005b88:	e0bffa17 	ldw	r2,-24(fp)
 8005b8c:	10bffee0 	cmpeqi	r2,r2,-5
 8005b90:	1000031e 	bne	r2,zero,8005ba0 <alt_avalon_i2c_master_rx+0x90>
 8005b94:	e0bffa17 	ldw	r2,-24(fp)
 8005b98:	10bffe58 	cmpnei	r2,r2,-7
 8005b9c:	1000221e 	bne	r2,zero,8005c28 <alt_avalon_i2c_master_rx+0x118>
 8005ba0:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
 8005ba4:	e0bffb17 	ldw	r2,-20(fp)
 8005ba8:	10ffffc4 	addi	r3,r2,-1
 8005bac:	e0fffb15 	stw	r3,-20(fp)
 8005bb0:	103fe51e 	bne	r2,zero,8005b48 <__alt_data_end+0xfc005b48>
 8005bb4:	00001f06 	br	8005c34 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 8005bb8:	e0bffb17 	ldw	r2,-20(fp)
 8005bbc:	108002a8 	cmpgeui	r2,r2,10
 8005bc0:	1000021e 	bne	r2,zero,8005bcc <alt_avalon_i2c_master_rx+0xbc>
 8005bc4:	0109c404 	movi	r4,10000
 8005bc8:	80077b00 	call	80077b0 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 8005bcc:	00800044 	movi	r2,1
 8005bd0:	d8800015 	stw	r2,0(sp)
 8005bd4:	000f883a 	mov	r7,zero
 8005bd8:	e1bffe17 	ldw	r6,-8(fp)
 8005bdc:	e17ffd17 	ldw	r5,-12(fp)
 8005be0:	e13ffc17 	ldw	r4,-16(fp)
 8005be4:	80061e00 	call	80061e0 <alt_avalon_i2c_master_receive>
 8005be8:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 8005bec:	e0bffa17 	ldw	r2,-24(fp)
 8005bf0:	10bffea0 	cmpeqi	r2,r2,-6
 8005bf4:	1000061e 	bne	r2,zero,8005c10 <alt_avalon_i2c_master_rx+0x100>
 8005bf8:	e0bffa17 	ldw	r2,-24(fp)
 8005bfc:	10bffee0 	cmpeqi	r2,r2,-5
 8005c00:	1000031e 	bne	r2,zero,8005c10 <alt_avalon_i2c_master_rx+0x100>
 8005c04:	e0bffa17 	ldw	r2,-24(fp)
 8005c08:	10bffe58 	cmpnei	r2,r2,-7
 8005c0c:	1000081e 	bne	r2,zero,8005c30 <alt_avalon_i2c_master_rx+0x120>
 8005c10:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
 8005c14:	e0bffb17 	ldw	r2,-20(fp)
 8005c18:	10ffffc4 	addi	r3,r2,-1
 8005c1c:	e0fffb15 	stw	r3,-20(fp)
 8005c20:	103fe51e 	bne	r2,zero,8005bb8 <__alt_data_end+0xfc005bb8>
 8005c24:	00000306 	br	8005c34 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
 8005c28:	0001883a 	nop
 8005c2c:	00000106 	br	8005c34 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
 8005c30:	0001883a 	nop
      }
    }
    
    return status;
 8005c34:	e0bffa17 	ldw	r2,-24(fp)
}        
 8005c38:	e037883a 	mov	sp,fp
 8005c3c:	dfc00117 	ldw	ra,4(sp)
 8005c40:	df000017 	ldw	fp,0(sp)
 8005c44:	dec00204 	addi	sp,sp,8
 8005c48:	f800283a 	ret

08005c4c <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
 8005c4c:	defff604 	addi	sp,sp,-40
 8005c50:	dfc00915 	stw	ra,36(sp)
 8005c54:	df000815 	stw	fp,32(sp)
 8005c58:	df000804 	addi	fp,sp,32
 8005c5c:	e13ffb15 	stw	r4,-20(fp)
 8005c60:	e17ffc15 	stw	r5,-16(fp)
 8005c64:	e1bffd15 	stw	r6,-12(fp)
 8005c68:	e1fffe15 	stw	r7,-8(fp)
 8005c6c:	e0800317 	ldw	r2,12(fp)
 8005c70:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 8005c74:	0089c404 	movi	r2,10000
 8005c78:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
 8005c7c:	e0bfff03 	ldbu	r2,-4(fp)
 8005c80:	10005626 	beq	r2,zero,8005ddc <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
 8005c84:	00002806 	br	8005d28 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
 8005c88:	e0bffa17 	ldw	r2,-24(fp)
 8005c8c:	108002a8 	cmpgeui	r2,r2,10
 8005c90:	1000021e 	bne	r2,zero,8005c9c <alt_avalon_i2c_master_tx_rx+0x50>
 8005c94:	0109c404 	movi	r4,10000
 8005c98:	80077b00 	call	80077b0 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 8005c9c:	d8000015 	stw	zero,0(sp)
 8005ca0:	000f883a 	mov	r7,zero
 8005ca4:	e1bffd17 	ldw	r6,-12(fp)
 8005ca8:	e17ffc17 	ldw	r5,-16(fp)
 8005cac:	e13ffb17 	ldw	r4,-20(fp)
 8005cb0:	8005fd40 	call	8005fd4 <alt_avalon_i2c_master_transmit_using_interrupts>
 8005cb4:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 8005cb8:	e0bff917 	ldw	r2,-28(fp)
 8005cbc:	10bffea0 	cmpeqi	r2,r2,-6
 8005cc0:	1000191e 	bne	r2,zero,8005d28 <alt_avalon_i2c_master_tx_rx+0xdc>
 8005cc4:	e0bff917 	ldw	r2,-28(fp)
 8005cc8:	10bffee0 	cmpeqi	r2,r2,-5
 8005ccc:	1000161e 	bne	r2,zero,8005d28 <alt_avalon_i2c_master_tx_rx+0xdc>
 8005cd0:	e0bff917 	ldw	r2,-28(fp)
 8005cd4:	10bffe58 	cmpnei	r2,r2,-7
 8005cd8:	1000011e 	bne	r2,zero,8005ce0 <alt_avalon_i2c_master_tx_rx+0x94>
 8005cdc:	00001206 	br	8005d28 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 8005ce0:	00800044 	movi	r2,1
 8005ce4:	d8800015 	stw	r2,0(sp)
 8005ce8:	01c00044 	movi	r7,1
 8005cec:	e1800217 	ldw	r6,8(fp)
 8005cf0:	e17ffe17 	ldw	r5,-8(fp)
 8005cf4:	e13ffb17 	ldw	r4,-20(fp)
 8005cf8:	80063f00 	call	80063f0 <alt_avalon_i2c_master_receive_using_interrupts>
 8005cfc:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 8005d00:	e0bff917 	ldw	r2,-28(fp)
 8005d04:	10bffea0 	cmpeqi	r2,r2,-6
 8005d08:	1000061e 	bne	r2,zero,8005d24 <alt_avalon_i2c_master_tx_rx+0xd8>
 8005d0c:	e0bff917 	ldw	r2,-28(fp)
 8005d10:	10bffee0 	cmpeqi	r2,r2,-5
 8005d14:	1000031e 	bne	r2,zero,8005d24 <alt_avalon_i2c_master_tx_rx+0xd8>
 8005d18:	e0bff917 	ldw	r2,-28(fp)
 8005d1c:	10bffe58 	cmpnei	r2,r2,-7
 8005d20:	1000331e 	bne	r2,zero,8005df0 <alt_avalon_i2c_master_tx_rx+0x1a4>
 8005d24:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
 8005d28:	e0bffa17 	ldw	r2,-24(fp)
 8005d2c:	10ffffc4 	addi	r3,r2,-1
 8005d30:	e0fffa15 	stw	r3,-24(fp)
 8005d34:	103fd41e 	bne	r2,zero,8005c88 <__alt_data_end+0xfc005c88>
 8005d38:	00003006 	br	8005dfc <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 8005d3c:	e0bffa17 	ldw	r2,-24(fp)
 8005d40:	108002a8 	cmpgeui	r2,r2,10
 8005d44:	1000021e 	bne	r2,zero,8005d50 <alt_avalon_i2c_master_tx_rx+0x104>
 8005d48:	0109c404 	movi	r4,10000
 8005d4c:	80077b00 	call	80077b0 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 8005d50:	d8000015 	stw	zero,0(sp)
 8005d54:	000f883a 	mov	r7,zero
 8005d58:	e1bffd17 	ldw	r6,-12(fp)
 8005d5c:	e17ffc17 	ldw	r5,-16(fp)
 8005d60:	e13ffb17 	ldw	r4,-20(fp)
 8005d64:	8005e140 	call	8005e14 <alt_avalon_i2c_master_transmit>
 8005d68:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 8005d6c:	e0bff917 	ldw	r2,-28(fp)
 8005d70:	10bffea0 	cmpeqi	r2,r2,-6
 8005d74:	1000191e 	bne	r2,zero,8005ddc <alt_avalon_i2c_master_tx_rx+0x190>
 8005d78:	e0bff917 	ldw	r2,-28(fp)
 8005d7c:	10bffee0 	cmpeqi	r2,r2,-5
 8005d80:	1000161e 	bne	r2,zero,8005ddc <alt_avalon_i2c_master_tx_rx+0x190>
 8005d84:	e0bff917 	ldw	r2,-28(fp)
 8005d88:	10bffe58 	cmpnei	r2,r2,-7
 8005d8c:	1000011e 	bne	r2,zero,8005d94 <alt_avalon_i2c_master_tx_rx+0x148>
 8005d90:	00001206 	br	8005ddc <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 8005d94:	00800044 	movi	r2,1
 8005d98:	d8800015 	stw	r2,0(sp)
 8005d9c:	01c00044 	movi	r7,1
 8005da0:	e1800217 	ldw	r6,8(fp)
 8005da4:	e17ffe17 	ldw	r5,-8(fp)
 8005da8:	e13ffb17 	ldw	r4,-20(fp)
 8005dac:	80061e00 	call	80061e0 <alt_avalon_i2c_master_receive>
 8005db0:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 8005db4:	e0bff917 	ldw	r2,-28(fp)
 8005db8:	10bffea0 	cmpeqi	r2,r2,-6
 8005dbc:	1000061e 	bne	r2,zero,8005dd8 <alt_avalon_i2c_master_tx_rx+0x18c>
 8005dc0:	e0bff917 	ldw	r2,-28(fp)
 8005dc4:	10bffee0 	cmpeqi	r2,r2,-5
 8005dc8:	1000031e 	bne	r2,zero,8005dd8 <alt_avalon_i2c_master_tx_rx+0x18c>
 8005dcc:	e0bff917 	ldw	r2,-28(fp)
 8005dd0:	10bffe58 	cmpnei	r2,r2,-7
 8005dd4:	1000081e 	bne	r2,zero,8005df8 <alt_avalon_i2c_master_tx_rx+0x1ac>
 8005dd8:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
 8005ddc:	e0bffa17 	ldw	r2,-24(fp)
 8005de0:	10ffffc4 	addi	r3,r2,-1
 8005de4:	e0fffa15 	stw	r3,-24(fp)
 8005de8:	103fd41e 	bne	r2,zero,8005d3c <__alt_data_end+0xfc005d3c>
 8005dec:	00000306 	br	8005dfc <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
 8005df0:	0001883a 	nop
 8005df4:	00000106 	br	8005dfc <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
 8005df8:	0001883a 	nop
      }
    }
    
    return status;
 8005dfc:	e0bff917 	ldw	r2,-28(fp)
}                                       
 8005e00:	e037883a 	mov	sp,fp
 8005e04:	dfc00117 	ldw	ra,4(sp)
 8005e08:	df000017 	ldw	fp,0(sp)
 8005e0c:	dec00204 	addi	sp,sp,8
 8005e10:	f800283a 	ret

08005e14 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 8005e14:	defff704 	addi	sp,sp,-36
 8005e18:	dfc00815 	stw	ra,32(sp)
 8005e1c:	df000715 	stw	fp,28(sp)
 8005e20:	df000704 	addi	fp,sp,28
 8005e24:	e13ffb15 	stw	r4,-20(fp)
 8005e28:	e17ffc15 	stw	r5,-16(fp)
 8005e2c:	e1bffd15 	stw	r6,-12(fp)
 8005e30:	3807883a 	mov	r3,r7
 8005e34:	e0800217 	ldw	r2,8(fp)
 8005e38:	e0fffe05 	stb	r3,-8(fp)
 8005e3c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 8005e40:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
 8005e44:	0149c404 	movi	r5,10000
 8005e48:	e13ffd17 	ldw	r4,-12(fp)
 8005e4c:	80033380 	call	8003338 <__mulsi3>
 8005e50:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
 8005e54:	e0bffd17 	ldw	r2,-12(fp)
 8005e58:	1000021e 	bne	r2,zero,8005e64 <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
 8005e5c:	0005883a 	mov	r2,zero
 8005e60:	00005706 	br	8005fc0 <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 8005e64:	e0bffe03 	ldbu	r2,-8(fp)
 8005e68:	10000a1e 	bne	r2,zero,8005e94 <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 8005e6c:	e13ffb17 	ldw	r4,-20(fp)
 8005e70:	80050900 	call	8005090 <alt_avalon_i2c_enable>
 8005e74:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 8005e78:	e0bffa17 	ldw	r2,-24(fp)
 8005e7c:	10000226 	beq	r2,zero,8005e88 <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
 8005e80:	e0bffa17 	ldw	r2,-24(fp)
 8005e84:	00004e06 	br	8005fc0 <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 8005e88:	01400704 	movi	r5,28
 8005e8c:	e13ffb17 	ldw	r4,-20(fp)
 8005e90:	800667c0 	call	800667c <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 8005e94:	e0bffe03 	ldbu	r2,-8(fp)
 8005e98:	100d883a 	mov	r6,r2
 8005e9c:	000b883a 	mov	r5,zero
 8005ea0:	e13ffb17 	ldw	r4,-20(fp)
 8005ea4:	80056f80 	call	80056f8 <alt_avalon_i2c_send_address>
 8005ea8:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
 8005eac:	e0bffa17 	ldw	r2,-24(fp)
 8005eb0:	1000271e 	bne	r2,zero,8005f50 <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 8005eb4:	00000f06 	br	8005ef4 <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 8005eb8:	e0bffc17 	ldw	r2,-16(fp)
 8005ebc:	10800003 	ldbu	r2,0(r2)
 8005ec0:	10803fcc 	andi	r2,r2,255
 8005ec4:	000f883a 	mov	r7,zero
 8005ec8:	000d883a 	mov	r6,zero
 8005ecc:	100b883a 	mov	r5,r2
 8005ed0:	e13ffb17 	ldw	r4,-20(fp)
 8005ed4:	80056140 	call	8005614 <alt_avalon_i2c_cmd_write>
 8005ed8:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
 8005edc:	e0bffc17 	ldw	r2,-16(fp)
 8005ee0:	10800044 	addi	r2,r2,1
 8005ee4:	e0bffc15 	stw	r2,-16(fp)
            --size;
 8005ee8:	e0bffd17 	ldw	r2,-12(fp)
 8005eec:	10bfffc4 	addi	r2,r2,-1
 8005ef0:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 8005ef4:	e0bffd17 	ldw	r2,-12(fp)
 8005ef8:	108000b0 	cmpltui	r2,r2,2
 8005efc:	1000021e 	bne	r2,zero,8005f08 <alt_avalon_i2c_master_transmit+0xf4>
 8005f00:	e0bffa17 	ldw	r2,-24(fp)
 8005f04:	103fec26 	beq	r2,zero,8005eb8 <__alt_data_end+0xfc005eb8>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 8005f08:	e0bffa17 	ldw	r2,-24(fp)
 8005f0c:	1000101e 	bne	r2,zero,8005f50 <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 8005f10:	e0bffc17 	ldw	r2,-16(fp)
 8005f14:	10800003 	ldbu	r2,0(r2)
 8005f18:	10803fcc 	andi	r2,r2,255
 8005f1c:	e0ffff03 	ldbu	r3,-4(fp)
 8005f20:	180f883a 	mov	r7,r3
 8005f24:	000d883a 	mov	r6,zero
 8005f28:	100b883a 	mov	r5,r2
 8005f2c:	e13ffb17 	ldw	r4,-20(fp)
 8005f30:	80056140 	call	8005614 <alt_avalon_i2c_cmd_write>
 8005f34:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
 8005f38:	e0bffc17 	ldw	r2,-16(fp)
 8005f3c:	10800044 	addi	r2,r2,1
 8005f40:	e0bffc15 	stw	r2,-16(fp)
            --size;
 8005f44:	e0bffd17 	ldw	r2,-12(fp)
 8005f48:	10bfffc4 	addi	r2,r2,-1
 8005f4c:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 8005f50:	e0bfff03 	ldbu	r2,-4(fp)
 8005f54:	1000101e 	bne	r2,zero,8005f98 <alt_avalon_i2c_master_transmit+0x184>
 8005f58:	e0bffa17 	ldw	r2,-24(fp)
 8005f5c:	10001726 	beq	r2,zero,8005fbc <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 8005f60:	00000d06 	br	8005f98 <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
 8005f64:	e0bff917 	ldw	r2,-28(fp)
 8005f68:	108002a8 	cmpgeui	r2,r2,10
 8005f6c:	1000021e 	bne	r2,zero,8005f78 <alt_avalon_i2c_master_transmit+0x164>
 8005f70:	0109c404 	movi	r4,10000
 8005f74:	80077b00 	call	80077b0 <alt_busy_sleep>
            if (--timeout == 0)
 8005f78:	e0bff917 	ldw	r2,-28(fp)
 8005f7c:	10bfffc4 	addi	r2,r2,-1
 8005f80:	e0bff915 	stw	r2,-28(fp)
 8005f84:	e0bff917 	ldw	r2,-28(fp)
 8005f88:	1000031e 	bne	r2,zero,8005f98 <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 8005f8c:	00bfff84 	movi	r2,-2
 8005f90:	e0bffa15 	stw	r2,-24(fp)
               break;
 8005f94:	00000306 	br	8005fa4 <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 8005f98:	e13ffb17 	ldw	r4,-20(fp)
 8005f9c:	80054800 	call	8005480 <alt_avalon_i2c_is_busy>
 8005fa0:	103ff01e 	bne	r2,zero,8005f64 <__alt_data_end+0xfc005f64>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
 8005fa4:	e0bffa04 	addi	r2,fp,-24
 8005fa8:	100b883a 	mov	r5,r2
 8005fac:	e13ffb17 	ldw	r4,-20(fp)
 8005fb0:	80058540 	call	8005854 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 8005fb4:	e13ffb17 	ldw	r4,-20(fp)
 8005fb8:	80051280 	call	8005128 <alt_avalon_i2c_disable>
    }


    return status;
 8005fbc:	e0bffa17 	ldw	r2,-24(fp)
}
 8005fc0:	e037883a 	mov	sp,fp
 8005fc4:	dfc00117 	ldw	ra,4(sp)
 8005fc8:	df000017 	ldw	fp,0(sp)
 8005fcc:	dec00204 	addi	sp,sp,8
 8005fd0:	f800283a 	ret

08005fd4 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 8005fd4:	defff604 	addi	sp,sp,-40
 8005fd8:	dfc00915 	stw	ra,36(sp)
 8005fdc:	df000815 	stw	fp,32(sp)
 8005fe0:	df000804 	addi	fp,sp,32
 8005fe4:	e13ffb15 	stw	r4,-20(fp)
 8005fe8:	e17ffc15 	stw	r5,-16(fp)
 8005fec:	e1bffd15 	stw	r6,-12(fp)
 8005ff0:	3807883a 	mov	r3,r7
 8005ff4:	e0800217 	ldw	r2,8(fp)
 8005ff8:	e0fffe05 	stb	r3,-8(fp)
 8005ffc:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 8006000:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
 8006004:	0149c404 	movi	r5,10000
 8006008:	e13ffd17 	ldw	r4,-12(fp)
 800600c:	80033380 	call	8003338 <__mulsi3>
 8006010:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 8006014:	e0bffb17 	ldw	r2,-20(fp)
 8006018:	10800717 	ldw	r2,28(r2)
 800601c:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
 8006020:	e0bffd17 	ldw	r2,-12(fp)
 8006024:	1000021e 	bne	r2,zero,8006030 <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
 8006028:	0005883a 	mov	r2,zero
 800602c:	00006706 	br	80061cc <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 8006030:	e0bffb17 	ldw	r2,-20(fp)
 8006034:	10c00617 	ldw	r3,24(r2)
 8006038:	00820034 	movhi	r2,2048
 800603c:	10934504 	addi	r2,r2,19732
 8006040:	18800226 	beq	r3,r2,800604c <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 8006044:	00bfff44 	movi	r2,-3
 8006048:	00006006 	br	80061cc <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 800604c:	e0bffe03 	ldbu	r2,-8(fp)
 8006050:	10000a1e 	bne	r2,zero,800607c <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 8006054:	e13ffb17 	ldw	r4,-20(fp)
 8006058:	80050900 	call	8005090 <alt_avalon_i2c_enable>
 800605c:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 8006060:	e0bff817 	ldw	r2,-32(fp)
 8006064:	10000226 	beq	r2,zero,8006070 <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
 8006068:	e0bff817 	ldw	r2,-32(fp)
 800606c:	00005706 	br	80061cc <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 8006070:	01400704 	movi	r5,28
 8006074:	e13ffb17 	ldw	r4,-20(fp)
 8006078:	800667c0 	call	800667c <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 800607c:	e0bffe03 	ldbu	r2,-8(fp)
 8006080:	100d883a 	mov	r6,r2
 8006084:	000b883a 	mov	r5,zero
 8006088:	e13ffb17 	ldw	r4,-20(fp)
 800608c:	80056f80 	call	80056f8 <alt_avalon_i2c_send_address>
 8006090:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
 8006094:	e0bff817 	ldw	r2,-32(fp)
 8006098:	1000271e 	bne	r2,zero,8006138 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 800609c:	00000f06 	br	80060dc <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 80060a0:	e0bffc17 	ldw	r2,-16(fp)
 80060a4:	10800003 	ldbu	r2,0(r2)
 80060a8:	10803fcc 	andi	r2,r2,255
 80060ac:	000f883a 	mov	r7,zero
 80060b0:	000d883a 	mov	r6,zero
 80060b4:	100b883a 	mov	r5,r2
 80060b8:	e13ffb17 	ldw	r4,-20(fp)
 80060bc:	80056140 	call	8005614 <alt_avalon_i2c_cmd_write>
 80060c0:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
 80060c4:	e0bffc17 	ldw	r2,-16(fp)
 80060c8:	10800044 	addi	r2,r2,1
 80060cc:	e0bffc15 	stw	r2,-16(fp)
            --size;
 80060d0:	e0bffd17 	ldw	r2,-12(fp)
 80060d4:	10bfffc4 	addi	r2,r2,-1
 80060d8:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 80060dc:	e0bffd17 	ldw	r2,-12(fp)
 80060e0:	108000b0 	cmpltui	r2,r2,2
 80060e4:	1000021e 	bne	r2,zero,80060f0 <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
 80060e8:	e0bff817 	ldw	r2,-32(fp)
 80060ec:	103fec26 	beq	r2,zero,80060a0 <__alt_data_end+0xfc0060a0>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 80060f0:	e0bff817 	ldw	r2,-32(fp)
 80060f4:	1000101e 	bne	r2,zero,8006138 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 80060f8:	e0bffc17 	ldw	r2,-16(fp)
 80060fc:	10800003 	ldbu	r2,0(r2)
 8006100:	10803fcc 	andi	r2,r2,255
 8006104:	e0ffff03 	ldbu	r3,-4(fp)
 8006108:	180f883a 	mov	r7,r3
 800610c:	000d883a 	mov	r6,zero
 8006110:	100b883a 	mov	r5,r2
 8006114:	e13ffb17 	ldw	r4,-20(fp)
 8006118:	80056140 	call	8005614 <alt_avalon_i2c_cmd_write>
 800611c:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
 8006120:	e0bffc17 	ldw	r2,-16(fp)
 8006124:	10800044 	addi	r2,r2,1
 8006128:	e0bffc15 	stw	r2,-16(fp)
            --size;
 800612c:	e0bffd17 	ldw	r2,-12(fp)
 8006130:	10bfffc4 	addi	r2,r2,-1
 8006134:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 8006138:	e0bff817 	ldw	r2,-32(fp)
 800613c:	10001426 	beq	r2,zero,8006190 <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 8006140:	00000d06 	br	8006178 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
 8006144:	e0bff917 	ldw	r2,-28(fp)
 8006148:	108002a8 	cmpgeui	r2,r2,10
 800614c:	1000021e 	bne	r2,zero,8006158 <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
 8006150:	0109c404 	movi	r4,10000
 8006154:	80077b00 	call	80077b0 <alt_busy_sleep>
            if (--timeout == 0)
 8006158:	e0bff917 	ldw	r2,-28(fp)
 800615c:	10bfffc4 	addi	r2,r2,-1
 8006160:	e0bff915 	stw	r2,-28(fp)
 8006164:	e0bff917 	ldw	r2,-28(fp)
 8006168:	1000031e 	bne	r2,zero,8006178 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 800616c:	00bfff84 	movi	r2,-2
 8006170:	e0bff815 	stw	r2,-32(fp)
               break;
 8006174:	00000306 	br	8006184 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 8006178:	e13ffb17 	ldw	r4,-20(fp)
 800617c:	80054800 	call	8005480 <alt_avalon_i2c_is_busy>
 8006180:	103ff01e 	bne	r2,zero,8006144 <__alt_data_end+0xfc006144>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 8006184:	e13ffb17 	ldw	r4,-20(fp)
 8006188:	80051280 	call	8005128 <alt_avalon_i2c_disable>
 800618c:	00000e06 	br	80061c8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
 8006190:	e0bfff03 	ldbu	r2,-4(fp)
 8006194:	10000c26 	beq	r2,zero,80061c8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 8006198:	01400704 	movi	r5,28
 800619c:	e13ffb17 	ldw	r4,-20(fp)
 80061a0:	800667c0 	call	800667c <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
 80061a4:	000b883a 	mov	r5,zero
 80061a8:	e13ffb17 	ldw	r4,-20(fp)
 80061ac:	80068c40 	call	80068c4 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
 80061b0:	e0bffa17 	ldw	r2,-24(fp)
 80061b4:	00c00044 	movi	r3,1
 80061b8:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
 80061bc:	01400044 	movi	r5,1
 80061c0:	e13ffb17 	ldw	r4,-20(fp)
 80061c4:	80067200 	call	8006720 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
 80061c8:	e0bff817 	ldw	r2,-32(fp)
}
 80061cc:	e037883a 	mov	sp,fp
 80061d0:	dfc00117 	ldw	ra,4(sp)
 80061d4:	df000017 	ldw	fp,0(sp)
 80061d8:	dec00204 	addi	sp,sp,8
 80061dc:	f800283a 	ret

080061e0 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 80061e0:	defff404 	addi	sp,sp,-48
 80061e4:	dfc00b15 	stw	ra,44(sp)
 80061e8:	df000a15 	stw	fp,40(sp)
 80061ec:	df000a04 	addi	fp,sp,40
 80061f0:	e13ffb15 	stw	r4,-20(fp)
 80061f4:	e17ffc15 	stw	r5,-16(fp)
 80061f8:	e1bffd15 	stw	r6,-12(fp)
 80061fc:	3807883a 	mov	r3,r7
 8006200:	e0800217 	ldw	r2,8(fp)
 8006204:	e0fffe05 	stb	r3,-8(fp)
 8006208:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 800620c:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
 8006210:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
 8006214:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
 8006218:	e0bffd17 	ldw	r2,-12(fp)
 800621c:	1000021e 	bne	r2,zero,8006228 <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
 8006220:	0005883a 	mov	r2,zero
 8006224:	00006d06 	br	80063dc <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 8006228:	e0bffe03 	ldbu	r2,-8(fp)
 800622c:	10000a1e 	bne	r2,zero,8006258 <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 8006230:	e13ffb17 	ldw	r4,-20(fp)
 8006234:	80050900 	call	8005090 <alt_avalon_i2c_enable>
 8006238:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 800623c:	e0bff917 	ldw	r2,-28(fp)
 8006240:	10000226 	beq	r2,zero,800624c <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
 8006244:	e0bff917 	ldw	r2,-28(fp)
 8006248:	00006406 	br	80063dc <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 800624c:	01400704 	movi	r5,28
 8006250:	e13ffb17 	ldw	r4,-20(fp)
 8006254:	800667c0 	call	800667c <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 8006258:	e0bffe03 	ldbu	r2,-8(fp)
 800625c:	100d883a 	mov	r6,r2
 8006260:	01400044 	movi	r5,1
 8006264:	e13ffb17 	ldw	r4,-20(fp)
 8006268:	80056f80 	call	80056f8 <alt_avalon_i2c_send_address>
 800626c:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 8006270:	e0bff917 	ldw	r2,-28(fp)
 8006274:	1000341e 	bne	r2,zero,8006348 <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 8006278:	00001906 	br	80062e0 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 800627c:	000f883a 	mov	r7,zero
 8006280:	000d883a 	mov	r6,zero
 8006284:	000b883a 	mov	r5,zero
 8006288:	e13ffb17 	ldw	r4,-20(fp)
 800628c:	80056140 	call	8005614 <alt_avalon_i2c_cmd_write>
 8006290:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
 8006294:	e0bff817 	ldw	r2,-32(fp)
 8006298:	10800044 	addi	r2,r2,1
 800629c:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
 80062a0:	e0bff917 	ldw	r2,-28(fp)
 80062a4:	10000e1e 	bne	r2,zero,80062e0 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
 80062a8:	e0bffa04 	addi	r2,fp,-24
 80062ac:	100f883a 	mov	r7,r2
 80062b0:	000d883a 	mov	r6,zero
 80062b4:	e17ffc17 	ldw	r5,-16(fp)
 80062b8:	e13ffb17 	ldw	r4,-20(fp)
 80062bc:	80054c40 	call	80054c4 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
 80062c0:	e0bffa17 	ldw	r2,-24(fp)
 80062c4:	e0fffc17 	ldw	r3,-16(fp)
 80062c8:	1885883a 	add	r2,r3,r2
 80062cc:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
 80062d0:	e0bffa17 	ldw	r2,-24(fp)
 80062d4:	e0fff717 	ldw	r3,-36(fp)
 80062d8:	1885883a 	add	r2,r3,r2
 80062dc:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 80062e0:	e0bffd17 	ldw	r2,-12(fp)
 80062e4:	10bfffc4 	addi	r2,r2,-1
 80062e8:	e0fff817 	ldw	r3,-32(fp)
 80062ec:	1880022e 	bgeu	r3,r2,80062f8 <alt_avalon_i2c_master_receive+0x118>
 80062f0:	e0bff917 	ldw	r2,-28(fp)
 80062f4:	103fe126 	beq	r2,zero,800627c <__alt_data_end+0xfc00627c>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 80062f8:	e0bff917 	ldw	r2,-28(fp)
 80062fc:	1000121e 	bne	r2,zero,8006348 <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 8006300:	e0bfff03 	ldbu	r2,-4(fp)
 8006304:	100f883a 	mov	r7,r2
 8006308:	000d883a 	mov	r6,zero
 800630c:	000b883a 	mov	r5,zero
 8006310:	e13ffb17 	ldw	r4,-20(fp)
 8006314:	80056140 	call	8005614 <alt_avalon_i2c_cmd_write>
 8006318:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 800631c:	00000a06 	br	8006348 <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
 8006320:	e17ffc17 	ldw	r5,-16(fp)
 8006324:	e13ffb17 	ldw	r4,-20(fp)
 8006328:	800556c0 	call	800556c <alt_avalon_i2c_rx_read>
 800632c:	e0bff915 	stw	r2,-28(fp)
        buffer++;
 8006330:	e0bffc17 	ldw	r2,-16(fp)
 8006334:	10800044 	addi	r2,r2,1
 8006338:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
 800633c:	e0bff717 	ldw	r2,-36(fp)
 8006340:	10800044 	addi	r2,r2,1
 8006344:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 8006348:	e0fff717 	ldw	r3,-36(fp)
 800634c:	e0bffd17 	ldw	r2,-12(fp)
 8006350:	1880022e 	bgeu	r3,r2,800635c <alt_avalon_i2c_master_receive+0x17c>
 8006354:	e0bff917 	ldw	r2,-28(fp)
 8006358:	103ff126 	beq	r2,zero,8006320 <__alt_data_end+0xfc006320>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 800635c:	e0bfff03 	ldbu	r2,-4(fp)
 8006360:	1000021e 	bne	r2,zero,800636c <alt_avalon_i2c_master_receive+0x18c>
 8006364:	e0bff917 	ldw	r2,-28(fp)
 8006368:	10001b26 	beq	r2,zero,80063d8 <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
 800636c:	0149c404 	movi	r5,10000
 8006370:	e13ffd17 	ldw	r4,-12(fp)
 8006374:	80033380 	call	8003338 <__mulsi3>
 8006378:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 800637c:	00000d06 	br	80063b4 <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
 8006380:	e0bff617 	ldw	r2,-40(fp)
 8006384:	108002a8 	cmpgeui	r2,r2,10
 8006388:	1000021e 	bne	r2,zero,8006394 <alt_avalon_i2c_master_receive+0x1b4>
 800638c:	0109c404 	movi	r4,10000
 8006390:	80077b00 	call	80077b0 <alt_busy_sleep>
            if (--timeout == 0)
 8006394:	e0bff617 	ldw	r2,-40(fp)
 8006398:	10bfffc4 	addi	r2,r2,-1
 800639c:	e0bff615 	stw	r2,-40(fp)
 80063a0:	e0bff617 	ldw	r2,-40(fp)
 80063a4:	1000031e 	bne	r2,zero,80063b4 <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 80063a8:	00bfff84 	movi	r2,-2
 80063ac:	e0bff915 	stw	r2,-28(fp)
               break;
 80063b0:	00000306 	br	80063c0 <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
 80063b4:	e13ffb17 	ldw	r4,-20(fp)
 80063b8:	80054800 	call	8005480 <alt_avalon_i2c_is_busy>
 80063bc:	103ff01e 	bne	r2,zero,8006380 <__alt_data_end+0xfc006380>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
 80063c0:	e0bff904 	addi	r2,fp,-28
 80063c4:	100b883a 	mov	r5,r2
 80063c8:	e13ffb17 	ldw	r4,-20(fp)
 80063cc:	80058540 	call	8005854 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 80063d0:	e13ffb17 	ldw	r4,-20(fp)
 80063d4:	80051280 	call	8005128 <alt_avalon_i2c_disable>
    }

    return status;
 80063d8:	e0bff917 	ldw	r2,-28(fp)
}
 80063dc:	e037883a 	mov	sp,fp
 80063e0:	dfc00117 	ldw	ra,4(sp)
 80063e4:	df000017 	ldw	fp,0(sp)
 80063e8:	dec00204 	addi	sp,sp,8
 80063ec:	f800283a 	ret

080063f0 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 80063f0:	defff504 	addi	sp,sp,-44
 80063f4:	dfc00a15 	stw	ra,40(sp)
 80063f8:	df000915 	stw	fp,36(sp)
 80063fc:	df000904 	addi	fp,sp,36
 8006400:	e13ffb15 	stw	r4,-20(fp)
 8006404:	e17ffc15 	stw	r5,-16(fp)
 8006408:	e1bffd15 	stw	r6,-12(fp)
 800640c:	3807883a 	mov	r3,r7
 8006410:	e0800217 	ldw	r2,8(fp)
 8006414:	e0fffe05 	stb	r3,-8(fp)
 8006418:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 800641c:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 8006420:	e0bffb17 	ldw	r2,-20(fp)
 8006424:	10800717 	ldw	r2,28(r2)
 8006428:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
 800642c:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
 8006430:	e0bffd17 	ldw	r2,-12(fp)
 8006434:	1000021e 	bne	r2,zero,8006440 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
 8006438:	0005883a 	mov	r2,zero
 800643c:	00006306 	br	80065cc <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 8006440:	e0bffb17 	ldw	r2,-20(fp)
 8006444:	10c00617 	ldw	r3,24(r2)
 8006448:	00820034 	movhi	r2,2048
 800644c:	10934504 	addi	r2,r2,19732
 8006450:	18800226 	beq	r3,r2,800645c <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 8006454:	00bfff44 	movi	r2,-3
 8006458:	00005c06 	br	80065cc <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 800645c:	e0bffe03 	ldbu	r2,-8(fp)
 8006460:	10000a1e 	bne	r2,zero,800648c <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 8006464:	e13ffb17 	ldw	r4,-20(fp)
 8006468:	80050900 	call	8005090 <alt_avalon_i2c_enable>
 800646c:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 8006470:	e0bff717 	ldw	r2,-36(fp)
 8006474:	10000226 	beq	r2,zero,8006480 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
 8006478:	e0bff717 	ldw	r2,-36(fp)
 800647c:	00005306 	br	80065cc <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 8006480:	01400704 	movi	r5,28
 8006484:	e13ffb17 	ldw	r4,-20(fp)
 8006488:	800667c0 	call	800667c <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 800648c:	e0bffe03 	ldbu	r2,-8(fp)
 8006490:	100d883a 	mov	r6,r2
 8006494:	01400044 	movi	r5,1
 8006498:	e13ffb17 	ldw	r4,-20(fp)
 800649c:	80056f80 	call	80056f8 <alt_avalon_i2c_send_address>
 80064a0:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 80064a4:	e0bff717 	ldw	r2,-36(fp)
 80064a8:	1000191e 	bne	r2,zero,8006510 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 80064ac:	00000906 	br	80064d4 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 80064b0:	000f883a 	mov	r7,zero
 80064b4:	000d883a 	mov	r6,zero
 80064b8:	000b883a 	mov	r5,zero
 80064bc:	e13ffb17 	ldw	r4,-20(fp)
 80064c0:	80056140 	call	8005614 <alt_avalon_i2c_cmd_write>
 80064c4:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
 80064c8:	e0bff917 	ldw	r2,-28(fp)
 80064cc:	10800044 	addi	r2,r2,1
 80064d0:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 80064d4:	e0bffd17 	ldw	r2,-12(fp)
 80064d8:	10bfffc4 	addi	r2,r2,-1
 80064dc:	e0fff917 	ldw	r3,-28(fp)
 80064e0:	1880022e 	bgeu	r3,r2,80064ec <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
 80064e4:	e0bff717 	ldw	r2,-36(fp)
 80064e8:	103ff126 	beq	r2,zero,80064b0 <__alt_data_end+0xfc0064b0>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 80064ec:	e0bff717 	ldw	r2,-36(fp)
 80064f0:	1000071e 	bne	r2,zero,8006510 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 80064f4:	e0bfff03 	ldbu	r2,-4(fp)
 80064f8:	100f883a 	mov	r7,r2
 80064fc:	000d883a 	mov	r6,zero
 8006500:	000b883a 	mov	r5,zero
 8006504:	e13ffb17 	ldw	r4,-20(fp)
 8006508:	80056140 	call	8005614 <alt_avalon_i2c_cmd_write>
 800650c:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 8006510:	e0bff717 	ldw	r2,-36(fp)
 8006514:	10001826 	beq	r2,zero,8006578 <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
 8006518:	0149c404 	movi	r5,10000
 800651c:	e13ffd17 	ldw	r4,-12(fp)
 8006520:	80033380 	call	8003338 <__mulsi3>
 8006524:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 8006528:	00000d06 	br	8006560 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
 800652c:	e0bff817 	ldw	r2,-32(fp)
 8006530:	108002a8 	cmpgeui	r2,r2,10
 8006534:	1000021e 	bne	r2,zero,8006540 <alt_avalon_i2c_master_receive_using_interrupts+0x150>
 8006538:	0109c404 	movi	r4,10000
 800653c:	80077b00 	call	80077b0 <alt_busy_sleep>
            if (--timeout == 0)
 8006540:	e0bff817 	ldw	r2,-32(fp)
 8006544:	10bfffc4 	addi	r2,r2,-1
 8006548:	e0bff815 	stw	r2,-32(fp)
 800654c:	e0bff817 	ldw	r2,-32(fp)
 8006550:	1000031e 	bne	r2,zero,8006560 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 8006554:	00bfff84 	movi	r2,-2
 8006558:	e0bff715 	stw	r2,-36(fp)
               break;
 800655c:	00000306 	br	800656c <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
 8006560:	e13ffb17 	ldw	r4,-20(fp)
 8006564:	80054800 	call	8005480 <alt_avalon_i2c_is_busy>
 8006568:	103ff01e 	bne	r2,zero,800652c <__alt_data_end+0xfc00652c>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 800656c:	e13ffb17 	ldw	r4,-20(fp)
 8006570:	80051280 	call	8005128 <alt_avalon_i2c_disable>
 8006574:	00001406 	br	80065c8 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
 8006578:	e0bfff03 	ldbu	r2,-4(fp)
 800657c:	10001226 	beq	r2,zero,80065c8 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 8006580:	01400704 	movi	r5,28
 8006584:	e13ffb17 	ldw	r4,-20(fp)
 8006588:	800667c0 	call	800667c <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
 800658c:	000b883a 	mov	r5,zero
 8006590:	e13ffb17 	ldw	r4,-20(fp)
 8006594:	80068140 	call	8006814 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
 8006598:	e0bffa17 	ldw	r2,-24(fp)
 800659c:	00c00084 	movi	r3,2
 80065a0:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
 80065a4:	e0bffa17 	ldw	r2,-24(fp)
 80065a8:	e0fffc17 	ldw	r3,-16(fp)
 80065ac:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
 80065b0:	e0bffa17 	ldw	r2,-24(fp)
 80065b4:	e0fffd17 	ldw	r3,-12(fp)
 80065b8:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 80065bc:	01400084 	movi	r5,2
 80065c0:	e13ffb17 	ldw	r4,-20(fp)
 80065c4:	80067200 	call	8006720 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
 80065c8:	e0bff717 	ldw	r2,-36(fp)
}
 80065cc:	e037883a 	mov	sp,fp
 80065d0:	dfc00117 	ldw	ra,4(sp)
 80065d4:	df000017 	ldw	fp,0(sp)
 80065d8:	dec00204 	addi	sp,sp,8
 80065dc:	f800283a 	ret

080065e0 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
 80065e0:	defffd04 	addi	sp,sp,-12
 80065e4:	df000215 	stw	fp,8(sp)
 80065e8:	df000204 	addi	fp,sp,8
 80065ec:	e13ffe15 	stw	r4,-8(fp)
 80065f0:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
 80065f4:	e0bffe17 	ldw	r2,-8(fp)
 80065f8:	10800317 	ldw	r2,12(r2)
 80065fc:	10800404 	addi	r2,r2,16
 8006600:	10c00037 	ldwio	r3,0(r2)
 8006604:	e0bffe17 	ldw	r2,-8(fp)
 8006608:	10800317 	ldw	r2,12(r2)
 800660c:	10800304 	addi	r2,r2,12
 8006610:	10800037 	ldwio	r2,0(r2)
 8006614:	1884703a 	and	r2,r3,r2
 8006618:	1007883a 	mov	r3,r2
 800661c:	e0bfff17 	ldw	r2,-4(fp)
 8006620:	10c00015 	stw	r3,0(r2)
}
 8006624:	0001883a 	nop
 8006628:	e037883a 	mov	sp,fp
 800662c:	df000017 	ldw	fp,0(sp)
 8006630:	dec00104 	addi	sp,sp,4
 8006634:	f800283a 	ret

08006638 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
 8006638:	defffd04 	addi	sp,sp,-12
 800663c:	df000215 	stw	fp,8(sp)
 8006640:	df000204 	addi	fp,sp,8
 8006644:	e13ffe15 	stw	r4,-8(fp)
 8006648:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
 800664c:	e0bffe17 	ldw	r2,-8(fp)
 8006650:	10800317 	ldw	r2,12(r2)
 8006654:	10800404 	addi	r2,r2,16
 8006658:	10800037 	ldwio	r2,0(r2)
 800665c:	1007883a 	mov	r3,r2
 8006660:	e0bfff17 	ldw	r2,-4(fp)
 8006664:	10c00015 	stw	r3,0(r2)
}
 8006668:	0001883a 	nop
 800666c:	e037883a 	mov	sp,fp
 8006670:	df000017 	ldw	fp,0(sp)
 8006674:	dec00104 	addi	sp,sp,4
 8006678:	f800283a 	ret

0800667c <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 800667c:	defffd04 	addi	sp,sp,-12
 8006680:	df000215 	stw	fp,8(sp)
 8006684:	df000204 	addi	fp,sp,8
 8006688:	e13ffe15 	stw	r4,-8(fp)
 800668c:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
 8006690:	e0bffe17 	ldw	r2,-8(fp)
 8006694:	10800317 	ldw	r2,12(r2)
 8006698:	10800404 	addi	r2,r2,16
 800669c:	e0ffff17 	ldw	r3,-4(fp)
 80066a0:	10c00035 	stwio	r3,0(r2)
}
 80066a4:	0001883a 	nop
 80066a8:	e037883a 	mov	sp,fp
 80066ac:	df000017 	ldw	fp,0(sp)
 80066b0:	dec00104 	addi	sp,sp,4
 80066b4:	f800283a 	ret

080066b8 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 80066b8:	defffb04 	addi	sp,sp,-20
 80066bc:	dfc00415 	stw	ra,16(sp)
 80066c0:	df000315 	stw	fp,12(sp)
 80066c4:	df000304 	addi	fp,sp,12
 80066c8:	e13ffe15 	stw	r4,-8(fp)
 80066cc:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 80066d0:	e17ffd04 	addi	r5,fp,-12
 80066d4:	e13ffe17 	ldw	r4,-8(fp)
 80066d8:	80067840 	call	8006784 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
 80066dc:	e0bfff17 	ldw	r2,-4(fp)
 80066e0:	0086303a 	nor	r3,zero,r2
 80066e4:	e0bffd17 	ldw	r2,-12(fp)
 80066e8:	1884703a 	and	r2,r3,r2
 80066ec:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 80066f0:	e0bffe17 	ldw	r2,-8(fp)
 80066f4:	10800317 	ldw	r2,12(r2)
 80066f8:	10800304 	addi	r2,r2,12
 80066fc:	e0fffd17 	ldw	r3,-12(fp)
 8006700:	18c007cc 	andi	r3,r3,31
 8006704:	10c00035 	stwio	r3,0(r2)
}
 8006708:	0001883a 	nop
 800670c:	e037883a 	mov	sp,fp
 8006710:	dfc00117 	ldw	ra,4(sp)
 8006714:	df000017 	ldw	fp,0(sp)
 8006718:	dec00204 	addi	sp,sp,8
 800671c:	f800283a 	ret

08006720 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 8006720:	defffb04 	addi	sp,sp,-20
 8006724:	dfc00415 	stw	ra,16(sp)
 8006728:	df000315 	stw	fp,12(sp)
 800672c:	df000304 	addi	fp,sp,12
 8006730:	e13ffe15 	stw	r4,-8(fp)
 8006734:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 8006738:	e17ffd04 	addi	r5,fp,-12
 800673c:	e13ffe17 	ldw	r4,-8(fp)
 8006740:	80067840 	call	8006784 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
 8006744:	e0fffd17 	ldw	r3,-12(fp)
 8006748:	e0bfff17 	ldw	r2,-4(fp)
 800674c:	1884b03a 	or	r2,r3,r2
 8006750:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 8006754:	e0bffe17 	ldw	r2,-8(fp)
 8006758:	10800317 	ldw	r2,12(r2)
 800675c:	10800304 	addi	r2,r2,12
 8006760:	e0fffd17 	ldw	r3,-12(fp)
 8006764:	18c007cc 	andi	r3,r3,31
 8006768:	10c00035 	stwio	r3,0(r2)
}
 800676c:	0001883a 	nop
 8006770:	e037883a 	mov	sp,fp
 8006774:	dfc00117 	ldw	ra,4(sp)
 8006778:	df000017 	ldw	fp,0(sp)
 800677c:	dec00204 	addi	sp,sp,8
 8006780:	f800283a 	ret

08006784 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
 8006784:	defffd04 	addi	sp,sp,-12
 8006788:	df000215 	stw	fp,8(sp)
 800678c:	df000204 	addi	fp,sp,8
 8006790:	e13ffe15 	stw	r4,-8(fp)
 8006794:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
 8006798:	e0bffe17 	ldw	r2,-8(fp)
 800679c:	10800317 	ldw	r2,12(r2)
 80067a0:	10800304 	addi	r2,r2,12
 80067a4:	10800037 	ldwio	r2,0(r2)
 80067a8:	10c007cc 	andi	r3,r2,31
 80067ac:	e0bfff17 	ldw	r2,-4(fp)
 80067b0:	10c00015 	stw	r3,0(r2)
}
 80067b4:	0001883a 	nop
 80067b8:	e037883a 	mov	sp,fp
 80067bc:	df000017 	ldw	fp,0(sp)
 80067c0:	dec00104 	addi	sp,sp,4
 80067c4:	f800283a 	ret

080067c8 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
 80067c8:	defffd04 	addi	sp,sp,-12
 80067cc:	df000215 	stw	fp,8(sp)
 80067d0:	df000204 	addi	fp,sp,8
 80067d4:	e13ffe15 	stw	r4,-8(fp)
 80067d8:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
 80067dc:	e0bffe17 	ldw	r2,-8(fp)
 80067e0:	10800317 	ldw	r2,12(r2)
 80067e4:	10800204 	addi	r2,r2,8
 80067e8:	10800037 	ldwio	r2,0(r2)
 80067ec:	10800c0c 	andi	r2,r2,48
 80067f0:	1005d13a 	srai	r2,r2,4
 80067f4:	1007883a 	mov	r3,r2
 80067f8:	e0bfff17 	ldw	r2,-4(fp)
 80067fc:	10c00015 	stw	r3,0(r2)
}
 8006800:	0001883a 	nop
 8006804:	e037883a 	mov	sp,fp
 8006808:	df000017 	ldw	fp,0(sp)
 800680c:	dec00104 	addi	sp,sp,4
 8006810:	f800283a 	ret

08006814 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
 8006814:	defffd04 	addi	sp,sp,-12
 8006818:	df000215 	stw	fp,8(sp)
 800681c:	df000204 	addi	fp,sp,8
 8006820:	e13ffe15 	stw	r4,-8(fp)
 8006824:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
 8006828:	e0bffe17 	ldw	r2,-8(fp)
 800682c:	10800317 	ldw	r2,12(r2)
 8006830:	10800204 	addi	r2,r2,8
 8006834:	e0fffe17 	ldw	r3,-8(fp)
 8006838:	18c00317 	ldw	r3,12(r3)
 800683c:	18c00204 	addi	r3,r3,8
 8006840:	18c00037 	ldwio	r3,0(r3)
 8006844:	1809883a 	mov	r4,r3
 8006848:	00fff3c4 	movi	r3,-49
 800684c:	20c8703a 	and	r4,r4,r3
 8006850:	e0ffff17 	ldw	r3,-4(fp)
 8006854:	1806913a 	slli	r3,r3,4
 8006858:	18c00c0c 	andi	r3,r3,48
 800685c:	20c6b03a 	or	r3,r4,r3
 8006860:	10c00035 	stwio	r3,0(r2)
}
 8006864:	0001883a 	nop
 8006868:	e037883a 	mov	sp,fp
 800686c:	df000017 	ldw	fp,0(sp)
 8006870:	dec00104 	addi	sp,sp,4
 8006874:	f800283a 	ret

08006878 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
 8006878:	defffd04 	addi	sp,sp,-12
 800687c:	df000215 	stw	fp,8(sp)
 8006880:	df000204 	addi	fp,sp,8
 8006884:	e13ffe15 	stw	r4,-8(fp)
 8006888:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
 800688c:	e0bffe17 	ldw	r2,-8(fp)
 8006890:	10800317 	ldw	r2,12(r2)
 8006894:	10800204 	addi	r2,r2,8
 8006898:	10800037 	ldwio	r2,0(r2)
 800689c:	1080030c 	andi	r2,r2,12
 80068a0:	1005d0ba 	srai	r2,r2,2
 80068a4:	1007883a 	mov	r3,r2
 80068a8:	e0bfff17 	ldw	r2,-4(fp)
 80068ac:	10c00015 	stw	r3,0(r2)
}
 80068b0:	0001883a 	nop
 80068b4:	e037883a 	mov	sp,fp
 80068b8:	df000017 	ldw	fp,0(sp)
 80068bc:	dec00104 	addi	sp,sp,4
 80068c0:	f800283a 	ret

080068c4 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
 80068c4:	defffd04 	addi	sp,sp,-12
 80068c8:	df000215 	stw	fp,8(sp)
 80068cc:	df000204 	addi	fp,sp,8
 80068d0:	e13ffe15 	stw	r4,-8(fp)
 80068d4:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
 80068d8:	e0bffe17 	ldw	r2,-8(fp)
 80068dc:	10800317 	ldw	r2,12(r2)
 80068e0:	10c00204 	addi	r3,r2,8
 80068e4:	e0bffe17 	ldw	r2,-8(fp)
 80068e8:	10800317 	ldw	r2,12(r2)
 80068ec:	10800204 	addi	r2,r2,8
 80068f0:	10800037 	ldwio	r2,0(r2)
 80068f4:	1009883a 	mov	r4,r2
 80068f8:	00bffcc4 	movi	r2,-13
 80068fc:	2088703a 	and	r4,r4,r2
 8006900:	e0bfff17 	ldw	r2,-4(fp)
 8006904:	1085883a 	add	r2,r2,r2
 8006908:	1085883a 	add	r2,r2,r2
 800690c:	1080030c 	andi	r2,r2,12
 8006910:	2084b03a 	or	r2,r4,r2
 8006914:	18800035 	stwio	r2,0(r3)
}
 8006918:	0001883a 	nop
 800691c:	e037883a 	mov	sp,fp
 8006920:	df000017 	ldw	fp,0(sp)
 8006924:	dec00104 	addi	sp,sp,4
 8006928:	f800283a 	ret

0800692c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800692c:	defffa04 	addi	sp,sp,-24
 8006930:	dfc00515 	stw	ra,20(sp)
 8006934:	df000415 	stw	fp,16(sp)
 8006938:	df000404 	addi	fp,sp,16
 800693c:	e13ffd15 	stw	r4,-12(fp)
 8006940:	e17ffe15 	stw	r5,-8(fp)
 8006944:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8006948:	e0bffd17 	ldw	r2,-12(fp)
 800694c:	10800017 	ldw	r2,0(r2)
 8006950:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8006954:	e0bffc17 	ldw	r2,-16(fp)
 8006958:	10c00a04 	addi	r3,r2,40
 800695c:	e0bffd17 	ldw	r2,-12(fp)
 8006960:	10800217 	ldw	r2,8(r2)
 8006964:	100f883a 	mov	r7,r2
 8006968:	e1bfff17 	ldw	r6,-4(fp)
 800696c:	e17ffe17 	ldw	r5,-8(fp)
 8006970:	1809883a 	mov	r4,r3
 8006974:	8006f540 	call	8006f54 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8006978:	e037883a 	mov	sp,fp
 800697c:	dfc00117 	ldw	ra,4(sp)
 8006980:	df000017 	ldw	fp,0(sp)
 8006984:	dec00204 	addi	sp,sp,8
 8006988:	f800283a 	ret

0800698c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800698c:	defffa04 	addi	sp,sp,-24
 8006990:	dfc00515 	stw	ra,20(sp)
 8006994:	df000415 	stw	fp,16(sp)
 8006998:	df000404 	addi	fp,sp,16
 800699c:	e13ffd15 	stw	r4,-12(fp)
 80069a0:	e17ffe15 	stw	r5,-8(fp)
 80069a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80069a8:	e0bffd17 	ldw	r2,-12(fp)
 80069ac:	10800017 	ldw	r2,0(r2)
 80069b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 80069b4:	e0bffc17 	ldw	r2,-16(fp)
 80069b8:	10c00a04 	addi	r3,r2,40
 80069bc:	e0bffd17 	ldw	r2,-12(fp)
 80069c0:	10800217 	ldw	r2,8(r2)
 80069c4:	100f883a 	mov	r7,r2
 80069c8:	e1bfff17 	ldw	r6,-4(fp)
 80069cc:	e17ffe17 	ldw	r5,-8(fp)
 80069d0:	1809883a 	mov	r4,r3
 80069d4:	80071700 	call	8007170 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 80069d8:	e037883a 	mov	sp,fp
 80069dc:	dfc00117 	ldw	ra,4(sp)
 80069e0:	df000017 	ldw	fp,0(sp)
 80069e4:	dec00204 	addi	sp,sp,8
 80069e8:	f800283a 	ret

080069ec <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 80069ec:	defffc04 	addi	sp,sp,-16
 80069f0:	dfc00315 	stw	ra,12(sp)
 80069f4:	df000215 	stw	fp,8(sp)
 80069f8:	df000204 	addi	fp,sp,8
 80069fc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8006a00:	e0bfff17 	ldw	r2,-4(fp)
 8006a04:	10800017 	ldw	r2,0(r2)
 8006a08:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8006a0c:	e0bffe17 	ldw	r2,-8(fp)
 8006a10:	10c00a04 	addi	r3,r2,40
 8006a14:	e0bfff17 	ldw	r2,-4(fp)
 8006a18:	10800217 	ldw	r2,8(r2)
 8006a1c:	100b883a 	mov	r5,r2
 8006a20:	1809883a 	mov	r4,r3
 8006a24:	8006dfc0 	call	8006dfc <altera_avalon_jtag_uart_close>
}
 8006a28:	e037883a 	mov	sp,fp
 8006a2c:	dfc00117 	ldw	ra,4(sp)
 8006a30:	df000017 	ldw	fp,0(sp)
 8006a34:	dec00204 	addi	sp,sp,8
 8006a38:	f800283a 	ret

08006a3c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8006a3c:	defffa04 	addi	sp,sp,-24
 8006a40:	dfc00515 	stw	ra,20(sp)
 8006a44:	df000415 	stw	fp,16(sp)
 8006a48:	df000404 	addi	fp,sp,16
 8006a4c:	e13ffd15 	stw	r4,-12(fp)
 8006a50:	e17ffe15 	stw	r5,-8(fp)
 8006a54:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8006a58:	e0bffd17 	ldw	r2,-12(fp)
 8006a5c:	10800017 	ldw	r2,0(r2)
 8006a60:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8006a64:	e0bffc17 	ldw	r2,-16(fp)
 8006a68:	10800a04 	addi	r2,r2,40
 8006a6c:	e1bfff17 	ldw	r6,-4(fp)
 8006a70:	e17ffe17 	ldw	r5,-8(fp)
 8006a74:	1009883a 	mov	r4,r2
 8006a78:	8006e640 	call	8006e64 <altera_avalon_jtag_uart_ioctl>
}
 8006a7c:	e037883a 	mov	sp,fp
 8006a80:	dfc00117 	ldw	ra,4(sp)
 8006a84:	df000017 	ldw	fp,0(sp)
 8006a88:	dec00204 	addi	sp,sp,8
 8006a8c:	f800283a 	ret

08006a90 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8006a90:	defffa04 	addi	sp,sp,-24
 8006a94:	dfc00515 	stw	ra,20(sp)
 8006a98:	df000415 	stw	fp,16(sp)
 8006a9c:	df000404 	addi	fp,sp,16
 8006aa0:	e13ffd15 	stw	r4,-12(fp)
 8006aa4:	e17ffe15 	stw	r5,-8(fp)
 8006aa8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8006aac:	e0bffd17 	ldw	r2,-12(fp)
 8006ab0:	00c00044 	movi	r3,1
 8006ab4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8006ab8:	e0bffd17 	ldw	r2,-12(fp)
 8006abc:	10800017 	ldw	r2,0(r2)
 8006ac0:	10800104 	addi	r2,r2,4
 8006ac4:	1007883a 	mov	r3,r2
 8006ac8:	e0bffd17 	ldw	r2,-12(fp)
 8006acc:	10800817 	ldw	r2,32(r2)
 8006ad0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8006ad4:	e0bffe17 	ldw	r2,-8(fp)
 8006ad8:	e0ffff17 	ldw	r3,-4(fp)
 8006adc:	d8000015 	stw	zero,0(sp)
 8006ae0:	e1fffd17 	ldw	r7,-12(fp)
 8006ae4:	01820034 	movhi	r6,2048
 8006ae8:	319ad404 	addi	r6,r6,27472
 8006aec:	180b883a 	mov	r5,r3
 8006af0:	1009883a 	mov	r4,r2
 8006af4:	8007cb80 	call	8007cb8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8006af8:	e0bffd17 	ldw	r2,-12(fp)
 8006afc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8006b00:	e0bffd17 	ldw	r2,-12(fp)
 8006b04:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8006b08:	d0e50417 	ldw	r3,-27632(gp)
 8006b0c:	e1fffd17 	ldw	r7,-12(fp)
 8006b10:	01820034 	movhi	r6,2048
 8006b14:	319b5704 	addi	r6,r6,27996
 8006b18:	180b883a 	mov	r5,r3
 8006b1c:	1009883a 	mov	r4,r2
 8006b20:	80076840 	call	8007684 <alt_alarm_start>
 8006b24:	1000040e 	bge	r2,zero,8006b38 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8006b28:	e0fffd17 	ldw	r3,-12(fp)
 8006b2c:	00a00034 	movhi	r2,32768
 8006b30:	10bfffc4 	addi	r2,r2,-1
 8006b34:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8006b38:	0001883a 	nop
 8006b3c:	e037883a 	mov	sp,fp
 8006b40:	dfc00117 	ldw	ra,4(sp)
 8006b44:	df000017 	ldw	fp,0(sp)
 8006b48:	dec00204 	addi	sp,sp,8
 8006b4c:	f800283a 	ret

08006b50 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8006b50:	defff804 	addi	sp,sp,-32
 8006b54:	df000715 	stw	fp,28(sp)
 8006b58:	df000704 	addi	fp,sp,28
 8006b5c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8006b60:	e0bfff17 	ldw	r2,-4(fp)
 8006b64:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 8006b68:	e0bffb17 	ldw	r2,-20(fp)
 8006b6c:	10800017 	ldw	r2,0(r2)
 8006b70:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8006b74:	e0bffc17 	ldw	r2,-16(fp)
 8006b78:	10800104 	addi	r2,r2,4
 8006b7c:	10800037 	ldwio	r2,0(r2)
 8006b80:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8006b84:	e0bffd17 	ldw	r2,-12(fp)
 8006b88:	1080c00c 	andi	r2,r2,768
 8006b8c:	10006d26 	beq	r2,zero,8006d44 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8006b90:	e0bffd17 	ldw	r2,-12(fp)
 8006b94:	1080400c 	andi	r2,r2,256
 8006b98:	10003526 	beq	r2,zero,8006c70 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8006b9c:	00800074 	movhi	r2,1
 8006ba0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8006ba4:	e0bffb17 	ldw	r2,-20(fp)
 8006ba8:	10800a17 	ldw	r2,40(r2)
 8006bac:	10800044 	addi	r2,r2,1
 8006bb0:	1081ffcc 	andi	r2,r2,2047
 8006bb4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 8006bb8:	e0bffb17 	ldw	r2,-20(fp)
 8006bbc:	10c00b17 	ldw	r3,44(r2)
 8006bc0:	e0bffe17 	ldw	r2,-8(fp)
 8006bc4:	18801526 	beq	r3,r2,8006c1c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8006bc8:	e0bffc17 	ldw	r2,-16(fp)
 8006bcc:	10800037 	ldwio	r2,0(r2)
 8006bd0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8006bd4:	e0bff917 	ldw	r2,-28(fp)
 8006bd8:	10a0000c 	andi	r2,r2,32768
 8006bdc:	10001126 	beq	r2,zero,8006c24 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8006be0:	e0bffb17 	ldw	r2,-20(fp)
 8006be4:	10800a17 	ldw	r2,40(r2)
 8006be8:	e0fff917 	ldw	r3,-28(fp)
 8006bec:	1809883a 	mov	r4,r3
 8006bf0:	e0fffb17 	ldw	r3,-20(fp)
 8006bf4:	1885883a 	add	r2,r3,r2
 8006bf8:	10800e04 	addi	r2,r2,56
 8006bfc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8006c00:	e0bffb17 	ldw	r2,-20(fp)
 8006c04:	10800a17 	ldw	r2,40(r2)
 8006c08:	10800044 	addi	r2,r2,1
 8006c0c:	10c1ffcc 	andi	r3,r2,2047
 8006c10:	e0bffb17 	ldw	r2,-20(fp)
 8006c14:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8006c18:	003fe206 	br	8006ba4 <__alt_data_end+0xfc006ba4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 8006c1c:	0001883a 	nop
 8006c20:	00000106 	br	8006c28 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 8006c24:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8006c28:	e0bff917 	ldw	r2,-28(fp)
 8006c2c:	10bfffec 	andhi	r2,r2,65535
 8006c30:	10000f26 	beq	r2,zero,8006c70 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8006c34:	e0bffb17 	ldw	r2,-20(fp)
 8006c38:	10c00817 	ldw	r3,32(r2)
 8006c3c:	00bfff84 	movi	r2,-2
 8006c40:	1886703a 	and	r3,r3,r2
 8006c44:	e0bffb17 	ldw	r2,-20(fp)
 8006c48:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8006c4c:	e0bffc17 	ldw	r2,-16(fp)
 8006c50:	10800104 	addi	r2,r2,4
 8006c54:	1007883a 	mov	r3,r2
 8006c58:	e0bffb17 	ldw	r2,-20(fp)
 8006c5c:	10800817 	ldw	r2,32(r2)
 8006c60:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8006c64:	e0bffc17 	ldw	r2,-16(fp)
 8006c68:	10800104 	addi	r2,r2,4
 8006c6c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8006c70:	e0bffd17 	ldw	r2,-12(fp)
 8006c74:	1080800c 	andi	r2,r2,512
 8006c78:	103fbe26 	beq	r2,zero,8006b74 <__alt_data_end+0xfc006b74>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8006c7c:	e0bffd17 	ldw	r2,-12(fp)
 8006c80:	1004d43a 	srli	r2,r2,16
 8006c84:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8006c88:	00001406 	br	8006cdc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8006c8c:	e0bffc17 	ldw	r2,-16(fp)
 8006c90:	e0fffb17 	ldw	r3,-20(fp)
 8006c94:	18c00d17 	ldw	r3,52(r3)
 8006c98:	e13ffb17 	ldw	r4,-20(fp)
 8006c9c:	20c7883a 	add	r3,r4,r3
 8006ca0:	18c20e04 	addi	r3,r3,2104
 8006ca4:	18c00003 	ldbu	r3,0(r3)
 8006ca8:	18c03fcc 	andi	r3,r3,255
 8006cac:	18c0201c 	xori	r3,r3,128
 8006cb0:	18ffe004 	addi	r3,r3,-128
 8006cb4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8006cb8:	e0bffb17 	ldw	r2,-20(fp)
 8006cbc:	10800d17 	ldw	r2,52(r2)
 8006cc0:	10800044 	addi	r2,r2,1
 8006cc4:	10c1ffcc 	andi	r3,r2,2047
 8006cc8:	e0bffb17 	ldw	r2,-20(fp)
 8006ccc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8006cd0:	e0bffa17 	ldw	r2,-24(fp)
 8006cd4:	10bfffc4 	addi	r2,r2,-1
 8006cd8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8006cdc:	e0bffa17 	ldw	r2,-24(fp)
 8006ce0:	10000526 	beq	r2,zero,8006cf8 <altera_avalon_jtag_uart_irq+0x1a8>
 8006ce4:	e0bffb17 	ldw	r2,-20(fp)
 8006ce8:	10c00d17 	ldw	r3,52(r2)
 8006cec:	e0bffb17 	ldw	r2,-20(fp)
 8006cf0:	10800c17 	ldw	r2,48(r2)
 8006cf4:	18bfe51e 	bne	r3,r2,8006c8c <__alt_data_end+0xfc006c8c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8006cf8:	e0bffa17 	ldw	r2,-24(fp)
 8006cfc:	103f9d26 	beq	r2,zero,8006b74 <__alt_data_end+0xfc006b74>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8006d00:	e0bffb17 	ldw	r2,-20(fp)
 8006d04:	10c00817 	ldw	r3,32(r2)
 8006d08:	00bfff44 	movi	r2,-3
 8006d0c:	1886703a 	and	r3,r3,r2
 8006d10:	e0bffb17 	ldw	r2,-20(fp)
 8006d14:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8006d18:	e0bffb17 	ldw	r2,-20(fp)
 8006d1c:	10800017 	ldw	r2,0(r2)
 8006d20:	10800104 	addi	r2,r2,4
 8006d24:	1007883a 	mov	r3,r2
 8006d28:	e0bffb17 	ldw	r2,-20(fp)
 8006d2c:	10800817 	ldw	r2,32(r2)
 8006d30:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8006d34:	e0bffc17 	ldw	r2,-16(fp)
 8006d38:	10800104 	addi	r2,r2,4
 8006d3c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8006d40:	003f8c06 	br	8006b74 <__alt_data_end+0xfc006b74>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 8006d44:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 8006d48:	0001883a 	nop
 8006d4c:	e037883a 	mov	sp,fp
 8006d50:	df000017 	ldw	fp,0(sp)
 8006d54:	dec00104 	addi	sp,sp,4
 8006d58:	f800283a 	ret

08006d5c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8006d5c:	defff804 	addi	sp,sp,-32
 8006d60:	df000715 	stw	fp,28(sp)
 8006d64:	df000704 	addi	fp,sp,28
 8006d68:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8006d6c:	e0bffb17 	ldw	r2,-20(fp)
 8006d70:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8006d74:	e0bff917 	ldw	r2,-28(fp)
 8006d78:	10800017 	ldw	r2,0(r2)
 8006d7c:	10800104 	addi	r2,r2,4
 8006d80:	10800037 	ldwio	r2,0(r2)
 8006d84:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8006d88:	e0bffa17 	ldw	r2,-24(fp)
 8006d8c:	1081000c 	andi	r2,r2,1024
 8006d90:	10000b26 	beq	r2,zero,8006dc0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8006d94:	e0bff917 	ldw	r2,-28(fp)
 8006d98:	10800017 	ldw	r2,0(r2)
 8006d9c:	10800104 	addi	r2,r2,4
 8006da0:	1007883a 	mov	r3,r2
 8006da4:	e0bff917 	ldw	r2,-28(fp)
 8006da8:	10800817 	ldw	r2,32(r2)
 8006dac:	10810014 	ori	r2,r2,1024
 8006db0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8006db4:	e0bff917 	ldw	r2,-28(fp)
 8006db8:	10000915 	stw	zero,36(r2)
 8006dbc:	00000a06 	br	8006de8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8006dc0:	e0bff917 	ldw	r2,-28(fp)
 8006dc4:	10c00917 	ldw	r3,36(r2)
 8006dc8:	00a00034 	movhi	r2,32768
 8006dcc:	10bfff04 	addi	r2,r2,-4
 8006dd0:	10c00536 	bltu	r2,r3,8006de8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8006dd4:	e0bff917 	ldw	r2,-28(fp)
 8006dd8:	10800917 	ldw	r2,36(r2)
 8006ddc:	10c00044 	addi	r3,r2,1
 8006de0:	e0bff917 	ldw	r2,-28(fp)
 8006de4:	10c00915 	stw	r3,36(r2)
 8006de8:	d0a50417 	ldw	r2,-27632(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8006dec:	e037883a 	mov	sp,fp
 8006df0:	df000017 	ldw	fp,0(sp)
 8006df4:	dec00104 	addi	sp,sp,4
 8006df8:	f800283a 	ret

08006dfc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8006dfc:	defffd04 	addi	sp,sp,-12
 8006e00:	df000215 	stw	fp,8(sp)
 8006e04:	df000204 	addi	fp,sp,8
 8006e08:	e13ffe15 	stw	r4,-8(fp)
 8006e0c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8006e10:	00000506 	br	8006e28 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8006e14:	e0bfff17 	ldw	r2,-4(fp)
 8006e18:	1090000c 	andi	r2,r2,16384
 8006e1c:	10000226 	beq	r2,zero,8006e28 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8006e20:	00bffd44 	movi	r2,-11
 8006e24:	00000b06 	br	8006e54 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8006e28:	e0bffe17 	ldw	r2,-8(fp)
 8006e2c:	10c00d17 	ldw	r3,52(r2)
 8006e30:	e0bffe17 	ldw	r2,-8(fp)
 8006e34:	10800c17 	ldw	r2,48(r2)
 8006e38:	18800526 	beq	r3,r2,8006e50 <altera_avalon_jtag_uart_close+0x54>
 8006e3c:	e0bffe17 	ldw	r2,-8(fp)
 8006e40:	10c00917 	ldw	r3,36(r2)
 8006e44:	e0bffe17 	ldw	r2,-8(fp)
 8006e48:	10800117 	ldw	r2,4(r2)
 8006e4c:	18bff136 	bltu	r3,r2,8006e14 <__alt_data_end+0xfc006e14>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8006e50:	0005883a 	mov	r2,zero
}
 8006e54:	e037883a 	mov	sp,fp
 8006e58:	df000017 	ldw	fp,0(sp)
 8006e5c:	dec00104 	addi	sp,sp,4
 8006e60:	f800283a 	ret

08006e64 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8006e64:	defffa04 	addi	sp,sp,-24
 8006e68:	df000515 	stw	fp,20(sp)
 8006e6c:	df000504 	addi	fp,sp,20
 8006e70:	e13ffd15 	stw	r4,-12(fp)
 8006e74:	e17ffe15 	stw	r5,-8(fp)
 8006e78:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 8006e7c:	00bff9c4 	movi	r2,-25
 8006e80:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 8006e84:	e0bffe17 	ldw	r2,-8(fp)
 8006e88:	10da8060 	cmpeqi	r3,r2,27137
 8006e8c:	1800031e 	bne	r3,zero,8006e9c <altera_avalon_jtag_uart_ioctl+0x38>
 8006e90:	109a80a0 	cmpeqi	r2,r2,27138
 8006e94:	1000181e 	bne	r2,zero,8006ef8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 8006e98:	00002906 	br	8006f40 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8006e9c:	e0bffd17 	ldw	r2,-12(fp)
 8006ea0:	10c00117 	ldw	r3,4(r2)
 8006ea4:	00a00034 	movhi	r2,32768
 8006ea8:	10bfffc4 	addi	r2,r2,-1
 8006eac:	18802126 	beq	r3,r2,8006f34 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 8006eb0:	e0bfff17 	ldw	r2,-4(fp)
 8006eb4:	10800017 	ldw	r2,0(r2)
 8006eb8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8006ebc:	e0bffc17 	ldw	r2,-16(fp)
 8006ec0:	10800090 	cmplti	r2,r2,2
 8006ec4:	1000061e 	bne	r2,zero,8006ee0 <altera_avalon_jtag_uart_ioctl+0x7c>
 8006ec8:	e0fffc17 	ldw	r3,-16(fp)
 8006ecc:	00a00034 	movhi	r2,32768
 8006ed0:	10bfffc4 	addi	r2,r2,-1
 8006ed4:	18800226 	beq	r3,r2,8006ee0 <altera_avalon_jtag_uart_ioctl+0x7c>
 8006ed8:	e0bffc17 	ldw	r2,-16(fp)
 8006edc:	00000206 	br	8006ee8 <altera_avalon_jtag_uart_ioctl+0x84>
 8006ee0:	00a00034 	movhi	r2,32768
 8006ee4:	10bfff84 	addi	r2,r2,-2
 8006ee8:	e0fffd17 	ldw	r3,-12(fp)
 8006eec:	18800115 	stw	r2,4(r3)
      rc = 0;
 8006ef0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8006ef4:	00000f06 	br	8006f34 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8006ef8:	e0bffd17 	ldw	r2,-12(fp)
 8006efc:	10c00117 	ldw	r3,4(r2)
 8006f00:	00a00034 	movhi	r2,32768
 8006f04:	10bfffc4 	addi	r2,r2,-1
 8006f08:	18800c26 	beq	r3,r2,8006f3c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8006f0c:	e0bffd17 	ldw	r2,-12(fp)
 8006f10:	10c00917 	ldw	r3,36(r2)
 8006f14:	e0bffd17 	ldw	r2,-12(fp)
 8006f18:	10800117 	ldw	r2,4(r2)
 8006f1c:	1885803a 	cmpltu	r2,r3,r2
 8006f20:	10c03fcc 	andi	r3,r2,255
 8006f24:	e0bfff17 	ldw	r2,-4(fp)
 8006f28:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8006f2c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8006f30:	00000206 	br	8006f3c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 8006f34:	0001883a 	nop
 8006f38:	00000106 	br	8006f40 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 8006f3c:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8006f40:	e0bffb17 	ldw	r2,-20(fp)
}
 8006f44:	e037883a 	mov	sp,fp
 8006f48:	df000017 	ldw	fp,0(sp)
 8006f4c:	dec00104 	addi	sp,sp,4
 8006f50:	f800283a 	ret

08006f54 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8006f54:	defff304 	addi	sp,sp,-52
 8006f58:	dfc00c15 	stw	ra,48(sp)
 8006f5c:	df000b15 	stw	fp,44(sp)
 8006f60:	df000b04 	addi	fp,sp,44
 8006f64:	e13ffc15 	stw	r4,-16(fp)
 8006f68:	e17ffd15 	stw	r5,-12(fp)
 8006f6c:	e1bffe15 	stw	r6,-8(fp)
 8006f70:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 8006f74:	e0bffd17 	ldw	r2,-12(fp)
 8006f78:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8006f7c:	00004706 	br	800709c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8006f80:	e0bffc17 	ldw	r2,-16(fp)
 8006f84:	10800a17 	ldw	r2,40(r2)
 8006f88:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8006f8c:	e0bffc17 	ldw	r2,-16(fp)
 8006f90:	10800b17 	ldw	r2,44(r2)
 8006f94:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 8006f98:	e0fff717 	ldw	r3,-36(fp)
 8006f9c:	e0bff817 	ldw	r2,-32(fp)
 8006fa0:	18800536 	bltu	r3,r2,8006fb8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8006fa4:	e0fff717 	ldw	r3,-36(fp)
 8006fa8:	e0bff817 	ldw	r2,-32(fp)
 8006fac:	1885c83a 	sub	r2,r3,r2
 8006fb0:	e0bff615 	stw	r2,-40(fp)
 8006fb4:	00000406 	br	8006fc8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8006fb8:	00c20004 	movi	r3,2048
 8006fbc:	e0bff817 	ldw	r2,-32(fp)
 8006fc0:	1885c83a 	sub	r2,r3,r2
 8006fc4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8006fc8:	e0bff617 	ldw	r2,-40(fp)
 8006fcc:	10001e26 	beq	r2,zero,8007048 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 8006fd0:	e0fffe17 	ldw	r3,-8(fp)
 8006fd4:	e0bff617 	ldw	r2,-40(fp)
 8006fd8:	1880022e 	bgeu	r3,r2,8006fe4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 8006fdc:	e0bffe17 	ldw	r2,-8(fp)
 8006fe0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8006fe4:	e0bffc17 	ldw	r2,-16(fp)
 8006fe8:	10c00e04 	addi	r3,r2,56
 8006fec:	e0bff817 	ldw	r2,-32(fp)
 8006ff0:	1885883a 	add	r2,r3,r2
 8006ff4:	e1bff617 	ldw	r6,-40(fp)
 8006ff8:	100b883a 	mov	r5,r2
 8006ffc:	e13ff517 	ldw	r4,-44(fp)
 8007000:	80089180 	call	8008918 <memcpy>
      ptr   += n;
 8007004:	e0fff517 	ldw	r3,-44(fp)
 8007008:	e0bff617 	ldw	r2,-40(fp)
 800700c:	1885883a 	add	r2,r3,r2
 8007010:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 8007014:	e0fffe17 	ldw	r3,-8(fp)
 8007018:	e0bff617 	ldw	r2,-40(fp)
 800701c:	1885c83a 	sub	r2,r3,r2
 8007020:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8007024:	e0fff817 	ldw	r3,-32(fp)
 8007028:	e0bff617 	ldw	r2,-40(fp)
 800702c:	1885883a 	add	r2,r3,r2
 8007030:	10c1ffcc 	andi	r3,r2,2047
 8007034:	e0bffc17 	ldw	r2,-16(fp)
 8007038:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800703c:	e0bffe17 	ldw	r2,-8(fp)
 8007040:	00bfcf16 	blt	zero,r2,8006f80 <__alt_data_end+0xfc006f80>
 8007044:	00000106 	br	800704c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 8007048:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 800704c:	e0fff517 	ldw	r3,-44(fp)
 8007050:	e0bffd17 	ldw	r2,-12(fp)
 8007054:	1880141e 	bne	r3,r2,80070a8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8007058:	e0bfff17 	ldw	r2,-4(fp)
 800705c:	1090000c 	andi	r2,r2,16384
 8007060:	1000131e 	bne	r2,zero,80070b0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8007064:	0001883a 	nop
 8007068:	e0bffc17 	ldw	r2,-16(fp)
 800706c:	10c00a17 	ldw	r3,40(r2)
 8007070:	e0bff717 	ldw	r2,-36(fp)
 8007074:	1880051e 	bne	r3,r2,800708c <altera_avalon_jtag_uart_read+0x138>
 8007078:	e0bffc17 	ldw	r2,-16(fp)
 800707c:	10c00917 	ldw	r3,36(r2)
 8007080:	e0bffc17 	ldw	r2,-16(fp)
 8007084:	10800117 	ldw	r2,4(r2)
 8007088:	18bff736 	bltu	r3,r2,8007068 <__alt_data_end+0xfc007068>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 800708c:	e0bffc17 	ldw	r2,-16(fp)
 8007090:	10c00a17 	ldw	r3,40(r2)
 8007094:	e0bff717 	ldw	r2,-36(fp)
 8007098:	18800726 	beq	r3,r2,80070b8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800709c:	e0bffe17 	ldw	r2,-8(fp)
 80070a0:	00bfb716 	blt	zero,r2,8006f80 <__alt_data_end+0xfc006f80>
 80070a4:	00000506 	br	80070bc <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 80070a8:	0001883a 	nop
 80070ac:	00000306 	br	80070bc <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 80070b0:	0001883a 	nop
 80070b4:	00000106 	br	80070bc <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 80070b8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 80070bc:	e0fff517 	ldw	r3,-44(fp)
 80070c0:	e0bffd17 	ldw	r2,-12(fp)
 80070c4:	18801826 	beq	r3,r2,8007128 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80070c8:	0005303a 	rdctl	r2,status
 80070cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80070d0:	e0fffb17 	ldw	r3,-20(fp)
 80070d4:	00bfff84 	movi	r2,-2
 80070d8:	1884703a 	and	r2,r3,r2
 80070dc:	1001703a 	wrctl	status,r2
  
  return context;
 80070e0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 80070e4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80070e8:	e0bffc17 	ldw	r2,-16(fp)
 80070ec:	10800817 	ldw	r2,32(r2)
 80070f0:	10c00054 	ori	r3,r2,1
 80070f4:	e0bffc17 	ldw	r2,-16(fp)
 80070f8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80070fc:	e0bffc17 	ldw	r2,-16(fp)
 8007100:	10800017 	ldw	r2,0(r2)
 8007104:	10800104 	addi	r2,r2,4
 8007108:	1007883a 	mov	r3,r2
 800710c:	e0bffc17 	ldw	r2,-16(fp)
 8007110:	10800817 	ldw	r2,32(r2)
 8007114:	18800035 	stwio	r2,0(r3)
 8007118:	e0bffa17 	ldw	r2,-24(fp)
 800711c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8007120:	e0bff917 	ldw	r2,-28(fp)
 8007124:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8007128:	e0fff517 	ldw	r3,-44(fp)
 800712c:	e0bffd17 	ldw	r2,-12(fp)
 8007130:	18800426 	beq	r3,r2,8007144 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 8007134:	e0fff517 	ldw	r3,-44(fp)
 8007138:	e0bffd17 	ldw	r2,-12(fp)
 800713c:	1885c83a 	sub	r2,r3,r2
 8007140:	00000606 	br	800715c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 8007144:	e0bfff17 	ldw	r2,-4(fp)
 8007148:	1090000c 	andi	r2,r2,16384
 800714c:	10000226 	beq	r2,zero,8007158 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 8007150:	00bffd44 	movi	r2,-11
 8007154:	00000106 	br	800715c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 8007158:	00bffec4 	movi	r2,-5
}
 800715c:	e037883a 	mov	sp,fp
 8007160:	dfc00117 	ldw	ra,4(sp)
 8007164:	df000017 	ldw	fp,0(sp)
 8007168:	dec00204 	addi	sp,sp,8
 800716c:	f800283a 	ret

08007170 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8007170:	defff304 	addi	sp,sp,-52
 8007174:	dfc00c15 	stw	ra,48(sp)
 8007178:	df000b15 	stw	fp,44(sp)
 800717c:	df000b04 	addi	fp,sp,44
 8007180:	e13ffc15 	stw	r4,-16(fp)
 8007184:	e17ffd15 	stw	r5,-12(fp)
 8007188:	e1bffe15 	stw	r6,-8(fp)
 800718c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8007190:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8007194:	e0bffd17 	ldw	r2,-12(fp)
 8007198:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800719c:	00003706 	br	800727c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 80071a0:	e0bffc17 	ldw	r2,-16(fp)
 80071a4:	10800c17 	ldw	r2,48(r2)
 80071a8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 80071ac:	e0bffc17 	ldw	r2,-16(fp)
 80071b0:	10800d17 	ldw	r2,52(r2)
 80071b4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 80071b8:	e0fff917 	ldw	r3,-28(fp)
 80071bc:	e0bff517 	ldw	r2,-44(fp)
 80071c0:	1880062e 	bgeu	r3,r2,80071dc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 80071c4:	e0fff517 	ldw	r3,-44(fp)
 80071c8:	e0bff917 	ldw	r2,-28(fp)
 80071cc:	1885c83a 	sub	r2,r3,r2
 80071d0:	10bfffc4 	addi	r2,r2,-1
 80071d4:	e0bff615 	stw	r2,-40(fp)
 80071d8:	00000b06 	br	8007208 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 80071dc:	e0bff517 	ldw	r2,-44(fp)
 80071e0:	10000526 	beq	r2,zero,80071f8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 80071e4:	00c20004 	movi	r3,2048
 80071e8:	e0bff917 	ldw	r2,-28(fp)
 80071ec:	1885c83a 	sub	r2,r3,r2
 80071f0:	e0bff615 	stw	r2,-40(fp)
 80071f4:	00000406 	br	8007208 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 80071f8:	00c1ffc4 	movi	r3,2047
 80071fc:	e0bff917 	ldw	r2,-28(fp)
 8007200:	1885c83a 	sub	r2,r3,r2
 8007204:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8007208:	e0bff617 	ldw	r2,-40(fp)
 800720c:	10001e26 	beq	r2,zero,8007288 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 8007210:	e0fffe17 	ldw	r3,-8(fp)
 8007214:	e0bff617 	ldw	r2,-40(fp)
 8007218:	1880022e 	bgeu	r3,r2,8007224 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 800721c:	e0bffe17 	ldw	r2,-8(fp)
 8007220:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8007224:	e0bffc17 	ldw	r2,-16(fp)
 8007228:	10c20e04 	addi	r3,r2,2104
 800722c:	e0bff917 	ldw	r2,-28(fp)
 8007230:	1885883a 	add	r2,r3,r2
 8007234:	e1bff617 	ldw	r6,-40(fp)
 8007238:	e17ffd17 	ldw	r5,-12(fp)
 800723c:	1009883a 	mov	r4,r2
 8007240:	80089180 	call	8008918 <memcpy>
      ptr   += n;
 8007244:	e0fffd17 	ldw	r3,-12(fp)
 8007248:	e0bff617 	ldw	r2,-40(fp)
 800724c:	1885883a 	add	r2,r3,r2
 8007250:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 8007254:	e0fffe17 	ldw	r3,-8(fp)
 8007258:	e0bff617 	ldw	r2,-40(fp)
 800725c:	1885c83a 	sub	r2,r3,r2
 8007260:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8007264:	e0fff917 	ldw	r3,-28(fp)
 8007268:	e0bff617 	ldw	r2,-40(fp)
 800726c:	1885883a 	add	r2,r3,r2
 8007270:	10c1ffcc 	andi	r3,r2,2047
 8007274:	e0bffc17 	ldw	r2,-16(fp)
 8007278:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800727c:	e0bffe17 	ldw	r2,-8(fp)
 8007280:	00bfc716 	blt	zero,r2,80071a0 <__alt_data_end+0xfc0071a0>
 8007284:	00000106 	br	800728c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 8007288:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800728c:	0005303a 	rdctl	r2,status
 8007290:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8007294:	e0fffb17 	ldw	r3,-20(fp)
 8007298:	00bfff84 	movi	r2,-2
 800729c:	1884703a 	and	r2,r3,r2
 80072a0:	1001703a 	wrctl	status,r2
  
  return context;
 80072a4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 80072a8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 80072ac:	e0bffc17 	ldw	r2,-16(fp)
 80072b0:	10800817 	ldw	r2,32(r2)
 80072b4:	10c00094 	ori	r3,r2,2
 80072b8:	e0bffc17 	ldw	r2,-16(fp)
 80072bc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80072c0:	e0bffc17 	ldw	r2,-16(fp)
 80072c4:	10800017 	ldw	r2,0(r2)
 80072c8:	10800104 	addi	r2,r2,4
 80072cc:	1007883a 	mov	r3,r2
 80072d0:	e0bffc17 	ldw	r2,-16(fp)
 80072d4:	10800817 	ldw	r2,32(r2)
 80072d8:	18800035 	stwio	r2,0(r3)
 80072dc:	e0bffa17 	ldw	r2,-24(fp)
 80072e0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80072e4:	e0bff817 	ldw	r2,-32(fp)
 80072e8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 80072ec:	e0bffe17 	ldw	r2,-8(fp)
 80072f0:	0080100e 	bge	zero,r2,8007334 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 80072f4:	e0bfff17 	ldw	r2,-4(fp)
 80072f8:	1090000c 	andi	r2,r2,16384
 80072fc:	1000101e 	bne	r2,zero,8007340 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8007300:	0001883a 	nop
 8007304:	e0bffc17 	ldw	r2,-16(fp)
 8007308:	10c00d17 	ldw	r3,52(r2)
 800730c:	e0bff517 	ldw	r2,-44(fp)
 8007310:	1880051e 	bne	r3,r2,8007328 <altera_avalon_jtag_uart_write+0x1b8>
 8007314:	e0bffc17 	ldw	r2,-16(fp)
 8007318:	10c00917 	ldw	r3,36(r2)
 800731c:	e0bffc17 	ldw	r2,-16(fp)
 8007320:	10800117 	ldw	r2,4(r2)
 8007324:	18bff736 	bltu	r3,r2,8007304 <__alt_data_end+0xfc007304>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8007328:	e0bffc17 	ldw	r2,-16(fp)
 800732c:	10800917 	ldw	r2,36(r2)
 8007330:	1000051e 	bne	r2,zero,8007348 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 8007334:	e0bffe17 	ldw	r2,-8(fp)
 8007338:	00bfd016 	blt	zero,r2,800727c <__alt_data_end+0xfc00727c>
 800733c:	00000306 	br	800734c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 8007340:	0001883a 	nop
 8007344:	00000106 	br	800734c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 8007348:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 800734c:	e0fffd17 	ldw	r3,-12(fp)
 8007350:	e0bff717 	ldw	r2,-36(fp)
 8007354:	18800426 	beq	r3,r2,8007368 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 8007358:	e0fffd17 	ldw	r3,-12(fp)
 800735c:	e0bff717 	ldw	r2,-36(fp)
 8007360:	1885c83a 	sub	r2,r3,r2
 8007364:	00000606 	br	8007380 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 8007368:	e0bfff17 	ldw	r2,-4(fp)
 800736c:	1090000c 	andi	r2,r2,16384
 8007370:	10000226 	beq	r2,zero,800737c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 8007374:	00bffd44 	movi	r2,-11
 8007378:	00000106 	br	8007380 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 800737c:	00bffec4 	movi	r2,-5
}
 8007380:	e037883a 	mov	sp,fp
 8007384:	dfc00117 	ldw	ra,4(sp)
 8007388:	df000017 	ldw	fp,0(sp)
 800738c:	dec00204 	addi	sp,sp,8
 8007390:	f800283a 	ret

08007394 <alt_avalon_spi_command>:
 8007394:	defff404 	addi	sp,sp,-48
 8007398:	df000b15 	stw	fp,44(sp)
 800739c:	df000b04 	addi	fp,sp,44
 80073a0:	e13ffc15 	stw	r4,-16(fp)
 80073a4:	e17ffd15 	stw	r5,-12(fp)
 80073a8:	e1bffe15 	stw	r6,-8(fp)
 80073ac:	e1ffff15 	stw	r7,-4(fp)
 80073b0:	e0ffff17 	ldw	r3,-4(fp)
 80073b4:	e0bffe17 	ldw	r2,-8(fp)
 80073b8:	1885883a 	add	r2,r3,r2
 80073bc:	e0bff815 	stw	r2,-32(fp)
 80073c0:	e0c00217 	ldw	r3,8(fp)
 80073c4:	e0800117 	ldw	r2,4(fp)
 80073c8:	1885883a 	add	r2,r3,r2
 80073cc:	e0bff915 	stw	r2,-28(fp)
 80073d0:	e0800117 	ldw	r2,4(fp)
 80073d4:	e0bff515 	stw	r2,-44(fp)
 80073d8:	e0bffe17 	ldw	r2,-8(fp)
 80073dc:	e0bff615 	stw	r2,-40(fp)
 80073e0:	00800044 	movi	r2,1
 80073e4:	e0bff715 	stw	r2,-36(fp)
 80073e8:	e0bffc17 	ldw	r2,-16(fp)
 80073ec:	10800504 	addi	r2,r2,20
 80073f0:	1009883a 	mov	r4,r2
 80073f4:	00c00044 	movi	r3,1
 80073f8:	e0bffd17 	ldw	r2,-12(fp)
 80073fc:	1884983a 	sll	r2,r3,r2
 8007400:	20800035 	stwio	r2,0(r4)
 8007404:	e0800317 	ldw	r2,12(fp)
 8007408:	1080008c 	andi	r2,r2,2
 800740c:	1000051e 	bne	r2,zero,8007424 <alt_avalon_spi_command+0x90>
 8007410:	e0bffc17 	ldw	r2,-16(fp)
 8007414:	10800304 	addi	r2,r2,12
 8007418:	1007883a 	mov	r3,r2
 800741c:	00810004 	movi	r2,1024
 8007420:	18800035 	stwio	r2,0(r3)
 8007424:	e0bffc17 	ldw	r2,-16(fp)
 8007428:	10800037 	ldwio	r2,0(r2)
 800742c:	e0bffc17 	ldw	r2,-16(fp)
 8007430:	10800204 	addi	r2,r2,8
 8007434:	10800037 	ldwio	r2,0(r2)
 8007438:	e0bffa15 	stw	r2,-24(fp)
 800743c:	e0bffa17 	ldw	r2,-24(fp)
 8007440:	1080100c 	andi	r2,r2,64
 8007444:	10000226 	beq	r2,zero,8007450 <alt_avalon_spi_command+0xbc>
 8007448:	e0bff717 	ldw	r2,-36(fp)
 800744c:	1000031e 	bne	r2,zero,800745c <alt_avalon_spi_command+0xc8>
 8007450:	e0bffa17 	ldw	r2,-24(fp)
 8007454:	1080200c 	andi	r2,r2,128
 8007458:	103ff426 	beq	r2,zero,800742c <__alt_data_end+0xfc00742c>
 800745c:	e0bffa17 	ldw	r2,-24(fp)
 8007460:	1080100c 	andi	r2,r2,64
 8007464:	10001e26 	beq	r2,zero,80074e0 <alt_avalon_spi_command+0x14c>
 8007468:	e0bff717 	ldw	r2,-36(fp)
 800746c:	00801c0e 	bge	zero,r2,80074e0 <alt_avalon_spi_command+0x14c>
 8007470:	e0bff717 	ldw	r2,-36(fp)
 8007474:	10bfffc4 	addi	r2,r2,-1
 8007478:	e0bff715 	stw	r2,-36(fp)
 800747c:	e0ffff17 	ldw	r3,-4(fp)
 8007480:	e0bff817 	ldw	r2,-32(fp)
 8007484:	18800a2e 	bgeu	r3,r2,80074b0 <alt_avalon_spi_command+0x11c>
 8007488:	e0bffc17 	ldw	r2,-16(fp)
 800748c:	10800104 	addi	r2,r2,4
 8007490:	1009883a 	mov	r4,r2
 8007494:	e0bfff17 	ldw	r2,-4(fp)
 8007498:	10c00044 	addi	r3,r2,1
 800749c:	e0ffff15 	stw	r3,-4(fp)
 80074a0:	10800003 	ldbu	r2,0(r2)
 80074a4:	10803fcc 	andi	r2,r2,255
 80074a8:	20800035 	stwio	r2,0(r4)
 80074ac:	00000c06 	br	80074e0 <alt_avalon_spi_command+0x14c>
 80074b0:	e0bff517 	ldw	r2,-44(fp)
 80074b4:	10000826 	beq	r2,zero,80074d8 <alt_avalon_spi_command+0x144>
 80074b8:	e0bff517 	ldw	r2,-44(fp)
 80074bc:	10bfffc4 	addi	r2,r2,-1
 80074c0:	e0bff515 	stw	r2,-44(fp)
 80074c4:	e0bffc17 	ldw	r2,-16(fp)
 80074c8:	10800104 	addi	r2,r2,4
 80074cc:	0007883a 	mov	r3,zero
 80074d0:	10c00035 	stwio	r3,0(r2)
 80074d4:	00000206 	br	80074e0 <alt_avalon_spi_command+0x14c>
 80074d8:	00bf0004 	movi	r2,-1024
 80074dc:	e0bff715 	stw	r2,-36(fp)
 80074e0:	e0bffa17 	ldw	r2,-24(fp)
 80074e4:	1080200c 	andi	r2,r2,128
 80074e8:	103fd026 	beq	r2,zero,800742c <__alt_data_end+0xfc00742c>
 80074ec:	e0bffc17 	ldw	r2,-16(fp)
 80074f0:	10800037 	ldwio	r2,0(r2)
 80074f4:	e0bffb15 	stw	r2,-20(fp)
 80074f8:	e0bff617 	ldw	r2,-40(fp)
 80074fc:	10000426 	beq	r2,zero,8007510 <alt_avalon_spi_command+0x17c>
 8007500:	e0bff617 	ldw	r2,-40(fp)
 8007504:	10bfffc4 	addi	r2,r2,-1
 8007508:	e0bff615 	stw	r2,-40(fp)
 800750c:	00000506 	br	8007524 <alt_avalon_spi_command+0x190>
 8007510:	e0800217 	ldw	r2,8(fp)
 8007514:	10c00044 	addi	r3,r2,1
 8007518:	e0c00215 	stw	r3,8(fp)
 800751c:	e0fffb17 	ldw	r3,-20(fp)
 8007520:	10c00005 	stb	r3,0(r2)
 8007524:	e0bff717 	ldw	r2,-36(fp)
 8007528:	10800044 	addi	r2,r2,1
 800752c:	e0bff715 	stw	r2,-36(fp)
 8007530:	e0bff617 	ldw	r2,-40(fp)
 8007534:	103fbd1e 	bne	r2,zero,800742c <__alt_data_end+0xfc00742c>
 8007538:	e0c00217 	ldw	r3,8(fp)
 800753c:	e0bff917 	ldw	r2,-28(fp)
 8007540:	18bfba1e 	bne	r3,r2,800742c <__alt_data_end+0xfc00742c>
 8007544:	e0bffc17 	ldw	r2,-16(fp)
 8007548:	10800204 	addi	r2,r2,8
 800754c:	10800037 	ldwio	r2,0(r2)
 8007550:	e0bffa15 	stw	r2,-24(fp)
 8007554:	e0bffa17 	ldw	r2,-24(fp)
 8007558:	1080080c 	andi	r2,r2,32
 800755c:	103ff926 	beq	r2,zero,8007544 <__alt_data_end+0xfc007544>
 8007560:	e0800317 	ldw	r2,12(fp)
 8007564:	1080004c 	andi	r2,r2,1
 8007568:	1000041e 	bne	r2,zero,800757c <alt_avalon_spi_command+0x1e8>
 800756c:	e0bffc17 	ldw	r2,-16(fp)
 8007570:	10800304 	addi	r2,r2,12
 8007574:	0007883a 	mov	r3,zero
 8007578:	10c00035 	stwio	r3,0(r2)
 800757c:	e0800117 	ldw	r2,4(fp)
 8007580:	e037883a 	mov	sp,fp
 8007584:	df000017 	ldw	fp,0(sp)
 8007588:	dec00104 	addi	sp,sp,4
 800758c:	f800283a 	ret

08007590 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 8007590:	defffa04 	addi	sp,sp,-24
 8007594:	dfc00515 	stw	ra,20(sp)
 8007598:	df000415 	stw	fp,16(sp)
 800759c:	df000404 	addi	fp,sp,16
 80075a0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 80075a4:	0007883a 	mov	r3,zero
 80075a8:	e0bfff17 	ldw	r2,-4(fp)
 80075ac:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 80075b0:	e0bfff17 	ldw	r2,-4(fp)
 80075b4:	10800104 	addi	r2,r2,4
 80075b8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80075bc:	0005303a 	rdctl	r2,status
 80075c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80075c4:	e0fffd17 	ldw	r3,-12(fp)
 80075c8:	00bfff84 	movi	r2,-2
 80075cc:	1884703a 	and	r2,r3,r2
 80075d0:	1001703a 	wrctl	status,r2
  
  return context;
 80075d4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 80075d8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 80075dc:	80049c40 	call	80049c4 <alt_tick>
 80075e0:	e0bffc17 	ldw	r2,-16(fp)
 80075e4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80075e8:	e0bffe17 	ldw	r2,-8(fp)
 80075ec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 80075f0:	0001883a 	nop
 80075f4:	e037883a 	mov	sp,fp
 80075f8:	dfc00117 	ldw	ra,4(sp)
 80075fc:	df000017 	ldw	fp,0(sp)
 8007600:	dec00204 	addi	sp,sp,8
 8007604:	f800283a 	ret

08007608 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 8007608:	defff804 	addi	sp,sp,-32
 800760c:	dfc00715 	stw	ra,28(sp)
 8007610:	df000615 	stw	fp,24(sp)
 8007614:	df000604 	addi	fp,sp,24
 8007618:	e13ffc15 	stw	r4,-16(fp)
 800761c:	e17ffd15 	stw	r5,-12(fp)
 8007620:	e1bffe15 	stw	r6,-8(fp)
 8007624:	e1ffff15 	stw	r7,-4(fp)
 8007628:	e0bfff17 	ldw	r2,-4(fp)
 800762c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 8007630:	d0a50417 	ldw	r2,-27632(gp)
 8007634:	1000021e 	bne	r2,zero,8007640 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 8007638:	e0bffb17 	ldw	r2,-20(fp)
 800763c:	d0a50415 	stw	r2,-27632(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 8007640:	e0bffc17 	ldw	r2,-16(fp)
 8007644:	10800104 	addi	r2,r2,4
 8007648:	00c001c4 	movi	r3,7
 800764c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 8007650:	d8000015 	stw	zero,0(sp)
 8007654:	e1fffc17 	ldw	r7,-16(fp)
 8007658:	01820034 	movhi	r6,2048
 800765c:	319d6404 	addi	r6,r6,30096
 8007660:	e17ffe17 	ldw	r5,-8(fp)
 8007664:	e13ffd17 	ldw	r4,-12(fp)
 8007668:	8007cb80 	call	8007cb8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 800766c:	0001883a 	nop
 8007670:	e037883a 	mov	sp,fp
 8007674:	dfc00117 	ldw	ra,4(sp)
 8007678:	df000017 	ldw	fp,0(sp)
 800767c:	dec00204 	addi	sp,sp,8
 8007680:	f800283a 	ret

08007684 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8007684:	defff504 	addi	sp,sp,-44
 8007688:	df000a15 	stw	fp,40(sp)
 800768c:	df000a04 	addi	fp,sp,40
 8007690:	e13ffc15 	stw	r4,-16(fp)
 8007694:	e17ffd15 	stw	r5,-12(fp)
 8007698:	e1bffe15 	stw	r6,-8(fp)
 800769c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 80076a0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 80076a4:	d0a50417 	ldw	r2,-27632(gp)
  
  if (alt_ticks_per_second ())
 80076a8:	10003c26 	beq	r2,zero,800779c <alt_alarm_start+0x118>
  {
    if (alarm)
 80076ac:	e0bffc17 	ldw	r2,-16(fp)
 80076b0:	10003826 	beq	r2,zero,8007794 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 80076b4:	e0bffc17 	ldw	r2,-16(fp)
 80076b8:	e0fffe17 	ldw	r3,-8(fp)
 80076bc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 80076c0:	e0bffc17 	ldw	r2,-16(fp)
 80076c4:	e0ffff17 	ldw	r3,-4(fp)
 80076c8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80076cc:	0005303a 	rdctl	r2,status
 80076d0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80076d4:	e0fff917 	ldw	r3,-28(fp)
 80076d8:	00bfff84 	movi	r2,-2
 80076dc:	1884703a 	and	r2,r3,r2
 80076e0:	1001703a 	wrctl	status,r2
  
  return context;
 80076e4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 80076e8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 80076ec:	d0a50517 	ldw	r2,-27628(gp)
      
      current_nticks = alt_nticks();
 80076f0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 80076f4:	e0fffd17 	ldw	r3,-12(fp)
 80076f8:	e0bff617 	ldw	r2,-40(fp)
 80076fc:	1885883a 	add	r2,r3,r2
 8007700:	10c00044 	addi	r3,r2,1
 8007704:	e0bffc17 	ldw	r2,-16(fp)
 8007708:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 800770c:	e0bffc17 	ldw	r2,-16(fp)
 8007710:	10c00217 	ldw	r3,8(r2)
 8007714:	e0bff617 	ldw	r2,-40(fp)
 8007718:	1880042e 	bgeu	r3,r2,800772c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 800771c:	e0bffc17 	ldw	r2,-16(fp)
 8007720:	00c00044 	movi	r3,1
 8007724:	10c00405 	stb	r3,16(r2)
 8007728:	00000206 	br	8007734 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 800772c:	e0bffc17 	ldw	r2,-16(fp)
 8007730:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8007734:	e0bffc17 	ldw	r2,-16(fp)
 8007738:	d0e00804 	addi	r3,gp,-32736
 800773c:	e0fffa15 	stw	r3,-24(fp)
 8007740:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8007744:	e0bffb17 	ldw	r2,-20(fp)
 8007748:	e0fffa17 	ldw	r3,-24(fp)
 800774c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8007750:	e0bffa17 	ldw	r2,-24(fp)
 8007754:	10c00017 	ldw	r3,0(r2)
 8007758:	e0bffb17 	ldw	r2,-20(fp)
 800775c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8007760:	e0bffa17 	ldw	r2,-24(fp)
 8007764:	10800017 	ldw	r2,0(r2)
 8007768:	e0fffb17 	ldw	r3,-20(fp)
 800776c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8007770:	e0bffa17 	ldw	r2,-24(fp)
 8007774:	e0fffb17 	ldw	r3,-20(fp)
 8007778:	10c00015 	stw	r3,0(r2)
 800777c:	e0bff817 	ldw	r2,-32(fp)
 8007780:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8007784:	e0bff717 	ldw	r2,-36(fp)
 8007788:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 800778c:	0005883a 	mov	r2,zero
 8007790:	00000306 	br	80077a0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 8007794:	00bffa84 	movi	r2,-22
 8007798:	00000106 	br	80077a0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 800779c:	00bfde84 	movi	r2,-134
  }
}
 80077a0:	e037883a 	mov	sp,fp
 80077a4:	df000017 	ldw	fp,0(sp)
 80077a8:	dec00104 	addi	sp,sp,4
 80077ac:	f800283a 	ret

080077b0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 80077b0:	defffa04 	addi	sp,sp,-24
 80077b4:	dfc00515 	stw	ra,20(sp)
 80077b8:	df000415 	stw	fp,16(sp)
 80077bc:	df000404 	addi	fp,sp,16
 80077c0:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 80077c4:	00800244 	movi	r2,9
 80077c8:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 80077cc:	014003f4 	movhi	r5,15
 80077d0:	29509004 	addi	r5,r5,16960
 80077d4:	e13ffd17 	ldw	r4,-12(fp)
 80077d8:	80033380 	call	8003338 <__mulsi3>
 80077dc:	100b883a 	mov	r5,r2
 80077e0:	0100bef4 	movhi	r4,763
 80077e4:	213c2004 	addi	r4,r4,-3968
 80077e8:	800327c0 	call	800327c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 80077ec:	100b883a 	mov	r5,r2
 80077f0:	01200034 	movhi	r4,32768
 80077f4:	213fffc4 	addi	r4,r4,-1
 80077f8:	800327c0 	call	800327c <__udivsi3>
 80077fc:	100b883a 	mov	r5,r2
 8007800:	e13fff17 	ldw	r4,-4(fp)
 8007804:	800327c0 	call	800327c <__udivsi3>
 8007808:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 800780c:	e0bffe17 	ldw	r2,-8(fp)
 8007810:	10002a26 	beq	r2,zero,80078bc <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 8007814:	e03ffc15 	stw	zero,-16(fp)
 8007818:	00001706 	br	8007878 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 800781c:	00a00034 	movhi	r2,32768
 8007820:	10bfffc4 	addi	r2,r2,-1
 8007824:	10bfffc4 	addi	r2,r2,-1
 8007828:	103ffe1e 	bne	r2,zero,8007824 <__alt_data_end+0xfc007824>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 800782c:	014003f4 	movhi	r5,15
 8007830:	29509004 	addi	r5,r5,16960
 8007834:	e13ffd17 	ldw	r4,-12(fp)
 8007838:	80033380 	call	8003338 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 800783c:	100b883a 	mov	r5,r2
 8007840:	0100bef4 	movhi	r4,763
 8007844:	213c2004 	addi	r4,r4,-3968
 8007848:	800327c0 	call	800327c <__udivsi3>
 800784c:	100b883a 	mov	r5,r2
 8007850:	01200034 	movhi	r4,32768
 8007854:	213fffc4 	addi	r4,r4,-1
 8007858:	800327c0 	call	800327c <__udivsi3>
 800785c:	1007883a 	mov	r3,r2
 8007860:	e0bfff17 	ldw	r2,-4(fp)
 8007864:	10c5c83a 	sub	r2,r2,r3
 8007868:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 800786c:	e0bffc17 	ldw	r2,-16(fp)
 8007870:	10800044 	addi	r2,r2,1
 8007874:	e0bffc15 	stw	r2,-16(fp)
 8007878:	e0fffc17 	ldw	r3,-16(fp)
 800787c:	e0bffe17 	ldw	r2,-8(fp)
 8007880:	18bfe616 	blt	r3,r2,800781c <__alt_data_end+0xfc00781c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8007884:	014003f4 	movhi	r5,15
 8007888:	29509004 	addi	r5,r5,16960
 800788c:	e13ffd17 	ldw	r4,-12(fp)
 8007890:	80033380 	call	8003338 <__mulsi3>
 8007894:	100b883a 	mov	r5,r2
 8007898:	0100bef4 	movhi	r4,763
 800789c:	213c2004 	addi	r4,r4,-3968
 80078a0:	800327c0 	call	800327c <__udivsi3>
 80078a4:	e17fff17 	ldw	r5,-4(fp)
 80078a8:	1009883a 	mov	r4,r2
 80078ac:	80033380 	call	8003338 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 80078b0:	10bfffc4 	addi	r2,r2,-1
 80078b4:	103ffe1e 	bne	r2,zero,80078b0 <__alt_data_end+0xfc0078b0>
 80078b8:	00000d06 	br	80078f0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 80078bc:	014003f4 	movhi	r5,15
 80078c0:	29509004 	addi	r5,r5,16960
 80078c4:	e13ffd17 	ldw	r4,-12(fp)
 80078c8:	80033380 	call	8003338 <__mulsi3>
 80078cc:	100b883a 	mov	r5,r2
 80078d0:	0100bef4 	movhi	r4,763
 80078d4:	213c2004 	addi	r4,r4,-3968
 80078d8:	800327c0 	call	800327c <__udivsi3>
 80078dc:	e17fff17 	ldw	r5,-4(fp)
 80078e0:	1009883a 	mov	r4,r2
 80078e4:	80033380 	call	8003338 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 80078e8:	10bfffc4 	addi	r2,r2,-1
 80078ec:	00bffe16 	blt	zero,r2,80078e8 <__alt_data_end+0xfc0078e8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 80078f0:	0005883a 	mov	r2,zero
}
 80078f4:	e037883a 	mov	sp,fp
 80078f8:	dfc00117 	ldw	ra,4(sp)
 80078fc:	df000017 	ldw	fp,0(sp)
 8007900:	dec00204 	addi	sp,sp,8
 8007904:	f800283a 	ret

08007908 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8007908:	defffe04 	addi	sp,sp,-8
 800790c:	dfc00115 	stw	ra,4(sp)
 8007910:	df000015 	stw	fp,0(sp)
 8007914:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8007918:	d0a01117 	ldw	r2,-32700(gp)
 800791c:	10000326 	beq	r2,zero,800792c <alt_get_errno+0x24>
 8007920:	d0a01117 	ldw	r2,-32700(gp)
 8007924:	103ee83a 	callr	r2
 8007928:	00000106 	br	8007930 <alt_get_errno+0x28>
 800792c:	d0a50004 	addi	r2,gp,-27648
}
 8007930:	e037883a 	mov	sp,fp
 8007934:	dfc00117 	ldw	ra,4(sp)
 8007938:	df000017 	ldw	fp,0(sp)
 800793c:	dec00204 	addi	sp,sp,8
 8007940:	f800283a 	ret

08007944 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8007944:	defffb04 	addi	sp,sp,-20
 8007948:	dfc00415 	stw	ra,16(sp)
 800794c:	df000315 	stw	fp,12(sp)
 8007950:	df000304 	addi	fp,sp,12
 8007954:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8007958:	e0bfff17 	ldw	r2,-4(fp)
 800795c:	10000816 	blt	r2,zero,8007980 <close+0x3c>
 8007960:	01400304 	movi	r5,12
 8007964:	e13fff17 	ldw	r4,-4(fp)
 8007968:	80033380 	call	8003338 <__mulsi3>
 800796c:	1007883a 	mov	r3,r2
 8007970:	00820074 	movhi	r2,2049
 8007974:	10a8f104 	addi	r2,r2,-23612
 8007978:	1885883a 	add	r2,r3,r2
 800797c:	00000106 	br	8007984 <close+0x40>
 8007980:	0005883a 	mov	r2,zero
 8007984:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8007988:	e0bffd17 	ldw	r2,-12(fp)
 800798c:	10001926 	beq	r2,zero,80079f4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8007990:	e0bffd17 	ldw	r2,-12(fp)
 8007994:	10800017 	ldw	r2,0(r2)
 8007998:	10800417 	ldw	r2,16(r2)
 800799c:	10000626 	beq	r2,zero,80079b8 <close+0x74>
 80079a0:	e0bffd17 	ldw	r2,-12(fp)
 80079a4:	10800017 	ldw	r2,0(r2)
 80079a8:	10800417 	ldw	r2,16(r2)
 80079ac:	e13ffd17 	ldw	r4,-12(fp)
 80079b0:	103ee83a 	callr	r2
 80079b4:	00000106 	br	80079bc <close+0x78>
 80079b8:	0005883a 	mov	r2,zero
 80079bc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 80079c0:	e13fff17 	ldw	r4,-4(fp)
 80079c4:	80085a40 	call	80085a4 <alt_release_fd>
    if (rval < 0)
 80079c8:	e0bffe17 	ldw	r2,-8(fp)
 80079cc:	1000070e 	bge	r2,zero,80079ec <close+0xa8>
    {
      ALT_ERRNO = -rval;
 80079d0:	80079080 	call	8007908 <alt_get_errno>
 80079d4:	1007883a 	mov	r3,r2
 80079d8:	e0bffe17 	ldw	r2,-8(fp)
 80079dc:	0085c83a 	sub	r2,zero,r2
 80079e0:	18800015 	stw	r2,0(r3)
      return -1;
 80079e4:	00bfffc4 	movi	r2,-1
 80079e8:	00000706 	br	8007a08 <close+0xc4>
    }
    return 0;
 80079ec:	0005883a 	mov	r2,zero
 80079f0:	00000506 	br	8007a08 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80079f4:	80079080 	call	8007908 <alt_get_errno>
 80079f8:	1007883a 	mov	r3,r2
 80079fc:	00801444 	movi	r2,81
 8007a00:	18800015 	stw	r2,0(r3)
    return -1;
 8007a04:	00bfffc4 	movi	r2,-1
  }
}
 8007a08:	e037883a 	mov	sp,fp
 8007a0c:	dfc00117 	ldw	ra,4(sp)
 8007a10:	df000017 	ldw	fp,0(sp)
 8007a14:	dec00204 	addi	sp,sp,8
 8007a18:	f800283a 	ret

08007a1c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8007a1c:	deffff04 	addi	sp,sp,-4
 8007a20:	df000015 	stw	fp,0(sp)
 8007a24:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8007a28:	0001883a 	nop
 8007a2c:	e037883a 	mov	sp,fp
 8007a30:	df000017 	ldw	fp,0(sp)
 8007a34:	dec00104 	addi	sp,sp,4
 8007a38:	f800283a 	ret

08007a3c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 8007a3c:	defffc04 	addi	sp,sp,-16
 8007a40:	df000315 	stw	fp,12(sp)
 8007a44:	df000304 	addi	fp,sp,12
 8007a48:	e13ffd15 	stw	r4,-12(fp)
 8007a4c:	e17ffe15 	stw	r5,-8(fp)
 8007a50:	e1bfff15 	stw	r6,-4(fp)
  return len;
 8007a54:	e0bfff17 	ldw	r2,-4(fp)
}
 8007a58:	e037883a 	mov	sp,fp
 8007a5c:	df000017 	ldw	fp,0(sp)
 8007a60:	dec00104 	addi	sp,sp,4
 8007a64:	f800283a 	ret

08007a68 <alt_get_errno>:
 8007a68:	defffe04 	addi	sp,sp,-8
 8007a6c:	dfc00115 	stw	ra,4(sp)
 8007a70:	df000015 	stw	fp,0(sp)
 8007a74:	d839883a 	mov	fp,sp
 8007a78:	d0a01117 	ldw	r2,-32700(gp)
 8007a7c:	10000326 	beq	r2,zero,8007a8c <alt_get_errno+0x24>
 8007a80:	d0a01117 	ldw	r2,-32700(gp)
 8007a84:	103ee83a 	callr	r2
 8007a88:	00000106 	br	8007a90 <alt_get_errno+0x28>
 8007a8c:	d0a50004 	addi	r2,gp,-27648
 8007a90:	e037883a 	mov	sp,fp
 8007a94:	dfc00117 	ldw	ra,4(sp)
 8007a98:	df000017 	ldw	fp,0(sp)
 8007a9c:	dec00204 	addi	sp,sp,8
 8007aa0:	f800283a 	ret

08007aa4 <alt_dev_llist_insert>:
 8007aa4:	defffa04 	addi	sp,sp,-24
 8007aa8:	dfc00515 	stw	ra,20(sp)
 8007aac:	df000415 	stw	fp,16(sp)
 8007ab0:	df000404 	addi	fp,sp,16
 8007ab4:	e13ffe15 	stw	r4,-8(fp)
 8007ab8:	e17fff15 	stw	r5,-4(fp)
 8007abc:	e0bffe17 	ldw	r2,-8(fp)
 8007ac0:	10000326 	beq	r2,zero,8007ad0 <alt_dev_llist_insert+0x2c>
 8007ac4:	e0bffe17 	ldw	r2,-8(fp)
 8007ac8:	10800217 	ldw	r2,8(r2)
 8007acc:	1000061e 	bne	r2,zero,8007ae8 <alt_dev_llist_insert+0x44>
 8007ad0:	8007a680 	call	8007a68 <alt_get_errno>
 8007ad4:	1007883a 	mov	r3,r2
 8007ad8:	00800584 	movi	r2,22
 8007adc:	18800015 	stw	r2,0(r3)
 8007ae0:	00bffa84 	movi	r2,-22
 8007ae4:	00001306 	br	8007b34 <alt_dev_llist_insert+0x90>
 8007ae8:	e0bffe17 	ldw	r2,-8(fp)
 8007aec:	e0ffff17 	ldw	r3,-4(fp)
 8007af0:	e0fffc15 	stw	r3,-16(fp)
 8007af4:	e0bffd15 	stw	r2,-12(fp)
 8007af8:	e0bffd17 	ldw	r2,-12(fp)
 8007afc:	e0fffc17 	ldw	r3,-16(fp)
 8007b00:	10c00115 	stw	r3,4(r2)
 8007b04:	e0bffc17 	ldw	r2,-16(fp)
 8007b08:	10c00017 	ldw	r3,0(r2)
 8007b0c:	e0bffd17 	ldw	r2,-12(fp)
 8007b10:	10c00015 	stw	r3,0(r2)
 8007b14:	e0bffc17 	ldw	r2,-16(fp)
 8007b18:	10800017 	ldw	r2,0(r2)
 8007b1c:	e0fffd17 	ldw	r3,-12(fp)
 8007b20:	10c00115 	stw	r3,4(r2)
 8007b24:	e0bffc17 	ldw	r2,-16(fp)
 8007b28:	e0fffd17 	ldw	r3,-12(fp)
 8007b2c:	10c00015 	stw	r3,0(r2)
 8007b30:	0005883a 	mov	r2,zero
 8007b34:	e037883a 	mov	sp,fp
 8007b38:	dfc00117 	ldw	ra,4(sp)
 8007b3c:	df000017 	ldw	fp,0(sp)
 8007b40:	dec00204 	addi	sp,sp,8
 8007b44:	f800283a 	ret

08007b48 <_do_ctors>:
 8007b48:	defffd04 	addi	sp,sp,-12
 8007b4c:	dfc00215 	stw	ra,8(sp)
 8007b50:	df000115 	stw	fp,4(sp)
 8007b54:	df000104 	addi	fp,sp,4
 8007b58:	00820074 	movhi	r2,2049
 8007b5c:	10a31604 	addi	r2,r2,-29608
 8007b60:	e0bfff15 	stw	r2,-4(fp)
 8007b64:	00000606 	br	8007b80 <_do_ctors+0x38>
 8007b68:	e0bfff17 	ldw	r2,-4(fp)
 8007b6c:	10800017 	ldw	r2,0(r2)
 8007b70:	103ee83a 	callr	r2
 8007b74:	e0bfff17 	ldw	r2,-4(fp)
 8007b78:	10bfff04 	addi	r2,r2,-4
 8007b7c:	e0bfff15 	stw	r2,-4(fp)
 8007b80:	e0ffff17 	ldw	r3,-4(fp)
 8007b84:	00820074 	movhi	r2,2049
 8007b88:	10a31704 	addi	r2,r2,-29604
 8007b8c:	18bff62e 	bgeu	r3,r2,8007b68 <__alt_data_end+0xfc007b68>
 8007b90:	0001883a 	nop
 8007b94:	e037883a 	mov	sp,fp
 8007b98:	dfc00117 	ldw	ra,4(sp)
 8007b9c:	df000017 	ldw	fp,0(sp)
 8007ba0:	dec00204 	addi	sp,sp,8
 8007ba4:	f800283a 	ret

08007ba8 <_do_dtors>:
 8007ba8:	defffd04 	addi	sp,sp,-12
 8007bac:	dfc00215 	stw	ra,8(sp)
 8007bb0:	df000115 	stw	fp,4(sp)
 8007bb4:	df000104 	addi	fp,sp,4
 8007bb8:	00820074 	movhi	r2,2049
 8007bbc:	10a31604 	addi	r2,r2,-29608
 8007bc0:	e0bfff15 	stw	r2,-4(fp)
 8007bc4:	00000606 	br	8007be0 <_do_dtors+0x38>
 8007bc8:	e0bfff17 	ldw	r2,-4(fp)
 8007bcc:	10800017 	ldw	r2,0(r2)
 8007bd0:	103ee83a 	callr	r2
 8007bd4:	e0bfff17 	ldw	r2,-4(fp)
 8007bd8:	10bfff04 	addi	r2,r2,-4
 8007bdc:	e0bfff15 	stw	r2,-4(fp)
 8007be0:	e0ffff17 	ldw	r3,-4(fp)
 8007be4:	00820074 	movhi	r2,2049
 8007be8:	10a31704 	addi	r2,r2,-29604
 8007bec:	18bff62e 	bgeu	r3,r2,8007bc8 <__alt_data_end+0xfc007bc8>
 8007bf0:	0001883a 	nop
 8007bf4:	e037883a 	mov	sp,fp
 8007bf8:	dfc00117 	ldw	ra,4(sp)
 8007bfc:	df000017 	ldw	fp,0(sp)
 8007c00:	dec00204 	addi	sp,sp,8
 8007c04:	f800283a 	ret

08007c08 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8007c08:	defffa04 	addi	sp,sp,-24
 8007c0c:	dfc00515 	stw	ra,20(sp)
 8007c10:	df000415 	stw	fp,16(sp)
 8007c14:	df000404 	addi	fp,sp,16
 8007c18:	e13ffe15 	stw	r4,-8(fp)
 8007c1c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8007c20:	e0bfff17 	ldw	r2,-4(fp)
 8007c24:	10800017 	ldw	r2,0(r2)
 8007c28:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8007c2c:	e13ffe17 	ldw	r4,-8(fp)
 8007c30:	80040340 	call	8004034 <strlen>
 8007c34:	10800044 	addi	r2,r2,1
 8007c38:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8007c3c:	00000d06 	br	8007c74 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8007c40:	e0bffc17 	ldw	r2,-16(fp)
 8007c44:	10800217 	ldw	r2,8(r2)
 8007c48:	e0fffd17 	ldw	r3,-12(fp)
 8007c4c:	180d883a 	mov	r6,r3
 8007c50:	e17ffe17 	ldw	r5,-8(fp)
 8007c54:	1009883a 	mov	r4,r2
 8007c58:	80088e80 	call	80088e8 <memcmp>
 8007c5c:	1000021e 	bne	r2,zero,8007c68 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8007c60:	e0bffc17 	ldw	r2,-16(fp)
 8007c64:	00000706 	br	8007c84 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8007c68:	e0bffc17 	ldw	r2,-16(fp)
 8007c6c:	10800017 	ldw	r2,0(r2)
 8007c70:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8007c74:	e0fffc17 	ldw	r3,-16(fp)
 8007c78:	e0bfff17 	ldw	r2,-4(fp)
 8007c7c:	18bff01e 	bne	r3,r2,8007c40 <__alt_data_end+0xfc007c40>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8007c80:	0005883a 	mov	r2,zero
}
 8007c84:	e037883a 	mov	sp,fp
 8007c88:	dfc00117 	ldw	ra,4(sp)
 8007c8c:	df000017 	ldw	fp,0(sp)
 8007c90:	dec00204 	addi	sp,sp,8
 8007c94:	f800283a 	ret

08007c98 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8007c98:	deffff04 	addi	sp,sp,-4
 8007c9c:	df000015 	stw	fp,0(sp)
 8007ca0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 8007ca4:	0001883a 	nop
 8007ca8:	e037883a 	mov	sp,fp
 8007cac:	df000017 	ldw	fp,0(sp)
 8007cb0:	dec00104 	addi	sp,sp,4
 8007cb4:	f800283a 	ret

08007cb8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8007cb8:	defff904 	addi	sp,sp,-28
 8007cbc:	dfc00615 	stw	ra,24(sp)
 8007cc0:	df000515 	stw	fp,20(sp)
 8007cc4:	df000504 	addi	fp,sp,20
 8007cc8:	e13ffc15 	stw	r4,-16(fp)
 8007ccc:	e17ffd15 	stw	r5,-12(fp)
 8007cd0:	e1bffe15 	stw	r6,-8(fp)
 8007cd4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8007cd8:	e0800217 	ldw	r2,8(fp)
 8007cdc:	d8800015 	stw	r2,0(sp)
 8007ce0:	e1ffff17 	ldw	r7,-4(fp)
 8007ce4:	e1bffe17 	ldw	r6,-8(fp)
 8007ce8:	e17ffd17 	ldw	r5,-12(fp)
 8007cec:	e13ffc17 	ldw	r4,-16(fp)
 8007cf0:	8007e680 	call	8007e68 <alt_iic_isr_register>
}  
 8007cf4:	e037883a 	mov	sp,fp
 8007cf8:	dfc00117 	ldw	ra,4(sp)
 8007cfc:	df000017 	ldw	fp,0(sp)
 8007d00:	dec00204 	addi	sp,sp,8
 8007d04:	f800283a 	ret

08007d08 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8007d08:	defff904 	addi	sp,sp,-28
 8007d0c:	df000615 	stw	fp,24(sp)
 8007d10:	df000604 	addi	fp,sp,24
 8007d14:	e13ffe15 	stw	r4,-8(fp)
 8007d18:	e17fff15 	stw	r5,-4(fp)
 8007d1c:	e0bfff17 	ldw	r2,-4(fp)
 8007d20:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8007d24:	0005303a 	rdctl	r2,status
 8007d28:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8007d2c:	e0fffb17 	ldw	r3,-20(fp)
 8007d30:	00bfff84 	movi	r2,-2
 8007d34:	1884703a 	and	r2,r3,r2
 8007d38:	1001703a 	wrctl	status,r2
  
  return context;
 8007d3c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8007d40:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8007d44:	00c00044 	movi	r3,1
 8007d48:	e0bffa17 	ldw	r2,-24(fp)
 8007d4c:	1884983a 	sll	r2,r3,r2
 8007d50:	1007883a 	mov	r3,r2
 8007d54:	d0a50617 	ldw	r2,-27624(gp)
 8007d58:	1884b03a 	or	r2,r3,r2
 8007d5c:	d0a50615 	stw	r2,-27624(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8007d60:	d0a50617 	ldw	r2,-27624(gp)
 8007d64:	100170fa 	wrctl	ienable,r2
 8007d68:	e0bffc17 	ldw	r2,-16(fp)
 8007d6c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8007d70:	e0bffd17 	ldw	r2,-12(fp)
 8007d74:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8007d78:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8007d7c:	0001883a 	nop
}
 8007d80:	e037883a 	mov	sp,fp
 8007d84:	df000017 	ldw	fp,0(sp)
 8007d88:	dec00104 	addi	sp,sp,4
 8007d8c:	f800283a 	ret

08007d90 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8007d90:	defff904 	addi	sp,sp,-28
 8007d94:	df000615 	stw	fp,24(sp)
 8007d98:	df000604 	addi	fp,sp,24
 8007d9c:	e13ffe15 	stw	r4,-8(fp)
 8007da0:	e17fff15 	stw	r5,-4(fp)
 8007da4:	e0bfff17 	ldw	r2,-4(fp)
 8007da8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8007dac:	0005303a 	rdctl	r2,status
 8007db0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8007db4:	e0fffb17 	ldw	r3,-20(fp)
 8007db8:	00bfff84 	movi	r2,-2
 8007dbc:	1884703a 	and	r2,r3,r2
 8007dc0:	1001703a 	wrctl	status,r2
  
  return context;
 8007dc4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8007dc8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8007dcc:	00c00044 	movi	r3,1
 8007dd0:	e0bffa17 	ldw	r2,-24(fp)
 8007dd4:	1884983a 	sll	r2,r3,r2
 8007dd8:	0084303a 	nor	r2,zero,r2
 8007ddc:	1007883a 	mov	r3,r2
 8007de0:	d0a50617 	ldw	r2,-27624(gp)
 8007de4:	1884703a 	and	r2,r3,r2
 8007de8:	d0a50615 	stw	r2,-27624(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8007dec:	d0a50617 	ldw	r2,-27624(gp)
 8007df0:	100170fa 	wrctl	ienable,r2
 8007df4:	e0bffc17 	ldw	r2,-16(fp)
 8007df8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8007dfc:	e0bffd17 	ldw	r2,-12(fp)
 8007e00:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8007e04:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8007e08:	0001883a 	nop
}
 8007e0c:	e037883a 	mov	sp,fp
 8007e10:	df000017 	ldw	fp,0(sp)
 8007e14:	dec00104 	addi	sp,sp,4
 8007e18:	f800283a 	ret

08007e1c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8007e1c:	defffc04 	addi	sp,sp,-16
 8007e20:	df000315 	stw	fp,12(sp)
 8007e24:	df000304 	addi	fp,sp,12
 8007e28:	e13ffe15 	stw	r4,-8(fp)
 8007e2c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8007e30:	000530fa 	rdctl	r2,ienable
 8007e34:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8007e38:	00c00044 	movi	r3,1
 8007e3c:	e0bfff17 	ldw	r2,-4(fp)
 8007e40:	1884983a 	sll	r2,r3,r2
 8007e44:	1007883a 	mov	r3,r2
 8007e48:	e0bffd17 	ldw	r2,-12(fp)
 8007e4c:	1884703a 	and	r2,r3,r2
 8007e50:	1004c03a 	cmpne	r2,r2,zero
 8007e54:	10803fcc 	andi	r2,r2,255
}
 8007e58:	e037883a 	mov	sp,fp
 8007e5c:	df000017 	ldw	fp,0(sp)
 8007e60:	dec00104 	addi	sp,sp,4
 8007e64:	f800283a 	ret

08007e68 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8007e68:	defff504 	addi	sp,sp,-44
 8007e6c:	dfc00a15 	stw	ra,40(sp)
 8007e70:	df000915 	stw	fp,36(sp)
 8007e74:	df000904 	addi	fp,sp,36
 8007e78:	e13ffc15 	stw	r4,-16(fp)
 8007e7c:	e17ffd15 	stw	r5,-12(fp)
 8007e80:	e1bffe15 	stw	r6,-8(fp)
 8007e84:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8007e88:	00bffa84 	movi	r2,-22
 8007e8c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8007e90:	e0bffd17 	ldw	r2,-12(fp)
 8007e94:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8007e98:	e0bff817 	ldw	r2,-32(fp)
 8007e9c:	10800808 	cmpgei	r2,r2,32
 8007ea0:	1000271e 	bne	r2,zero,8007f40 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8007ea4:	0005303a 	rdctl	r2,status
 8007ea8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8007eac:	e0fffb17 	ldw	r3,-20(fp)
 8007eb0:	00bfff84 	movi	r2,-2
 8007eb4:	1884703a 	and	r2,r3,r2
 8007eb8:	1001703a 	wrctl	status,r2
  
  return context;
 8007ebc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8007ec0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 8007ec4:	00820074 	movhi	r2,2049
 8007ec8:	10aeb504 	addi	r2,r2,-17708
 8007ecc:	e0fff817 	ldw	r3,-32(fp)
 8007ed0:	180690fa 	slli	r3,r3,3
 8007ed4:	10c5883a 	add	r2,r2,r3
 8007ed8:	e0fffe17 	ldw	r3,-8(fp)
 8007edc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8007ee0:	00820074 	movhi	r2,2049
 8007ee4:	10aeb504 	addi	r2,r2,-17708
 8007ee8:	e0fff817 	ldw	r3,-32(fp)
 8007eec:	180690fa 	slli	r3,r3,3
 8007ef0:	10c5883a 	add	r2,r2,r3
 8007ef4:	10800104 	addi	r2,r2,4
 8007ef8:	e0ffff17 	ldw	r3,-4(fp)
 8007efc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8007f00:	e0bffe17 	ldw	r2,-8(fp)
 8007f04:	10000526 	beq	r2,zero,8007f1c <alt_iic_isr_register+0xb4>
 8007f08:	e0bff817 	ldw	r2,-32(fp)
 8007f0c:	100b883a 	mov	r5,r2
 8007f10:	e13ffc17 	ldw	r4,-16(fp)
 8007f14:	8007d080 	call	8007d08 <alt_ic_irq_enable>
 8007f18:	00000406 	br	8007f2c <alt_iic_isr_register+0xc4>
 8007f1c:	e0bff817 	ldw	r2,-32(fp)
 8007f20:	100b883a 	mov	r5,r2
 8007f24:	e13ffc17 	ldw	r4,-16(fp)
 8007f28:	8007d900 	call	8007d90 <alt_ic_irq_disable>
 8007f2c:	e0bff715 	stw	r2,-36(fp)
 8007f30:	e0bffa17 	ldw	r2,-24(fp)
 8007f34:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8007f38:	e0bff917 	ldw	r2,-28(fp)
 8007f3c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8007f40:	e0bff717 	ldw	r2,-36(fp)
}
 8007f44:	e037883a 	mov	sp,fp
 8007f48:	dfc00117 	ldw	ra,4(sp)
 8007f4c:	df000017 	ldw	fp,0(sp)
 8007f50:	dec00204 	addi	sp,sp,8
 8007f54:	f800283a 	ret

08007f58 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8007f58:	defff804 	addi	sp,sp,-32
 8007f5c:	dfc00715 	stw	ra,28(sp)
 8007f60:	df000615 	stw	fp,24(sp)
 8007f64:	dc000515 	stw	r16,20(sp)
 8007f68:	df000604 	addi	fp,sp,24
 8007f6c:	e13ffb15 	stw	r4,-20(fp)
 8007f70:	e17ffc15 	stw	r5,-16(fp)
 8007f74:	e1bffd15 	stw	r6,-12(fp)
 8007f78:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 8007f7c:	e1bffe17 	ldw	r6,-8(fp)
 8007f80:	e17ffd17 	ldw	r5,-12(fp)
 8007f84:	e13ffc17 	ldw	r4,-16(fp)
 8007f88:	80081e00 	call	80081e0 <open>
 8007f8c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 8007f90:	e0bffa17 	ldw	r2,-24(fp)
 8007f94:	10002216 	blt	r2,zero,8008020 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 8007f98:	04020074 	movhi	r16,2049
 8007f9c:	8428f104 	addi	r16,r16,-23612
 8007fa0:	e0bffa17 	ldw	r2,-24(fp)
 8007fa4:	01400304 	movi	r5,12
 8007fa8:	1009883a 	mov	r4,r2
 8007fac:	80033380 	call	8003338 <__mulsi3>
 8007fb0:	8085883a 	add	r2,r16,r2
 8007fb4:	10c00017 	ldw	r3,0(r2)
 8007fb8:	e0bffb17 	ldw	r2,-20(fp)
 8007fbc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8007fc0:	04020074 	movhi	r16,2049
 8007fc4:	8428f104 	addi	r16,r16,-23612
 8007fc8:	e0bffa17 	ldw	r2,-24(fp)
 8007fcc:	01400304 	movi	r5,12
 8007fd0:	1009883a 	mov	r4,r2
 8007fd4:	80033380 	call	8003338 <__mulsi3>
 8007fd8:	8085883a 	add	r2,r16,r2
 8007fdc:	10800104 	addi	r2,r2,4
 8007fe0:	10c00017 	ldw	r3,0(r2)
 8007fe4:	e0bffb17 	ldw	r2,-20(fp)
 8007fe8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8007fec:	04020074 	movhi	r16,2049
 8007ff0:	8428f104 	addi	r16,r16,-23612
 8007ff4:	e0bffa17 	ldw	r2,-24(fp)
 8007ff8:	01400304 	movi	r5,12
 8007ffc:	1009883a 	mov	r4,r2
 8008000:	80033380 	call	8003338 <__mulsi3>
 8008004:	8085883a 	add	r2,r16,r2
 8008008:	10800204 	addi	r2,r2,8
 800800c:	10c00017 	ldw	r3,0(r2)
 8008010:	e0bffb17 	ldw	r2,-20(fp)
 8008014:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8008018:	e13ffa17 	ldw	r4,-24(fp)
 800801c:	80085a40 	call	80085a4 <alt_release_fd>
  }
} 
 8008020:	0001883a 	nop
 8008024:	e6ffff04 	addi	sp,fp,-4
 8008028:	dfc00217 	ldw	ra,8(sp)
 800802c:	df000117 	ldw	fp,4(sp)
 8008030:	dc000017 	ldw	r16,0(sp)
 8008034:	dec00304 	addi	sp,sp,12
 8008038:	f800283a 	ret

0800803c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 800803c:	defffb04 	addi	sp,sp,-20
 8008040:	dfc00415 	stw	ra,16(sp)
 8008044:	df000315 	stw	fp,12(sp)
 8008048:	df000304 	addi	fp,sp,12
 800804c:	e13ffd15 	stw	r4,-12(fp)
 8008050:	e17ffe15 	stw	r5,-8(fp)
 8008054:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8008058:	01c07fc4 	movi	r7,511
 800805c:	01800044 	movi	r6,1
 8008060:	e17ffd17 	ldw	r5,-12(fp)
 8008064:	01020074 	movhi	r4,2049
 8008068:	2128f404 	addi	r4,r4,-23600
 800806c:	8007f580 	call	8007f58 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8008070:	01c07fc4 	movi	r7,511
 8008074:	000d883a 	mov	r6,zero
 8008078:	e17ffe17 	ldw	r5,-8(fp)
 800807c:	01020074 	movhi	r4,2049
 8008080:	2128f104 	addi	r4,r4,-23612
 8008084:	8007f580 	call	8007f58 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8008088:	01c07fc4 	movi	r7,511
 800808c:	01800044 	movi	r6,1
 8008090:	e17fff17 	ldw	r5,-4(fp)
 8008094:	01020074 	movhi	r4,2049
 8008098:	2128f704 	addi	r4,r4,-23588
 800809c:	8007f580 	call	8007f58 <alt_open_fd>
}  
 80080a0:	0001883a 	nop
 80080a4:	e037883a 	mov	sp,fp
 80080a8:	dfc00117 	ldw	ra,4(sp)
 80080ac:	df000017 	ldw	fp,0(sp)
 80080b0:	dec00204 	addi	sp,sp,8
 80080b4:	f800283a 	ret

080080b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80080b8:	defffe04 	addi	sp,sp,-8
 80080bc:	dfc00115 	stw	ra,4(sp)
 80080c0:	df000015 	stw	fp,0(sp)
 80080c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80080c8:	d0a01117 	ldw	r2,-32700(gp)
 80080cc:	10000326 	beq	r2,zero,80080dc <alt_get_errno+0x24>
 80080d0:	d0a01117 	ldw	r2,-32700(gp)
 80080d4:	103ee83a 	callr	r2
 80080d8:	00000106 	br	80080e0 <alt_get_errno+0x28>
 80080dc:	d0a50004 	addi	r2,gp,-27648
}
 80080e0:	e037883a 	mov	sp,fp
 80080e4:	dfc00117 	ldw	ra,4(sp)
 80080e8:	df000017 	ldw	fp,0(sp)
 80080ec:	dec00204 	addi	sp,sp,8
 80080f0:	f800283a 	ret

080080f4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 80080f4:	defffb04 	addi	sp,sp,-20
 80080f8:	dfc00415 	stw	ra,16(sp)
 80080fc:	df000315 	stw	fp,12(sp)
 8008100:	dc000215 	stw	r16,8(sp)
 8008104:	df000304 	addi	fp,sp,12
 8008108:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 800810c:	e0bffe17 	ldw	r2,-8(fp)
 8008110:	10800217 	ldw	r2,8(r2)
 8008114:	10d00034 	orhi	r3,r2,16384
 8008118:	e0bffe17 	ldw	r2,-8(fp)
 800811c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8008120:	e03ffd15 	stw	zero,-12(fp)
 8008124:	00002306 	br	80081b4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8008128:	04020074 	movhi	r16,2049
 800812c:	8428f104 	addi	r16,r16,-23612
 8008130:	e0bffd17 	ldw	r2,-12(fp)
 8008134:	01400304 	movi	r5,12
 8008138:	1009883a 	mov	r4,r2
 800813c:	80033380 	call	8003338 <__mulsi3>
 8008140:	8085883a 	add	r2,r16,r2
 8008144:	10c00017 	ldw	r3,0(r2)
 8008148:	e0bffe17 	ldw	r2,-8(fp)
 800814c:	10800017 	ldw	r2,0(r2)
 8008150:	1880151e 	bne	r3,r2,80081a8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8008154:	04020074 	movhi	r16,2049
 8008158:	8428f104 	addi	r16,r16,-23612
 800815c:	e0bffd17 	ldw	r2,-12(fp)
 8008160:	01400304 	movi	r5,12
 8008164:	1009883a 	mov	r4,r2
 8008168:	80033380 	call	8003338 <__mulsi3>
 800816c:	8085883a 	add	r2,r16,r2
 8008170:	10800204 	addi	r2,r2,8
 8008174:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8008178:	10000b0e 	bge	r2,zero,80081a8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 800817c:	01400304 	movi	r5,12
 8008180:	e13ffd17 	ldw	r4,-12(fp)
 8008184:	80033380 	call	8003338 <__mulsi3>
 8008188:	1007883a 	mov	r3,r2
 800818c:	00820074 	movhi	r2,2049
 8008190:	10a8f104 	addi	r2,r2,-23612
 8008194:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8008198:	e0bffe17 	ldw	r2,-8(fp)
 800819c:	18800226 	beq	r3,r2,80081a8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 80081a0:	00bffcc4 	movi	r2,-13
 80081a4:	00000806 	br	80081c8 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80081a8:	e0bffd17 	ldw	r2,-12(fp)
 80081ac:	10800044 	addi	r2,r2,1
 80081b0:	e0bffd15 	stw	r2,-12(fp)
 80081b4:	d0a01017 	ldw	r2,-32704(gp)
 80081b8:	1007883a 	mov	r3,r2
 80081bc:	e0bffd17 	ldw	r2,-12(fp)
 80081c0:	18bfd92e 	bgeu	r3,r2,8008128 <__alt_data_end+0xfc008128>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 80081c4:	0005883a 	mov	r2,zero
}
 80081c8:	e6ffff04 	addi	sp,fp,-4
 80081cc:	dfc00217 	ldw	ra,8(sp)
 80081d0:	df000117 	ldw	fp,4(sp)
 80081d4:	dc000017 	ldw	r16,0(sp)
 80081d8:	dec00304 	addi	sp,sp,12
 80081dc:	f800283a 	ret

080081e0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 80081e0:	defff604 	addi	sp,sp,-40
 80081e4:	dfc00915 	stw	ra,36(sp)
 80081e8:	df000815 	stw	fp,32(sp)
 80081ec:	df000804 	addi	fp,sp,32
 80081f0:	e13ffd15 	stw	r4,-12(fp)
 80081f4:	e17ffe15 	stw	r5,-8(fp)
 80081f8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 80081fc:	00bfffc4 	movi	r2,-1
 8008200:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8008204:	00bffb44 	movi	r2,-19
 8008208:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 800820c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8008210:	d1600e04 	addi	r5,gp,-32712
 8008214:	e13ffd17 	ldw	r4,-12(fp)
 8008218:	8007c080 	call	8007c08 <alt_find_dev>
 800821c:	e0bff815 	stw	r2,-32(fp)
 8008220:	e0bff817 	ldw	r2,-32(fp)
 8008224:	1000051e 	bne	r2,zero,800823c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8008228:	e13ffd17 	ldw	r4,-12(fp)
 800822c:	800864c0 	call	800864c <alt_find_file>
 8008230:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8008234:	00800044 	movi	r2,1
 8008238:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 800823c:	e0bff817 	ldw	r2,-32(fp)
 8008240:	10002b26 	beq	r2,zero,80082f0 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8008244:	e13ff817 	ldw	r4,-32(fp)
 8008248:	80087540 	call	8008754 <alt_get_fd>
 800824c:	e0bff915 	stw	r2,-28(fp)
 8008250:	e0bff917 	ldw	r2,-28(fp)
 8008254:	1000030e 	bge	r2,zero,8008264 <open+0x84>
    {
      status = index;
 8008258:	e0bff917 	ldw	r2,-28(fp)
 800825c:	e0bffa15 	stw	r2,-24(fp)
 8008260:	00002506 	br	80082f8 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 8008264:	01400304 	movi	r5,12
 8008268:	e13ff917 	ldw	r4,-28(fp)
 800826c:	80033380 	call	8003338 <__mulsi3>
 8008270:	1007883a 	mov	r3,r2
 8008274:	00820074 	movhi	r2,2049
 8008278:	10a8f104 	addi	r2,r2,-23612
 800827c:	1885883a 	add	r2,r3,r2
 8008280:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8008284:	e0fffe17 	ldw	r3,-8(fp)
 8008288:	00900034 	movhi	r2,16384
 800828c:	10bfffc4 	addi	r2,r2,-1
 8008290:	1886703a 	and	r3,r3,r2
 8008294:	e0bffc17 	ldw	r2,-16(fp)
 8008298:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 800829c:	e0bffb17 	ldw	r2,-20(fp)
 80082a0:	1000051e 	bne	r2,zero,80082b8 <open+0xd8>
 80082a4:	e13ffc17 	ldw	r4,-16(fp)
 80082a8:	80080f40 	call	80080f4 <alt_file_locked>
 80082ac:	e0bffa15 	stw	r2,-24(fp)
 80082b0:	e0bffa17 	ldw	r2,-24(fp)
 80082b4:	10001016 	blt	r2,zero,80082f8 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 80082b8:	e0bff817 	ldw	r2,-32(fp)
 80082bc:	10800317 	ldw	r2,12(r2)
 80082c0:	10000826 	beq	r2,zero,80082e4 <open+0x104>
 80082c4:	e0bff817 	ldw	r2,-32(fp)
 80082c8:	10800317 	ldw	r2,12(r2)
 80082cc:	e1ffff17 	ldw	r7,-4(fp)
 80082d0:	e1bffe17 	ldw	r6,-8(fp)
 80082d4:	e17ffd17 	ldw	r5,-12(fp)
 80082d8:	e13ffc17 	ldw	r4,-16(fp)
 80082dc:	103ee83a 	callr	r2
 80082e0:	00000106 	br	80082e8 <open+0x108>
 80082e4:	0005883a 	mov	r2,zero
 80082e8:	e0bffa15 	stw	r2,-24(fp)
 80082ec:	00000206 	br	80082f8 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 80082f0:	00bffb44 	movi	r2,-19
 80082f4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 80082f8:	e0bffa17 	ldw	r2,-24(fp)
 80082fc:	1000090e 	bge	r2,zero,8008324 <open+0x144>
  {
    alt_release_fd (index);  
 8008300:	e13ff917 	ldw	r4,-28(fp)
 8008304:	80085a40 	call	80085a4 <alt_release_fd>
    ALT_ERRNO = -status;
 8008308:	80080b80 	call	80080b8 <alt_get_errno>
 800830c:	1007883a 	mov	r3,r2
 8008310:	e0bffa17 	ldw	r2,-24(fp)
 8008314:	0085c83a 	sub	r2,zero,r2
 8008318:	18800015 	stw	r2,0(r3)
    return -1;
 800831c:	00bfffc4 	movi	r2,-1
 8008320:	00000106 	br	8008328 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 8008324:	e0bff917 	ldw	r2,-28(fp)
}
 8008328:	e037883a 	mov	sp,fp
 800832c:	dfc00117 	ldw	ra,4(sp)
 8008330:	df000017 	ldw	fp,0(sp)
 8008334:	dec00204 	addi	sp,sp,8
 8008338:	f800283a 	ret

0800833c <alt_printf>:
 800833c:	defff204 	addi	sp,sp,-56
 8008340:	dfc00a15 	stw	ra,40(sp)
 8008344:	df000915 	stw	fp,36(sp)
 8008348:	df000904 	addi	fp,sp,36
 800834c:	e13fff15 	stw	r4,-4(fp)
 8008350:	e1400215 	stw	r5,8(fp)
 8008354:	e1800315 	stw	r6,12(fp)
 8008358:	e1c00415 	stw	r7,16(fp)
 800835c:	e0800204 	addi	r2,fp,8
 8008360:	e0bffe15 	stw	r2,-8(fp)
 8008364:	e0bfff17 	ldw	r2,-4(fp)
 8008368:	e0bff715 	stw	r2,-36(fp)
 800836c:	00006f06 	br	800852c <alt_printf+0x1f0>
 8008370:	e0bff807 	ldb	r2,-32(fp)
 8008374:	10800960 	cmpeqi	r2,r2,37
 8008378:	1000041e 	bne	r2,zero,800838c <alt_printf+0x50>
 800837c:	e0bff807 	ldb	r2,-32(fp)
 8008380:	1009883a 	mov	r4,r2
 8008384:	80085680 	call	8008568 <alt_putchar>
 8008388:	00006806 	br	800852c <alt_printf+0x1f0>
 800838c:	e0bff717 	ldw	r2,-36(fp)
 8008390:	10c00044 	addi	r3,r2,1
 8008394:	e0fff715 	stw	r3,-36(fp)
 8008398:	10800003 	ldbu	r2,0(r2)
 800839c:	e0bff805 	stb	r2,-32(fp)
 80083a0:	e0bff807 	ldb	r2,-32(fp)
 80083a4:	10006926 	beq	r2,zero,800854c <alt_printf+0x210>
 80083a8:	e0bff807 	ldb	r2,-32(fp)
 80083ac:	10800958 	cmpnei	r2,r2,37
 80083b0:	1000041e 	bne	r2,zero,80083c4 <alt_printf+0x88>
 80083b4:	e0bff807 	ldb	r2,-32(fp)
 80083b8:	1009883a 	mov	r4,r2
 80083bc:	80085680 	call	8008568 <alt_putchar>
 80083c0:	00005a06 	br	800852c <alt_printf+0x1f0>
 80083c4:	e0bff807 	ldb	r2,-32(fp)
 80083c8:	108018d8 	cmpnei	r2,r2,99
 80083cc:	1000081e 	bne	r2,zero,80083f0 <alt_printf+0xb4>
 80083d0:	e0bffe17 	ldw	r2,-8(fp)
 80083d4:	10c00104 	addi	r3,r2,4
 80083d8:	e0fffe15 	stw	r3,-8(fp)
 80083dc:	10800017 	ldw	r2,0(r2)
 80083e0:	e0bffd15 	stw	r2,-12(fp)
 80083e4:	e13ffd17 	ldw	r4,-12(fp)
 80083e8:	80085680 	call	8008568 <alt_putchar>
 80083ec:	00004f06 	br	800852c <alt_printf+0x1f0>
 80083f0:	e0bff807 	ldb	r2,-32(fp)
 80083f4:	10801e18 	cmpnei	r2,r2,120
 80083f8:	1000341e 	bne	r2,zero,80084cc <alt_printf+0x190>
 80083fc:	e0bffe17 	ldw	r2,-8(fp)
 8008400:	10c00104 	addi	r3,r2,4
 8008404:	e0fffe15 	stw	r3,-8(fp)
 8008408:	10800017 	ldw	r2,0(r2)
 800840c:	e0bffb15 	stw	r2,-20(fp)
 8008410:	e0bffb17 	ldw	r2,-20(fp)
 8008414:	1000031e 	bne	r2,zero,8008424 <alt_printf+0xe8>
 8008418:	01000c04 	movi	r4,48
 800841c:	80085680 	call	8008568 <alt_putchar>
 8008420:	00004206 	br	800852c <alt_printf+0x1f0>
 8008424:	00800704 	movi	r2,28
 8008428:	e0bff915 	stw	r2,-28(fp)
 800842c:	00000306 	br	800843c <alt_printf+0x100>
 8008430:	e0bff917 	ldw	r2,-28(fp)
 8008434:	10bfff04 	addi	r2,r2,-4
 8008438:	e0bff915 	stw	r2,-28(fp)
 800843c:	00c003c4 	movi	r3,15
 8008440:	e0bff917 	ldw	r2,-28(fp)
 8008444:	1884983a 	sll	r2,r3,r2
 8008448:	1007883a 	mov	r3,r2
 800844c:	e0bffb17 	ldw	r2,-20(fp)
 8008450:	1884703a 	and	r2,r3,r2
 8008454:	103ff626 	beq	r2,zero,8008430 <__alt_data_end+0xfc008430>
 8008458:	00001906 	br	80084c0 <alt_printf+0x184>
 800845c:	00c003c4 	movi	r3,15
 8008460:	e0bff917 	ldw	r2,-28(fp)
 8008464:	1884983a 	sll	r2,r3,r2
 8008468:	1007883a 	mov	r3,r2
 800846c:	e0bffb17 	ldw	r2,-20(fp)
 8008470:	1886703a 	and	r3,r3,r2
 8008474:	e0bff917 	ldw	r2,-28(fp)
 8008478:	1884d83a 	srl	r2,r3,r2
 800847c:	e0bffc15 	stw	r2,-16(fp)
 8008480:	e0bffc17 	ldw	r2,-16(fp)
 8008484:	108002a8 	cmpgeui	r2,r2,10
 8008488:	1000041e 	bne	r2,zero,800849c <alt_printf+0x160>
 800848c:	e0bffc17 	ldw	r2,-16(fp)
 8008490:	10800c04 	addi	r2,r2,48
 8008494:	e0bff805 	stb	r2,-32(fp)
 8008498:	00000306 	br	80084a8 <alt_printf+0x16c>
 800849c:	e0bffc17 	ldw	r2,-16(fp)
 80084a0:	108015c4 	addi	r2,r2,87
 80084a4:	e0bff805 	stb	r2,-32(fp)
 80084a8:	e0bff807 	ldb	r2,-32(fp)
 80084ac:	1009883a 	mov	r4,r2
 80084b0:	80085680 	call	8008568 <alt_putchar>
 80084b4:	e0bff917 	ldw	r2,-28(fp)
 80084b8:	10bfff04 	addi	r2,r2,-4
 80084bc:	e0bff915 	stw	r2,-28(fp)
 80084c0:	e0bff917 	ldw	r2,-28(fp)
 80084c4:	103fe50e 	bge	r2,zero,800845c <__alt_data_end+0xfc00845c>
 80084c8:	00001806 	br	800852c <alt_printf+0x1f0>
 80084cc:	e0bff807 	ldb	r2,-32(fp)
 80084d0:	10801cd8 	cmpnei	r2,r2,115
 80084d4:	1000151e 	bne	r2,zero,800852c <alt_printf+0x1f0>
 80084d8:	e0bffe17 	ldw	r2,-8(fp)
 80084dc:	10c00104 	addi	r3,r2,4
 80084e0:	e0fffe15 	stw	r3,-8(fp)
 80084e4:	10800017 	ldw	r2,0(r2)
 80084e8:	e0bffa15 	stw	r2,-24(fp)
 80084ec:	00000906 	br	8008514 <alt_printf+0x1d8>
 80084f0:	e0bffa17 	ldw	r2,-24(fp)
 80084f4:	10c00044 	addi	r3,r2,1
 80084f8:	e0fffa15 	stw	r3,-24(fp)
 80084fc:	10800003 	ldbu	r2,0(r2)
 8008500:	10803fcc 	andi	r2,r2,255
 8008504:	1080201c 	xori	r2,r2,128
 8008508:	10bfe004 	addi	r2,r2,-128
 800850c:	1009883a 	mov	r4,r2
 8008510:	80085680 	call	8008568 <alt_putchar>
 8008514:	e0bffa17 	ldw	r2,-24(fp)
 8008518:	10800003 	ldbu	r2,0(r2)
 800851c:	10803fcc 	andi	r2,r2,255
 8008520:	1080201c 	xori	r2,r2,128
 8008524:	10bfe004 	addi	r2,r2,-128
 8008528:	103ff11e 	bne	r2,zero,80084f0 <__alt_data_end+0xfc0084f0>
 800852c:	e0bff717 	ldw	r2,-36(fp)
 8008530:	10c00044 	addi	r3,r2,1
 8008534:	e0fff715 	stw	r3,-36(fp)
 8008538:	10800003 	ldbu	r2,0(r2)
 800853c:	e0bff805 	stb	r2,-32(fp)
 8008540:	e0bff807 	ldb	r2,-32(fp)
 8008544:	103f8a1e 	bne	r2,zero,8008370 <__alt_data_end+0xfc008370>
 8008548:	00000106 	br	8008550 <alt_printf+0x214>
 800854c:	0001883a 	nop
 8008550:	0001883a 	nop
 8008554:	e037883a 	mov	sp,fp
 8008558:	dfc00117 	ldw	ra,4(sp)
 800855c:	df000017 	ldw	fp,0(sp)
 8008560:	dec00504 	addi	sp,sp,20
 8008564:	f800283a 	ret

08008568 <alt_putchar>:
 8008568:	defffd04 	addi	sp,sp,-12
 800856c:	dfc00215 	stw	ra,8(sp)
 8008570:	df000115 	stw	fp,4(sp)
 8008574:	df000104 	addi	fp,sp,4
 8008578:	e13fff15 	stw	r4,-4(fp)
 800857c:	d0a00717 	ldw	r2,-32740(gp)
 8008580:	10800217 	ldw	r2,8(r2)
 8008584:	100b883a 	mov	r5,r2
 8008588:	e13fff17 	ldw	r4,-4(fp)
 800858c:	80046bc0 	call	80046bc <putc>
 8008590:	e037883a 	mov	sp,fp
 8008594:	dfc00117 	ldw	ra,4(sp)
 8008598:	df000017 	ldw	fp,0(sp)
 800859c:	dec00204 	addi	sp,sp,8
 80085a0:	f800283a 	ret

080085a4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 80085a4:	defffc04 	addi	sp,sp,-16
 80085a8:	dfc00315 	stw	ra,12(sp)
 80085ac:	df000215 	stw	fp,8(sp)
 80085b0:	dc000115 	stw	r16,4(sp)
 80085b4:	df000204 	addi	fp,sp,8
 80085b8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 80085bc:	e0bffe17 	ldw	r2,-8(fp)
 80085c0:	108000d0 	cmplti	r2,r2,3
 80085c4:	1000111e 	bne	r2,zero,800860c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 80085c8:	04020074 	movhi	r16,2049
 80085cc:	8428f104 	addi	r16,r16,-23612
 80085d0:	e0bffe17 	ldw	r2,-8(fp)
 80085d4:	01400304 	movi	r5,12
 80085d8:	1009883a 	mov	r4,r2
 80085dc:	80033380 	call	8003338 <__mulsi3>
 80085e0:	8085883a 	add	r2,r16,r2
 80085e4:	10800204 	addi	r2,r2,8
 80085e8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 80085ec:	04020074 	movhi	r16,2049
 80085f0:	8428f104 	addi	r16,r16,-23612
 80085f4:	e0bffe17 	ldw	r2,-8(fp)
 80085f8:	01400304 	movi	r5,12
 80085fc:	1009883a 	mov	r4,r2
 8008600:	80033380 	call	8003338 <__mulsi3>
 8008604:	8085883a 	add	r2,r16,r2
 8008608:	10000015 	stw	zero,0(r2)
  }
}
 800860c:	0001883a 	nop
 8008610:	e6ffff04 	addi	sp,fp,-4
 8008614:	dfc00217 	ldw	ra,8(sp)
 8008618:	df000117 	ldw	fp,4(sp)
 800861c:	dc000017 	ldw	r16,0(sp)
 8008620:	dec00304 	addi	sp,sp,12
 8008624:	f800283a 	ret

08008628 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8008628:	deffff04 	addi	sp,sp,-4
 800862c:	df000015 	stw	fp,0(sp)
 8008630:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8008634:	000170fa 	wrctl	ienable,zero
}
 8008638:	0001883a 	nop
 800863c:	e037883a 	mov	sp,fp
 8008640:	df000017 	ldw	fp,0(sp)
 8008644:	dec00104 	addi	sp,sp,4
 8008648:	f800283a 	ret

0800864c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 800864c:	defffb04 	addi	sp,sp,-20
 8008650:	dfc00415 	stw	ra,16(sp)
 8008654:	df000315 	stw	fp,12(sp)
 8008658:	df000304 	addi	fp,sp,12
 800865c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8008660:	d0a00c17 	ldw	r2,-32720(gp)
 8008664:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8008668:	00003106 	br	8008730 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 800866c:	e0bffd17 	ldw	r2,-12(fp)
 8008670:	10800217 	ldw	r2,8(r2)
 8008674:	1009883a 	mov	r4,r2
 8008678:	80040340 	call	8004034 <strlen>
 800867c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8008680:	e0bffd17 	ldw	r2,-12(fp)
 8008684:	10c00217 	ldw	r3,8(r2)
 8008688:	e0bffe17 	ldw	r2,-8(fp)
 800868c:	10bfffc4 	addi	r2,r2,-1
 8008690:	1885883a 	add	r2,r3,r2
 8008694:	10800003 	ldbu	r2,0(r2)
 8008698:	10803fcc 	andi	r2,r2,255
 800869c:	1080201c 	xori	r2,r2,128
 80086a0:	10bfe004 	addi	r2,r2,-128
 80086a4:	10800bd8 	cmpnei	r2,r2,47
 80086a8:	1000031e 	bne	r2,zero,80086b8 <alt_find_file+0x6c>
    {
      len -= 1;
 80086ac:	e0bffe17 	ldw	r2,-8(fp)
 80086b0:	10bfffc4 	addi	r2,r2,-1
 80086b4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80086b8:	e0bffe17 	ldw	r2,-8(fp)
 80086bc:	e0ffff17 	ldw	r3,-4(fp)
 80086c0:	1885883a 	add	r2,r3,r2
 80086c4:	10800003 	ldbu	r2,0(r2)
 80086c8:	10803fcc 	andi	r2,r2,255
 80086cc:	1080201c 	xori	r2,r2,128
 80086d0:	10bfe004 	addi	r2,r2,-128
 80086d4:	10800be0 	cmpeqi	r2,r2,47
 80086d8:	1000081e 	bne	r2,zero,80086fc <alt_find_file+0xb0>
 80086dc:	e0bffe17 	ldw	r2,-8(fp)
 80086e0:	e0ffff17 	ldw	r3,-4(fp)
 80086e4:	1885883a 	add	r2,r3,r2
 80086e8:	10800003 	ldbu	r2,0(r2)
 80086ec:	10803fcc 	andi	r2,r2,255
 80086f0:	1080201c 	xori	r2,r2,128
 80086f4:	10bfe004 	addi	r2,r2,-128
 80086f8:	10000a1e 	bne	r2,zero,8008724 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 80086fc:	e0bffd17 	ldw	r2,-12(fp)
 8008700:	10800217 	ldw	r2,8(r2)
 8008704:	e0fffe17 	ldw	r3,-8(fp)
 8008708:	180d883a 	mov	r6,r3
 800870c:	e17fff17 	ldw	r5,-4(fp)
 8008710:	1009883a 	mov	r4,r2
 8008714:	80088e80 	call	80088e8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8008718:	1000021e 	bne	r2,zero,8008724 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 800871c:	e0bffd17 	ldw	r2,-12(fp)
 8008720:	00000706 	br	8008740 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 8008724:	e0bffd17 	ldw	r2,-12(fp)
 8008728:	10800017 	ldw	r2,0(r2)
 800872c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8008730:	e0fffd17 	ldw	r3,-12(fp)
 8008734:	d0a00c04 	addi	r2,gp,-32720
 8008738:	18bfcc1e 	bne	r3,r2,800866c <__alt_data_end+0xfc00866c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 800873c:	0005883a 	mov	r2,zero
}
 8008740:	e037883a 	mov	sp,fp
 8008744:	dfc00117 	ldw	ra,4(sp)
 8008748:	df000017 	ldw	fp,0(sp)
 800874c:	dec00204 	addi	sp,sp,8
 8008750:	f800283a 	ret

08008754 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8008754:	defffa04 	addi	sp,sp,-24
 8008758:	dfc00515 	stw	ra,20(sp)
 800875c:	df000415 	stw	fp,16(sp)
 8008760:	dc000315 	stw	r16,12(sp)
 8008764:	df000404 	addi	fp,sp,16
 8008768:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 800876c:	00bffa04 	movi	r2,-24
 8008770:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8008774:	e03ffc15 	stw	zero,-16(fp)
 8008778:	00001d06 	br	80087f0 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 800877c:	04020074 	movhi	r16,2049
 8008780:	8428f104 	addi	r16,r16,-23612
 8008784:	e0bffc17 	ldw	r2,-16(fp)
 8008788:	01400304 	movi	r5,12
 800878c:	1009883a 	mov	r4,r2
 8008790:	80033380 	call	8003338 <__mulsi3>
 8008794:	8085883a 	add	r2,r16,r2
 8008798:	10800017 	ldw	r2,0(r2)
 800879c:	1000111e 	bne	r2,zero,80087e4 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 80087a0:	04020074 	movhi	r16,2049
 80087a4:	8428f104 	addi	r16,r16,-23612
 80087a8:	e0bffc17 	ldw	r2,-16(fp)
 80087ac:	01400304 	movi	r5,12
 80087b0:	1009883a 	mov	r4,r2
 80087b4:	80033380 	call	8003338 <__mulsi3>
 80087b8:	8085883a 	add	r2,r16,r2
 80087bc:	e0fffe17 	ldw	r3,-8(fp)
 80087c0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 80087c4:	d0e01017 	ldw	r3,-32704(gp)
 80087c8:	e0bffc17 	ldw	r2,-16(fp)
 80087cc:	1880020e 	bge	r3,r2,80087d8 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 80087d0:	e0bffc17 	ldw	r2,-16(fp)
 80087d4:	d0a01015 	stw	r2,-32704(gp)
      }
      rc = i;
 80087d8:	e0bffc17 	ldw	r2,-16(fp)
 80087dc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 80087e0:	00000606 	br	80087fc <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80087e4:	e0bffc17 	ldw	r2,-16(fp)
 80087e8:	10800044 	addi	r2,r2,1
 80087ec:	e0bffc15 	stw	r2,-16(fp)
 80087f0:	e0bffc17 	ldw	r2,-16(fp)
 80087f4:	10800810 	cmplti	r2,r2,32
 80087f8:	103fe01e 	bne	r2,zero,800877c <__alt_data_end+0xfc00877c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 80087fc:	e0bffd17 	ldw	r2,-12(fp)
}
 8008800:	e6ffff04 	addi	sp,fp,-4
 8008804:	dfc00217 	ldw	ra,8(sp)
 8008808:	df000117 	ldw	fp,4(sp)
 800880c:	dc000017 	ldw	r16,0(sp)
 8008810:	dec00304 	addi	sp,sp,12
 8008814:	f800283a 	ret

08008818 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8008818:	defffe04 	addi	sp,sp,-8
 800881c:	df000115 	stw	fp,4(sp)
 8008820:	df000104 	addi	fp,sp,4
 8008824:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8008828:	e0bfff17 	ldw	r2,-4(fp)
 800882c:	10bffe84 	addi	r2,r2,-6
 8008830:	10c00428 	cmpgeui	r3,r2,16
 8008834:	18001a1e 	bne	r3,zero,80088a0 <alt_exception_cause_generated_bad_addr+0x88>
 8008838:	100690ba 	slli	r3,r2,2
 800883c:	00820074 	movhi	r2,2049
 8008840:	10a21404 	addi	r2,r2,-30640
 8008844:	1885883a 	add	r2,r3,r2
 8008848:	10800017 	ldw	r2,0(r2)
 800884c:	1000683a 	jmp	r2
 8008850:	08008890 	cmplti	zero,at,546
 8008854:	08008890 	cmplti	zero,at,546
 8008858:	080088a0 	cmpeqi	zero,at,546
 800885c:	080088a0 	cmpeqi	zero,at,546
 8008860:	080088a0 	cmpeqi	zero,at,546
 8008864:	08008890 	cmplti	zero,at,546
 8008868:	08008898 	cmpnei	zero,at,546
 800886c:	080088a0 	cmpeqi	zero,at,546
 8008870:	08008890 	cmplti	zero,at,546
 8008874:	08008890 	cmplti	zero,at,546
 8008878:	080088a0 	cmpeqi	zero,at,546
 800887c:	08008890 	cmplti	zero,at,546
 8008880:	08008898 	cmpnei	zero,at,546
 8008884:	080088a0 	cmpeqi	zero,at,546
 8008888:	080088a0 	cmpeqi	zero,at,546
 800888c:	08008890 	cmplti	zero,at,546
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 8008890:	00800044 	movi	r2,1
 8008894:	00000306 	br	80088a4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 8008898:	0005883a 	mov	r2,zero
 800889c:	00000106 	br	80088a4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 80088a0:	0005883a 	mov	r2,zero
  }
}
 80088a4:	e037883a 	mov	sp,fp
 80088a8:	df000017 	ldw	fp,0(sp)
 80088ac:	dec00104 	addi	sp,sp,4
 80088b0:	f800283a 	ret

080088b4 <atexit>:
 80088b4:	200b883a 	mov	r5,r4
 80088b8:	000f883a 	mov	r7,zero
 80088bc:	000d883a 	mov	r6,zero
 80088c0:	0009883a 	mov	r4,zero
 80088c4:	80089401 	jmpi	8008940 <__register_exitproc>

080088c8 <exit>:
 80088c8:	defffe04 	addi	sp,sp,-8
 80088cc:	000b883a 	mov	r5,zero
 80088d0:	dc000015 	stw	r16,0(sp)
 80088d4:	dfc00115 	stw	ra,4(sp)
 80088d8:	2021883a 	mov	r16,r4
 80088dc:	8008a980 	call	8008a98 <__call_exitprocs>
 80088e0:	8009883a 	mov	r4,r16
 80088e4:	8008c280 	call	8008c28 <_exit>

080088e8 <memcmp>:
 80088e8:	218d883a 	add	r6,r4,r6
 80088ec:	21800826 	beq	r4,r6,8008910 <memcmp+0x28>
 80088f0:	20800003 	ldbu	r2,0(r4)
 80088f4:	28c00003 	ldbu	r3,0(r5)
 80088f8:	10c00226 	beq	r2,r3,8008904 <memcmp+0x1c>
 80088fc:	10c5c83a 	sub	r2,r2,r3
 8008900:	f800283a 	ret
 8008904:	21000044 	addi	r4,r4,1
 8008908:	29400044 	addi	r5,r5,1
 800890c:	003ff706 	br	80088ec <__alt_data_end+0xfc0088ec>
 8008910:	0005883a 	mov	r2,zero
 8008914:	f800283a 	ret

08008918 <memcpy>:
 8008918:	2005883a 	mov	r2,r4
 800891c:	2007883a 	mov	r3,r4
 8008920:	218d883a 	add	r6,r4,r6
 8008924:	19800526 	beq	r3,r6,800893c <memcpy+0x24>
 8008928:	29000003 	ldbu	r4,0(r5)
 800892c:	18c00044 	addi	r3,r3,1
 8008930:	29400044 	addi	r5,r5,1
 8008934:	193fffc5 	stb	r4,-1(r3)
 8008938:	003ffa06 	br	8008924 <__alt_data_end+0xfc008924>
 800893c:	f800283a 	ret

08008940 <__register_exitproc>:
 8008940:	00820074 	movhi	r2,2049
 8008944:	10a95704 	addi	r2,r2,-23204
 8008948:	10c00017 	ldw	r3,0(r2)
 800894c:	defff904 	addi	sp,sp,-28
 8008950:	dc000015 	stw	r16,0(sp)
 8008954:	1c000c17 	ldw	r16,48(r3)
 8008958:	dd400515 	stw	r21,20(sp)
 800895c:	dd000415 	stw	r20,16(sp)
 8008960:	dcc00315 	stw	r19,12(sp)
 8008964:	dc800215 	stw	r18,8(sp)
 8008968:	dc400115 	stw	r17,4(sp)
 800896c:	dfc00615 	stw	ra,24(sp)
 8008970:	202b883a 	mov	r21,r4
 8008974:	2823883a 	mov	r17,r5
 8008978:	3027883a 	mov	r19,r6
 800897c:	3825883a 	mov	r18,r7
 8008980:	1029883a 	mov	r20,r2
 8008984:	8000021e 	bne	r16,zero,8008990 <__register_exitproc+0x50>
 8008988:	1c000d04 	addi	r16,r3,52
 800898c:	1c000c15 	stw	r16,48(r3)
 8008990:	80800117 	ldw	r2,4(r16)
 8008994:	00c007c4 	movi	r3,31
 8008998:	1880110e 	bge	r3,r2,80089e0 <__register_exitproc+0xa0>
 800899c:	00800034 	movhi	r2,0
 80089a0:	10800004 	addi	r2,r2,0
 80089a4:	1000021e 	bne	r2,zero,80089b0 <__register_exitproc+0x70>
 80089a8:	00bfffc4 	movi	r2,-1
 80089ac:	00003106 	br	8008a74 <__register_exitproc+0x134>
 80089b0:	01002304 	movi	r4,140
 80089b4:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 80089b8:	1021883a 	mov	r16,r2
 80089bc:	103ffa26 	beq	r2,zero,80089a8 <__alt_data_end+0xfc0089a8>
 80089c0:	10000115 	stw	zero,4(r2)
 80089c4:	a0800017 	ldw	r2,0(r20)
 80089c8:	10c00c17 	ldw	r3,48(r2)
 80089cc:	80c00015 	stw	r3,0(r16)
 80089d0:	14000c15 	stw	r16,48(r2)
 80089d4:	80002215 	stw	zero,136(r16)
 80089d8:	a8001d26 	beq	r21,zero,8008a50 <__register_exitproc+0x110>
 80089dc:	00000606 	br	80089f8 <__register_exitproc+0xb8>
 80089e0:	a8001b26 	beq	r21,zero,8008a50 <__register_exitproc+0x110>
 80089e4:	80802217 	ldw	r2,136(r16)
 80089e8:	1000091e 	bne	r2,zero,8008a10 <__register_exitproc+0xd0>
 80089ec:	00800034 	movhi	r2,0
 80089f0:	10800004 	addi	r2,r2,0
 80089f4:	103fec26 	beq	r2,zero,80089a8 <__alt_data_end+0xfc0089a8>
 80089f8:	01004204 	movi	r4,264
 80089fc:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 8008a00:	103fe926 	beq	r2,zero,80089a8 <__alt_data_end+0xfc0089a8>
 8008a04:	10004015 	stw	zero,256(r2)
 8008a08:	10004115 	stw	zero,260(r2)
 8008a0c:	80802215 	stw	r2,136(r16)
 8008a10:	81400117 	ldw	r5,4(r16)
 8008a14:	01000044 	movi	r4,1
 8008a18:	2947883a 	add	r3,r5,r5
 8008a1c:	18c7883a 	add	r3,r3,r3
 8008a20:	10c7883a 	add	r3,r2,r3
 8008a24:	1cc00015 	stw	r19,0(r3)
 8008a28:	2148983a 	sll	r4,r4,r5
 8008a2c:	11404017 	ldw	r5,256(r2)
 8008a30:	290ab03a 	or	r5,r5,r4
 8008a34:	11404015 	stw	r5,256(r2)
 8008a38:	1c802015 	stw	r18,128(r3)
 8008a3c:	00c00084 	movi	r3,2
 8008a40:	a8c0031e 	bne	r21,r3,8008a50 <__register_exitproc+0x110>
 8008a44:	10c04117 	ldw	r3,260(r2)
 8008a48:	1908b03a 	or	r4,r3,r4
 8008a4c:	11004115 	stw	r4,260(r2)
 8008a50:	80800117 	ldw	r2,4(r16)
 8008a54:	10c00044 	addi	r3,r2,1
 8008a58:	10800084 	addi	r2,r2,2
 8008a5c:	1085883a 	add	r2,r2,r2
 8008a60:	1085883a 	add	r2,r2,r2
 8008a64:	80c00115 	stw	r3,4(r16)
 8008a68:	80a1883a 	add	r16,r16,r2
 8008a6c:	84400015 	stw	r17,0(r16)
 8008a70:	0005883a 	mov	r2,zero
 8008a74:	dfc00617 	ldw	ra,24(sp)
 8008a78:	dd400517 	ldw	r21,20(sp)
 8008a7c:	dd000417 	ldw	r20,16(sp)
 8008a80:	dcc00317 	ldw	r19,12(sp)
 8008a84:	dc800217 	ldw	r18,8(sp)
 8008a88:	dc400117 	ldw	r17,4(sp)
 8008a8c:	dc000017 	ldw	r16,0(sp)
 8008a90:	dec00704 	addi	sp,sp,28
 8008a94:	f800283a 	ret

08008a98 <__call_exitprocs>:
 8008a98:	defff504 	addi	sp,sp,-44
 8008a9c:	dd000515 	stw	r20,20(sp)
 8008aa0:	05020074 	movhi	r20,2049
 8008aa4:	dc800315 	stw	r18,12(sp)
 8008aa8:	dfc00a15 	stw	ra,40(sp)
 8008aac:	df000915 	stw	fp,36(sp)
 8008ab0:	ddc00815 	stw	r23,32(sp)
 8008ab4:	dd800715 	stw	r22,28(sp)
 8008ab8:	dd400615 	stw	r21,24(sp)
 8008abc:	dcc00415 	stw	r19,16(sp)
 8008ac0:	dc400215 	stw	r17,8(sp)
 8008ac4:	dc000115 	stw	r16,4(sp)
 8008ac8:	d9000015 	stw	r4,0(sp)
 8008acc:	2825883a 	mov	r18,r5
 8008ad0:	a5295704 	addi	r20,r20,-23204
 8008ad4:	a4400017 	ldw	r17,0(r20)
 8008ad8:	8cc00c17 	ldw	r19,48(r17)
 8008adc:	8c400c04 	addi	r17,r17,48
 8008ae0:	98004526 	beq	r19,zero,8008bf8 <__call_exitprocs+0x160>
 8008ae4:	9c000117 	ldw	r16,4(r19)
 8008ae8:	00900034 	movhi	r2,16384
 8008aec:	10bfffc4 	addi	r2,r2,-1
 8008af0:	9d402217 	ldw	r21,136(r19)
 8008af4:	85bfffc4 	addi	r22,r16,-1
 8008af8:	80a1883a 	add	r16,r16,r2
 8008afc:	8421883a 	add	r16,r16,r16
 8008b00:	8421883a 	add	r16,r16,r16
 8008b04:	ac2f883a 	add	r23,r21,r16
 8008b08:	84000204 	addi	r16,r16,8
 8008b0c:	9c21883a 	add	r16,r19,r16
 8008b10:	b0002716 	blt	r22,zero,8008bb0 <__call_exitprocs+0x118>
 8008b14:	90000726 	beq	r18,zero,8008b34 <__call_exitprocs+0x9c>
 8008b18:	a800041e 	bne	r21,zero,8008b2c <__call_exitprocs+0x94>
 8008b1c:	b5bfffc4 	addi	r22,r22,-1
 8008b20:	bdffff04 	addi	r23,r23,-4
 8008b24:	843fff04 	addi	r16,r16,-4
 8008b28:	003ff906 	br	8008b10 <__alt_data_end+0xfc008b10>
 8008b2c:	b9002017 	ldw	r4,128(r23)
 8008b30:	913ffa1e 	bne	r18,r4,8008b1c <__alt_data_end+0xfc008b1c>
 8008b34:	99000117 	ldw	r4,4(r19)
 8008b38:	82000017 	ldw	r8,0(r16)
 8008b3c:	213fffc4 	addi	r4,r4,-1
 8008b40:	b100021e 	bne	r22,r4,8008b4c <__call_exitprocs+0xb4>
 8008b44:	9d800115 	stw	r22,4(r19)
 8008b48:	00000106 	br	8008b50 <__call_exitprocs+0xb8>
 8008b4c:	80000015 	stw	zero,0(r16)
 8008b50:	403ff226 	beq	r8,zero,8008b1c <__alt_data_end+0xfc008b1c>
 8008b54:	9f000117 	ldw	fp,4(r19)
 8008b58:	a8000526 	beq	r21,zero,8008b70 <__call_exitprocs+0xd8>
 8008b5c:	00800044 	movi	r2,1
 8008b60:	1592983a 	sll	r9,r2,r22
 8008b64:	a9404017 	ldw	r5,256(r21)
 8008b68:	494a703a 	and	r5,r9,r5
 8008b6c:	2800021e 	bne	r5,zero,8008b78 <__call_exitprocs+0xe0>
 8008b70:	403ee83a 	callr	r8
 8008b74:	00000906 	br	8008b9c <__call_exitprocs+0x104>
 8008b78:	a9004117 	ldw	r4,260(r21)
 8008b7c:	4908703a 	and	r4,r9,r4
 8008b80:	2000041e 	bne	r4,zero,8008b94 <__call_exitprocs+0xfc>
 8008b84:	b9400017 	ldw	r5,0(r23)
 8008b88:	d9000017 	ldw	r4,0(sp)
 8008b8c:	403ee83a 	callr	r8
 8008b90:	00000206 	br	8008b9c <__call_exitprocs+0x104>
 8008b94:	b9000017 	ldw	r4,0(r23)
 8008b98:	403ee83a 	callr	r8
 8008b9c:	99000117 	ldw	r4,4(r19)
 8008ba0:	e13fcc1e 	bne	fp,r4,8008ad4 <__alt_data_end+0xfc008ad4>
 8008ba4:	89000017 	ldw	r4,0(r17)
 8008ba8:	993fdc26 	beq	r19,r4,8008b1c <__alt_data_end+0xfc008b1c>
 8008bac:	003fc906 	br	8008ad4 <__alt_data_end+0xfc008ad4>
 8008bb0:	00800034 	movhi	r2,0
 8008bb4:	10800004 	addi	r2,r2,0
 8008bb8:	10000f26 	beq	r2,zero,8008bf8 <__call_exitprocs+0x160>
 8008bbc:	99400117 	ldw	r5,4(r19)
 8008bc0:	99000017 	ldw	r4,0(r19)
 8008bc4:	2800091e 	bne	r5,zero,8008bec <__call_exitprocs+0x154>
 8008bc8:	20000826 	beq	r4,zero,8008bec <__call_exitprocs+0x154>
 8008bcc:	89000015 	stw	r4,0(r17)
 8008bd0:	a8000226 	beq	r21,zero,8008bdc <__call_exitprocs+0x144>
 8008bd4:	a809883a 	mov	r4,r21
 8008bd8:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 8008bdc:	9809883a 	mov	r4,r19
 8008be0:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 8008be4:	8cc00017 	ldw	r19,0(r17)
 8008be8:	003fbd06 	br	8008ae0 <__alt_data_end+0xfc008ae0>
 8008bec:	9823883a 	mov	r17,r19
 8008bf0:	2027883a 	mov	r19,r4
 8008bf4:	003fba06 	br	8008ae0 <__alt_data_end+0xfc008ae0>
 8008bf8:	dfc00a17 	ldw	ra,40(sp)
 8008bfc:	df000917 	ldw	fp,36(sp)
 8008c00:	ddc00817 	ldw	r23,32(sp)
 8008c04:	dd800717 	ldw	r22,28(sp)
 8008c08:	dd400617 	ldw	r21,24(sp)
 8008c0c:	dd000517 	ldw	r20,20(sp)
 8008c10:	dcc00417 	ldw	r19,16(sp)
 8008c14:	dc800317 	ldw	r18,12(sp)
 8008c18:	dc400217 	ldw	r17,8(sp)
 8008c1c:	dc000117 	ldw	r16,4(sp)
 8008c20:	dec00b04 	addi	sp,sp,44
 8008c24:	f800283a 	ret

08008c28 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8008c28:	defffd04 	addi	sp,sp,-12
 8008c2c:	df000215 	stw	fp,8(sp)
 8008c30:	df000204 	addi	fp,sp,8
 8008c34:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8008c38:	0001883a 	nop
 8008c3c:	e0bfff17 	ldw	r2,-4(fp)
 8008c40:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8008c44:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8008c48:	10000226 	beq	r2,zero,8008c54 <_exit+0x2c>
    ALT_SIM_FAIL();
 8008c4c:	002af070 	cmpltui	zero,zero,43969
 8008c50:	00000106 	br	8008c58 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8008c54:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8008c58:	003fff06 	br	8008c58 <__alt_data_end+0xfc008c58>
